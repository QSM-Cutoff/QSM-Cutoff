
********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm toy_consensus.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_3.finite.cpp toy_consensus.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_3.finite.o toy_consensus.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.190 seconds

[QRM NOTE]: Time elapsed since last: 7.190 seconds

[QRM NOTE]: Peak memory: 1190854 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        94

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 84


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decision('value',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
predicate: didNotVote('node',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)']
representative states : 1835435, 819627, 17830827, 1224774571, 1226871723, 16847787, 18944939, 19927979, 303531, 43435


=== State Orbit 0 =====================
size : 1
repr state: 000000000000111000000000
lex min decimal: 1835435
states:
000000000000111000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000011100000000
lex min decimal: 819627
states:
000000000000011010000000
000000000000101000010000
000000000000101000100000
000000000000110000000100
000000000000110000000010
000000000000101000001000
000000000000110000000001
000000000000011001000000
000000000000011100000000




=== State Orbit 2 =====================
size : 9
repr state: 100000000000001100100000
lex min decimal: 17830827
states:
000010000000010010000010
000001000000010001000001
100000000000001100100000
010000000000001010010000
001000000000001001001000
000100000000010100000100
000000001000100000001001
000000100000100000100100
000000010000100000010010




=== State Orbit 3 =====================
size : 3
repr state: 100100100000000100100100
lex min decimal: 1224774571
states:
100100100000000100100100
001001001000000001001001
010010010000000010010010




=== State Orbit 4 =====================
size : 3
repr state: 100100100100000100100100
lex min decimal: 1226871723
states:
100100100100000100100100
010010010010000010010010
001001001001000001001001




=== State Orbit 5 =====================
size : 18
repr state: 100000000000000100100010
lex min decimal: 16847787
states:
001000000000000001001010
100000000000000100100010
000000100000000010100100
001000000000000001001100
000000100000000001100100
100000000000000100100001
000010000000000010001010
000001000000000001100001
000000001000000100001001
010000000000000010010100
000100000000000100010100
000000010000000001010010
000000010000000100010010
000000001000000010001001
000010000000000010100010
000100000000000100001100
010000000000000010010001
000001000000000001010001




=== State Orbit 6 =====================
size : 18
repr state: 100000000100000100100010
lex min decimal: 18944939
states:
000000001001000010001001
000100000100000100001100
000001000001000001100001
000100000100000100010100
000001000001000001010001
000000100100000001100100
001000000001000001001010
000000100100000010100100
000000010010000001010010
000010000010000010001010
000000010010000100010010
000000001001000100001001
001000000001000001001100
000010000010000010100010
010000000010000010010001
100000000100000100100010
100000000100000100100001
010000000010000010010100




=== State Orbit 7 =====================
size : 9
repr state: 100000000100001100100000
lex min decimal: 19927979
states:
000100000100010100000100
000010000010010010000010
001000000001001001001000
000000001001100000001001
010000000010001010010000
000000100100100000100100
100000000100001100100000
000001000001010001000001
000000010010100000010010




=== State Orbit 8 =====================
size : 18
repr state: 000000000000001100010000
lex min decimal: 303531
states:
000000000000100000001010
000000000000100000100001
000000000000010001000100
000000000000001100010000
000000000000010010000001
000000000000001010100000
000000000000010001000010
000000000000100000100010
000000000000010010000100
000000000000001010001000
000000000000001100001000
000000000000100000010001
000000000000010100000001
000000000000100000001100
000000000000100000010100
000000000000010100000010
000000000000001001100000
000000000000001001010000




=== State Orbit 9 =====================
size : 6
repr state: 000000000000000100010001
lex min decimal: 43435
states:
000000000000000100010001
000000000000000010001100
000000000000000001100010
000000000000000010100001
000000000000000100001010
000000000000000001010100



[QRM NOTE]: Time elapsed since start: 7.376 seconds

[QRM NOTE]: Time elapsed since last: 0.186 seconds

[QRM NOTE]: Peak memory: 1253561 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.378 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 227539 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

======================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------1-1------
0     : ['vote(node0,value0)', 'vote(node0,value2)']
1     : ---------------11-------
1     : ['vote(node0,value0)', 'vote(node0,value1)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------1-1---
3     : ['vote(node1,value0)', 'vote(node1,value2)']
4     : ------------------11----
4     : ['vote(node1,value0)', 'vote(node1,value1)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------1-1
6     : ['vote(node2,value0)', 'vote(node2,value2)']
7     : ---------------------11-
7     : ['vote(node2,value0)', 'vote(node2,value1)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : --1------------1--------
9     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
10     : -1-------------1--------
10     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
11     : --1-------------1-------
11     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
12     : 1---------------1-------
12     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
13     : -1---------------1------
13     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
14     : 1----------------1------
14     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
15     : -----1---------1--------
15     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
16     : ----1----------1--------
16     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
17     : -----1----------1-------
17     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
18     : ---1------------1-------
18     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
19     : ----1------------1------
19     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
20     : ---1-------------1------
20     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
21     : --1---------------1-----
21     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
22     : -1----------------1-----
22     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
23     : --1----------------1----
23     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
24     : 1------------------1----
24     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
25     : -1------------------1---
25     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
26     : 1-------------------1---
26     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
27     : --------1---------1-----
27     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
28     : -------1----------1-----
28     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
29     : --------1----------1----
29     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
30     : ------1------------1----
30     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
31     : -------1------------1---
31     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
32     : ------1-------------1---
32     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
33     : -----1---------------1--
33     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
34     : ----1----------------1--
34     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
35     : -----1----------------1-
35     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
36     : ---1------------------1-
36     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
37     : ----1------------------1
37     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
38     : ---1-------------------1
38     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
39     : --------1------------1--
39     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
40     : -------1-------------1--
40     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
41     : --------1-------------1-
41     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
42     : ------1---------------1-
42     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
43     : -------1---------------1
43     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
44     : ------1----------------1
44     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : ------------1--1--------
45     : ['didNotVote(node0)', 'vote(node0,value0)']
46     : ------------1---1-------
46     : ['didNotVote(node0)', 'vote(node0,value1)']
47     : ------------1----1------
47     : ['didNotVote(node0)', 'vote(node0,value2)']
48     : -------------1----1-----
48     : ['didNotVote(node1)', 'vote(node1,value0)']
49     : -------------1-----1----
49     : ['didNotVote(node1)', 'vote(node1,value1)']
50     : -------------1------1---
50     : ['didNotVote(node1)', 'vote(node1,value2)']
51     : --------------1------1--
51     : ['didNotVote(node2)', 'vote(node2,value0)']
52     : --------------1-------1-
52     : ['didNotVote(node2)', 'vote(node2,value1)']
53     : --------------1--------1
53     : ['didNotVote(node2)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : 1-----------1-----------
54     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
55     : -1----------1-----------
55     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node0)']
56     : --1---------1-----------
56     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node0)']
57     : ---1--------1-----------
57     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node0)']
58     : ----1-------1-----------
58     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node0)']
59     : -----1------1-----------
59     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node0)']
60     : 1------------1----------
60     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
61     : -1-----------1----------
61     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node1)']
62     : --1----------1----------
62     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node1)']
63     : ------1------1----------
63     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node1)']
64     : -------1-----1----------
64     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node1)']
65     : --------1----1----------
65     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node1)']
66     : ---1----------1---------
66     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node2)']
67     : ----1---------1---------
67     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node2)']
68     : -----1--------1---------
68     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node2)']
69     : ------1-------1---------
69     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node2)']
70     : -------1------1---------
70     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node2)']
71     : --------1-----1---------
71     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ----------11------------
72     : ['decision(value1)', 'decision(value2)']
73     : ---------1-1------------
73     : ['decision(value0)', 'decision(value2)']
74     : ---------11-------------
74     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : ------1----1------------
75     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
76     : ------1---1-------------
76     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
77     : -------1---1------------
77     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
78     : -------1-1--------------
78     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
79     : --------1-1-------------
79     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
80     : --------11--------------
80     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
81     : ---1-------1------------
81     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
82     : ---1------1-------------
82     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
83     : ----1------1------------
83     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
84     : ----1----1--------------
84     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
85     : -----1----1-------------
85     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
86     : -----1---1--------------
86     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
87     : 1----------1------------
87     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
88     : 1---------1-------------
88     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
89     : -1---------1------------
89     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
90     : -1-------1--------------
90     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
91     : --1-------1-------------
91     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
92     : --1------1--------------
92     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
93 (*) : --1--------------0------
93     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
94     : -1--------------0-------
94     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
95     : 1--------------0--------
95     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
96     : -----1-----------0------
96     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
97     : ----1-----------0-------
97     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
98     : ---1-----------0--------
98     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
99     : --1-----------------0---
99     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
100     : -1-----------------0----
100     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
101     : 1-----------------0-----
101     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
102     : --------1-----------0---
102     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
103     : -------1-----------0----
103     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
104     : ------1-----------0-----
104     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
105     : -----1-----------------0
105     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
106     : ----1-----------------0-
106     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
107     : ---1-----------------0--
107     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
108     : --------1--------------0
108     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
109     : -------1--------------0-
109     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
110     : ------1--------------0--
110     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 27
num_suborbits: 2
111 (*) : --1---1-----------------
111     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
112     : -1----1-----------------
112     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
113     : --1----1----------------
113     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
114     : 1------1----------------
114     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
115     : -1------1---------------
115     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
116     : 1-------1---------------
116     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
117     : -----11-----------------
117     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
118     : ----1-1-----------------
118     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
119     : -----1-1----------------
119     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
120     : ---1---1----------------
120     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
121     : ----1---1---------------
121     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
122     : ---1----1---------------
122     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
123     : --11--------------------
123     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
124     : -1-1--------------------
124     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
125     : --1-1-------------------
125     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
126     : 1---1-------------------
126     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
127     : -1---1------------------
127     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
128     : 1----1------------------
128     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
129 (*) : 1-1---------------------
129     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
130     : 11----------------------
130     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
131     : -11---------------------
131     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
132     : ---1-1------------------
132     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
133     : ---11-------------------
133     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
134     : ----11------------------
134     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
135     : ------1-1---------------
135     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
136     : ------11----------------
136     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
137     : -------11---------------
137     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
138 (*) : ---------1----10--------
138     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
139     : ----------1---1-0-------
139     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
140     : -----------1--1--0------
140     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
141     : ---------1---1-0--------
141     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
142     : ----------1--1--0-------
142     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
143     : -----------1-1---0------
143     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
144     : ---------1----1---0-----
144     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
145     : ----------1---1----0----
145     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
146     : -----------1--1-----0---
146     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
147     : ---------1--1-----0-----
147     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
148     : ----------1-1------0----
148     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
149     : -----------11-------0---
149     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
150     : ---------1---1-------0--
150     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
151     : ----------1--1--------0-
151     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
152     : -----------1-1---------0
152     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
153     : ---------1--1--------0--
153     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
154     : ----------1-1---------0-
154     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
155     : -----------11----------0
155     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
156 (*) : 0--------1----1---------
156     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
157     : -0--------1---1---------
157     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
158     : --0--------1--1---------
158     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
159     : ---0-----1---1----------
159     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
160     : ----0-----1--1----------
160     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
161     : -----0-----1-1----------
161     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
162     : ------0--1--1-----------
162     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
163     : -------0--1-1-----------
163     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
164     : --------0--11-----------
164     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
165 (*) : ---------1----1-1-------
165     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
166     : ---------1----1--1------
166     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
167     : ----------1---11--------
167     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
168     : ----------1---1--1------
168     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
169     : -----------1--11--------
169     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
170     : -----------1--1-1-------
170     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
171     : ---------1---1--1-------
171     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
172     : ---------1---1---1------
172     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
173     : ----------1--1-1--------
173     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
174     : ----------1--1---1------
174     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
175     : -----------1-1-1--------
175     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
176     : -----------1-1--1-------
176     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
177     : ---------1----1----1----
177     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
178     : ---------1----1-----1---
178     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
179     : ----------1---1---1-----
179     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
180     : ----------1---1-----1---
180     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
181     : -----------1--1---1-----
181     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
182     : -----------1--1----1----
182     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
183     : ---------1--1------1----
183     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
184     : ---------1--1-------1---
184     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
185     : ----------1-1-----1-----
185     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
186     : ----------1-1-------1---
186     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
187     : -----------11-----1-----
187     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
188     : -----------11------1----
188     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
189     : ---------1---1--------1-
189     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
190     : ---------1---1---------1
190     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
191     : ----------1--1-------1--
191     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
192     : ----------1--1---------1
192     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
193     : -----------1-1-------1--
193     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
194     : -----------1-1--------1-
194     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
195     : ---------1--1---------1-
195     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
196     : ---------1--1----------1
196     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
197     : ----------1-1--------1--
197     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
198     : ----------1-1----------1
198     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
199     : -----------11--------1--
199     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
200     : -----------11---------1-
200     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
201 (*) : ---------1--1-1---------
201     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
202     : ----------1-1-1---------
202     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
203     : -----------11-1---------
203     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
204     : ---------1--11----------
204     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
205     : ----------1-11----------
205     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
206     : -----------111----------
206     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
207     : ---------1---11---------
207     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
208     : ----------1--11---------
208     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
209     : -----------1-11---------
209     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
210 (*) : --1--1--0---------------
210     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
211     : -1--1--0----------------
211     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
212     : 1--1--0-----------------
212     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
213     : --1--0--1---------------
213     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
214     : -1--0--1----------------
214     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
215     : 1--0--1-----------------
215     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
216     : --0--1--1---------------
216     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
217     : -0--1--1----------------
217     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
218     : 0--1--1-----------------
218     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
219 (*) : --1--0-----------------1
219     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
220     : -1--0-----------------1-
220     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
221     : 1--0-----------------1--
221     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
222     : --0--1--------------1---
222     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
223     : -0--1--------------1----
223     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
224     : 0--1--------------1-----
224     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
225     : --1-----0--------------1
225     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
226     : -1-----0--------------1-
226     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
227     : 1-----0--------------1--
227     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
228     : --0-----1--------1------
228     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
229     : -0-----1--------1-------
229     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
230     : 0-----1--------1--------
230     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
231     : -----1--0-----------1---
231     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
232     : ----1--0-----------1----
232     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
233     : ---1--0-----------1-----
233     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
234     : -----0--1--------1------
234     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
235     : ----0--1--------1-------
235     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
236     : ---0--1--------1--------
236     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 18
num_suborbits: 1
237 (*) : -----0-----1------1-----
237     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
238     : ----0-----1-------1-----
238     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
239     : -----0-----1-------1----
239     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
240     : ---0-----1---------1----
240     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
241     : ----0-----1---------1---
241     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
242     : ---0-----1----------1---
242     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
243     : --0--------1---------1--
243     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
244     : -0--------1----------1--
244     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
245     : --0--------1----------1-
245     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
246     : 0--------1------------1-
246     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
247     : -0--------1------------1
247     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
248     : 0--------1-------------1
248     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
249     : --------0--1---1--------
249     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
250     : -------0--1----1--------
250     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
251     : --------0--1----1-------
251     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
252     : ------0--1------1-------
252     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
253     : -------0--1------1------
253     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
254     : ------0--1-------1------
254     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 36
num_suborbits: 1
255 (*) : -----------1------1----0
255     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
256     : ----------1-------1---0-
256     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
257     : -----------1-------1---0
257     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
258     : ---------1---------1-0--
258     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
259     : ----------1---------1-0-
259     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
260     : ---------1----------10--
260     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
261     : -----------1--------01--
261     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
262     : ----------1--------0-1--
262     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
263     : -----------1--------0-1-
263     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
264     : ---------1--------0---1-
264     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
265     : ----------1--------0---1
265     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
266     : ---------1--------0----1
266     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
267     : -----------1---1-------0
267     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
268     : ----------1----1------0-
268     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
269     : -----------1----1------0
269     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
270     : ---------1------1----0--
270     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
271     : ----------1------1----0-
271     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
272     : ---------1-------1---0--
272     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
273     : -----------1-----0---1--
273     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
274     : ----------1-----0----1--
274     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
275     : -----------1-----0----1-
275     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
276     : ---------1-----0------1-
276     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
277     : ----------1-----0------1
277     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
278     : ---------1-----0-------1
278     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
279     : -----------1---1----0---
279     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
280     : ----------1----1---0----
280     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
281     : -----------1----1---0---
281     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
282     : ---------1------1-0-----
282     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
283     : ----------1------1-0----
283     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
284     : ---------1-------10-----
284     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
285     : -----------1-----01-----
285     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
286     : ----------1-----0-1-----
286     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
287     : -----------1-----0-1----
287     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
288     : ---------1-----0---1----
288     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
289     : ----------1-----0---1---
289     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
290     : ---------1-----0----1---
290     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
291 (*) : -----0-----1--------0---
291     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
292     : ----0-----1--------0----
292     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
293     : ---0-----1--------0-----
293     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
294     : --0--------1-----------0
294     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
295     : -0--------1-----------0-
295     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
296     : 0--------1-----------0--
296     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
297     : --------0--1-----0------
297     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
298     : -------0--1-----0-------
298     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
299     : ------0--1-----0--------
299     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
300 (*) : -----------1--------0--0
300     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
301     : ----------1--------0--0-
301     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
302     : ---------1--------0--0--
302     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
303     : -----------1-----0-----0
303     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
304     : ----------1-----0-----0-
304     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
305     : ---------1-----0-----0--
305     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
306     : -----------1-----0--0---
306     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
307     : ----------1-----0--0----
307     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
308     : ---------1-----0--0-----
308     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 36
num_suborbits: 2
309 (*) : -----------1------1--1--
309     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
310     : ----------1-------1--1--
310     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
311     : -----------1-------1--1-
311     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
312     : ---------1---------1--1-
312     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
313     : ----------1---------1--1
313     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
314     : ---------1----------1--1
314     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
315     : -----------1---1-----1--
315     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
316     : ----------1----1-----1--
316     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
317     : -----------1----1-----1-
317     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
318     : ---------1------1-----1-
318     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
319     : ----------1------1-----1
319     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
320     : ---------1-------1-----1
320     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
321     : -----------1---1--1-----
321     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
322     : ----------1----1--1-----
322     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
323     : -----------1----1--1----
323     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
324     : ---------1------1--1----
324     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
325     : ----------1------1--1---
325     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
326     : ---------1-------1--1---
326     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
327 (*) : -----------1------1---1-
327     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
328     : ----------1-------1----1
328     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
329     : -----------1-------1-1--
329     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
330     : ---------1---------1---1
330     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
331     : ----------1---------11--
331     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
332     : ---------1----------1-1-
332     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
333     : -----------1---1------1-
333     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
334     : ----------1----1-------1
334     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
335     : -----------1----1----1--
335     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
336     : ---------1------1------1
336     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
337     : ----------1------1---1--
337     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
338     : ---------1-------1----1-
338     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
339     : -----------1---1---1----
339     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
340     : ----------1----1----1---
340     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
341     : -----------1----1-1-----
341     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
342     : ---------1------1---1---
342     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
343     : ----------1------11-----
343     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
344     : ---------1-------1-1----
344     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ------0-----------1--1--
345     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
346     : -------0-----------1--1-
346     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
347     : --------0-----------1--1
347     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
348     : ---0-----------1-----1--
348     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
349     : ----0-----------1-----1-
349     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
350     : -----0-----------1-----1
350     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
351     : 0--------------1--1-----
351     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
352     : -0--------------1--1----
352     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
353     : --0--------------1--1---
353     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : -------------0----000---
354     : ['~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
355     : --------------0------000
355     : ['~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
356     : ------------0--000------
356     : ['~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
357 (*) : 0--0--0--1--------------
357     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : -0--0--0--1-------------
358     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : --0--0--0--1------------
359     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 9
num_suborbits: 1
360 (*) : ---0--0--1-----------1--
360     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : ----0--0--1-----------1-
361     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : -----0--0--1-----------1
362     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : 0-----0--1--------1-----
363     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
364     : -0-----0--1--------1----
364     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
365     : --0-----0--1--------1---
365     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
366     : 0--0-----1-----1--------
366     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
367     : -0--0-----1-----1-------
367     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
368     : --0--0-----1-----1------
368     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 1
369 (*) : --0----------0---100----
369     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
370     : -0-----------0--1-0-0---
370     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
371     : 0------------0-1---00---
371     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
372     : -----0--------0--1---00-
372     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
373     : ----0---------0-1----0-0
373     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
374     : ---0----------01------00
374     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
375     : --0---------0--00---1---
375     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
376     : -0----------0--0-0-1----
376     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
377     : 0-----------0---001-----
377     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
378     : --------0-----0-----100-
378     : ['vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
379     : -------0------0----1-0-0
379     : ['vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
380     : ------0-------0---1---00
380     : ['vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
381     : -----0------0--00------1
381     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
382     : ----0-------0--0-0----1-
382     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
383     : ---0--------0---00---1--
383     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
384     : --------0----0----00---1
384     : ['vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
385     : -------0-----0----0-0-1-
385     : ['vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
386     : ------0------0-----001--
386     : ['vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 1
387 (*) : --0--1-------0----00----
387     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
388     : -0--1--------0----0-0---
388     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
389     : 0--1---------0-----00---
389     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
390     : --1--0--------0------00-
390     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
391     : -1--0---------0------0-0
391     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
392     : 1--0----------0-------00
392     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
393     : --0-----1---0--00-------
393     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
394     : -0-----1----0--0-0------
394     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
395     : 0-----1-----0---00------
395     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
396     : --1-----0-----0------00-
396     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
397     : -1-----0------0------0-0
397     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
398     : 1-----0-------0-------00
398     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
399     : -----0--1---0--00-------
399     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
400     : ----0--1----0--0-0------
400     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
401     : ---0--1-----0---00------
401     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
402     : -----1--0----0----00----
402     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
403     : ----1--0-----0----0-0---
403     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
404     : ---1--0------0-----00---
404     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 18
num_suborbits: 1
405 (*) : --0---0------0---1-0-1--
405     : ['vote(node0,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
406     : -0----0------0--1---01--
406     : ['vote(node0,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value2)']
407     : --0----0-----0---10---1-
407     : ['vote(node0,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
408     : 0------0-----0-1----0-1-
408     : ['vote(node0,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value2)']
409     : -0------0----0--1-0----1
409     : ['vote(node0,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)']
410     : 0-------0----0-1---0---1
410     : ['vote(node0,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value1)']
411     : -----00-------0--11---0-
411     : ['vote(node0,value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
412     : ----0-0-------0-1-1----0
412     : ['vote(node0,value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value2)']
413     : -----0-0------0--1-1-0--
413     : ['vote(node0,value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
414     : ---0---0------01---1---0
414     : ['vote(node0,value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value2)']
415     : ----0---0-----0-1---10--
415     : ['vote(node0,value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)']
416     : ---0----0-----01----1-0-
416     : ['vote(node0,value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value1)']
417     : --00--------0---0---11--
417     : ['vote(node1,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
418     : -0-0--------0----0-1-1--
418     : ['vote(node1,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value2)']
419     : --0-0-------0--0----1-1-
419     : ['vote(node1,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
420     : 0---0-------0----01---1-
420     : ['vote(node1,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value2)']
421     : -0---0------0--0---1---1
421     : ['vote(node1,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)']
422     : 0----0------0---0-1----1
422     : ['vote(node1,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : 0-----0--1---0-----00---
423     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
424     : -0-----0--1--0----0-0---
424     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
425     : --0-----0--1-0----00----
425     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
426     : ---0--0--1----0-------00
426     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
427     : ----0--0--1---0------0-0
427     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
428     : -----0--0--1--0------00-
428     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
429     : 0--0-----1--0---00------
429     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0--0-0------
430     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----10--00-------
431     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
432 (*) : -----0------0-000----00-
432     : ['~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
433     : ----0-------0-00-0---0-0
433     : ['~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
434     : ---0--------0-0-00----00
434     : ['~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
435     : --0---------00-00-00----
435     : ['~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
436     : -0----------00-0-00-0---
436     : ['~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
437     : 0-----------00--00-00---
437     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
438     : --------0----00---00-00-
438     : ['~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
439     : -------0-----00---0-00-0
439     : ['~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
440     : ------0------00----00-00
440     : ['~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 18
num_suborbits: 1
441 (*) : --0-0--0----00-0--0---1-
441     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
442     : -0---0--0---00-0--0----1
442     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
443     : --00--0-----00--0--0-1--
443     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
444     : 0----0--0---00--0--0---1
444     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
445     : -0-0--0-----00---0--01--
445     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
446     : 0---0--0----00---0--0-1-
446     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
447     : -0---0-0----0-00---1-0--
447     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
448     : --0-0---0---0-00----10--
448     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
449     : 0----00-----0-0-0-1---0-
449     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
450     : --00----0---0-0-0---1-0-
450     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
451     : 0---0-0-----0-0--01----0
451     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
452     : -0-0---0----0-0--0-1---0
452     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
453     : -0--0---0----00-1-0--0--
453     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
454     : --0--0-0-----00--10--0--
454     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
455     : 0--0----0----001---0--0-
455     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
456     : --0--00------00--1-0--0-
456     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
457     : 0--0---0-----001----0--0
457     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
458     : -0--0-0------00-1---0--0
458     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 36
num_suborbits: 1
459 (*) : --0-0-------00-0--00--1-
459     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
460     : -0---0------00-0--0-0--1
460     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
461     : --00--------00--0-00-1--
461     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
462     : 0----0------00--0--00--1
462     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
463     : -0-0--------00---00-01--
463     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
464     : 0---0-------00---0-00-1-
464     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
465     : -0---0------0-00---1-00-
465     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
466     : --0-0-------0-00----10-0
466     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
467     : 0----0------0-0-0-1--00-
467     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
468     : --00--------0-0-0---1-00
468     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
469     : 0---0-------0-0--01--0-0
469     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
470     : -0-0--------0-0--0-1--00
470     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
471     : --0----0----00-00-0---1-
471     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
472     : -0------0---00-0-00----1
472     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
473     : --0---0-----00-00--0-1--
473     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
474     : 0-------0---00--00-0---1
474     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
475     : -0----0-----00-0-0--01--
475     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
476     : 0------0----00--00--0-1-
476     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
477     : -0------0----00-1-0--00-
477     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
478     : --0----0-----00--10--0-0
478     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
479     : 0-------0----001---0-00-
479     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
480     : --0---0------00--1-0--00
480     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
481     : 0------0-----001----00-0
481     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
482     : -0----0------00-1---0-00
482     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
483     : -----0-0----0-000--1-0--
483     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
484     : ----0---0---0-00-0--10--
484     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
485     : -----00-----0-000-1---0-
485     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
486     : ---0----0---0-0-00--1-0-
486     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
487     : ----0-0-----0-00-01----0
487     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
488     : ---0---0----0-0-00-1---0
488     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
489     : ----0---0----00-1-00-0--
489     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
490     : -----0-0-----00--10-00--
490     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
491     : ---0----0----001--00--0-
491     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
492     : -----00------00--1-00-0-
492     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
493     : ---0---0-----001--0-0--0
493     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
494     : ----0-0------00-1--00--0
494     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 1
495 (*) : -0-0---0----000--00-0--0
495     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
496     : --00----0---000-0-00--0-
496     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
497     : 0---0-0-----000--0-00--0
497     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
498     : --0-0---0---0000--00-0--
498     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
499     : 0----00-----000-0--00-0-
499     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
500     : -0---0-0----0000--0-00--
500     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
501     : 0---0--0----000--0--00-0
501     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
502     : 0----0--0---000-0--0-00-
502     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
503     : -0-0--0-----000--0--0-00
503     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
504     : -0---0--0---0000--0--00-
504     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
505     : --00--0-----000-0--0--00
505     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
506     : --0-0--0----0000--0--0-0
506     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
507     : -0--0-0-----0000-0--0--0
507     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
508     : --0--00-----00000--0--0-
508     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
509     : 0--0---0----000-00--0--0
509     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
510     : --0--0-0----00000-0--0--
510     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
511     : 0--0----0---000-00-0--0-
511     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
512     : -0--0---0---0000-00--0--
512     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 1
513 (*) : ---0---0----000-000-0--0
513     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
514     : ---0----0---000-0000--0-
514     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
515     : ----0-0-----0000-0-00--0
515     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
516     : ----0---0---0000-000-0--
516     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
517     : -----00-----00000--00-0-
517     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
518     : -----0-0----00000-0-00--
518     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
519     : 0------0----000-00--00-0
519     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
520     : 0-------0---000-00-0-00-
520     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
521     : -0----0-----0000-0--0-00
521     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
522     : -0------0---0000-00--00-
522     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
523     : --0---0-----00000--0--00
523     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
524     : --0----0----00000-0--0-0
524     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
525     : 0---0-------000--0-000-0
525     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
526     : 0----0------000-0--0000-
526     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
527     : -0-0--------000--00-0-00
527     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
528     : -0---0------0000--0-000-
528     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
529     : --00--------000-0-00--00
529     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
530     : --0-0-------0000--00-0-0
530     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
531 (*) : -00-00-00---0000--0--0--
531     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
532     : 0-00-00-0---000-0--0--0-
532     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
533     : 00-00-00----000--0--0--0
533     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 7.612 seconds

[QRM NOTE]: Time elapsed since last: 0.234 seconds

[QRM NOTE]: Peak memory: 1919637 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================

definition primes: {32, 2, 3, 6, 12, 13, 19, 20, 23, 24, 25, 27, 28, 29, 30, 31}


New level: 0
 pending : [0, 1, 4, 5, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : []


Before reduction : 
 pending  : [0, 1, 4, 5, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : []

Essensial at level 0 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, 0), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : {1, 7}

After reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : [0]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, 0), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : [0]

[QRM NOTE]: Time elapsed since start: 7.701 seconds

[QRM NOTE]: Time elapsed since last: 0.088 seconds

[QRM NOTE]: Peak memory: 849694 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------1-1------
0     : ['vote(node0,value0)', 'vote(node0,value2)']
1     : ---------------11-------
1     : ['vote(node0,value0)', 'vote(node0,value1)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------1-1---
3     : ['vote(node1,value0)', 'vote(node1,value2)']
4     : ------------------11----
4     : ['vote(node1,value0)', 'vote(node1,value1)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------1-1
6     : ['vote(node2,value0)', 'vote(node2,value2)']
7     : ---------------------11-
7     : ['vote(node2,value0)', 'vote(node2,value1)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', 'vote(node0,value2)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', 'vote(node0,value2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ----------11------------
72     : ['decision(value1)', 'decision(value2)']
73     : ---------1-1------------
73     : ['decision(value0)', 'decision(value2)']
74     : ---------11-------------
74     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'decision(value2)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

part_sig: ('value$0$decision$0$0 | value$0$decision$0$1',)


---------- SigGenerator ----------

terms:  ['decision(value1)', 'decision(value2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decision': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'decision(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0. ~decision(VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : ------1----1------------
75     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
76     : ------1---1-------------
76     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
77     : -------1---1------------
77     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
78     : -------1-1--------------
78     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
79     : --------1-1-------------
79     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
80     : --------11--------------
80     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
81     : ---1-------1------------
81     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
82     : ---1------1-------------
82     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
83     : ----1------1------------
83     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
84     : ----1----1--------------
84     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
85     : -----1----1-------------
85     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
86     : -----1---1--------------
86     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
87     : 1----------1------------
87     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
88     : 1---------1-------------
88     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
89     : -1---------1------------
89     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
90     : -1-------1--------------
90     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
91     : --1-------1-------------
91     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
92     : --1------1--------------
92     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE1)', 'chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE1,VALUE0. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
138 (*) : ---------1----10--------
138     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
139     : ----------1---1-0-------
139     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
140     : -----------1--1--0------
140     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
141     : ---------1---1-0--------
141     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
142     : ----------1--1--0-------
142     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
143     : -----------1-1---0------
143     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
144     : ---------1----1---0-----
144     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
145     : ----------1---1----0----
145     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
146     : -----------1--1-----0---
146     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
147     : ---------1--1-----0-----
147     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
148     : ----------1-1------0----
148     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
149     : -----------11-------0---
149     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
150     : ---------1---1-------0--
150     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
151     : ----------1--1--------0-
151     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
152     : -----------1-1---------0
152     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
153     : ---------1--1--------0--
153     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
154     : ----------1-1---------0-
154     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
155     : -----------11----------0
155     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'decision(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~didNotVote(NODE0) | ~decision(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
156 (*) : 0--------1----1---------
156     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
157     : -0--------1---1---------
157     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
158     : --0--------1--1---------
158     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
159     : ---0-----1---1----------
159     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
160     : ----0-----1--1----------
160     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
161     : -----0-----1-1----------
161     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
162     : ------0--1--1-----------
162     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
163     : -------0--1-1-----------
163     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
164     : --------0--11-----------
164     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', 'decision(value0)', 'didNotVote(node2)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

part_sig: ('node$0$didNotVote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', 'decision(value0)', 'didNotVote(node2)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$didNotVote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0; node$1$member$0': [node$0$didNotVote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$didNotVote$0; node$1$member$0': node$0$didNotVote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', '~member(NODE0,QUORUM0)', 'decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. ~didNotVote(NODE0) | member(NODE0,QUORUM0) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
165 (*) : ---------1----1-1-------
165     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
166     : ---------1----1--1------
166     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
167     : ----------1---11--------
167     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
168     : ----------1---1--1------
168     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
169     : -----------1--11--------
169     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
170     : -----------1--1-1-------
170     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
171     : ---------1---1--1-------
171     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
172     : ---------1---1---1------
172     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
173     : ----------1--1-1--------
173     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
174     : ----------1--1---1------
174     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
175     : -----------1-1-1--------
175     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
176     : -----------1-1--1-------
176     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
177     : ---------1----1----1----
177     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
178     : ---------1----1-----1---
178     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
179     : ----------1---1---1-----
179     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
180     : ----------1---1-----1---
180     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
181     : -----------1--1---1-----
181     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
182     : -----------1--1----1----
182     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
183     : ---------1--1------1----
183     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
184     : ---------1--1-------1---
184     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
185     : ----------1-1-----1-----
185     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
186     : ----------1-1-------1---
186     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
187     : -----------11-----1-----
187     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
188     : -----------11------1----
188     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
189     : ---------1---1--------1-
189     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
190     : ---------1---1---------1
190     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
191     : ----------1--1-------1--
191     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
192     : ----------1--1---------1
192     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
193     : -----------1-1-------1--
193     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
194     : -----------1-1--------1-
194     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
195     : ---------1--1---------1-
195     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
196     : ---------1--1----------1
196     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
197     : ----------1-1--------1--
197     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
198     : ----------1-1----------1
198     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
199     : -----------11--------1--
199     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
200     : -----------11---------1-
200     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$0$vote$0$0', 'value$0$decision$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$0$vote$0': [node$0$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$0$vote$0': node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'vote(NODE1,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE1,VALUE0,NODE0. ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
201 (*) : ---------1--1-1---------
201     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
202     : ----------1-1-1---------
202     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
203     : -----------11-1---------
203     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
204     : ---------1--11----------
204     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
205     : ----------1-11----------
205     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
206     : -----------111----------
206     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
207     : ---------1---11---------
207     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
208     : ----------1--11---------
208     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
209     : -----------1-11---------
209     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$didNotVote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

part_sig: ('node$0$didNotVote$0$0 | node$0$didNotVote$0$1', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'decision(VALUE0)', 'didNotVote(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~didNotVote(NODE0) | ~decision(VALUE0) | ~didNotVote(NODE1) | NODE0 = NODE1


=== Prime Orbit 14 =====================
size : 18
num_suborbits: 1
237 (*) : -----0-----1------1-----
237     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
238     : ----0-----1-------1-----
238     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
239     : -----0-----1-------1----
239     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
240     : ---0-----1---------1----
240     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
241     : ----0-----1---------1---
241     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
242     : ---0-----1----------1---
242     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
243     : --0--------1---------1--
243     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
244     : -0--------1----------1--
244     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
245     : --0--------1----------1-
245     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
246     : 0--------1------------1-
246     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
247     : -0--------1------------1
247     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
248     : 0--------1-------------1
248     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
249     : --------0--1---1--------
249     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
250     : -------0--1----1--------
250     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
251     : --------0--1----1-------
251     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
252     : ------0--1------1-------
252     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
253     : -------0--1------1------
253     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
254     : ------0--1-------1------
254     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value2)', 'decision(value2)', 'vote(node1,value0)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value2)', 'decision(value2)', 'vote(node1,value0)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', 'decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE1,VALUE0,NODE0. member(NODE0,QUORUM0) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 15 =====================
size : 36
num_suborbits: 1
255 (*) : -----------1------1----0
255     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
256     : ----------1-------1---0-
256     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
257     : -----------1-------1---0
257     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
258     : ---------1---------1-0--
258     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
259     : ----------1---------1-0-
259     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
260     : ---------1----------10--
260     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
261     : -----------1--------01--
261     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
262     : ----------1--------0-1--
262     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
263     : -----------1--------0-1-
263     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
264     : ---------1--------0---1-
264     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
265     : ----------1--------0---1
265     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
266     : ---------1--------0----1
266     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
267     : -----------1---1-------0
267     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
268     : ----------1----1------0-
268     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
269     : -----------1----1------0
269     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
270     : ---------1------1----0--
270     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
271     : ----------1------1----0-
271     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
272     : ---------1-------1---0--
272     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
273     : -----------1-----0---1--
273     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
274     : ----------1-----0----1--
274     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
275     : -----------1-----0----1-
275     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
276     : ---------1-----0------1-
276     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
277     : ----------1-----0------1
277     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
278     : ---------1-----0-------1
278     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
279     : -----------1---1----0---
279     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
280     : ----------1----1---0----
280     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
281     : -----------1----1---0---
281     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
282     : ---------1------1-0-----
282     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
283     : ----------1------1-0----
283     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
284     : ---------1-------10-----
284     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
285     : -----------1-----01-----
285     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
286     : ----------1-----0-1-----
286     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
287     : -----------1-----0-1----
287     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
288     : ---------1-----0---1----
288     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
289     : ----------1-----0---1---
289     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
290     : ---------1-----0----1---
290     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']

sign_func_name2args: {'0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~vote(NODE1,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE1,VALUE0,NODE0. ~decision(VALUE0) | vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
291 (*) : -----0-----1--------0---
291     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
292     : ----0-----1--------0----
292     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
293     : ---0-----1--------0-----
293     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
294     : --0--------1-----------0
294     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
295     : -0--------1-----------0-
295     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
296     : 0--------1-----------0--
296     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
297     : --------0--1-----0------
297     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
298     : -------0--1-----0-------
298     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
299     : ------0--1-----0--------
299     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value2)', 'decision(value2)', '~vote(node1,value2)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value2)', 'decision(value2)', '~vote(node1,value2)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', 'decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. member(NODE0,QUORUM0) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | vote(NODE0,VALUE0)


=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
300 (*) : -----------1--------0--0
300     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
301     : ----------1--------0--0-
301     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
302     : ---------1--------0--0--
302     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
303     : -----------1-----0-----0
303     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
304     : ----------1-----0-----0-
304     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
305     : ---------1-----0-----0--
305     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
306     : -----------1-----0--0---
306     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
307     : ----------1-----0--0----
307     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
308     : ---------1-----0--0-----
308     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']

sign_func_name2args: {'0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~vote(NODE1,VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~decision(VALUE0) | vote(NODE1,VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 18 =====================
size : 36
num_suborbits: 2
309 (*) : -----------1------1--1--
309     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
310     : ----------1-------1--1--
310     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
311     : -----------1-------1--1-
311     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
312     : ---------1---------1--1-
312     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
313     : ----------1---------1--1
313     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
314     : ---------1----------1--1
314     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
315     : -----------1---1-----1--
315     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
316     : ----------1----1-----1--
316     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
317     : -----------1----1-----1-
317     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
318     : ---------1------1-----1-
318     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
319     : ----------1------1-----1
319     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
320     : ---------1-------1-----1
320     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
321     : -----------1---1--1-----
321     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
322     : ----------1----1--1-----
322     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
323     : -----------1----1--1----
323     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
324     : ---------1------1--1----
324     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
325     : ----------1------1--1---
325     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
326     : ---------1-------1--1---
326     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
327 (*) : -----------1------1---1-
327     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
328     : ----------1-------1----1
328     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
329     : -----------1-------1-1--
329     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
330     : ---------1---------1---1
330     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
331     : ----------1---------11--
331     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
332     : ---------1----------1-1-
332     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
333     : -----------1---1------1-
333     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
334     : ----------1----1-------1
334     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
335     : -----------1----1----1--
335     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
336     : ---------1------1------1
336     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
337     : ----------1------1---1--
337     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
338     : ---------1-------1----1-
338     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
339     : -----------1---1---1----
339     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
340     : ----------1----1----1---
340     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
341     : -----------1----1-1-----
341     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
342     : ---------1------1---1---
342     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
343     : ----------1------11-----
343     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
344     : ---------1-------1-1----
344     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE1,VALUE2)', 'decision(VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE1,VALUE2,VALUE0,NODE0. ~vote(NODE1,VALUE2) | ~decision(VALUE0) | ~vote(NODE0,VALUE1) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2 | VALUE0 = VALUE1))


=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
357 (*) : 0--0--0--1--------------
357     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : -0--0--0--1-------------
358     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : --0--0--0--1------------
359     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))


=== Prime Orbit 22 =====================
size : 9
num_suborbits: 1
360 (*) : ---0--0--1-----------1--
360     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : ----0--0--1-----------1-
361     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : -----0--0--1-----------1
362     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : 0-----0--1--------1-----
363     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
364     : -0-----0--1--------1----
364     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
365     : --0-----0--1--------1---
365     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
366     : 0--0-----1-----1--------
366     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
367     : -0--0-----1-----1-------
367     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
368     : --0--0-----1-----1------
368     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'vote(node2,value0)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'vote(node2,value0)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM1,VALUE0)', 'member(NODE0,QUORUM0)', 'member(NODE0,QUORUM1)', 'decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM1,NODE0,QUORUM0. chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE0) | QUORUM0 = QUORUM1


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : 0-----0--1---0-----00---
423     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
424     : -0-----0--1--0----0-0---
424     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
425     : --0-----0--1-0----00----
425     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
426     : ---0--0--1----0-------00
426     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
427     : ----0--0--1---0------0-0
427     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
428     : -----0--0--1--0------00-
428     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
429     : 0--0-----1--0---00------
429     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0--0-0------
430     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----10--00-------
431     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$didNotVote$0$0, node$1$vote$0$0, node$1$vote$0$1, node$0$member$0$0, node$0$member$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '1$didNotVote': 1, '1$vote': 2, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', '~didNotVote(NODE0)', 'decision(VALUE1)', '~chosenAt(QUORUM0,VALUE1)', 'member(NODE0,QUORUM1)', '~vote(NODE0,VALUE0)', '~chosenAt(QUORUM1,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,QUORUM1,VALUE1,NODE0. ~member(NODE0,QUORUM0) | didNotVote(NODE0) | ~decision(VALUE1) | chosenAt(QUORUM0,VALUE1) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------1-1------
0     : ['vote(node0,value0)', 'vote(node0,value2)']
1     : ---------------11-------
1     : ['vote(node0,value0)', 'vote(node0,value1)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------1-1---
3     : ['vote(node1,value0)', 'vote(node1,value2)']
4     : ------------------11----
4     : ['vote(node1,value0)', 'vote(node1,value1)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------1-1
6     : ['vote(node2,value0)', 'vote(node2,value2)']
7     : ---------------------11-
7     : ['vote(node2,value0)', 'vote(node2,value1)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ----------11------------
72     : ['decision(value1)', 'decision(value2)']
73     : ---------1-1------------
73     : ['decision(value0)', 'decision(value2)']
74     : ---------11-------------
74     : ['decision(value0)', 'decision(value1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0. ~decision(VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : ------1----1------------
75     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
76     : ------1---1-------------
76     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
77     : -------1---1------------
77     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
78     : -------1-1--------------
78     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
79     : --------1-1-------------
79     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
80     : --------11--------------
80     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
81     : ---1-------1------------
81     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
82     : ---1------1-------------
82     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
83     : ----1------1------------
83     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
84     : ----1----1--------------
84     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
85     : -----1----1-------------
85     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
86     : -----1---1--------------
86     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
87     : 1----------1------------
87     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
88     : 1---------1-------------
88     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
89     : -1---------1------------
89     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
90     : -1-------1--------------
90     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
91     : --1-------1-------------
91     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
92     : --1------1--------------
92     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall QUORUM0,VALUE1,VALUE0. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
138 (*) : ---------1----10--------
138     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
139     : ----------1---1-0-------
139     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
140     : -----------1--1--0------
140     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
141     : ---------1---1-0--------
141     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
142     : ----------1--1--0-------
142     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
143     : -----------1-1---0------
143     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
144     : ---------1----1---0-----
144     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
145     : ----------1---1----0----
145     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
146     : -----------1--1-----0---
146     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
147     : ---------1--1-----0-----
147     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
148     : ----------1-1------0----
148     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
149     : -----------11-------0---
149     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
150     : ---------1---1-------0--
150     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
151     : ----------1--1--------0-
151     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
152     : -----------1-1---------0
152     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
153     : ---------1--1--------0--
153     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
154     : ----------1-1---------0-
154     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
155     : -----------11----------0
155     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~didNotVote(NODE0) | ~decision(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
156 (*) : 0--------1----1---------
156     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
157     : -0--------1---1---------
157     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
158     : --0--------1--1---------
158     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
159     : ---0-----1---1----------
159     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
160     : ----0-----1--1----------
160     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
161     : -----0-----1-1----------
161     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
162     : ------0--1--1-----------
162     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
163     : -------0--1-1-----------
163     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
164     : --------0--11-----------
164     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,QUORUM0. ~didNotVote(NODE0) | member(NODE0,QUORUM0) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)
qcost : 7




=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
165 (*) : ---------1----1-1-------
165     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
166     : ---------1----1--1------
166     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
167     : ----------1---11--------
167     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
168     : ----------1---1--1------
168     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
169     : -----------1--11--------
169     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
170     : -----------1--1-1-------
170     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
171     : ---------1---1--1-------
171     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
172     : ---------1---1---1------
172     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
173     : ----------1--1-1--------
173     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
174     : ----------1--1---1------
174     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
175     : -----------1-1-1--------
175     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
176     : -----------1-1--1-------
176     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
177     : ---------1----1----1----
177     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
178     : ---------1----1-----1---
178     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
179     : ----------1---1---1-----
179     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
180     : ----------1---1-----1---
180     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
181     : -----------1--1---1-----
181     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
182     : -----------1--1----1----
182     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
183     : ---------1--1------1----
183     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
184     : ---------1--1-------1---
184     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
185     : ----------1-1-----1-----
185     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
186     : ----------1-1-------1---
186     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
187     : -----------11-----1-----
187     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
188     : -----------11------1----
188     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
189     : ---------1---1--------1-
189     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
190     : ---------1---1---------1
190     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
191     : ----------1--1-------1--
191     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
192     : ----------1--1---------1
192     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
193     : -----------1-1-------1--
193     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
194     : -----------1-1--------1-
194     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
195     : ---------1--1---------1-
195     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
196     : ---------1--1----------1
196     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
197     : ----------1-1--------1--
197     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
198     : ----------1-1----------1
198     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
199     : -----------11--------1--
199     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
200     : -----------11---------1-
200     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,VALUE1,VALUE0,NODE0. ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
201 (*) : ---------1--1-1---------
201     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
202     : ----------1-1-1---------
202     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
203     : -----------11-1---------
203     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
204     : ---------1--11----------
204     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
205     : ----------1-11----------
205     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
206     : -----------111----------
206     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
207     : ---------1---11---------
207     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
208     : ----------1--11---------
208     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
209     : -----------1-11---------
209     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~didNotVote(NODE0) | ~decision(VALUE0) | ~didNotVote(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 14 =====================
size : 18
num_suborbits: 1
237 (*) : -----0-----1------1-----
237     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
238     : ----0-----1-------1-----
238     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
239     : -----0-----1-------1----
239     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
240     : ---0-----1---------1----
240     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
241     : ----0-----1---------1---
241     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
242     : ---0-----1----------1---
242     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
243     : --0--------1---------1--
243     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
244     : -0--------1----------1--
244     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
245     : --0--------1----------1-
245     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
246     : 0--------1------------1-
246     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
247     : -0--------1------------1
247     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
248     : 0--------1-------------1
248     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
249     : --------0--1---1--------
249     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
250     : -------0--1----1--------
250     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
251     : --------0--1----1-------
251     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
252     : ------0--1------1-------
252     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
253     : -------0--1------1------
253     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
254     : ------0--1-------1------
254     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall QUORUM0,VALUE1,VALUE0,NODE0. member(NODE0,QUORUM0) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 15 =====================
size : 36
num_suborbits: 1
255 (*) : -----------1------1----0
255     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
256     : ----------1-------1---0-
256     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
257     : -----------1-------1---0
257     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
258     : ---------1---------1-0--
258     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
259     : ----------1---------1-0-
259     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
260     : ---------1----------10--
260     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
261     : -----------1--------01--
261     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
262     : ----------1--------0-1--
262     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
263     : -----------1--------0-1-
263     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
264     : ---------1--------0---1-
264     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
265     : ----------1--------0---1
265     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
266     : ---------1--------0----1
266     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
267     : -----------1---1-------0
267     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
268     : ----------1----1------0-
268     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
269     : -----------1----1------0
269     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
270     : ---------1------1----0--
270     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
271     : ----------1------1----0-
271     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
272     : ---------1-------1---0--
272     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
273     : -----------1-----0---1--
273     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
274     : ----------1-----0----1--
274     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
275     : -----------1-----0----1-
275     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
276     : ---------1-----0------1-
276     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
277     : ----------1-----0------1
277     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
278     : ---------1-----0-------1
278     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
279     : -----------1---1----0---
279     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
280     : ----------1----1---0----
280     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
281     : -----------1----1---0---
281     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
282     : ---------1------1-0-----
282     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
283     : ----------1------1-0----
283     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
284     : ---------1-------10-----
284     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
285     : -----------1-----01-----
285     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
286     : ----------1-----0-1-----
286     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
287     : -----------1-----0-1----
287     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
288     : ---------1-----0---1----
288     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
289     : ----------1-----0---1---
289     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
290     : ---------1-----0----1---
290     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,VALUE1,VALUE0,NODE0. ~decision(VALUE0) | vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
291 (*) : -----0-----1--------0---
291     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
292     : ----0-----1--------0----
292     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
293     : ---0-----1--------0-----
293     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
294     : --0--------1-----------0
294     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
295     : -0--------1-----------0-
295     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
296     : 0--------1-----------0--
296     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
297     : --------0--1-----0------
297     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
298     : -------0--1-----0-------
298     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
299     : ------0--1-----0--------
299     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,QUORUM0. member(NODE0,QUORUM0) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | vote(NODE0,VALUE0)
qcost : 7




=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
300 (*) : -----------1--------0--0
300     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
301     : ----------1--------0--0-
301     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
302     : ---------1--------0--0--
302     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
303     : -----------1-----0-----0
303     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
304     : ----------1-----0-----0-
304     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
305     : ---------1-----0-----0--
305     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
306     : -----------1-----0--0---
306     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
307     : ----------1-----0--0----
307     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
308     : ---------1-----0--0-----
308     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~decision(VALUE0) | vote(NODE1,VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 18 =====================
size : 36
num_suborbits: 2
309 (*) : -----------1------1--1--
309     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
310     : ----------1-------1--1--
310     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
311     : -----------1-------1--1-
311     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
312     : ---------1---------1--1-
312     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
313     : ----------1---------1--1
313     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
314     : ---------1----------1--1
314     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
315     : -----------1---1-----1--
315     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
316     : ----------1----1-----1--
316     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
317     : -----------1----1-----1-
317     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
318     : ---------1------1-----1-
318     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
319     : ----------1------1-----1
319     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
320     : ---------1-------1-----1
320     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
321     : -----------1---1--1-----
321     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
322     : ----------1----1--1-----
322     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
323     : -----------1----1--1----
323     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
324     : ---------1------1--1----
324     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
325     : ----------1------1--1---
325     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
326     : ---------1-------1--1---
326     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
327 (*) : -----------1------1---1-
327     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
328     : ----------1-------1----1
328     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
329     : -----------1-------1-1--
329     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
330     : ---------1---------1---1
330     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
331     : ----------1---------11--
331     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
332     : ---------1----------1-1-
332     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
333     : -----------1---1------1-
333     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
334     : ----------1----1-------1
334     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
335     : -----------1----1----1--
335     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
336     : ---------1------1------1
336     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
337     : ----------1------1---1--
337     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
338     : ---------1-------1----1-
338     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
339     : -----------1---1---1----
339     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
340     : ----------1----1----1---
340     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
341     : -----------1----1-1-----
341     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
342     : ---------1------1---1---
342     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
343     : ----------1------11-----
343     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
344     : ---------1-------1-1----
344     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
num_forall :   5
num_exists :   0
num_literals : 10
quantified form : forall NODE1,VALUE1,VALUE2,VALUE0,NODE0. ~vote(NODE1,VALUE2) | ~decision(VALUE0) | ~vote(NODE0,VALUE1) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2 | VALUE0 = VALUE1))
qcost : 15




=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
357 (*) : 0--0--0--1--------------
357     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : -0--0--0--1-------------
358     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : --0--0--0--1------------
359     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 22 =====================
size : 9
num_suborbits: 1
360 (*) : ---0--0--1-----------1--
360     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : ----0--0--1-----------1-
361     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : -----0--0--1-----------1
362     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : 0-----0--1--------1-----
363     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
364     : -0-----0--1--------1----
364     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
365     : --0-----0--1--------1---
365     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
366     : 0--0-----1-----1--------
366     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
367     : -0--0-----1-----1-------
367     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
368     : --0--0-----1-----1------
368     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,QUORUM1,NODE0,QUORUM0. chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : 0-----0--1---0-----00---
423     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
424     : -0-----0--1--0----0-0---
424     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
425     : --0-----0--1-0----00----
425     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
426     : ---0--0--1----0-------00
426     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
427     : ----0--0--1---0------0-0
427     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
428     : -----0--0--1--0------00-
428     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
429     : 0--0-----1--0---00------
429     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0--0-0------
430     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----10--00-------
431     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall QUORUM0,QUORUM1,VALUE1,NODE0. ~member(NODE0,QUORUM0) | didNotVote(NODE0) | ~decision(VALUE1) | chosenAt(QUORUM0,VALUE1) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 7.882 seconds

[QRM NOTE]: Time elapsed since last: 0.181 seconds

[QRM NOTE]: Peak memory: 2630924 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

=============================================================================================


New level: 1
 pending : [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : [0]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 1 among pending : [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 4 with phase True at level 1

After decision at level 1
 pending : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : [0, 4]


New level: 2
 pending : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : [0, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, 67108864), (17, 33554432), (18, 34816), (19, -1), (20, -1), (21, 134217728), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 2 among pending : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, 67108864), (17, 33554432), (18, 34816), (19, -1), (20, -1), (21, 134217728), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 21 with phase True at level 2

After decision at level 2
 pending : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 22, 26]
 solution : [0, 4, 21]


New level: 3
 pending : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 22, 26]
 solution : [0, 4, 21]


Before reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 22, 26]
 solution : [0, 4, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, 67108864), (17, 33554432), (18, 34816), (19, -1), (20, -1), (21, 134217728), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 4, 21]


Before reduction : 
 pending  : []
 solution : [0, 4, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 21]


Solution : [0, 4, 21] has cost 15.


Before backtrack at level 3
 pending : []
 solution : [0, 4, 21]

After backtrack at level 3
 pending : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 22, 26]
 solution : [0, 4, 21]


Invert decision for 21 at level 2


New level: 3
 pending : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 22, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 22, 26]
 solution : [0, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, 67108864), (17, 33554432), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 22, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 3 among pending : [5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, 67108864), (17, 33554432), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 3

After decision at level 3
 pending : [5, 8, 9, 10, 11, 14, 15, 17, 18, 22, 26]
 solution : [0, 4, 16]


New level: 4
 pending : [5, 8, 9, 10, 11, 14, 15, 17, 18, 22, 26]
 solution : [0, 4, 16]


Before reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 17, 18, 22, 26]
 solution : [0, 4, 16]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, 67108864), (17, 33554432), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {5, 8, 9, 10, 11, 14, 15, 17, 18, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 4, 16]


Before reduction : 
 pending  : []
 solution : [0, 4, 16]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 16]


Solution : [0, 4, 16] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [0, 4, 16]

After backtrack at level 4
 pending : [5, 8, 9, 10, 11, 14, 15, 17, 18, 22, 26]
 solution : [0, 4, 16]


Invert decision for 16 at level 3


New level: 4
 pending : [5, 8, 9, 10, 11, 14, 15, 17, 18, 22, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 17, 18, 22, 26]
 solution : [0, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, -1), (17, 33554432), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 17, 18, 22, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 4 among pending : [5, 8, 9, 10, 11, 14, 15, 17, 18, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, -1), (17, 33554432), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 4

After decision at level 4
 pending : [5, 8, 9, 10, 11, 14, 15, 18, 22, 26]
 solution : [0, 4, 17]


New level: 5
 pending : [5, 8, 9, 10, 11, 14, 15, 18, 22, 26]
 solution : [0, 4, 17]


Before reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 18, 22, 26]
 solution : [0, 4, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, -1), (17, 33554432), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {5, 8, 9, 10, 11, 14, 15, 18, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 4, 17]


Before reduction : 
 pending  : []
 solution : [0, 4, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 17]


Solution : [0, 4, 17] has cost 18.


Before backtrack at level 5
 pending : []
 solution : [0, 4, 17]

After backtrack at level 5
 pending : [5, 8, 9, 10, 11, 14, 15, 18, 22, 26]
 solution : [0, 4, 17]


Invert decision for 17 at level 4


New level: 5
 pending : [5, 8, 9, 10, 11, 14, 15, 18, 22, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 18, 22, 26]
 solution : [0, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [5, 8, 9, 10, 11, 14, 15, 18, 22, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 5 among pending : [5, 8, 9, 10, 11, 14, 15, 18, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 14 with phase True at level 5

After decision at level 5
 pending : [5, 8, 9, 10, 11, 15, 18, 22, 26]
 solution : [0, 4, 14]


New level: 6
 pending : [5, 8, 9, 10, 11, 15, 18, 22, 26]
 solution : [0, 4, 14]


Before reduction : 
 pending  : [5, 8, 9, 10, 11, 15, 18, 22, 26]
 solution : [0, 4, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, 2097152), (15, 1048576), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, 0), (11, 2048), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {10, 18, 5, 15}

After reduction : 
 pending  : [8, 9, 11, 22, 26]
 solution : [0, 4, 14]


Before reduction : 
 pending  : [8, 9, 11, 22, 26]
 solution : [0, 4, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, 0), (11, 2048), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, -1), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 9, 11, 22, 26]
 solution : [0, 4, 14]


Solution : [0, 4, 14] has cost 20.


Before backtrack at level 6
 pending : [8, 9, 11, 22, 26]
 solution : [0, 4, 14]

After backtrack at level 6
 pending : [8, 9, 11, 22, 26, 5, 10, 15, 18]
 solution : [0, 4, 14]


Invert decision for 14 at level 5


New level: 6
 pending : [8, 9, 11, 22, 26, 5, 10, 15, 18]
 solution : [0, 4]


Before reduction : 
 pending  : [8, 9, 11, 22, 26, 5, 10, 15, 18]
 solution : [0, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, -1), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 1048576), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 9, 11, 22, 26, 5, 10, 15, 18]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 6 among pending : [8, 9, 11, 22, 26, 5, 10, 15, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 1048576), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 6

After decision at level 6
 pending : [8, 9, 11, 22, 26, 5, 10, 18]
 solution : [0, 4, 15]


New level: 7
 pending : [8, 9, 11, 22, 26, 5, 10, 18]
 solution : [0, 4, 15]


Before reduction : 
 pending  : [8, 9, 11, 22, 26, 5, 10, 18]
 solution : [0, 4, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 1048576), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, 0), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {10, 18, 5}

After reduction : 
 pending  : [8, 9, 11, 22, 26]
 solution : [0, 4, 15]


Before reduction : 
 pending  : [8, 9, 11, 22, 26]
 solution : [0, 4, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, 0), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, -1), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 9, 11, 22, 26]
 solution : [0, 4, 15]


Solution : [0, 4, 15] has cost 20.


Before backtrack at level 7
 pending : [8, 9, 11, 22, 26]
 solution : [0, 4, 15]

After backtrack at level 7
 pending : [8, 9, 11, 22, 26, 5, 10, 18]
 solution : [0, 4, 15]


Invert decision for 15 at level 6


New level: 7
 pending : [8, 9, 11, 22, 26, 5, 10, 18]
 solution : [0, 4]


Before reduction : 
 pending  : [8, 9, 11, 22, 26, 5, 10, 18]
 solution : [0, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, -1), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 9, 11, 22, 26, 5, 10, 18]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 7 among pending : [8, 9, 11, 22, 26, 5, 10, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 9 with phase True at level 7

After decision at level 7
 pending : [8, 11, 22, 26, 5, 10, 18]
 solution : [0, 4, 9]


New level: 8
 pending : [8, 11, 22, 26, 5, 10, 18]
 solution : [0, 4, 9]


Before reduction : 
 pending  : [8, 11, 22, 26, 5, 10, 18]
 solution : [0, 4, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, 524288), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16896), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {8, 10, 11}

After reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 4, 9]


Before reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 4, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16896), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16896), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 4, 9]


Solution : [0, 4, 9] has cost 18.


Before backtrack at level 8
 pending : [22, 26, 5, 18]
 solution : [0, 4, 9]

After backtrack at level 8
 pending : [22, 26, 5, 18, 8, 11, 10]
 solution : [0, 4, 9]


Invert decision for 9 at level 7


New level: 8
 pending : [22, 26, 5, 18, 8, 11, 10]
 solution : [0, 4]


Before reduction : 
 pending  : [22, 26, 5, 18, 8, 11, 10]
 solution : [0, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16896), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, -1), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 26, 5, 18, 8, 11, 10]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 8 among pending : [22, 26, 5, 18, 8, 11, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, -1), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [22, 26, 5, 18, 11, 10]
 solution : [0, 4, 8]


New level: 9
 pending : [22, 26, 5, 18, 11, 10]
 solution : [0, 4, 8]


Before reduction : 
 pending  : [22, 26, 5, 18, 11, 10]
 solution : [0, 4, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, 262144), (9, -1), (10, 16384), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16896), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {10, 11}

After reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 4, 8]


Before reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 4, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16896), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16896), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 4, 8]


Solution : [0, 4, 8] has cost 18.


Before backtrack at level 9
 pending : [22, 26, 5, 18]
 solution : [0, 4, 8]

After backtrack at level 9
 pending : [22, 26, 5, 18, 11, 10]
 solution : [0, 4, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [22, 26, 5, 18, 11, 10]
 solution : [0, 4]


Before reduction : 
 pending  : [22, 26, 5, 18, 11, 10]
 solution : [0, 4]

Essensial at level 9 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16896), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 5, 18, 10]
 solution : [0, 4, 11]


Before reduction : 
 pending  : [22, 26, 5, 18, 10]
 solution : [0, 4, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 5, 18, 10]
 solution : [0, 4, 11]


Solution : [0, 4, 11] has cost 18.


Before backtrack at level 9
 pending : [22, 26, 5, 18, 10]
 solution : [0, 4, 11]

After backtrack at level 9
 pending : [22, 26, 5, 18, 10, 11]
 solution : [0, 4]


Before backtrack at level 8
 pending : [22, 26, 5, 18, 10, 11]
 solution : [0, 4]

After backtrack at level 8
 pending : [22, 26, 5, 18, 10, 11, 8]
 solution : [0, 4]


Before backtrack at level 7
 pending : [22, 26, 5, 18, 10, 11, 8]
 solution : [0, 4]

After backtrack at level 7
 pending : [22, 26, 5, 18, 10, 11, 8, 9]
 solution : [0, 4]


Before backtrack at level 6
 pending : [22, 26, 5, 18, 10, 11, 8, 9]
 solution : [0, 4]

After backtrack at level 6
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15]
 solution : [0, 4]


Before backtrack at level 5
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15]
 solution : [0, 4]

After backtrack at level 5
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0, 4]


Before backtrack at level 4
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0, 4]

After backtrack at level 4
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0, 4]


Before backtrack at level 3
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0, 4]

After backtrack at level 3
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0, 4]


Before backtrack at level 2
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0, 4]

After backtrack at level 2
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16, 21]
 solution : [0, 4]


Invert decision for 4 at level 1


New level: 2
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16, 21]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16, 21]
 solution : [0]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 34816), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16, 21]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 2 among pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 21 with phase True at level 2

After decision at level 2
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0, 21]


New level: 3
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0, 21]


Before reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 21]


Before reduction : 
 pending  : []
 solution : [0, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 21]


Solution : [0, 21] has cost 10.


Before backtrack at level 3
 pending : []
 solution : [0, 21]

After backtrack at level 3
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0, 21]


Invert decision for 21 at level 2


New level: 3
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 3 among pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 3

After decision at level 3
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0, 16]


New level: 4
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0, 16]


Before reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0, 16]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, 268435456), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {5, 8, 9, 10, 11, 14, 15, 17, 18, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 16]


Before reduction : 
 pending  : []
 solution : [0, 16]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 16]


Solution : [0, 16] has cost 13.


Before backtrack at level 4
 pending : []
 solution : [0, 16]

After backtrack at level 4
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0, 16]


Invert decision for 16 at level 3


New level: 4
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, -1), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 4 among pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, -1), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 4

After decision at level 4
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0, 17]


New level: 5
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0, 17]


Before reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, -1), (17, 134217728), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {5, 8, 9, 10, 11, 14, 15, 18, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 17]


Before reduction : 
 pending  : []
 solution : [0, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 17]


Solution : [0, 17] has cost 13.


Before backtrack at level 5
 pending : []
 solution : [0, 17]

After backtrack at level 5
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0, 17]


Invert decision for 17 at level 4


New level: 5
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 5 among pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 14 with phase True at level 5

After decision at level 5
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15]
 solution : [0, 14]


New level: 6
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15]
 solution : [0, 14]


Before reduction : 
 pending  : [22, 26, 5, 18, 10, 11, 8, 9, 15]
 solution : [0, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, 8388608), (15, 4194304), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 8192), (9, 32768), (10, 0), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {18, 10, 5, 15}

After reduction : 
 pending  : [22, 26, 11, 8, 9]
 solution : [0, 14]


Before reduction : 
 pending  : [22, 26, 11, 8, 9]
 solution : [0, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 8192), (9, 32768), (10, 0), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, 32768), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 26, 11, 8, 9]
 solution : [0, 14]


Solution : [0, 14] has cost 15.


Before backtrack at level 6
 pending : [22, 26, 11, 8, 9]
 solution : [0, 14]

After backtrack at level 6
 pending : [22, 26, 11, 8, 9, 5, 18, 10, 15]
 solution : [0, 14]


Invert decision for 14 at level 5


New level: 6
 pending : [22, 26, 11, 8, 9, 5, 18, 10, 15]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 11, 8, 9, 5, 18, 10, 15]
 solution : [0]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, 32768), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 26, 11, 8, 9, 5, 18, 10, 15]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 6 among pending : [22, 26, 11, 8, 9, 5, 18, 10, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 6

After decision at level 6
 pending : [22, 26, 11, 8, 9, 5, 18, 10]
 solution : [0, 15]


New level: 7
 pending : [22, 26, 11, 8, 9, 5, 18, 10]
 solution : [0, 15]


Before reduction : 
 pending  : [22, 26, 11, 8, 9, 5, 18, 10]
 solution : [0, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 8192), (9, 32768), (10, 0), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {18, 10, 5}

After reduction : 
 pending  : [22, 26, 11, 8, 9]
 solution : [0, 15]


Before reduction : 
 pending  : [22, 26, 11, 8, 9]
 solution : [0, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 8192), (9, 32768), (10, 0), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, 32768), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 26, 11, 8, 9]
 solution : [0, 15]


Solution : [0, 15] has cost 15.


Before backtrack at level 7
 pending : [22, 26, 11, 8, 9]
 solution : [0, 15]

After backtrack at level 7
 pending : [22, 26, 11, 8, 9, 5, 18, 10]
 solution : [0, 15]


Invert decision for 15 at level 6


New level: 7
 pending : [22, 26, 11, 8, 9, 5, 18, 10]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 11, 8, 9, 5, 18, 10]
 solution : [0]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, 32768), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 26, 11, 8, 9, 5, 18, 10]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 7 among pending : [22, 26, 11, 8, 9, 5, 18, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 9 with phase True at level 7

After decision at level 7
 pending : [22, 26, 11, 8, 5, 18, 10]
 solution : [0, 9]


New level: 8
 pending : [22, 26, 11, 8, 5, 18, 10]
 solution : [0, 9]


Before reduction : 
 pending  : [22, 26, 11, 8, 5, 18, 10]
 solution : [0, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 67584), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {8, 10, 11}

After reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 9]


Before reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 67584), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 67584), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 9]


Solution : [0, 9] has cost 13.


Before backtrack at level 8
 pending : [22, 26, 5, 18]
 solution : [0, 9]

After backtrack at level 8
 pending : [22, 26, 5, 18, 11, 8, 10]
 solution : [0, 9]


Invert decision for 9 at level 7


New level: 8
 pending : [22, 26, 5, 18, 11, 8, 10]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 5, 18, 11, 8, 10]
 solution : [0]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 67584), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, -1), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 26, 5, 18, 11, 8, 10]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 8 among pending : [22, 26, 5, 18, 11, 8, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, -1), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [22, 26, 5, 18, 11, 10]
 solution : [0, 8]


New level: 9
 pending : [22, 26, 5, 18, 11, 10]
 solution : [0, 8]


Before reduction : 
 pending  : [22, 26, 5, 18, 11, 10]
 solution : [0, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, 1048576), (9, -1), (10, 65536), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 67584), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {10, 11}

After reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 8]


Before reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 67584), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 67584), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 5, 18]
 solution : [0, 8]


Solution : [0, 8] has cost 13.


Before backtrack at level 9
 pending : [22, 26, 5, 18]
 solution : [0, 8]

After backtrack at level 9
 pending : [22, 26, 5, 18, 11, 10]
 solution : [0, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [22, 26, 5, 18, 11, 10]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 5, 18, 11, 10]
 solution : [0]

Essensial at level 9 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 67584), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 5, 18, 10]
 solution : [0, 11]


Before reduction : 
 pending  : [22, 26, 5, 18, 10]
 solution : [0, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 139264), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 5, 18, 10]
 solution : [0, 11]


Solution : [0, 11] has cost 13.


Before backtrack at level 9
 pending : [22, 26, 5, 18, 10]
 solution : [0, 11]

After backtrack at level 9
 pending : [22, 26, 5, 18, 10, 11]
 solution : [0]


Before backtrack at level 8
 pending : [22, 26, 5, 18, 10, 11]
 solution : [0]

After backtrack at level 8
 pending : [22, 26, 5, 18, 10, 11, 8]
 solution : [0]


Before backtrack at level 7
 pending : [22, 26, 5, 18, 10, 11, 8]
 solution : [0]

After backtrack at level 7
 pending : [22, 26, 5, 18, 10, 11, 8, 9]
 solution : [0]


Before backtrack at level 6
 pending : [22, 26, 5, 18, 10, 11, 8, 9]
 solution : [0]

After backtrack at level 6
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15]
 solution : [0]


Before backtrack at level 5
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15]
 solution : [0]

After backtrack at level 5
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0]


Before backtrack at level 4
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14]
 solution : [0]

After backtrack at level 4
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0]


Before backtrack at level 3
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17]
 solution : [0]

After backtrack at level 3
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0]


Before backtrack at level 2
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16]
 solution : [0]

After backtrack at level 2
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16, 21]
 solution : [0]


Before backtrack at level 1
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16, 21]
 solution : [0]

After backtrack at level 1
 pending : [22, 26, 5, 18, 10, 11, 8, 9, 15, 14, 17, 16, 21, 4]
 solution : [0]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 10

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=2)

invariant [def_didNotVote] didNotVote(N) = forall V. ~vote(N,V) # definition

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [0, 21] (length = 2)

invariant [invar_0] forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_21] forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 8.003 seconds

[QRM NOTE]: Time elapsed since last: 0.121 seconds

[QRM NOTE]: Peak memory: 2588859 bytes


================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall N. didNotVote(N) <-> (forall V. ~vote(N,V))) & (forall V,Q. chosenAt(Q,V) <-> (forall N. member(N,Q) -> vote(N,V))) & (forall Q1,Q2. (exists N. (member(N,Q1) & member(N,Q2)))) & (forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1) & (forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))))

[QRM NOTE]: Time elapsed since start: 10.023 seconds

[QRM NOTE]: Time elapsed since last: 2.020 seconds

[QRM NOTE]: Peak memory: 1590354 bytes


********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************

[QRM RESULT]: PASS

