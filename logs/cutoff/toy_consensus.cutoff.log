
********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_3.finite.cpp toy_consensus.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_3.finite.o toy_consensus.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 18

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 6.061 seconds

[QRM NOTE]: Time elapsed since last: 6.061 seconds

[QRM NOTE]: Peak memory: 1187134 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        94

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 84


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
predicate: decision('value',)
predicate: vote('node', 'value')
predicate: didNotVote('node',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)']
representative states : 1835435, 819627, 17830827, 1224774571, 1226871723, 16847787, 18944939, 19927979, 303531, 43435


=== State Orbit 0 =====================
size : 1
repr state: 000000000000111000000000
lex min decimal: 1835435
states:
000000000000111000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000011100000000
lex min decimal: 819627
states:
000000000000101000001000
000000000000110000000010
000000000000110000000100
000000000000110000000001
000000000000011100000000
000000000000101000100000
000000000000011001000000
000000000000101000010000
000000000000011010000000




=== State Orbit 2 =====================
size : 9
repr state: 100000000000001100100000
lex min decimal: 17830827
states:
001000000000001001001000
000010000000010010000010
000000001000100000001001
000000010000100000010010
010000000000001010010000
100000000000001100100000
000001000000010001000001
000100000000010100000100
000000100000100000100100




=== State Orbit 3 =====================
size : 3
repr state: 100100100000000100100100
lex min decimal: 1224774571
states:
100100100000000100100100
010010010000000010010010
001001001000000001001001




=== State Orbit 4 =====================
size : 3
repr state: 100100100100000100100100
lex min decimal: 1226871723
states:
001001001001000001001001
100100100100000100100100
010010010010000010010010




=== State Orbit 5 =====================
size : 18
repr state: 100000000000000100100010
lex min decimal: 16847787
states:
001000000000000001001010
100000000000000100100010
000000010000000001010010
000000010000000100010010
000000001000000100001001
000010000000000010100010
001000000000000001001100
000000100000000001100100
010000000000000010010100
000001000000000001010001
000100000000000100010100
000001000000000001100001
010000000000000010010001
000000001000000010001001
000010000000000010001010
100000000000000100100001
000000100000000010100100
000100000000000100001100




=== State Orbit 6 =====================
size : 18
repr state: 100000000100000100100010
lex min decimal: 18944939
states:
001000000001000001001010
100000000100000100100010
000000100100000001100100
000001000001000001100001
100000000100000100100001
001000000001000001001100
000000100100000010100100
000000010010000100010010
010000000010000010010100
000001000001000001010001
000100000100000100010100
000000001001000010001001
000010000010000010100010
010000000010000010010001
000100000100000100001100
000010000010000010001010
000000001001000100001001
000000010010000001010010




=== State Orbit 7 =====================
size : 9
repr state: 100000000100001100100000
lex min decimal: 19927979
states:
000001000001010001000001
001000000001001001001000
000010000010010010000010
010000000010001010010000
100000000100001100100000
000000100100100000100100
000100000100010100000100
000000001001100000001001
000000010010100000010010




=== State Orbit 8 =====================
size : 18
repr state: 000000000000001100010000
lex min decimal: 303531
states:
000000000000001100010000
000000000000001010001000
000000000000100000100001
000000000000010001000100
000000000000010100000001
000000000000100000010001
000000000000010010000100
000000000000010001000010
000000000000001001010000
000000000000001001100000
000000000000010010000001
000000000000001010100000
000000000000100000100010
000000000000100000001100
000000000000100000010100
000000000000010100000010
000000000000100000001010
000000000000001100001000




=== State Orbit 9 =====================
size : 6
repr state: 000000000000000100010001
lex min decimal: 43435
states:
000000000000000001010100
000000000000000010100001
000000000000000001100010
000000000000000010001100
000000000000000100001010
000000000000000100010001



[QRM NOTE]: Time elapsed since start: 6.236 seconds

[QRM NOTE]: Time elapsed since last: 0.175 seconds

[QRM NOTE]: Peak memory: 1249852 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.239 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 223876 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

======================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : --1------------1--------
9     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
10     : -1-------------1--------
10     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
11     : --1-------------1-------
11     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
12     : 1---------------1-------
12     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
13     : -1---------------1------
13     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
14     : 1----------------1------
14     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
15     : -----1---------1--------
15     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
16     : ----1----------1--------
16     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
17     : -----1----------1-------
17     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
18     : ---1------------1-------
18     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
19     : ----1------------1------
19     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
20     : ---1-------------1------
20     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
21     : --1---------------1-----
21     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
22     : -1----------------1-----
22     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
23     : --1----------------1----
23     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
24     : 1------------------1----
24     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
25     : -1------------------1---
25     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
26     : 1-------------------1---
26     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
27     : --------1---------1-----
27     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
28     : -------1----------1-----
28     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
29     : --------1----------1----
29     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
30     : ------1------------1----
30     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
31     : -------1------------1---
31     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
32     : ------1-------------1---
32     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
33     : -----1---------------1--
33     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
34     : ----1----------------1--
34     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
35     : -----1----------------1-
35     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
36     : ---1------------------1-
36     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
37     : ----1------------------1
37     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
38     : ---1-------------------1
38     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
39     : --------1------------1--
39     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
40     : -------1-------------1--
40     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
41     : --------1-------------1-
41     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
42     : ------1---------------1-
42     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
43     : -------1---------------1
43     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
44     : ------1----------------1
44     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : ------------1--1--------
45     : ['didNotVote(node0)', 'vote(node0,value0)']
46     : ------------1---1-------
46     : ['didNotVote(node0)', 'vote(node0,value1)']
47     : ------------1----1------
47     : ['didNotVote(node0)', 'vote(node0,value2)']
48     : -------------1----1-----
48     : ['didNotVote(node1)', 'vote(node1,value0)']
49     : -------------1-----1----
49     : ['didNotVote(node1)', 'vote(node1,value1)']
50     : -------------1------1---
50     : ['didNotVote(node1)', 'vote(node1,value2)']
51     : --------------1------1--
51     : ['didNotVote(node2)', 'vote(node2,value0)']
52     : --------------1-------1-
52     : ['didNotVote(node2)', 'vote(node2,value1)']
53     : --------------1--------1
53     : ['didNotVote(node2)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : -------1-----1----------
54     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node1)']
55     : --------1----1----------
55     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node1)']
56     : ------1------1----------
56     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node1)']
57     : -------1------1---------
57     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node2)']
58     : --------1-----1---------
58     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node2)']
59     : ------1-------1---------
59     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node2)']
60     : ----1-------1-----------
60     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node0)']
61     : -----1------1-----------
61     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node0)']
62     : ---1--------1-----------
62     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node0)']
63     : ----1---------1---------
63     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node2)']
64     : -----1--------1---------
64     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node2)']
65     : ---1----------1---------
65     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node2)']
66     : -1----------1-----------
66     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node0)']
67     : --1---------1-----------
67     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node0)']
68     : 1-----------1-----------
68     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
69     : -1-----------1----------
69     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node1)']
70     : --1----------1----------
70     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node1)']
71     : 1------------1----------
71     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : ------1---1-------------
72     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
73     : ------1----1------------
73     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
74     : -------1-1--------------
74     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
75     : -------1---1------------
75     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
76     : --------11--------------
76     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
77     : --------1-1-------------
77     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
78     : ---1------1-------------
78     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
79     : ---1-------1------------
79     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
80     : ----1----1--------------
80     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
81     : ----1------1------------
81     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
82     : -----1---1--------------
82     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
83     : -----1----1-------------
83     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
84     : 1---------1-------------
84     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
85     : 1----------1------------
85     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
86     : -1-------1--------------
86     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
87     : -1---------1------------
87     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
88     : --1------1--------------
88     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
89     : --1-------1-------------
89     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
90 (*) : ----------11------------
90     : ['decision(value1)', 'decision(value2)']
91     : ---------1-1------------
91     : ['decision(value0)', 'decision(value2)']
92     : ---------11-------------
92     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
93 (*) : -----1-----------0------
93     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
94     : ----1-----------0-------
94     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
95     : ---1-----------0--------
95     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
96     : --1--------------0------
96     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
97     : -1--------------0-------
97     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
98     : 1--------------0--------
98     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
99     : --------1-----------0---
99     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
100     : -------1-----------0----
100     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
101     : ------1-----------0-----
101     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
102     : --1-----------------0---
102     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
103     : -1-----------------0----
103     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
104     : 1-----------------0-----
104     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
105     : --------1--------------0
105     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
106     : -------1--------------0-
106     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
107     : ------1--------------0--
107     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
108     : -----1-----------------0
108     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
109     : ----1-----------------0-
109     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
110     : ---1-----------------0--
110     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 27
num_suborbits: 2
111 (*) : -----1-1----------------
111     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
112     : ----1---1---------------
112     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
113     : -----11-----------------
113     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
114     : ---1----1---------------
114     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
115     : ----1-1-----------------
115     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
116     : ---1---1----------------
116     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
117     : --1----1----------------
117     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
118     : -1------1---------------
118     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
119     : --1---1-----------------
119     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
120     : 1-------1---------------
120     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
121     : -1----1-----------------
121     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
122     : 1------1----------------
122     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
123     : --1-1-------------------
123     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
124     : -1---1------------------
124     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
125     : --11--------------------
125     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
126     : 1----1------------------
126     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
127     : -1-1--------------------
127     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
128     : 1---1-------------------
128     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
129 (*) : ----11------------------
129     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
130     : ---1-1------------------
130     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
131     : ---11-------------------
131     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
132     : -11---------------------
132     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
133     : 1-1---------------------
133     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
134     : 11----------------------
134     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
135     : -------11---------------
135     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
136     : ------1-1---------------
136     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
137     : ------11----------------
137     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 36
num_suborbits: 1
138 (*) : -----------1----1---0---
138     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
139     : ----------1------1-0----
139     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
140     : -----------1---1----0---
140     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
141     : ---------1-------10-----
141     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
142     : ----------1----1---0----
142     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
143     : ---------1------1-0-----
143     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
144     : -----------1----1------0
144     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
145     : ----------1------1----0-
145     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
146     : -----------1---1-------0
146     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
147     : ---------1-------1---0--
147     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
148     : ----------1----1------0-
148     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
149     : ---------1------1----0--
149     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
150     : -----------1-----0-1----
150     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
151     : ----------1-----0---1---
151     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
152     : -----------1-----01-----
152     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
153     : ---------1-----0----1---
153     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
154     : ----------1-----0-1-----
154     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
155     : ---------1-----0---1----
155     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
156     : -----------1-------1---0
156     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
157     : ----------1---------1-0-
157     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
158     : -----------1------1----0
158     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
159     : ---------1----------10--
159     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
160     : ----------1-------1---0-
160     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
161     : ---------1---------1-0--
161     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
162     : -----------1-----0----1-
162     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
163     : ----------1-----0------1
163     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
164     : -----------1-----0---1--
164     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
165     : ---------1-----0-------1
165     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
166     : ----------1-----0----1--
166     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
167     : ---------1-----0------1-
167     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
168     : -----------1--------0-1-
168     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
169     : ----------1--------0---1
169     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
170     : -----------1--------01--
170     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
171     : ---------1--------0----1
171     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
172     : ----------1--------0-1--
172     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
173     : ---------1--------0---1-
173     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
174 (*) : --------0--1----1-------
174     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
175     : -------0--1------1------
175     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
176     : --------0--1---1--------
176     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
177     : ------0--1-------1------
177     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
178     : -------0--1----1--------
178     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
179     : ------0--1------1-------
179     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
180     : -----0-----1-------1----
180     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
181     : ----0-----1---------1---
181     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
182     : -----0-----1------1-----
182     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
183     : ---0-----1----------1---
183     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
184     : ----0-----1-------1-----
184     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
185     : ---0-----1---------1----
185     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
186     : --0--------1----------1-
186     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
187     : -0--------1------------1
187     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
188     : --0--------1---------1--
188     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
189     : 0--------1-------------1
189     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
190     : -0--------1----------1--
190     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
191     : 0--------1------------1-
191     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 2
192 (*) : -----------1----1----1--
192     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
193     : ----------1------1---1--
193     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
194     : -----------1---1------1-
194     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
195     : ---------1-------1----1-
195     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
196     : ----------1----1-------1
196     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
197     : ---------1------1------1
197     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
198     : -----------1----1-1-----
198     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
199     : ----------1------11-----
199     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
200     : -----------1---1---1----
200     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
201     : ---------1-------1-1----
201     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
202     : ----------1----1----1---
202     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
203     : ---------1------1---1---
203     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
204     : -----------1-------1-1--
204     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
205     : ----------1---------11--
205     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
206     : -----------1------1---1-
206     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
207     : ---------1----------1-1-
207     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
208     : ----------1-------1----1
208     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
209     : ---------1---------1---1
209     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
273 (*) : ---------1------1--1----
273     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
274     : ---------1-------1--1---
274     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
275     : ----------1----1--1-----
275     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
276     : ----------1------1--1---
276     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
277     : -----------1---1--1-----
277     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
278     : -----------1----1--1----
278     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
279     : ---------1------1-----1-
279     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
280     : ---------1-------1-----1
280     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
281     : ----------1----1-----1--
281     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
282     : ----------1------1-----1
282     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
283     : -----------1---1-----1--
283     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
284     : -----------1----1-----1-
284     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
285     : ---------1---------1--1-
285     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
286     : ---------1----------1--1
286     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
287     : ----------1-------1--1--
287     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
288     : ----------1---------1--1
288     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
289     : -----------1------1--1--
289     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
290     : -----------1-------1--1-
290     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
210 (*) : -----------1-1--1-------
210     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
211     : ----------1--1---1------
211     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
212     : -----------1-1-1--------
212     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
213     : ---------1---1---1------
213     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
214     : ----------1--1-1--------
214     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
215     : ---------1---1--1-------
215     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
216     : -----------1--1-1-------
216     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
217     : ----------1---1--1------
217     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
218     : -----------1--11--------
218     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
219     : ---------1----1--1------
219     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
220     : ----------1---11--------
220     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
221     : ---------1----1-1-------
221     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
222     : -----------11------1----
222     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
223     : ----------1-1-------1---
223     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
224     : -----------11-----1-----
224     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
225     : ---------1--1-------1---
225     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
226     : ----------1-1-----1-----
226     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
227     : ---------1--1------1----
227     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
228     : -----------1--1----1----
228     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
229     : ----------1---1-----1---
229     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
230     : -----------1--1---1-----
230     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
231     : ---------1----1-----1---
231     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
232     : ----------1---1---1-----
232     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
233     : ---------1----1----1----
233     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
234     : -----------11---------1-
234     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
235     : ----------1-1----------1
235     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
236     : -----------11--------1--
236     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
237     : ---------1--1----------1
237     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
238     : ----------1-1--------1--
238     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
239     : ---------1--1---------1-
239     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
240     : -----------1-1--------1-
240     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
241     : ----------1--1---------1
241     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
242     : -----------1-1-------1--
242     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
243     : ---------1---1---------1
243     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
244     : ----------1--1-------1--
244     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
245     : ---------1---1--------1-
245     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 18
num_suborbits: 1
246 (*) : -0-----1--------1-------
246     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
247     : --0-----1--------1------
247     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
248     : 0-----1--------1--------
248     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
249     : ----0--1--------1-------
249     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
250     : -----0--1--------1------
250     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
251     : ---0--1--------1--------
251     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
252     : -0--1--------------1----
252     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
253     : --0--1--------------1---
253     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
254     : 0--1--------------1-----
254     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
255     : ----1--0-----------1----
255     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
256     : -----1--0-----------1---
256     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
257     : ---1--0-----------1-----
257     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
258     : -1--0-----------------1-
258     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
259     : --1--0-----------------1
259     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
260     : 1--0-----------------1--
260     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
261     : -1-----0--------------1-
261     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
262     : --1-----0--------------1
262     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
263     : 1-----0--------------1--
263     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
264 (*) : -0--------------1--1----
264     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
265     : --0--------------1--1---
265     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
266     : 0--------------1--1-----
266     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
267     : ----0-----------1-----1-
267     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
268     : -----0-----------1-----1
268     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
269     : ---0-----------1-----1--
269     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
270     : -------0-----------1--1-
270     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
271     : --------0-----------1--1
271     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
272     : ------0-----------1--1--
272     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
291 (*) : --0--1--1---------------
291     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
292     : -0--1--1----------------
292     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
293     : 0--1--1-----------------
293     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
294     : --1--0--1---------------
294     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
295     : -1--0--1----------------
295     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
296     : 1--0--1-----------------
296     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
297     : --1--1--0---------------
297     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
298     : -1--1--0----------------
298     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
299     : 1--1--0-----------------
299     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : ----------1-11----------
300     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
301     : -----------111----------
301     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
302     : ---------1--11----------
302     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
303     : ----------1-1-1---------
303     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
304     : -----------11-1---------
304     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
305     : ---------1--1-1---------
305     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
306     : ----------1--11---------
306     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
307     : -----------1-11---------
307     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
308     : ---------1---11---------
308     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----0-----1--1----------
309     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
310     : -----0-----1-1----------
310     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
311     : ---0-----1---1----------
311     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
312     : -0--------1---1---------
312     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
313     : --0--------1--1---------
313     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
314     : 0--------1----1---------
314     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
315     : -------0--1-1-----------
315     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
316     : --------0--11-----------
316     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
317     : ------0--1--1-----------
317     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
318 (*) : ----------1--1--0-------
318     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
319     : -----------1-1---0------
319     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
320     : ---------1---1-0--------
320     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
321     : ----------1---1-0-------
321     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
322     : -----------1--1--0------
322     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
323     : ---------1----10--------
323     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
324     : ----------1-1------0----
324     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
325     : -----------11-------0---
325     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
326     : ---------1--1-----0-----
326     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
327     : ----------1---1----0----
327     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
328     : -----------1--1-----0---
328     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
329     : ---------1----1---0-----
329     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
330     : ----------1-1---------0-
330     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
331     : -----------11----------0
331     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
332     : ---------1--1--------0--
332     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
333     : ----------1--1--------0-
333     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
334     : -----------1-1---------0
334     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
335     : ---------1---1-------0--
335     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : -0--------1-----------0-
336     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
337     : --0--------1-----------0
337     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
338     : 0--------1-----------0--
338     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
339     : ----0-----1--------0----
339     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
340     : -----0-----1--------0---
340     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
341     : ---0-----1--------0-----
341     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
342     : -------0--1-----0-------
342     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
343     : --------0--1-----0------
343     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
344     : ------0--1-----0--------
344     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ----------1-----0-----0-
345     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
346     : -----------1-----0-----0
346     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
347     : ---------1-----0-----0--
347     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
348     : ----------1-----0--0----
348     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
349     : -----------1-----0--0---
349     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
350     : ---------1-----0--0-----
350     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
351     : ----------1--------0--0-
351     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
352     : -----------1--------0--0
352     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
353     : ---------1--------0--0--
353     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : --------------0------000
354     : ['~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
355     : -------------0----000---
355     : ['~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
356     : ------------0--000------
356     : ['~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : -0--0-----1-----1-------
357     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
358     : --0--0-----1-----1------
358     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
359     : 0--0-----1-----1--------
359     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
360     : -0-----0--1--------1----
360     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
361     : --0-----0--1--------1---
361     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
362     : 0-----0--1--------1-----
362     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : ----0--0--1-----------1-
363     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
364     : -----0--0--1-----------1
364     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
365     : ---0--0--1-----------1--
365     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : -0--0--0--1-------------
366     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
367     : --0--0--0--1------------
367     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
368     : 0--0--0--1--------------
368     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 1
369 (*) : -0--1--------0----0-0---
369     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
370     : --0--1-------0----00----
370     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
371     : 0--1---------0-----00---
371     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
372     : -1--0---------0------0-0
372     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
373     : --1--0--------0------00-
373     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
374     : 1--0----------0-------00
374     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
375     : -0-----1----0--0-0------
375     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
376     : --0-----1---0--00-------
376     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
377     : 0-----1-----0---00------
377     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
378     : -1-----0------0------0-0
378     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
379     : --1-----0-----0------00-
379     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
380     : 1-----0-------0-------00
380     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
381     : ----0--1----0--0-0------
381     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
382     : -----0--1---0--00-------
382     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
383     : ---0--1-----0---00------
383     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
384     : ----1--0-----0----0-0---
384     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
385     : -----1--0----0----00----
385     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
386     : ---1--0------0-----00---
386     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 1
387 (*) : --------0-----0-----100-
387     : ['vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
388     : -------0------0----1-0-0
388     : ['vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
389     : ------0-------0---1---00
389     : ['vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
390     : --------0----0----00---1
390     : ['vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
391     : -------0-----0----0-0-1-
391     : ['vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
392     : ------0------0-----001--
392     : ['vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
393     : -----0--------0--1---00-
393     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
394     : ----0---------0-1----0-0
394     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
395     : ---0----------01------00
395     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
396     : -----0------0--00------1
396     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
397     : ----0-------0--0-0----1-
397     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
398     : ---0--------0---00---1--
398     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
399     : --0----------0---100----
399     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
400     : -0-----------0--1-0-0---
400     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
401     : 0------------0-1---00---
401     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
402     : --0---------0--00---1---
402     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
403     : -0----------0--0-0-1----
403     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
404     : 0-----------0---001-----
404     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 9
num_suborbits: 1
405 (*) : 0--0-----1--0---00------
405     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
406     : -0--0-----1-0--0-0------
406     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
407     : --0--0-----10--00-------
407     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
408     : 0-----0--1---0-----00---
408     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
409     : -0-----0--1--0----0-0---
409     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : --0-----0--1-0----00----
410     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
411     : ---0--0--1----0-------00
411     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
412     : ----0--0--1---0------0-0
412     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
413     : -----0--0--1--0------00-
413     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 18
num_suborbits: 1
414 (*) : --00--------0---0---11--
414     : ['vote(node1,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
415     : -0-0--------0----0-1-1--
415     : ['vote(node1,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value2)']
416     : --0-0-------0--0----1-1-
416     : ['vote(node1,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
417     : 0---0-------0----01---1-
417     : ['vote(node1,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value2)']
418     : -0---0------0--0---1---1
418     : ['vote(node1,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)']
419     : 0----0------0---0-1----1
419     : ['vote(node1,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value1)']
420     : --0---0------0---1-0-1--
420     : ['vote(node0,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
421     : -0----0------0--1---01--
421     : ['vote(node0,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value2)']
422     : --0----0-----0---10---1-
422     : ['vote(node0,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
423     : 0------0-----0-1----0-1-
423     : ['vote(node0,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value2)']
424     : -0------0----0--1-0----1
424     : ['vote(node0,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)']
425     : 0-------0----0-1---0---1
425     : ['vote(node0,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value1)']
426     : -----00-------0--11---0-
426     : ['vote(node0,value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
427     : ----0-0-------0-1-1----0
427     : ['vote(node0,value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value2)']
428     : -----0-0------0--1-1-0--
428     : ['vote(node0,value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
429     : ---0---0------01---1---0
429     : ['vote(node0,value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value2)']
430     : ----0---0-----0-1---10--
430     : ['vote(node0,value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)']
431     : ---0----0-----01----1-0-
431     : ['vote(node0,value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
432 (*) : --------0----00---00-00-
432     : ['~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
433     : -------0-----00---0-00-0
433     : ['~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
434     : ------0------00----00-00
434     : ['~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
435     : -----0------0-000----00-
435     : ['~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
436     : ----0-------0-00-0---0-0
436     : ['~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
437     : ---0--------0-0-00----00
437     : ['~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
438     : --0---------00-00-00----
438     : ['~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
439     : -0----------00-0-00-0---
439     : ['~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
440     : 0-----------00--00-00---
440     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 36
num_suborbits: 1
441 (*) : -0-0--------00---00-01--
441     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
442     : --00--------00--0-00-1--
442     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
443     : 0---0-------00---0-00-1-
443     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
444     : --0-0-------00-0--00--1-
444     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
445     : 0----0------00--0--00--1
445     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
446     : -0---0------00-0--0-0--1
446     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
447     : 0---0-------0-0--01--0-0
447     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
448     : 0----0------0-0-0-1--00-
448     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
449     : -0-0--------0-0--0-1--00
449     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
450     : -0---0------0-00---1-00-
450     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
451     : --00--------0-0-0---1-00
451     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
452     : --0-0-------0-00----10-0
452     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
453     : -0----0-----00-0-0--01--
453     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
454     : --0---0-----00-00--0-1--
454     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
455     : 0------0----00--00--0-1-
455     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
456     : --0----0----00-00-0---1-
456     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
457     : 0-------0---00--00-0---1
457     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
458     : -0------0---00-0-00----1
458     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
459     : 0------0-----001----00-0
459     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
460     : 0-------0----001---0-00-
460     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
461     : -0----0------00-1---0-00
461     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
462     : -0------0----00-1-0--00-
462     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
463     : --0---0------00--1-0--00
463     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
464     : --0----0-----00--10--0-0
464     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
465     : ----0-0-----0-00-01----0
465     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
466     : -----00-----0-000-1---0-
466     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
467     : ---0---0----0-0-00-1---0
467     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
468     : -----0-0----0-000--1-0--
468     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
469     : ---0----0---0-0-00--1-0-
469     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
470     : ----0---0---0-00-0--10--
470     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
471     : ---0---0-----001--0-0--0
471     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
472     : ---0----0----001--00--0-
472     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
473     : ----0-0------00-1--00--0
473     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
474     : ----0---0----00-1-00-0--
474     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
475     : -----00------00--1-00-0-
475     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
476     : -----0-0-----00--10-00--
476     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 18
num_suborbits: 1
477 (*) : -0-0--0-----00---0--01--
477     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
478     : --00--0-----00--0--0-1--
478     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
479     : 0---0--0----00---0--0-1-
479     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
480     : --0-0--0----00-0--0---1-
480     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
481     : 0----0--0---00--0--0---1
481     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
482     : -0---0--0---00-0--0----1
482     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
483     : 0---0-0-----0-0--01----0
483     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
484     : 0----00-----0-0-0-1---0-
484     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
485     : -0-0---0----0-0--0-1---0
485     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
486     : -0---0-0----0-00---1-0--
486     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
487     : --00----0---0-0-0---1-0-
487     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
488     : --0-0---0---0-00----10--
488     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
489     : 0--0---0-----001----0--0
489     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
490     : 0--0----0----001---0--0-
490     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
491     : -0--0-0------00-1---0--0
491     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
492     : -0--0---0----00-1-0--0--
492     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
493     : --0--00------00--1-0--0-
493     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
494     : --0--0-0-----00--10--0--
494     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 1
495 (*) : --0-0--0----0000--0--0-0
495     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
496     : -0---0--0---0000--0--00-
496     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
497     : --00--0-----000-0--0--00
497     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
498     : 0----0--0---000-0--0-00-
498     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
499     : -0-0--0-----000--0--0-00
499     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
500     : 0---0--0----000--0--00-0
500     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
501     : -0---0-0----0000--0-00--
501     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
502     : --0-0---0---0000--00-0--
502     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
503     : 0----00-----000-0--00-0-
503     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
504     : --00----0---000-0-00--0-
504     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
505     : 0---0-0-----000--0-00--0
505     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
506     : -0-0---0----000--00-0--0
506     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
507     : -0--0---0---0000-00--0--
507     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
508     : --0--0-0----00000-0--0--
508     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
509     : 0--0----0---000-00-0--0-
509     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
510     : --0--00-----00000--0--0-
510     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
511     : 0--0---0----000-00--0--0
511     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
512     : -0--0-0-----0000-0--0--0
512     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 1
513 (*) : --0-0-------0000--00-0-0
513     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
514     : -0---0------0000--0-000-
514     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
515     : --00--------000-0-00--00
515     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
516     : 0----0------000-0--0000-
516     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
517     : -0-0--------000--00-0-00
517     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
518     : 0---0-------000--0-000-0
518     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
519     : --0----0----00000-0--0-0
519     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
520     : -0------0---0000-00--00-
520     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
521     : --0---0-----00000--0--00
521     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
522     : 0-------0---000-00-0-00-
522     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
523     : -0----0-----0000-0--0-00
523     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
524     : 0------0----000-00--00-0
524     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
525     : -----0-0----00000-0-00--
525     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
526     : ----0---0---0000-000-0--
526     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
527     : -----00-----00000--00-0-
527     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
528     : ---0----0---000-0000--0-
528     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
529     : ----0-0-----0000-0-00--0
529     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
530     : ---0---0----000-000-0--0
530     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
531 (*) : -00-00-00---0000--0--0--
531     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
532     : 0-00-00-0---000-0--0--0-
532     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
533     : 00-00-00----000--0--0--0
533     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 6.468 seconds

[QRM NOTE]: Time elapsed since last: 0.229 seconds

[QRM NOTE]: Peak memory: 1929002 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================

definition primes: {32, 2, 3, 6, 12, 13, 14, 20, 23, 24, 26, 27, 28, 29, 30, 31}


New level: 0
 pending : [0, 1, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : []


Before reduction : 
 pending  : [0, 1, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : []

Essensial at level 0 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, 0), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : {1, 7}

After reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : [0]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, 0), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : [0]

[QRM NOTE]: Time elapsed since start: 6.549 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 855830 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', 'vote(node0,value1)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', 'vote(node0,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : ------1---1-------------
72     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
73     : ------1----1------------
73     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
74     : -------1-1--------------
74     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
75     : -------1---1------------
75     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
76     : --------11--------------
76     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
77     : --------1-1-------------
77     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
78     : ---1------1-------------
78     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
79     : ---1-------1------------
79     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
80     : ----1----1--------------
80     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
81     : ----1------1------------
81     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
82     : -----1---1--------------
82     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
83     : -----1----1-------------
83     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
84     : 1---------1-------------
84     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
85     : 1----------1------------
85     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
86     : -1-------1--------------
86     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
87     : -1---------1------------
87     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
88     : --1------1--------------
88     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
89     : --1-------1-------------
89     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['chosenAt(QUORUM0,VALUE0)', 'decision(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,VALUE1. ~chosenAt(QUORUM0,VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
90 (*) : ----------11------------
90     : ['decision(value1)', 'decision(value2)']
91     : ---------1-1------------
91     : ['decision(value0)', 'decision(value2)']
92     : ---------11-------------
92     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'decision(value2)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

part_sig: ('value$0$decision$0$0 | value$0$decision$0$1',)


---------- SigGenerator ----------

terms:  ['decision(value1)', 'decision(value2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decision': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'decision(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1. ~decision(VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 8 =====================
size : 36
num_suborbits: 1
138 (*) : -----------1----1---0---
138     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
139     : ----------1------1-0----
139     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
140     : -----------1---1----0---
140     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
141     : ---------1-------10-----
141     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
142     : ----------1----1---0----
142     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
143     : ---------1------1-0-----
143     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
144     : -----------1----1------0
144     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
145     : ----------1------1----0-
145     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
146     : -----------1---1-------0
146     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
147     : ---------1-------1---0--
147     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
148     : ----------1----1------0-
148     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
149     : ---------1------1----0--
149     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
150     : -----------1-----0-1----
150     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
151     : ----------1-----0---1---
151     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
152     : -----------1-----01-----
152     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
153     : ---------1-----0----1---
153     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
154     : ----------1-----0-1-----
154     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
155     : ---------1-----0---1----
155     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
156     : -----------1-------1---0
156     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
157     : ----------1---------1-0-
157     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
158     : -----------1------1----0
158     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
159     : ---------1----------10--
159     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
160     : ----------1-------1---0-
160     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
161     : ---------1---------1-0--
161     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
162     : -----------1-----0----1-
162     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
163     : ----------1-----0------1
163     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
164     : -----------1-----0---1--
164     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
165     : ---------1-----0-------1
165     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
166     : ----------1-----0----1--
166     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
167     : ---------1-----0------1-
167     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
168     : -----------1--------0-1-
168     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
169     : ----------1--------0---1
169     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
170     : -----------1--------01--
170     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
171     : ---------1--------0----1
171     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
172     : ----------1--------0-1--
172     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
173     : ---------1--------0---1-
173     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']

sign_func_name2args: {'0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'vote(NODE0,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0,VALUE1. vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
174 (*) : --------0--1----1-------
174     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
175     : -------0--1------1------
175     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
176     : --------0--1---1--------
176     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
177     : ------0--1-------1------
177     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
178     : -------0--1----1--------
178     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
179     : ------0--1------1-------
179     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
180     : -----0-----1-------1----
180     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
181     : ----0-----1---------1---
181     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
182     : -----0-----1------1-----
182     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
183     : ---0-----1----------1---
183     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
184     : ----0-----1-------1-----
184     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
185     : ---0-----1---------1----
185     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
186     : --0--------1----------1-
186     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
187     : -0--------1------------1
187     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
188     : --0--------1---------1--
188     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
189     : 0--------1-------------1
189     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
190     : -0--------1----------1--
190     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
191     : 0--------1------------1-
191     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value2)', 'decision(value2)', 'vote(node0,value1)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value2)', 'decision(value2)', 'vote(node0,value1)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)', 'vote(NODE0,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,NODE0,VALUE1. member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 2
192 (*) : -----------1----1----1--
192     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
193     : ----------1------1---1--
193     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
194     : -----------1---1------1-
194     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
195     : ---------1-------1----1-
195     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
196     : ----------1----1-------1
196     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
197     : ---------1------1------1
197     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
198     : -----------1----1-1-----
198     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
199     : ----------1------11-----
199     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
200     : -----------1---1---1----
200     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
201     : ---------1-------1-1----
201     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
202     : ----------1----1----1---
202     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
203     : ---------1------1---1---
203     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
204     : -----------1-------1-1--
204     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
205     : ----------1---------11--
205     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
206     : -----------1------1---1-
206     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
207     : ---------1----------1-1-
207     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
208     : ----------1-------1----1
208     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
209     : ---------1---------1---1
209     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
273 (*) : ---------1------1--1----
273     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
274     : ---------1-------1--1---
274     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
275     : ----------1----1--1-----
275     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
276     : ----------1------1--1---
276     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
277     : -----------1---1--1-----
277     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
278     : -----------1----1--1----
278     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
279     : ---------1------1-----1-
279     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
280     : ---------1-------1-----1
280     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
281     : ----------1----1-----1--
281     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
282     : ----------1------1-----1
282     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
283     : -----------1---1-----1--
283     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
284     : -----------1----1-----1-
284     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
285     : ---------1---------1--1-
285     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
286     : ---------1----------1--1
286     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
287     : ----------1-------1--1--
287     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
288     : ----------1---------1--1
288     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
289     : -----------1------1--1--
289     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
290     : -----------1-------1--1-
290     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE1,VALUE2)', 'vote(NODE0,VALUE1)', 'decision(VALUE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall VALUE2,NODE1,NODE0,VALUE0,VALUE1. ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2 | VALUE0 = VALUE1))


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
210 (*) : -----------1-1--1-------
210     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
211     : ----------1--1---1------
211     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
212     : -----------1-1-1--------
212     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
213     : ---------1---1---1------
213     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
214     : ----------1--1-1--------
214     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
215     : ---------1---1--1-------
215     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
216     : -----------1--1-1-------
216     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
217     : ----------1---1--1------
217     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
218     : -----------1--11--------
218     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
219     : ---------1----1--1------
219     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
220     : ----------1---11--------
220     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
221     : ---------1----1-1-------
221     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
222     : -----------11------1----
222     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
223     : ----------1-1-------1---
223     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
224     : -----------11-----1-----
224     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
225     : ---------1--1-------1---
225     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
226     : ----------1-1-----1-----
226     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
227     : ---------1--1------1----
227     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
228     : -----------1--1----1----
228     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
229     : ----------1---1-----1---
229     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
230     : -----------1--1---1-----
230     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
231     : ---------1----1-----1---
231     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
232     : ----------1---1---1-----
232     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
233     : ---------1----1----1----
233     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
234     : -----------11---------1-
234     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
235     : ----------1-1----------1
235     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
236     : -----------11--------1--
236     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
237     : ---------1--1----------1
237     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
238     : ----------1-1--------1--
238     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
239     : ---------1--1---------1-
239     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
240     : -----------1-1--------1-
240     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
241     : ----------1--1---------1
241     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
242     : -----------1-1-------1--
242     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
243     : ---------1---1---------1
243     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
244     : ----------1--1-------1--
244     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
245     : ---------1---1--------1-
245     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']

sign_func_name2args: {'0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$0$vote$0$0', 'value$0$decision$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$0$vote$0': [node$0$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$0$vote$0': node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'vote(NODE1,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0,VALUE1. ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : ----------1-11----------
300     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
301     : -----------111----------
301     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
302     : ---------1--11----------
302     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
303     : ----------1-1-1---------
303     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
304     : -----------11-1---------
304     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
305     : ---------1--1-1---------
305     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
306     : ----------1--11---------
306     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
307     : -----------1-11---------
307     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
308     : ---------1---11---------
308     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$didNotVote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

part_sig: ('node$0$didNotVote$0$0 | node$0$didNotVote$0$1', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'didNotVote(NODE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0. ~didNotVote(NODE0) | ~didNotVote(NODE1) | ~decision(VALUE0) | NODE0 = NODE1


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----0-----1--1----------
309     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
310     : -----0-----1-1----------
310     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
311     : ---0-----1---1----------
311     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
312     : -0--------1---1---------
312     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
313     : --0--------1--1---------
313     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
314     : 0--------1----1---------
314     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
315     : -------0--1-1-----------
315     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
316     : --------0--11-----------
316     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
317     : ------0--1--1-----------
317     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'didNotVote(node1)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

part_sig: ('node$0$didNotVote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'didNotVote(node1)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$didNotVote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0; node$1$member$0': [node$0$didNotVote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$didNotVote$0; node$1$member$0': node$0$didNotVote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', '~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,NODE0. ~didNotVote(NODE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
318 (*) : ----------1--1--0-------
318     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
319     : -----------1-1---0------
319     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
320     : ---------1---1-0--------
320     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
321     : ----------1---1-0-------
321     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
322     : -----------1--1--0------
322     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
323     : ---------1----10--------
323     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
324     : ----------1-1------0----
324     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
325     : -----------11-------0---
325     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
326     : ---------1--1-----0-----
326     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
327     : ----------1---1----0----
327     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
328     : -----------1--1-----0---
328     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
329     : ---------1----1---0-----
329     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
330     : ----------1-1---------0-
330     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
331     : -----------11----------0
331     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
332     : ---------1--1--------0--
332     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
333     : ----------1--1--------0-
333     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
334     : -----------1-1---------0
334     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
335     : ---------1---1-------0--
335     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'didNotVote(NODE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0. vote(NODE1,VALUE0) | ~didNotVote(NODE0) | ~decision(VALUE0) | NODE0 = NODE1


=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : -0--------1-----------0-
336     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
337     : --0--------1-----------0
337     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
338     : 0--------1-----------0--
338     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
339     : ----0-----1--------0----
339     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
340     : -----0-----1--------0---
340     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
341     : ---0-----1--------0-----
341     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
342     : -------0--1-----0-------
342     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
343     : --------0--1-----0------
343     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
344     : ------0--1-----0--------
344     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', '~vote(NODE0,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,NODE0. member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ----------1-----0-----0-
345     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
346     : -----------1-----0-----0
346     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
347     : ---------1-----0-----0--
347     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
348     : ----------1-----0--0----
348     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
349     : -----------1-----0--0---
349     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
350     : ---------1-----0--0-----
350     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
351     : ----------1--------0--0-
351     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
352     : -----------1--------0--0
352     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
353     : ---------1--------0--0--
353     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', '~vote(NODE0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0. vote(NODE1,VALUE0) | vote(NODE0,VALUE0) | ~decision(VALUE0) | NODE0 = NODE1


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : -0--0-----1-----1-------
357     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
358     : --0--0-----1-----1------
358     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
359     : 0--0-----1-----1--------
359     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
360     : -0-----0--1--------1----
360     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
361     : --0-----0--1--------1---
361     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
362     : 0-----0--1--------1-----
362     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : ----0--0--1-----------1-
363     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
364     : -----0--0--1-----------1
364     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
365     : ---0--0--1-----------1--
365     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'vote(node0,value1)', 'member(node0,quorum__node0_node1)', 'member(node0,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0, value$0$vote$1$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'vote(node0,value1)', 'member(node0,quorum__node0_node1)', 'member(node0,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~chosenAt(QUORUM1,VALUE0)', 'decision(VALUE0)', 'member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)', 'member(NODE0,QUORUM1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,NODE0,QUORUM1. ~vote(NODE0,VALUE0) | chosenAt(QUORUM1,VALUE0) | ~decision(VALUE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM1) | QUORUM0 = QUORUM1


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : -0--0--0--1-------------
366     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
367     : --0--0--0--1------------
367     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
368     : 0--0--0--1--------------
368     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))


=== Prime Orbit 25 =====================
size : 9
num_suborbits: 1
405 (*) : 0--0-----1--0---00------
405     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
406     : -0--0-----1-0--0-0------
406     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
407     : --0--0-----10--00-------
407     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
408     : 0-----0--1---0-----00---
408     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
409     : -0-----0--1--0----0-0---
409     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : --0-----0--1-0----00----
410     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
411     : ---0--0--1----0-------00
411     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
412     : ----0--0--1---0------0-0
412     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
413     : -----0--0--1--0------00-
413     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', 'decision(value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)', 'member(node0,quorum__node0_node1)', 'member(node0,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$didNotVote$0$0, node$1$vote$0$0, node$1$vote$0$1, node$0$member$0$0, node$0$member$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', 'decision(value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)', 'member(node0,quorum__node0_node1)', 'member(node0,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '1$didNotVote': 1, '1$vote': 2, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~didNotVote(NODE0)', '~vote(NODE0,VALUE0)', 'decision(VALUE1)', '~chosenAt(QUORUM1,VALUE1)', '~chosenAt(QUORUM0,VALUE1)', 'member(NODE0,QUORUM0)', 'member(NODE0,QUORUM1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,QUORUM1,VALUE1. didNotVote(NODE0) | ~decision(VALUE1) | chosenAt(QUORUM1,VALUE1) | chosenAt(QUORUM0,VALUE1) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : ------1---1-------------
72     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
73     : ------1----1------------
73     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
74     : -------1-1--------------
74     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
75     : -------1---1------------
75     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
76     : --------11--------------
76     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
77     : --------1-1-------------
77     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
78     : ---1------1-------------
78     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
79     : ---1-------1------------
79     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
80     : ----1----1--------------
80     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
81     : ----1------1------------
81     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
82     : -----1---1--------------
82     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
83     : -----1----1-------------
83     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
84     : 1---------1-------------
84     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
85     : 1----------1------------
85     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
86     : -1-------1--------------
86     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
87     : -1---------1------------
87     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
88     : --1------1--------------
88     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
89     : --1-------1-------------
89     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall QUORUM0,VALUE0,VALUE1. ~chosenAt(QUORUM0,VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
90 (*) : ----------11------------
90     : ['decision(value1)', 'decision(value2)']
91     : ---------1-1------------
91     : ['decision(value0)', 'decision(value2)']
92     : ---------11-------------
92     : ['decision(value0)', 'decision(value1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1. ~decision(VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 8 =====================
size : 36
num_suborbits: 1
138 (*) : -----------1----1---0---
138     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
139     : ----------1------1-0----
139     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
140     : -----------1---1----0---
140     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
141     : ---------1-------10-----
141     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
142     : ----------1----1---0----
142     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
143     : ---------1------1-0-----
143     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
144     : -----------1----1------0
144     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
145     : ----------1------1----0-
145     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
146     : -----------1---1-------0
146     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
147     : ---------1-------1---0--
147     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
148     : ----------1----1------0-
148     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
149     : ---------1------1----0--
149     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
150     : -----------1-----0-1----
150     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
151     : ----------1-----0---1---
151     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
152     : -----------1-----01-----
152     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
153     : ---------1-----0----1---
153     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
154     : ----------1-----0-1-----
154     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
155     : ---------1-----0---1----
155     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
156     : -----------1-------1---0
156     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
157     : ----------1---------1-0-
157     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
158     : -----------1------1----0
158     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
159     : ---------1----------10--
159     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
160     : ----------1-------1---0-
160     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
161     : ---------1---------1-0--
161     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
162     : -----------1-----0----1-
162     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
163     : ----------1-----0------1
163     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
164     : -----------1-----0---1--
164     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
165     : ---------1-----0-------1
165     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
166     : ----------1-----0----1--
166     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
167     : ---------1-----0------1-
167     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
168     : -----------1--------0-1-
168     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
169     : ----------1--------0---1
169     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
170     : -----------1--------01--
170     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
171     : ---------1--------0----1
171     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
172     : ----------1--------0-1--
172     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
173     : ---------1--------0---1-
173     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,VALUE0,NODE0,VALUE1. vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
174 (*) : --------0--1----1-------
174     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
175     : -------0--1------1------
175     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
176     : --------0--1---1--------
176     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
177     : ------0--1-------1------
177     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
178     : -------0--1----1--------
178     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
179     : ------0--1------1-------
179     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
180     : -----0-----1-------1----
180     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
181     : ----0-----1---------1---
181     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
182     : -----0-----1------1-----
182     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
183     : ---0-----1----------1---
183     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
184     : ----0-----1-------1-----
184     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
185     : ---0-----1---------1----
185     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
186     : --0--------1----------1-
186     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
187     : -0--------1------------1
187     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
188     : --0--------1---------1--
188     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
189     : 0--------1-------------1
189     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
190     : -0--------1----------1--
190     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
191     : 0--------1------------1-
191     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall QUORUM0,VALUE0,NODE0,VALUE1. member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 10 =====================
size : 36
num_suborbits: 2
192 (*) : -----------1----1----1--
192     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
193     : ----------1------1---1--
193     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
194     : -----------1---1------1-
194     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
195     : ---------1-------1----1-
195     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
196     : ----------1----1-------1
196     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
197     : ---------1------1------1
197     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
198     : -----------1----1-1-----
198     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
199     : ----------1------11-----
199     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
200     : -----------1---1---1----
200     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
201     : ---------1-------1-1----
201     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
202     : ----------1----1----1---
202     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
203     : ---------1------1---1---
203     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
204     : -----------1-------1-1--
204     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
205     : ----------1---------11--
205     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
206     : -----------1------1---1-
206     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
207     : ---------1----------1-1-
207     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
208     : ----------1-------1----1
208     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
209     : ---------1---------1---1
209     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
273 (*) : ---------1------1--1----
273     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
274     : ---------1-------1--1---
274     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
275     : ----------1----1--1-----
275     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
276     : ----------1------1--1---
276     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
277     : -----------1---1--1-----
277     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
278     : -----------1----1--1----
278     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
279     : ---------1------1-----1-
279     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
280     : ---------1-------1-----1
280     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
281     : ----------1----1-----1--
281     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
282     : ----------1------1-----1
282     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
283     : -----------1---1-----1--
283     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
284     : -----------1----1-----1-
284     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
285     : ---------1---------1--1-
285     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
286     : ---------1----------1--1
286     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
287     : ----------1-------1--1--
287     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
288     : ----------1---------1--1
288     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
289     : -----------1------1--1--
289     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
290     : -----------1-------1--1-
290     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   5
num_exists :   0
num_literals : 10
quantified form : forall VALUE2,NODE1,NODE0,VALUE0,VALUE1. ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2 | VALUE0 = VALUE1))
qcost : 15




=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
210 (*) : -----------1-1--1-------
210     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
211     : ----------1--1---1------
211     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
212     : -----------1-1-1--------
212     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
213     : ---------1---1---1------
213     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
214     : ----------1--1-1--------
214     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
215     : ---------1---1--1-------
215     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
216     : -----------1--1-1-------
216     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
217     : ----------1---1--1------
217     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
218     : -----------1--11--------
218     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
219     : ---------1----1--1------
219     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
220     : ----------1---11--------
220     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
221     : ---------1----1-1-------
221     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
222     : -----------11------1----
222     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
223     : ----------1-1-------1---
223     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
224     : -----------11-----1-----
224     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
225     : ---------1--1-------1---
225     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
226     : ----------1-1-----1-----
226     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
227     : ---------1--1------1----
227     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
228     : -----------1--1----1----
228     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
229     : ----------1---1-----1---
229     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
230     : -----------1--1---1-----
230     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
231     : ---------1----1-----1---
231     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
232     : ----------1---1---1-----
232     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
233     : ---------1----1----1----
233     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
234     : -----------11---------1-
234     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
235     : ----------1-1----------1
235     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
236     : -----------11--------1--
236     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
237     : ---------1--1----------1
237     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
238     : ----------1-1--------1--
238     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
239     : ---------1--1---------1-
239     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
240     : -----------1-1--------1-
240     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
241     : ----------1--1---------1
241     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
242     : -----------1-1-------1--
242     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
243     : ---------1---1---------1
243     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
244     : ----------1--1-------1--
244     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
245     : ---------1---1--------1-
245     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,VALUE0,NODE0,VALUE1. ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : ----------1-11----------
300     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
301     : -----------111----------
301     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
302     : ---------1--11----------
302     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
303     : ----------1-1-1---------
303     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
304     : -----------11-1---------
304     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
305     : ---------1--1-1---------
305     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
306     : ----------1--11---------
306     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
307     : -----------1-11---------
307     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
308     : ---------1---11---------
308     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,VALUE0,NODE0. ~didNotVote(NODE0) | ~didNotVote(NODE1) | ~decision(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----0-----1--1----------
309     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
310     : -----0-----1-1----------
310     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
311     : ---0-----1---1----------
311     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
312     : -0--------1---1---------
312     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
313     : --0--------1--1---------
313     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
314     : 0--------1----1---------
314     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
315     : -------0--1-1-----------
315     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
316     : --------0--11-----------
316     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
317     : ------0--1--1-----------
317     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,VALUE0,NODE0. ~didNotVote(NODE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)
qcost : 7




=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
318 (*) : ----------1--1--0-------
318     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
319     : -----------1-1---0------
319     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
320     : ---------1---1-0--------
320     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
321     : ----------1---1-0-------
321     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
322     : -----------1--1--0------
322     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
323     : ---------1----10--------
323     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
324     : ----------1-1------0----
324     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
325     : -----------11-------0---
325     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
326     : ---------1--1-----0-----
326     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
327     : ----------1---1----0----
327     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
328     : -----------1--1-----0---
328     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
329     : ---------1----1---0-----
329     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
330     : ----------1-1---------0-
330     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
331     : -----------11----------0
331     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
332     : ---------1--1--------0--
332     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
333     : ----------1--1--------0-
333     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
334     : -----------1-1---------0
334     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
335     : ---------1---1-------0--
335     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,VALUE0,NODE0. vote(NODE1,VALUE0) | ~didNotVote(NODE0) | ~decision(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : -0--------1-----------0-
336     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
337     : --0--------1-----------0
337     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
338     : 0--------1-----------0--
338     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
339     : ----0-----1--------0----
339     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
340     : -----0-----1--------0---
340     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
341     : ---0-----1--------0-----
341     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
342     : -------0--1-----0-------
342     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
343     : --------0--1-----0------
343     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
344     : ------0--1-----0--------
344     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,VALUE0,NODE0. member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)
qcost : 7




=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ----------1-----0-----0-
345     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
346     : -----------1-----0-----0
346     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
347     : ---------1-----0-----0--
347     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
348     : ----------1-----0--0----
348     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
349     : -----------1-----0--0---
349     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
350     : ---------1-----0--0-----
350     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
351     : ----------1--------0--0-
351     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
352     : -----------1--------0--0
352     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
353     : ---------1--------0--0--
353     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,VALUE0,NODE0. vote(NODE1,VALUE0) | vote(NODE0,VALUE0) | ~decision(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : -0--0-----1-----1-------
357     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
358     : --0--0-----1-----1------
358     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
359     : 0--0-----1-----1--------
359     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
360     : -0-----0--1--------1----
360     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
361     : --0-----0--1--------1---
361     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
362     : 0-----0--1--------1-----
362     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : ----0--0--1-----------1-
363     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
364     : -----0--0--1-----------1
364     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
365     : ---0--0--1-----------1--
365     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall QUORUM0,VALUE0,NODE0,QUORUM1. ~vote(NODE0,VALUE0) | chosenAt(QUORUM1,VALUE0) | ~decision(VALUE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM1) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : -0--0--0--1-------------
366     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
367     : --0--0--0--1------------
367     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
368     : 0--0--0--1--------------
368     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))
qcost : 4




=== Prime Orbit 25 =====================
size : 9
num_suborbits: 1
405 (*) : 0--0-----1--0---00------
405     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
406     : -0--0-----1-0--0-0------
406     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
407     : --0--0-----10--00-------
407     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
408     : 0-----0--1---0-----00---
408     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
409     : -0-----0--1--0----0-0---
409     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : --0-----0--1-0----00----
410     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
411     : ---0--0--1----0-------00
411     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
412     : ----0--0--1---0------0-0
412     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
413     : -----0--0--1--0------00-
413     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall QUORUM0,NODE0,QUORUM1,VALUE1. didNotVote(NODE0) | ~decision(VALUE1) | chosenAt(QUORUM1,VALUE1) | chosenAt(QUORUM0,VALUE1) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 6.741 seconds

[QRM NOTE]: Time elapsed since last: 0.192 seconds

[QRM NOTE]: Peak memory: 2616248 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

=============================================================================================


New level: 1
 pending : [4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : [0]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 1 among pending : [4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 5 with phase True at level 1

After decision at level 1
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : [0, 5]


New level: 2
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : [0, 5]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 2 among pending : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 25]
 solution : [0, 5, 22]


New level: 3
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 25]
 solution : [0, 5, 22]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 25]
 solution : [0, 5, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 5, 22]


Before reduction : 
 pending  : []
 solution : [0, 5, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 22]


Solution : [0, 5, 22] has cost 15.


Before backtrack at level 3
 pending : []
 solution : [0, 5, 22]

After backtrack at level 3
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 25]
 solution : [0, 5, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 25]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 25]
 solution : [0, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 25]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 3 among pending : [4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 3

After decision at level 3
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 19, 21, 25]
 solution : [0, 5, 18]


New level: 4
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 19, 21, 25]
 solution : [0, 5, 18]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 19, 21, 25]
 solution : [0, 5, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {4, 8, 9, 10, 11, 15, 16, 17, 19, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 5, 18]


Before reduction : 
 pending  : []
 solution : [0, 5, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 18]


Solution : [0, 5, 18] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [0, 5, 18]

After backtrack at level 4
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 19, 21, 25]
 solution : [0, 5, 18]


Invert decision for 18 at level 3


New level: 4
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 19, 21, 25]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 19, 21, 25]
 solution : [0, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 19, 21, 25]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 4 among pending : [4, 8, 9, 10, 11, 15, 16, 17, 19, 21, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 19 with phase True at level 4

After decision at level 4
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 19]


New level: 5
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 19]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {4, 8, 9, 10, 11, 15, 16, 17, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 5, 19]


Before reduction : 
 pending  : []
 solution : [0, 5, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 19]


Solution : [0, 5, 19] has cost 18.


Before backtrack at level 5
 pending : []
 solution : [0, 5, 19]

After backtrack at level 5
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 19]


Invert decision for 19 at level 4


New level: 5
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 5 among pending : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [4, 8, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 9]


New level: 6
 pending : [4, 8, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 9]


Before reduction : 
 pending  : [4, 8, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, 2097152), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {8, 10, 11, 4}

After reduction : 
 pending  : [15, 16, 17, 21, 25]
 solution : [0, 5, 9]


Before reduction : 
 pending  : [15, 16, 17, 21, 25]
 solution : [0, 5, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [15, 16, 17, 21, 25]
 solution : [0, 5, 9]


Solution : [0, 5, 9] has cost 20.


Before backtrack at level 6
 pending : [15, 16, 17, 21, 25]
 solution : [0, 5, 9]

After backtrack at level 6
 pending : [15, 16, 17, 21, 25, 4, 8, 10, 11]
 solution : [0, 5, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [15, 16, 17, 21, 25, 4, 8, 10, 11]
 solution : [0, 5]


Before reduction : 
 pending  : [15, 16, 17, 21, 25, 4, 8, 10, 11]
 solution : [0, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, -1), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [15, 16, 17, 21, 25, 4, 8, 10, 11]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 6 among pending : [15, 16, 17, 21, 25, 4, 8, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, -1), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 8 with phase True at level 6

After decision at level 6
 pending : [15, 16, 17, 21, 25, 4, 10, 11]
 solution : [0, 5, 8]


New level: 7
 pending : [15, 16, 17, 21, 25, 4, 10, 11]
 solution : [0, 5, 8]


Before reduction : 
 pending  : [15, 16, 17, 21, 25, 4, 10, 11]
 solution : [0, 5, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 1048576), (9, -1), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {10, 11, 4}

After reduction : 
 pending  : [15, 16, 17, 21, 25]
 solution : [0, 5, 8]


Before reduction : 
 pending  : [15, 16, 17, 21, 25]
 solution : [0, 5, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [15, 16, 17, 21, 25]
 solution : [0, 5, 8]


Solution : [0, 5, 8] has cost 20.


Before backtrack at level 7
 pending : [15, 16, 17, 21, 25]
 solution : [0, 5, 8]

After backtrack at level 7
 pending : [15, 16, 17, 21, 25, 4, 10, 11]
 solution : [0, 5, 8]


Invert decision for 8 at level 6


New level: 7
 pending : [15, 16, 17, 21, 25, 4, 10, 11]
 solution : [0, 5]


Before reduction : 
 pending  : [15, 16, 17, 21, 25, 4, 10, 11]
 solution : [0, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [15, 16, 17, 21, 25, 4, 10, 11]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 7 among pending : [15, 16, 17, 21, 25, 4, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [15, 17, 21, 25, 4, 10, 11]
 solution : [0, 5, 16]


New level: 8
 pending : [15, 17, 21, 25, 4, 10, 11]
 solution : [0, 5, 16]


Before reduction : 
 pending  : [15, 17, 21, 25, 4, 10, 11]
 solution : [0, 5, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {17, 11, 15}

After reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 5, 16]


Before reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 5, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 5, 16]


Solution : [0, 5, 16] has cost 18.


Before backtrack at level 8
 pending : [21, 25, 4, 10]
 solution : [0, 5, 16]

After backtrack at level 8
 pending : [21, 25, 4, 10, 15, 17, 11]
 solution : [0, 5, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [21, 25, 4, 10, 15, 17, 11]
 solution : [0, 5]


Before reduction : 
 pending  : [21, 25, 4, 10, 15, 17, 11]
 solution : [0, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, -1), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 25, 4, 10, 15, 17, 11]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 8 among pending : [21, 25, 4, 10, 15, 17, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, -1), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [21, 25, 4, 10, 15, 11]
 solution : [0, 5, 17]


New level: 9
 pending : [21, 25, 4, 10, 15, 11]
 solution : [0, 5, 17]


Before reduction : 
 pending  : [21, 25, 4, 10, 15, 11]
 solution : [0, 5, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 16384), (12, -1), (13, -1), (14, -1), (15, 8192), (16, -1), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {11, 15}

After reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 5, 17]


Before reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 5, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 5, 17]


Solution : [0, 5, 17] has cost 18.


Before backtrack at level 9
 pending : [21, 25, 4, 10]
 solution : [0, 5, 17]

After backtrack at level 9
 pending : [21, 25, 4, 10, 15, 11]
 solution : [0, 5, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [21, 25, 4, 10, 15, 11]
 solution : [0, 5]


Before reduction : 
 pending  : [21, 25, 4, 10, 15, 11]
 solution : [0, 5]

Essensial at level 9 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 10, 11]
 solution : [0, 5, 15]


Before reduction : 
 pending  : [21, 25, 4, 10, 11]
 solution : [0, 5, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 10, 11]
 solution : [0, 5, 15]


Solution : [0, 5, 15] has cost 18.


Before backtrack at level 9
 pending : [21, 25, 4, 10, 11]
 solution : [0, 5, 15]

After backtrack at level 9
 pending : [21, 25, 4, 10, 11, 15]
 solution : [0, 5]


Before backtrack at level 8
 pending : [21, 25, 4, 10, 11, 15]
 solution : [0, 5]

After backtrack at level 8
 pending : [21, 25, 4, 10, 11, 15, 17]
 solution : [0, 5]


Before backtrack at level 7
 pending : [21, 25, 4, 10, 11, 15, 17]
 solution : [0, 5]

After backtrack at level 7
 pending : [21, 25, 4, 10, 11, 15, 17, 16]
 solution : [0, 5]


Before backtrack at level 6
 pending : [21, 25, 4, 10, 11, 15, 17, 16]
 solution : [0, 5]

After backtrack at level 6
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8]
 solution : [0, 5]


Before backtrack at level 5
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8]
 solution : [0, 5]

After backtrack at level 5
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0, 5]


Before backtrack at level 4
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0, 5]

After backtrack at level 4
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0, 5]


Before backtrack at level 3
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0, 5]

After backtrack at level 3
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0, 5]


Before backtrack at level 2
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0, 5]

After backtrack at level 2
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18, 22]
 solution : [0, 5]


Invert decision for 5 at level 1


New level: 2
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18, 22]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18, 22]
 solution : [0]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18, 22]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 2 among pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0, 22]


New level: 3
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0, 22]


Before reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {4, 8, 9, 10, 11, 15, 16, 17, 18, 19, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 22]


Before reduction : 
 pending  : []
 solution : [0, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 22]


Solution : [0, 22] has cost 10.


Before backtrack at level 3
 pending : []
 solution : [0, 22]

After backtrack at level 3
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 3 among pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 3

After decision at level 3
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0, 18]


New level: 4
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0, 18]


Before reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {4, 8, 9, 10, 11, 15, 16, 17, 19, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 18]


Before reduction : 
 pending  : []
 solution : [0, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 18]


Solution : [0, 18] has cost 13.


Before backtrack at level 4
 pending : []
 solution : [0, 18]

After backtrack at level 4
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0, 18]


Invert decision for 18 at level 3


New level: 4
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 4 among pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 19 with phase True at level 4

After decision at level 4
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0, 19]


New level: 5
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0, 19]


Before reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {4, 8, 9, 10, 11, 15, 16, 17, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 19]


Before reduction : 
 pending  : []
 solution : [0, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 19]


Solution : [0, 19] has cost 13.


Before backtrack at level 5
 pending : []
 solution : [0, 19]

After backtrack at level 5
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0, 19]


Invert decision for 19 at level 4


New level: 5
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 5 among pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8]
 solution : [0, 9]


New level: 6
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8]
 solution : [0, 9]


Before reduction : 
 pending  : [21, 25, 4, 10, 11, 15, 17, 16, 8]
 solution : [0, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, 8388608), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {8, 10, 11, 4}

After reduction : 
 pending  : [21, 25, 15, 17, 16]
 solution : [0, 9]


Before reduction : 
 pending  : [21, 25, 15, 17, 16]
 solution : [0, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 25, 15, 17, 16]
 solution : [0, 9]


Solution : [0, 9] has cost 15.


Before backtrack at level 6
 pending : [21, 25, 15, 17, 16]
 solution : [0, 9]

After backtrack at level 6
 pending : [21, 25, 15, 17, 16, 4, 10, 11, 8]
 solution : [0, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [21, 25, 15, 17, 16, 4, 10, 11, 8]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 15, 17, 16, 4, 10, 11, 8]
 solution : [0]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, -1), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 25, 15, 17, 16, 4, 10, 11, 8]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 6 among pending : [21, 25, 15, 17, 16, 4, 10, 11, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, -1), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 8 with phase True at level 6

After decision at level 6
 pending : [21, 25, 15, 17, 16, 4, 10, 11]
 solution : [0, 8]


New level: 7
 pending : [21, 25, 15, 17, 16, 4, 10, 11]
 solution : [0, 8]


Before reduction : 
 pending  : [21, 25, 15, 17, 16, 4, 10, 11]
 solution : [0, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 4194304), (9, -1), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {10, 11, 4}

After reduction : 
 pending  : [21, 25, 15, 17, 16]
 solution : [0, 8]


Before reduction : 
 pending  : [21, 25, 15, 17, 16]
 solution : [0, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 25, 15, 17, 16]
 solution : [0, 8]


Solution : [0, 8] has cost 15.


Before backtrack at level 7
 pending : [21, 25, 15, 17, 16]
 solution : [0, 8]

After backtrack at level 7
 pending : [21, 25, 15, 17, 16, 4, 10, 11]
 solution : [0, 8]


Invert decision for 8 at level 6


New level: 7
 pending : [21, 25, 15, 17, 16, 4, 10, 11]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 15, 17, 16, 4, 10, 11]
 solution : [0]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 25, 15, 17, 16, 4, 10, 11]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 7 among pending : [21, 25, 15, 17, 16, 4, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [21, 25, 15, 17, 4, 10, 11]
 solution : [0, 16]


New level: 8
 pending : [21, 25, 15, 17, 4, 10, 11]
 solution : [0, 16]


Before reduction : 
 pending  : [21, 25, 15, 17, 4, 10, 11]
 solution : [0, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {17, 11, 15}

After reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 16]


Before reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 16]


Solution : [0, 16] has cost 13.


Before backtrack at level 8
 pending : [21, 25, 4, 10]
 solution : [0, 16]

After backtrack at level 8
 pending : [21, 25, 4, 10, 15, 17, 11]
 solution : [0, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [21, 25, 4, 10, 15, 17, 11]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 10, 15, 17, 11]
 solution : [0]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, -1), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 25, 4, 10, 15, 17, 11]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 8 among pending : [21, 25, 4, 10, 15, 17, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, -1), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [21, 25, 4, 10, 15, 11]
 solution : [0, 17]


New level: 9
 pending : [21, 25, 4, 10, 15, 11]
 solution : [0, 17]


Before reduction : 
 pending  : [21, 25, 4, 10, 15, 11]
 solution : [0, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 65536), (12, -1), (13, -1), (14, -1), (15, 32768), (16, -1), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {11, 15}

After reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 17]


Before reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 10]
 solution : [0, 17]


Solution : [0, 17] has cost 13.


Before backtrack at level 9
 pending : [21, 25, 4, 10]
 solution : [0, 17]

After backtrack at level 9
 pending : [21, 25, 4, 10, 15, 11]
 solution : [0, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [21, 25, 4, 10, 15, 11]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 10, 15, 11]
 solution : [0]

Essensial at level 9 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 10, 11]
 solution : [0, 15]


Before reduction : 
 pending  : [21, 25, 4, 10, 11]
 solution : [0, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 10, 11]
 solution : [0, 15]


Solution : [0, 15] has cost 13.


Before backtrack at level 9
 pending : [21, 25, 4, 10, 11]
 solution : [0, 15]

After backtrack at level 9
 pending : [21, 25, 4, 10, 11, 15]
 solution : [0]


Before backtrack at level 8
 pending : [21, 25, 4, 10, 11, 15]
 solution : [0]

After backtrack at level 8
 pending : [21, 25, 4, 10, 11, 15, 17]
 solution : [0]


Before backtrack at level 7
 pending : [21, 25, 4, 10, 11, 15, 17]
 solution : [0]

After backtrack at level 7
 pending : [21, 25, 4, 10, 11, 15, 17, 16]
 solution : [0]


Before backtrack at level 6
 pending : [21, 25, 4, 10, 11, 15, 17, 16]
 solution : [0]

After backtrack at level 6
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8]
 solution : [0]


Before backtrack at level 5
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8]
 solution : [0]

After backtrack at level 5
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0]


Before backtrack at level 4
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9]
 solution : [0]

After backtrack at level 4
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0]


Before backtrack at level 3
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19]
 solution : [0]

After backtrack at level 3
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0]


Before backtrack at level 2
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18]
 solution : [0]

After backtrack at level 2
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18, 22]
 solution : [0]


Before backtrack at level 1
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18, 22]
 solution : [0]

After backtrack at level 1
 pending : [21, 25, 4, 10, 11, 15, 17, 16, 8, 9, 19, 18, 22, 5]
 solution : [0]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 10

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=2)

invariant [def_didNotVote] didNotVote(N) = forall V. ~vote(N,V) # definition

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [0, 22] (length = 2)

invariant [invar_0] forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_22] forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 6.840 seconds

[QRM NOTE]: Time elapsed since last: 0.099 seconds

[QRM NOTE]: Peak memory: 2575408 bytes


================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall N. didNotVote(N) <-> (forall V. ~vote(N,V))) & (forall Q,V. chosenAt(Q,V) <-> (forall N. member(N,Q) -> vote(N,V))) & (forall Q2,Q1. (exists N. (member(N,Q1) & member(N,Q2)))) & (forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1) & (forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))))

[QRM NOTE]: Time elapsed since start: 8.512 seconds

[QRM NOTE]: Time elapsed since last: 1.672 seconds

[QRM NOTE]: Peak memory: 1576725 bytes


********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************

[QRM RESULT]: PASS

