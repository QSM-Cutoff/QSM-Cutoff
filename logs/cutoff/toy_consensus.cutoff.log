
********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_3.finite.cpp toy_consensus.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_3.finite.o toy_consensus.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 18

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 6.225 seconds

[QRM NOTE]: Time elapsed since last: 6.225 seconds

[QRM NOTE]: Peak memory: 1187191 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        94

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 84


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: member('node', 'quorum')
predicate: didNotVote('node',)
predicate: decision('value',)
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)']
representative states : 1835435, 819627, 17830827, 1224774571, 1226871723, 16847787, 18944939, 19927979, 303531, 43435


=== State Orbit 0 =====================
size : 1
repr state: 000000000000111000000000
lex min decimal: 1835435
states:
000000000000111000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000011100000000
lex min decimal: 819627
states:
000000000000011001000000
000000000000110000000001
000000000000110000000010
000000000000011010000000
000000000000101000010000
000000000000110000000100
000000000000101000001000
000000000000011100000000
000000000000101000100000




=== State Orbit 2 =====================
size : 9
repr state: 100000000000001100100000
lex min decimal: 17830827
states:
000001000000010001000001
001000000000001001001000
100000000000001100100000
000000100000100000100100
000000001000100000001001
000100000000010100000100
000010000000010010000010
010000000000001010010000
000000010000100000010010




=== State Orbit 3 =====================
size : 3
repr state: 100100100000000100100100
lex min decimal: 1224774571
states:
001001001000000001001001
100100100000000100100100
010010010000000010010010




=== State Orbit 4 =====================
size : 3
repr state: 100100100100000100100100
lex min decimal: 1226871723
states:
001001001001000001001001
100100100100000100100100
010010010010000010010010




=== State Orbit 5 =====================
size : 18
repr state: 100000000000000100100010
lex min decimal: 16847787
states:
010000000000000010010001
000001000000000001100001
001000000000000001001100
100000000000000100100001
100000000000000100100010
000100000000000100001100
000000100000000010100100
000000010000000100010010
000000001000000100001001
010000000000000010010100
000100000000000100010100
000010000000000010001010
001000000000000001001010
000001000000000001010001
000010000000000010100010
000000001000000010001001
000000100000000001100100
000000010000000001010010




=== State Orbit 6 =====================
size : 18
repr state: 100000000100000100100010
lex min decimal: 18944939
states:
000000001001000100001001
100000000100000100100010
010000000010000010010001
000100000100000100010100
000010000010000010100010
000000010010000100010010
010000000010000010010100
001000000001000001001010
000010000010000010001010
000000001001000010001001
000100000100000100001100
000000100100000010100100
000000010010000001010010
100000000100000100100001
000001000001000001100001
000001000001000001010001
000000100100000001100100
001000000001000001001100




=== State Orbit 7 =====================
size : 9
repr state: 100000000100001100100000
lex min decimal: 19927979
states:
100000000100001100100000
000100000100010100000100
000001000001010001000001
000000010010100000010010
000000001001100000001001
000010000010010010000010
010000000010001010010000
000000100100100000100100
001000000001001001001000




=== State Orbit 8 =====================
size : 18
repr state: 000000000000001100010000
lex min decimal: 303531
states:
000000000000010010000001
000000000000010100000010
000000000000001001010000
000000000000001010001000
000000000000100000010100
000000000000010001000010
000000000000100000100001
000000000000001010100000
000000000000100000010001
000000000000001001100000
000000000000010001000100
000000000000100000001010
000000000000100000100010
000000000000010100000001
000000000000100000001100
000000000000001100010000
000000000000010010000100
000000000000001100001000




=== State Orbit 9 =====================
size : 6
repr state: 000000000000000100010001
lex min decimal: 43435
states:
000000000000000001010100
000000000000000100001010
000000000000000010100001
000000000000000100010001
000000000000000010001100
000000000000000001100010



[QRM NOTE]: Time elapsed since start: 6.411 seconds

[QRM NOTE]: Time elapsed since last: 0.186 seconds

[QRM NOTE]: Peak memory: 1249862 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.413 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 223886 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

======================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : -1-------------1--------
9     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
10     : --1------------1--------
10     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
11     : 1---------------1-------
11     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
12     : --1-------------1-------
12     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
13     : 1----------------1------
13     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
14     : -1---------------1------
14     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
15     : ----1----------1--------
15     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
16     : -----1---------1--------
16     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
17     : ---1------------1-------
17     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
18     : -----1----------1-------
18     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
19     : ---1-------------1------
19     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
20     : ----1------------1------
20     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
21     : -1----------------1-----
21     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
22     : --1---------------1-----
22     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
23     : 1------------------1----
23     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
24     : --1----------------1----
24     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
25     : 1-------------------1---
25     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
26     : -1------------------1---
26     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
27     : -------1----------1-----
27     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
28     : --------1---------1-----
28     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
29     : ------1------------1----
29     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
30     : --------1----------1----
30     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
31     : ------1-------------1---
31     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
32     : -------1------------1---
32     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
33     : ----1----------------1--
33     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
34     : -----1---------------1--
34     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
35     : ---1------------------1-
35     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
36     : -----1----------------1-
36     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
37     : ---1-------------------1
37     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
38     : ----1------------------1
38     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
39     : -------1-------------1--
39     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
40     : --------1------------1--
40     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
41     : ------1---------------1-
41     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
42     : --------1-------------1-
42     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
43     : ------1----------------1
43     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
44     : -------1---------------1
44     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : ------------1--1--------
45     : ['didNotVote(node0)', 'vote(node0,value0)']
46     : ------------1---1-------
46     : ['didNotVote(node0)', 'vote(node0,value1)']
47     : ------------1----1------
47     : ['didNotVote(node0)', 'vote(node0,value2)']
48     : -------------1----1-----
48     : ['didNotVote(node1)', 'vote(node1,value0)']
49     : -------------1-----1----
49     : ['didNotVote(node1)', 'vote(node1,value1)']
50     : -------------1------1---
50     : ['didNotVote(node1)', 'vote(node1,value2)']
51     : --------------1------1--
51     : ['didNotVote(node2)', 'vote(node2,value0)']
52     : --------------1-------1-
52     : ['didNotVote(node2)', 'vote(node2,value1)']
53     : --------------1--------1
53     : ['didNotVote(node2)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : --------1----1----------
54     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node1)']
55     : -------1-----1----------
55     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node1)']
56     : ------1------1----------
56     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node1)']
57     : --------1-----1---------
57     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node2)']
58     : -------1------1---------
58     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node2)']
59     : ------1-------1---------
59     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node2)']
60     : -----1------1-----------
60     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node0)']
61     : ----1-------1-----------
61     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node0)']
62     : ---1--------1-----------
62     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node0)']
63     : -----1--------1---------
63     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node2)']
64     : ----1---------1---------
64     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node2)']
65     : ---1----------1---------
65     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node2)']
66     : --1---------1-----------
66     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node0)']
67     : -1----------1-----------
67     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node0)']
68     : 1-----------1-----------
68     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
69     : --1----------1----------
69     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node1)']
70     : -1-----------1----------
70     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node1)']
71     : 1------------1----------
71     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : ------1----1------------
72     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
73     : ------1---1-------------
73     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
74     : -------1---1------------
74     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
75     : -------1-1--------------
75     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
76     : --------1-1-------------
76     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
77     : --------11--------------
77     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
78     : ---1-------1------------
78     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
79     : ---1------1-------------
79     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
80     : ----1------1------------
80     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
81     : ----1----1--------------
81     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
82     : -----1----1-------------
82     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
83     : -----1---1--------------
83     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
84     : 1----------1------------
84     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
85     : 1---------1-------------
85     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
86     : -1---------1------------
86     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
87     : -1-------1--------------
87     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
88     : --1-------1-------------
88     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
89     : --1------1--------------
89     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
90 (*) : ---------1-1------------
90     : ['decision(value0)', 'decision(value2)']
91     : ---------11-------------
91     : ['decision(value0)', 'decision(value1)']
92     : ----------11------------
92     : ['decision(value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 27
num_suborbits: 2
93 (*) : --1----1----------------
93     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
94     : -1------1---------------
94     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
95     : --1---1-----------------
95     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
96     : 1-------1---------------
96     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
97     : -1----1-----------------
97     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
98     : 1------1----------------
98     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
99     : -----1-1----------------
99     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
100     : ----1---1---------------
100     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
101     : -----11-----------------
101     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
102     : ---1----1---------------
102     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
103     : ----1-1-----------------
103     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
104     : ---1---1----------------
104     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
105     : --1-1-------------------
105     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
106     : -1---1------------------
106     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
107     : --11--------------------
107     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
108     : 1----1------------------
108     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
109     : -1-1--------------------
109     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
110     : 1---1-------------------
110     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
111 (*) : -------11---------------
111     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
112     : ------1-1---------------
112     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
113     : ------11----------------
113     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
114     : ----11------------------
114     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
115     : ---1-1------------------
115     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
116     : ---11-------------------
116     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
117     : -11---------------------
117     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
118     : 1-1---------------------
118     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
119     : 11----------------------
119     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 18
num_suborbits: 1
120 (*) : -----1-----------0------
120     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
121     : ----1-----------0-------
121     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
122     : ---1-----------0--------
122     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
123     : --1--------------0------
123     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
124     : -1--------------0-------
124     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
125     : 1--------------0--------
125     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
126     : --------1-----------0---
126     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
127     : -------1-----------0----
127     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
128     : ------1-----------0-----
128     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
129     : --1-----------------0---
129     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
130     : -1-----------------0----
130     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
131     : 1-----------------0-----
131     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
132     : --------1--------------0
132     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
133     : -------1--------------0-
133     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
134     : ------1--------------0--
134     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
135     : -----1-----------------0
135     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
136     : ----1-----------------0-
136     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
137     : ---1-----------------0--
137     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
138 (*) : -0--------1---1---------
138     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
139     : --0--------1--1---------
139     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
140     : 0--------1----1---------
140     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
141     : ----0-----1--1----------
141     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
142     : -----0-----1-1----------
142     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
143     : ---0-----1---1----------
143     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
144     : -------0--1-1-----------
144     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
145     : --------0--11-----------
145     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
146     : ------0--1--1-----------
146     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 36
num_suborbits: 1
147 (*) : ----------1---11--------
147     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
148     : -----------1--11--------
148     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
149     : ---------1----1-1-------
149     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
150     : -----------1--1-1-------
150     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
151     : ---------1----1--1------
151     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
152     : ----------1---1--1------
152     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
153     : ----------1--1-1--------
153     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
154     : -----------1-1-1--------
154     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
155     : ---------1---1--1-------
155     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
156     : -----------1-1--1-------
156     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
157     : ---------1---1---1------
157     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
158     : ----------1--1---1------
158     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
159     : ----------1---1---1-----
159     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
160     : -----------1--1---1-----
160     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
161     : ---------1----1----1----
161     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
162     : -----------1--1----1----
162     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
163     : ---------1----1-----1---
163     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
164     : ----------1---1-----1---
164     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
165     : ----------1-1-----1-----
165     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
166     : -----------11-----1-----
166     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
167     : ---------1--1------1----
167     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
168     : -----------11------1----
168     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
169     : ---------1--1-------1---
169     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
170     : ----------1-1-------1---
170     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
171     : ----------1--1-------1--
171     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
172     : -----------1-1-------1--
172     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
173     : ---------1---1--------1-
173     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
174     : -----------1-1--------1-
174     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
175     : ---------1---1---------1
175     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
176     : ----------1--1---------1
176     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
177     : ----------1-1--------1--
177     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
178     : -----------11--------1--
178     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
179     : ---------1--1---------1-
179     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
180     : -----------11---------1-
180     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
181     : ---------1--1----------1
181     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
182     : ----------1-1----------1
182     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
183 (*) : ----------1---1-0-------
183     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
184     : -----------1--1--0------
184     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
185     : ---------1----10--------
185     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
186     : ----------1--1--0-------
186     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
187     : -----------1-1---0------
187     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
188     : ---------1---1-0--------
188     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
189     : ----------1---1----0----
189     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
190     : -----------1--1-----0---
190     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
191     : ---------1----1---0-----
191     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
192     : ----------1-1------0----
192     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
193     : -----------11-------0---
193     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
194     : ---------1--1-----0-----
194     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
195     : ----------1--1--------0-
195     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
196     : -----------1-1---------0
196     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
197     : ---------1---1-------0--
197     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
198     : ----------1-1---------0-
198     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
199     : -----------11----------0
199     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
200     : ---------1--1--------0--
200     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
201 (*) : -----------1-11---------
201     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
202     : ----------1--11---------
202     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
203     : ---------1---11---------
203     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
204     : -----------11-1---------
204     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
205     : ----------1-1-1---------
205     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
206     : ---------1--1-1---------
206     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
207     : -----------111----------
207     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
208     : ----------1-11----------
208     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
209     : ---------1--11----------
209     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
210 (*) : 0--------------1--1-----
210     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
211     : -0--------------1--1----
211     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
212     : --0--------------1--1---
212     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
213     : ---0-----------1-----1--
213     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
214     : ----0-----------1-----1-
214     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
215     : -----0-----------1-----1
215     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
216     : ------0-----------1--1--
216     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
217     : -------0-----------1--1-
217     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
218     : --------0-----------1--1
218     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
219 (*) : -0--------1-----------0-
219     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
220     : --0--------1-----------0
220     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
221     : 0--------1-----------0--
221     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
222     : ----0-----1--------0----
222     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
223     : -----0-----1--------0---
223     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
224     : ---0-----1--------0-----
224     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
225     : -------0--1-----0-------
225     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
226     : --------0--1-----0------
226     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
227     : ------0--1-----0--------
227     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
228 (*) : ----------1--------0--0-
228     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
229     : -----------1--------0--0
229     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
230     : ---------1--------0--0--
230     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
231     : ----------1-----0-----0-
231     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
232     : -----------1-----0-----0
232     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
233     : ---------1-----0-----0--
233     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
234     : ----------1-----0--0----
234     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
235     : -----------1-----0--0---
235     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
236     : ---------1-----0--0-----
236     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 36
num_suborbits: 1
237 (*) : ----------1-------1---0-
237     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
238     : -----------1------1----0
238     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
239     : ---------1---------1-0--
239     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
240     : -----------1-------1---0
240     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
241     : ---------1----------10--
241     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
242     : ----------1---------1-0-
242     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
243     : ----------1--------0-1--
243     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
244     : -----------1--------01--
244     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
245     : ---------1--------0---1-
245     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
246     : -----------1--------0-1-
246     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
247     : ---------1--------0----1
247     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
248     : ----------1--------0---1
248     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
249     : ----------1----1------0-
249     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
250     : -----------1---1-------0
250     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
251     : ---------1------1----0--
251     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
252     : -----------1----1------0
252     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
253     : ---------1-------1---0--
253     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
254     : ----------1------1----0-
254     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
255     : ----------1-----0----1--
255     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
256     : -----------1-----0---1--
256     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
257     : ---------1-----0------1-
257     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
258     : -----------1-----0----1-
258     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
259     : ---------1-----0-------1
259     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
260     : ----------1-----0------1
260     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
261     : ----------1----1---0----
261     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
262     : -----------1---1----0---
262     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
263     : ---------1------1-0-----
263     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
264     : -----------1----1---0---
264     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
265     : ---------1-------10-----
265     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
266     : ----------1------1-0----
266     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
267     : ----------1-----0-1-----
267     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
268     : -----------1-----01-----
268     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
269     : ---------1-----0---1----
269     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
270     : -----------1-----0-1----
270     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
271     : ---------1-----0----1---
271     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
272     : ----------1-----0---1---
272     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 18
num_suborbits: 1
273 (*) : ----0-----1-------1-----
273     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
274     : -----0-----1------1-----
274     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
275     : ---0-----1---------1----
275     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
276     : -----0-----1-------1----
276     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
277     : ---0-----1----------1---
277     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
278     : ----0-----1---------1---
278     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
279     : -0--------1----------1--
279     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
280     : --0--------1---------1--
280     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
281     : 0--------1------------1-
281     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
282     : --0--------1----------1-
282     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
283     : 0--------1-------------1
283     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
284     : -0--------1------------1
284     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
285     : -------0--1----1--------
285     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
286     : --------0--1---1--------
286     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
287     : ------0--1------1-------
287     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
288     : --------0--1----1-------
288     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
289     : ------0--1-------1------
289     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
290     : -------0--1------1------
290     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 36
num_suborbits: 2
291 (*) : ----------1----1--1-----
291     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
292     : -----------1---1--1-----
292     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
293     : ---------1------1--1----
293     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
294     : -----------1----1--1----
294     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
295     : ---------1-------1--1---
295     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
296     : ----------1------1--1---
296     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
297     : ----------1----1-----1--
297     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
298     : -----------1---1-----1--
298     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
299     : ---------1------1-----1-
299     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
300     : -----------1----1-----1-
300     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
301     : ---------1-------1-----1
301     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
302     : ----------1------1-----1
302     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
303     : ----------1-------1--1--
303     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
304     : -----------1------1--1--
304     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
305     : ---------1---------1--1-
305     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
306     : -----------1-------1--1-
306     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
307     : ---------1----------1--1
307     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
308     : ----------1---------1--1
308     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
309 (*) : ----------1----1----1---
309     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
310     : -----------1---1---1----
310     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
311     : ---------1------1---1---
311     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
312     : -----------1----1-1-----
312     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
313     : ---------1-------1-1----
313     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
314     : ----------1------11-----
314     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
315     : ----------1----1-------1
315     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
316     : -----------1---1------1-
316     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
317     : ---------1------1------1
317     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
318     : -----------1----1----1--
318     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
319     : ---------1-------1----1-
319     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
320     : ----------1------1---1--
320     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
321     : ----------1-------1----1
321     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
322     : -----------1------1---1-
322     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
323     : ---------1---------1---1
323     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
324     : -----------1-------1-1--
324     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
325     : ---------1----------1-1-
325     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
326     : ----------1---------11--
326     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
327 (*) : -0-----1--------1-------
327     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
328     : --0-----1--------1------
328     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
329     : 0-----1--------1--------
329     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
330     : ----0--1--------1-------
330     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
331     : -----0--1--------1------
331     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
332     : ---0--1--------1--------
332     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
333     : -0--1--------------1----
333     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
334     : --0--1--------------1---
334     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
335     : 0--1--------------1-----
335     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
336     : ----1--0-----------1----
336     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
337     : -----1--0-----------1---
337     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
338     : ---1--0-----------1-----
338     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
339     : -1--0-----------------1-
339     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
340     : --1--0-----------------1
340     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
341     : 1--0-----------------1--
341     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
342     : -1-----0--------------1-
342     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
343     : --1-----0--------------1
343     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
344     : 1-----0--------------1--
344     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : -1--0--1----------------
345     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
346     : --1--0--1---------------
346     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
347     : 1--0--1-----------------
347     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
348     : -0--1--1----------------
348     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
349     : --0--1--1---------------
349     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
350     : 0--1--1-----------------
350     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
351     : -1--1--0----------------
351     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
352     : --1--1--0---------------
352     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
353     : 1--1--0-----------------
353     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : --------------0------000
354     : ['~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
355     : -------------0----000---
355     : ['~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
356     : ------------0--000------
356     : ['~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : ---0--0--1-----------1--
357     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : ----0--0--1-----------1-
358     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : -----0--0--1-----------1
359     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
360     : 0-----0--1--------1-----
360     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : -0-----0--1--------1----
361     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : --0-----0--1--------1---
362     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : 0--0-----1-----1--------
363     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
364     : -0--0-----1-----1-------
364     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : --0--0-----1-----1------
365     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : 0--0--0--1--------------
366     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
367     : -0--0--0--1-------------
367     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
368     : --0--0--0--1------------
368     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 1
369 (*) : 0------------0-1---00---
369     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
370     : -0-----------0--1-0-0---
370     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
371     : --0----------0---100----
371     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
372     : ---0----------01------00
372     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
373     : ----0---------0-1----0-0
373     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
374     : -----0--------0--1---00-
374     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
375     : 0-----------0---001-----
375     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
376     : -0----------0--0-0-1----
376     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
377     : --0---------0--00---1---
377     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
378     : ------0-------0---1---00
378     : ['vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
379     : -------0------0----1-0-0
379     : ['vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
380     : --------0-----0-----100-
380     : ['vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
381     : ---0--------0---00---1--
381     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
382     : ----0-------0--0-0----1-
382     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
383     : -----0------0--00------1
383     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
384     : ------0------0-----001--
384     : ['vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
385     : -------0-----0----0-0-1-
385     : ['vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
386     : --------0----0----00---1
386     : ['vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 1
387 (*) : -----1--0----0----00----
387     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
388     : ----1--0-----0----0-0---
388     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
389     : ---1--0------0-----00---
389     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
390     : --1-----0-----0------00-
390     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
391     : -1-----0------0------0-0
391     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
392     : 1-----0-------0-------00
392     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
393     : -----0--1---0--00-------
393     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
394     : ----0--1----0--0-0------
394     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
395     : ---0--1-----0---00------
395     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
396     : --1--0--------0------00-
396     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
397     : -1--0---------0------0-0
397     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
398     : 1--0----------0-------00
398     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
399     : --0-----1---0--00-------
399     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
400     : -0-----1----0--0-0------
400     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
401     : 0-----1-----0---00------
401     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
402     : --0--1-------0----00----
402     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
403     : -0--1--------0----0-0---
403     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
404     : 0--1---------0-----00---
404     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 9
num_suborbits: 1
405 (*) : -----0--0--1--0------00-
405     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
406     : ----0--0--1---0------0-0
406     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
407     : ---0--0--1----0-------00
407     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
408     : --0-----0--1-0----00----
408     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
409     : -0-----0--1--0----0-0---
409     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : 0-----0--1---0-----00---
410     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
411     : --0--0-----10--00-------
411     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
412     : -0--0-----1-0--0-0------
412     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
413     : 0--0-----1--0---00------
413     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 18
num_suborbits: 1
414 (*) : -0---0------0--0---1---1
414     : ['vote(node1,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)']
415     : --0-0-------0--0----1-1-
415     : ['vote(node1,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
416     : 0----0------0---0-1----1
416     : ['vote(node1,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value1)']
417     : --00--------0---0---11--
417     : ['vote(node1,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
418     : 0---0-------0----01---1-
418     : ['vote(node1,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value2)']
419     : -0-0--------0----0-1-1--
419     : ['vote(node1,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value2)']
420     : -0------0----0--1-0----1
420     : ['vote(node0,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)']
421     : --0----0-----0---10---1-
421     : ['vote(node0,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
422     : 0-------0----0-1---0---1
422     : ['vote(node0,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value1)']
423     : --0---0------0---1-0-1--
423     : ['vote(node0,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
424     : 0------0-----0-1----0-1-
424     : ['vote(node0,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value2)']
425     : -0----0------0--1---01--
425     : ['vote(node0,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value2)']
426     : ----0---0-----0-1---10--
426     : ['vote(node0,value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)']
427     : -----0-0------0--1-1-0--
427     : ['vote(node0,value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
428     : ---0----0-----01----1-0-
428     : ['vote(node0,value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value1)']
429     : -----00-------0--11---0-
429     : ['vote(node0,value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
430     : ---0---0------01---1---0
430     : ['vote(node0,value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value2)']
431     : ----0-0-------0-1-1----0
431     : ['vote(node0,value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
432 (*) : --0---------00-00-00----
432     : ['~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
433     : -0----------00-0-00-0---
433     : ['~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
434     : 0-----------00--00-00---
434     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
435     : -----0------0-000----00-
435     : ['~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
436     : ----0-------0-00-0---0-0
436     : ['~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
437     : ---0--------0-0-00----00
437     : ['~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
438     : --------0----00---00-00-
438     : ['~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
439     : -------0-----00---0-00-0
439     : ['~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
440     : ------0------00----00-00
440     : ['~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 36
num_suborbits: 1
441 (*) : -----00-----0-000-1---0-
441     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
442     : ----0-0-----0-00-01----0
442     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
443     : -----0-0----0-000--1-0--
443     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
444     : ---0---0----0-0-00-1---0
444     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
445     : ----0---0---0-00-0--10--
445     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
446     : ---0----0---0-0-00--1-0-
446     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
447     : --0---0-----00-00--0-1--
447     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
448     : -0----0-----00-0-0--01--
448     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
449     : --0----0----00-00-0---1-
449     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
450     : 0------0----00--00--0-1-
450     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
451     : -0------0---00-0-00----1
451     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
452     : 0-------0---00--00-0---1
452     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
453     : ---0----0----001--00--0-
453     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
454     : ---0---0-----001--0-0--0
454     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
455     : ----0---0----00-1-00-0--
455     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
456     : ----0-0------00-1--00--0
456     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
457     : -----0-0-----00--10-00--
457     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
458     : -----00------00--1-00-0-
458     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
459     : --00--------00--0-00-1--
459     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
460     : -0-0--------00---00-01--
460     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
461     : --0-0-------00-0--00--1-
461     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
462     : 0---0-------00---0-00-1-
462     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
463     : -0---0------00-0--0-0--1
463     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
464     : 0----0------00--0--00--1
464     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
465     : 0-------0----001---0-00-
465     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
466     : 0------0-----001----00-0
466     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
467     : -0------0----00-1-0--00-
467     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
468     : -0----0------00-1---0-00
468     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
469     : --0----0-----00--10--0-0
469     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
470     : --0---0------00--1-0--00
470     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
471     : 0----0------0-0-0-1--00-
471     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
472     : 0---0-------0-0--01--0-0
472     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
473     : -0---0------0-00---1-00-
473     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
474     : -0-0--------0-0--0-1--00
474     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
475     : --0-0-------0-00----10-0
475     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
476     : --00--------0-0-0---1-00
476     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 18
num_suborbits: 1
477 (*) : 0----00-----0-0-0-1---0-
477     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
478     : 0---0-0-----0-0--01----0
478     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
479     : -0---0-0----0-00---1-0--
479     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
480     : -0-0---0----0-0--0-1---0
480     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
481     : --0-0---0---0-00----10--
481     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
482     : --00----0---0-0-0---1-0-
482     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
483     : --00--0-----00--0--0-1--
483     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
484     : -0-0--0-----00---0--01--
484     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
485     : --0-0--0----00-0--0---1-
485     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
486     : 0---0--0----00---0--0-1-
486     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
487     : -0---0--0---00-0--0----1
487     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
488     : 0----0--0---00--0--0---1
488     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
489     : 0--0----0----001---0--0-
489     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
490     : 0--0---0-----001----0--0
490     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
491     : -0--0---0----00-1-0--0--
491     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
492     : -0--0-0------00-1---0--0
492     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
493     : --0--0-0-----00--10--0--
493     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
494     : --0--00------00--1-0--0-
494     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 1
495 (*) : --0-0---0---0000--00-0--
495     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
496     : -0---0-0----0000--0-00--
496     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
497     : --00----0---000-0-00--0-
497     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
498     : 0----00-----000-0--00-0-
498     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
499     : -0-0---0----000--00-0--0
499     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
500     : 0---0-0-----000--0-00--0
500     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
501     : -0---0--0---0000--0--00-
501     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
502     : --0-0--0----0000--0--0-0
502     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
503     : 0----0--0---000-0--0-00-
503     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
504     : --00--0-----000-0--0--00
504     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
505     : 0---0--0----000--0--00-0
505     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
506     : -0-0--0-----000--0--0-00
506     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
507     : --0--0-0----00000-0--0--
507     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
508     : -0--0---0---0000-00--0--
508     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
509     : --0--00-----00000--0--0-
509     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
510     : 0--0----0---000-00-0--0-
510     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
511     : -0--0-0-----0000-0--0--0
511     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
512     : 0--0---0----000-00--0--0
512     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 1
513 (*) : -0---0------0000--0-000-
513     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
514     : --0-0-------0000--00-0-0
514     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
515     : 0----0------000-0--0000-
515     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
516     : --00--------000-0-00--00
516     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
517     : 0---0-------000--0-000-0
517     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
518     : -0-0--------000--00-0-00
518     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
519     : -0------0---0000-00--00-
519     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
520     : --0----0----00000-0--0-0
520     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
521     : 0-------0---000-00-0-00-
521     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
522     : --0---0-----00000--0--00
522     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
523     : 0------0----000-00--00-0
523     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
524     : -0----0-----0000-0--0-00
524     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
525     : ----0---0---0000-000-0--
525     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
526     : -----0-0----00000-0-00--
526     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
527     : ---0----0---000-0000--0-
527     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
528     : -----00-----00000--00-0-
528     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
529     : ---0---0----000-000-0--0
529     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
530     : ----0-0-----0000-0-00--0
530     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
531 (*) : -00-00-00---0000--0--0--
531     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
532     : 0-00-00-0---000-0--0--0-
532     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
533     : 00-00-00----000--0--0--0
533     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 6.618 seconds

[QRM NOTE]: Time elapsed since last: 0.205 seconds

[QRM NOTE]: Peak memory: 1928757 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================

definition primes: {32, 2, 3, 7, 12, 18, 19, 20, 23, 24, 26, 27, 28, 29, 30, 31}


New level: 0
 pending : [0, 1, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : []


Before reduction : 
 pending  : [0, 1, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : []

Essensial at level 0 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, 0), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : {1, 6}

After reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : [0]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, 0), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : [0]

[QRM NOTE]: Time elapsed since start: 6.699 seconds

[QRM NOTE]: Time elapsed since last: 0.081 seconds

[QRM NOTE]: Peak memory: 856000 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', 'vote(node0,value1)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', 'vote(node0,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : ------1----1------------
72     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
73     : ------1---1-------------
73     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
74     : -------1---1------------
74     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
75     : -------1-1--------------
75     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
76     : --------1-1-------------
76     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
77     : --------11--------------
77     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
78     : ---1-------1------------
78     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
79     : ---1------1-------------
79     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
80     : ----1------1------------
80     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
81     : ----1----1--------------
81     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
82     : -----1----1-------------
82     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
83     : -----1---1--------------
83     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
84     : 1----------1------------
84     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
85     : 1---------1-------------
85     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
86     : -1---------1------------
86     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
87     : -1-------1--------------
87     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
88     : --1-------1-------------
88     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
89     : --1------1--------------
89     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['chosenAt(QUORUM0,VALUE0)', 'decision(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE1,VALUE0. ~chosenAt(QUORUM0,VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
90 (*) : ---------1-1------------
90     : ['decision(value0)', 'decision(value2)']
91     : ---------11-------------
91     : ['decision(value0)', 'decision(value1)']
92     : ----------11------------
92     : ['decision(value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'decision(value2)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$1]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

part_sig: ('value$0$decision$0$0 | value$0$decision$0$1',)


---------- SigGenerator ----------

terms:  ['decision(value0)', 'decision(value2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decision': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'decision(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1. ~decision(VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
138 (*) : -0--------1---1---------
138     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
139     : --0--------1--1---------
139     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
140     : 0--------1----1---------
140     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
141     : ----0-----1--1----------
141     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
142     : -----0-----1-1----------
142     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
143     : ---0-----1---1----------
143     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
144     : -------0--1-1-----------
144     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
145     : --------0--11-----------
145     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
146     : ------0--1--1-----------
146     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', 'didNotVote(node2)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

part_sig: ('node$0$didNotVote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', 'didNotVote(node2)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$didNotVote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0; node$1$member$0': [node$0$didNotVote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$didNotVote$0; node$1$member$0': node$0$didNotVote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,NODE0. ~decision(VALUE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~didNotVote(NODE0)


=== Prime Orbit 9 =====================
size : 36
num_suborbits: 1
147 (*) : ----------1---11--------
147     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
148     : -----------1--11--------
148     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
149     : ---------1----1-1-------
149     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
150     : -----------1--1-1-------
150     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
151     : ---------1----1--1------
151     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
152     : ----------1---1--1------
152     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
153     : ----------1--1-1--------
153     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
154     : -----------1-1-1--------
154     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
155     : ---------1---1--1-------
155     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
156     : -----------1-1--1-------
156     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
157     : ---------1---1---1------
157     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
158     : ----------1--1---1------
158     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
159     : ----------1---1---1-----
159     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
160     : -----------1--1---1-----
160     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
161     : ---------1----1----1----
161     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
162     : -----------1--1----1----
162     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
163     : ---------1----1-----1---
163     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
164     : ----------1---1-----1---
164     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
165     : ----------1-1-----1-----
165     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
166     : -----------11-----1-----
166     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
167     : ---------1--1------1----
167     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
168     : -----------11------1----
168     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
169     : ---------1--1-------1---
169     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
170     : ----------1-1-------1---
170     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
171     : ----------1--1-------1--
171     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
172     : -----------1-1-------1--
172     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
173     : ---------1---1--------1-
173     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
174     : -----------1-1--------1-
174     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
175     : ---------1---1---------1
175     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
176     : ----------1--1---------1
176     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
177     : ----------1-1--------1--
177     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
178     : -----------11--------1--
178     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
179     : ---------1--1---------1-
179     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
180     : -----------11---------1-
180     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
181     : ---------1--1----------1
181     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
182     : ----------1-1----------1
182     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$0$vote$0$0', 'value$0$decision$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$0$vote$0': [node$0$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$0$vote$0': node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE1,VALUE1)', 'decision(VALUE0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,VALUE1,NODE0. ~vote(NODE1,VALUE1) | ~decision(VALUE0) | ~didNotVote(NODE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
183 (*) : ----------1---1-0-------
183     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
184     : -----------1--1--0------
184     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
185     : ---------1----10--------
185     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
186     : ----------1--1--0-------
186     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
187     : -----------1-1---0------
187     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
188     : ---------1---1-0--------
188     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
189     : ----------1---1----0----
189     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
190     : -----------1--1-----0---
190     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
191     : ---------1----1---0-----
191     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
192     : ----------1-1------0----
192     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
193     : -----------11-------0---
193     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
194     : ---------1--1-----0-----
194     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
195     : ----------1--1--------0-
195     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
196     : -----------1-1---------0
196     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
197     : ---------1---1-------0--
197     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
198     : ----------1-1---------0-
198     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
199     : -----------11----------0
199     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
200     : ---------1--1--------0--
200     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'decision(VALUE0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. vote(NODE1,VALUE0) | ~decision(VALUE0) | ~didNotVote(NODE0) | NODE0 = NODE1


=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
201 (*) : -----------1-11---------
201     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
202     : ----------1--11---------
202     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
203     : ---------1---11---------
203     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
204     : -----------11-1---------
204     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
205     : ----------1-1-1---------
205     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
206     : ---------1--1-1---------
206     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
207     : -----------111----------
207     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
208     : ----------1-11----------
208     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
209     : ---------1--11----------
209     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']

sign_func_name2args: {'0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$didNotVote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

part_sig: ('node$0$didNotVote$0$0 | node$0$didNotVote$0$1', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE1)', 'decision(VALUE0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~didNotVote(NODE1) | ~decision(VALUE0) | ~didNotVote(NODE0) | NODE0 = NODE1


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
219 (*) : -0--------1-----------0-
219     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
220     : --0--------1-----------0
220     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
221     : 0--------1-----------0--
221     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
222     : ----0-----1--------0----
222     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
223     : -----0-----1--------0---
223     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
224     : ---0-----1--------0-----
224     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
225     : -------0--1-----0-------
225     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
226     : --------0--1-----0------
226     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
227     : ------0--1-----0--------
227     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,NODE0. ~decision(VALUE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | vote(NODE0,VALUE0)


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
228 (*) : ----------1--------0--0-
228     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
229     : -----------1--------0--0
229     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
230     : ---------1--------0--0--
230     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
231     : ----------1-----0-----0-
231     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
232     : -----------1-----0-----0
232     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
233     : ---------1-----0-----0--
233     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
234     : ----------1-----0--0----
234     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
235     : -----------1-----0--0---
235     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
236     : ---------1-----0--0-----
236     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'decision(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. vote(NODE1,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 15 =====================
size : 36
num_suborbits: 1
237 (*) : ----------1-------1---0-
237     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
238     : -----------1------1----0
238     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
239     : ---------1---------1-0--
239     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
240     : -----------1-------1---0
240     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
241     : ---------1----------10--
241     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
242     : ----------1---------1-0-
242     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
243     : ----------1--------0-1--
243     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
244     : -----------1--------01--
244     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
245     : ---------1--------0---1-
245     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
246     : -----------1--------0-1-
246     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
247     : ---------1--------0----1
247     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
248     : ----------1--------0---1
248     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
249     : ----------1----1------0-
249     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
250     : -----------1---1-------0
250     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
251     : ---------1------1----0--
251     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
252     : -----------1----1------0
252     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
253     : ---------1-------1---0--
253     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
254     : ----------1------1----0-
254     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
255     : ----------1-----0----1--
255     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
256     : -----------1-----0---1--
256     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
257     : ---------1-----0------1-
257     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
258     : -----------1-----0----1-
258     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
259     : ---------1-----0-------1
259     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
260     : ----------1-----0------1
260     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
261     : ----------1----1---0----
261     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
262     : -----------1---1----0---
262     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
263     : ---------1------1-0-----
263     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
264     : -----------1----1---0---
264     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
265     : ---------1-------10-----
265     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
266     : ----------1------1-0----
266     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
267     : ----------1-----0-1-----
267     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
268     : -----------1-----01-----
268     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
269     : ---------1-----0---1----
269     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
270     : -----------1-----0-1----
270     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
271     : ---------1-----0----1---
271     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
272     : ----------1-----0---1---
272     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decision(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,VALUE1,NODE0. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | vote(NODE1,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 16 =====================
size : 18
num_suborbits: 1
273 (*) : ----0-----1-------1-----
273     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
274     : -----0-----1------1-----
274     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
275     : ---0-----1---------1----
275     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
276     : -----0-----1-------1----
276     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
277     : ---0-----1----------1---
277     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
278     : ----0-----1---------1---
278     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
279     : -0--------1----------1--
279     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
280     : --0--------1---------1--
280     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
281     : 0--------1------------1-
281     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
282     : --0--------1----------1-
282     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
283     : 0--------1-------------1
283     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
284     : -0--------1------------1
284     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
285     : -------0--1----1--------
285     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
286     : --------0--1---1--------
286     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
287     : ------0--1------1-------
287     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
288     : --------0--1----1-------
288     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
289     : ------0--1-------1------
289     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
290     : -------0--1------1------
290     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'vote(node1,value0)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'vote(node1,value0)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decision(VALUE0)', '~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 17 =====================
size : 36
num_suborbits: 2
291 (*) : ----------1----1--1-----
291     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
292     : -----------1---1--1-----
292     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
293     : ---------1------1--1----
293     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
294     : -----------1----1--1----
294     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
295     : ---------1-------1--1---
295     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
296     : ----------1------1--1---
296     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
297     : ----------1----1-----1--
297     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
298     : -----------1---1-----1--
298     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
299     : ---------1------1-----1-
299     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
300     : -----------1----1-----1-
300     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
301     : ---------1-------1-----1
301     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
302     : ----------1------1-----1
302     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
303     : ----------1-------1--1--
303     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
304     : -----------1------1--1--
304     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
305     : ---------1---------1--1-
305     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
306     : -----------1-------1--1-
306     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
307     : ---------1----------1--1
307     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
308     : ----------1---------1--1
308     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
309 (*) : ----------1----1----1---
309     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
310     : -----------1---1---1----
310     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
311     : ---------1------1---1---
311     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
312     : -----------1----1-1-----
312     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
313     : ---------1-------1-1----
313     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
314     : ----------1------11-----
314     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
315     : ----------1----1-------1
315     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
316     : -----------1---1------1-
316     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
317     : ---------1------1------1
317     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
318     : -----------1----1----1--
318     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
319     : ---------1-------1----1-
319     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
320     : ----------1------1---1--
320     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
321     : ----------1-------1----1
321     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
322     : -----------1------1---1-
322     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
323     : ---------1---------1---1
323     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
324     : -----------1-------1-1--
324     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
325     : ---------1----------1-1-
325     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
326     : ----------1---------11--
326     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decision(VALUE0)', 'vote(NODE1,VALUE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE2', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE2', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE2', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE2', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE2', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE2', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE2', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE2', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0,VALUE1,VALUE2. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | ~vote(NODE1,VALUE2) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE0 = VALUE2 | VALUE1 = VALUE2 | VALUE0 = VALUE1))


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : ---0--0--1-----------1--
357     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : ----0--0--1-----------1-
358     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : -----0--0--1-----------1
359     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
360     : 0-----0--1--------1-----
360     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : -0-----0--1--------1----
361     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : --0-----0--1--------1---
362     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : 0--0-----1-----1--------
363     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
364     : -0--0-----1-----1-------
364     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : --0--0-----1-----1------
365     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'vote(node2,value0)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'vote(node2,value0)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM1,VALUE0)', 'member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM1,QUORUM0,VALUE0,NODE0. ~decision(VALUE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE0) | QUORUM0 = QUORUM1


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : 0--0--0--1--------------
366     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
367     : -0--0--0--1-------------
367     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
368     : --0--0--0--1------------
368     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))


=== Prime Orbit 25 =====================
size : 9
num_suborbits: 1
405 (*) : -----0--0--1--0------00-
405     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
406     : ----0--0--1---0------0-0
406     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
407     : ---0--0--1----0-------00
407     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
408     : --0-----0--1-0----00----
408     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
409     : -0-----0--1--0----0-0---
409     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : 0-----0--1---0-----00---
410     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
411     : --0--0-----10--00-------
411     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
412     : -0--0-----1-0--0-0------
412     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
413     : 0--0-----1--0---00------
413     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decision(value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$didNotVote$0$0, node$1$vote$0$0, node$1$vote$0$1, node$0$member$0$0, node$0$member$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decision(value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '1$didNotVote': 1, '1$vote': 2, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM1,VALUE1)', 'member(NODE0,QUORUM1)', '~vote(NODE0,VALUE0)', 'decision(VALUE1)', 'member(NODE0,QUORUM0)', '~didNotVote(NODE0)', '~chosenAt(QUORUM0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM1,QUORUM0,VALUE1,NODE0. chosenAt(QUORUM1,VALUE1) | ~member(NODE0,QUORUM1) | ~decision(VALUE1) | ~member(NODE0,QUORUM0) | didNotVote(NODE0) | chosenAt(QUORUM0,VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : ------1----1------------
72     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
73     : ------1---1-------------
73     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
74     : -------1---1------------
74     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
75     : -------1-1--------------
75     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
76     : --------1-1-------------
76     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
77     : --------11--------------
77     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
78     : ---1-------1------------
78     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
79     : ---1------1-------------
79     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
80     : ----1------1------------
80     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
81     : ----1----1--------------
81     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
82     : -----1----1-------------
82     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
83     : -----1---1--------------
83     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
84     : 1----------1------------
84     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
85     : 1---------1-------------
85     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
86     : -1---------1------------
86     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
87     : -1-------1--------------
87     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
88     : --1-------1-------------
88     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
89     : --1------1--------------
89     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall QUORUM0,VALUE1,VALUE0. ~chosenAt(QUORUM0,VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
90 (*) : ---------1-1------------
90     : ['decision(value0)', 'decision(value2)']
91     : ---------11-------------
91     : ['decision(value0)', 'decision(value1)']
92     : ----------11------------
92     : ['decision(value1)', 'decision(value2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1. ~decision(VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
138 (*) : -0--------1---1---------
138     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
139     : --0--------1--1---------
139     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
140     : 0--------1----1---------
140     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
141     : ----0-----1--1----------
141     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
142     : -----0-----1-1----------
142     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
143     : ---0-----1---1----------
143     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
144     : -------0--1-1-----------
144     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
145     : --------0--11-----------
145     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
146     : ------0--1--1-----------
146     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,VALUE0,NODE0. ~decision(VALUE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~didNotVote(NODE0)
qcost : 7




=== Prime Orbit 9 =====================
size : 36
num_suborbits: 1
147 (*) : ----------1---11--------
147     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
148     : -----------1--11--------
148     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
149     : ---------1----1-1-------
149     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
150     : -----------1--1-1-------
150     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
151     : ---------1----1--1------
151     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
152     : ----------1---1--1------
152     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
153     : ----------1--1-1--------
153     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
154     : -----------1-1-1--------
154     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
155     : ---------1---1--1-------
155     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
156     : -----------1-1--1-------
156     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
157     : ---------1---1---1------
157     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
158     : ----------1--1---1------
158     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
159     : ----------1---1---1-----
159     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
160     : -----------1--1---1-----
160     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
161     : ---------1----1----1----
161     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
162     : -----------1--1----1----
162     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
163     : ---------1----1-----1---
163     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
164     : ----------1---1-----1---
164     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
165     : ----------1-1-----1-----
165     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
166     : -----------11-----1-----
166     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
167     : ---------1--1------1----
167     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
168     : -----------11------1----
168     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
169     : ---------1--1-------1---
169     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
170     : ----------1-1-------1---
170     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
171     : ----------1--1-------1--
171     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
172     : -----------1-1-------1--
172     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
173     : ---------1---1--------1-
173     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
174     : -----------1-1--------1-
174     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
175     : ---------1---1---------1
175     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
176     : ----------1--1---------1
176     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
177     : ----------1-1--------1--
177     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
178     : -----------11--------1--
178     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
179     : ---------1--1---------1-
179     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
180     : -----------11---------1-
180     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
181     : ---------1--1----------1
181     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
182     : ----------1-1----------1
182     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE1,VALUE1,NODE0. ~vote(NODE1,VALUE1) | ~decision(VALUE0) | ~didNotVote(NODE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
183 (*) : ----------1---1-0-------
183     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
184     : -----------1--1--0------
184     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
185     : ---------1----10--------
185     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
186     : ----------1--1--0-------
186     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
187     : -----------1-1---0------
187     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
188     : ---------1---1-0--------
188     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
189     : ----------1---1----0----
189     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
190     : -----------1--1-----0---
190     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
191     : ---------1----1---0-----
191     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
192     : ----------1-1------0----
192     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
193     : -----------11-------0---
193     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
194     : ---------1--1-----0-----
194     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
195     : ----------1--1--------0-
195     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
196     : -----------1-1---------0
196     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
197     : ---------1---1-------0--
197     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
198     : ----------1-1---------0-
198     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
199     : -----------11----------0
199     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
200     : ---------1--1--------0--
200     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. vote(NODE1,VALUE0) | ~decision(VALUE0) | ~didNotVote(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
201 (*) : -----------1-11---------
201     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
202     : ----------1--11---------
202     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
203     : ---------1---11---------
203     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
204     : -----------11-1---------
204     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
205     : ----------1-1-1---------
205     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
206     : ---------1--1-1---------
206     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
207     : -----------111----------
207     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
208     : ----------1-11----------
208     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
209     : ---------1--11----------
209     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~didNotVote(NODE1) | ~decision(VALUE0) | ~didNotVote(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
219 (*) : -0--------1-----------0-
219     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
220     : --0--------1-----------0
220     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
221     : 0--------1-----------0--
221     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
222     : ----0-----1--------0----
222     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
223     : -----0-----1--------0---
223     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
224     : ---0-----1--------0-----
224     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
225     : -------0--1-----0-------
225     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
226     : --------0--1-----0------
226     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
227     : ------0--1-----0--------
227     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,VALUE0,NODE0. ~decision(VALUE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | vote(NODE0,VALUE0)
qcost : 7




=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
228 (*) : ----------1--------0--0-
228     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
229     : -----------1--------0--0
229     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
230     : ---------1--------0--0--
230     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
231     : ----------1-----0-----0-
231     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
232     : -----------1-----0-----0
232     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
233     : ---------1-----0-----0--
233     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
234     : ----------1-----0--0----
234     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
235     : -----------1-----0--0---
235     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
236     : ---------1-----0--0-----
236     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. vote(NODE1,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 15 =====================
size : 36
num_suborbits: 1
237 (*) : ----------1-------1---0-
237     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
238     : -----------1------1----0
238     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
239     : ---------1---------1-0--
239     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
240     : -----------1-------1---0
240     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
241     : ---------1----------10--
241     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
242     : ----------1---------1-0-
242     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
243     : ----------1--------0-1--
243     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
244     : -----------1--------01--
244     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
245     : ---------1--------0---1-
245     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
246     : -----------1--------0-1-
246     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
247     : ---------1--------0----1
247     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
248     : ----------1--------0---1
248     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
249     : ----------1----1------0-
249     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
250     : -----------1---1-------0
250     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
251     : ---------1------1----0--
251     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
252     : -----------1----1------0
252     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
253     : ---------1-------1---0--
253     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
254     : ----------1------1----0-
254     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
255     : ----------1-----0----1--
255     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
256     : -----------1-----0---1--
256     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
257     : ---------1-----0------1-
257     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
258     : -----------1-----0----1-
258     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
259     : ---------1-----0-------1
259     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
260     : ----------1-----0------1
260     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
261     : ----------1----1---0----
261     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
262     : -----------1---1----0---
262     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
263     : ---------1------1-0-----
263     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
264     : -----------1----1---0---
264     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
265     : ---------1-------10-----
265     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
266     : ----------1------1-0----
266     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
267     : ----------1-----0-1-----
267     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
268     : -----------1-----01-----
268     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
269     : ---------1-----0---1----
269     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
270     : -----------1-----0-1----
270     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
271     : ---------1-----0----1---
271     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
272     : ----------1-----0---1---
272     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE1,VALUE1,NODE0. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | vote(NODE1,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 16 =====================
size : 18
num_suborbits: 1
273 (*) : ----0-----1-------1-----
273     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
274     : -----0-----1------1-----
274     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
275     : ---0-----1---------1----
275     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
276     : -----0-----1-------1----
276     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
277     : ---0-----1----------1---
277     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
278     : ----0-----1---------1---
278     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
279     : -0--------1----------1--
279     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
280     : --0--------1---------1--
280     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
281     : 0--------1------------1-
281     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
282     : --0--------1----------1-
282     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
283     : 0--------1-------------1
283     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
284     : -0--------1------------1
284     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
285     : -------0--1----1--------
285     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
286     : --------0--1---1--------
286     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
287     : ------0--1------1-------
287     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
288     : --------0--1----1-------
288     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
289     : ------0--1-------1------
289     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
290     : -------0--1------1------
290     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall QUORUM0,VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 17 =====================
size : 36
num_suborbits: 2
291 (*) : ----------1----1--1-----
291     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
292     : -----------1---1--1-----
292     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
293     : ---------1------1--1----
293     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
294     : -----------1----1--1----
294     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
295     : ---------1-------1--1---
295     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
296     : ----------1------1--1---
296     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
297     : ----------1----1-----1--
297     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
298     : -----------1---1-----1--
298     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
299     : ---------1------1-----1-
299     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
300     : -----------1----1-----1-
300     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
301     : ---------1-------1-----1
301     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
302     : ----------1------1-----1
302     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
303     : ----------1-------1--1--
303     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
304     : -----------1------1--1--
304     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
305     : ---------1---------1--1-
305     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
306     : -----------1-------1--1-
306     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
307     : ---------1----------1--1
307     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
308     : ----------1---------1--1
308     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
309 (*) : ----------1----1----1---
309     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
310     : -----------1---1---1----
310     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
311     : ---------1------1---1---
311     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
312     : -----------1----1-1-----
312     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
313     : ---------1-------1-1----
313     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
314     : ----------1------11-----
314     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
315     : ----------1----1-------1
315     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
316     : -----------1---1------1-
316     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
317     : ---------1------1------1
317     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
318     : -----------1----1----1--
318     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
319     : ---------1-------1----1-
319     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
320     : ----------1------1---1--
320     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
321     : ----------1-------1----1
321     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
322     : -----------1------1---1-
322     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
323     : ---------1---------1---1
323     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
324     : -----------1-------1-1--
324     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
325     : ---------1----------1-1-
325     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
326     : ----------1---------11--
326     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
num_forall :   5
num_exists :   0
num_literals : 10
quantified form : forall VALUE0,NODE1,NODE0,VALUE1,VALUE2. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | ~vote(NODE1,VALUE2) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE0 = VALUE2 | VALUE1 = VALUE2 | VALUE0 = VALUE1))
qcost : 15




=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : ---0--0--1-----------1--
357     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : ----0--0--1-----------1-
358     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : -----0--0--1-----------1
359     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
360     : 0-----0--1--------1-----
360     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : -0-----0--1--------1----
361     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : --0-----0--1--------1---
362     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : 0--0-----1-----1--------
363     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
364     : -0--0-----1-----1-------
364     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : --0--0-----1-----1------
365     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall QUORUM1,QUORUM0,VALUE0,NODE0. ~decision(VALUE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : 0--0--0--1--------------
366     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
367     : -0--0--0--1-------------
367     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
368     : --0--0--0--1------------
368     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 25 =====================
size : 9
num_suborbits: 1
405 (*) : -----0--0--1--0------00-
405     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
406     : ----0--0--1---0------0-0
406     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
407     : ---0--0--1----0-------00
407     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
408     : --0-----0--1-0----00----
408     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
409     : -0-----0--1--0----0-0---
409     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : 0-----0--1---0-----00---
410     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
411     : --0--0-----10--00-------
411     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
412     : -0--0-----1-0--0-0------
412     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
413     : 0--0-----1--0---00------
413     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall QUORUM1,QUORUM0,VALUE1,NODE0. chosenAt(QUORUM1,VALUE1) | ~member(NODE0,QUORUM1) | ~decision(VALUE1) | ~member(NODE0,QUORUM0) | didNotVote(NODE0) | chosenAt(QUORUM0,VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 6.905 seconds

[QRM NOTE]: Time elapsed since last: 0.206 seconds

[QRM NOTE]: Peak memory: 2624738 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

=============================================================================================


New level: 1
 pending : [4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : [0]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 1 among pending : [4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 5 with phase True at level 1

After decision at level 1
 pending : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : [0, 5]


New level: 2
 pending : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : [0, 5]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, 67108864), (14, 33554432), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 2 among pending : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, 67108864), (14, 33554432), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 25]
 solution : [0, 5, 22]


New level: 3
 pending : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 25]
 solution : [0, 5, 22]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 25]
 solution : [0, 5, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, 67108864), (14, 33554432), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 5, 22]


Before reduction : 
 pending  : []
 solution : [0, 5, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 22]


Solution : [0, 5, 22] has cost 15.


Before backtrack at level 3
 pending : []
 solution : [0, 5, 22]

After backtrack at level 3
 pending : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 25]
 solution : [0, 5, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 25]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 25]
 solution : [0, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, 67108864), (14, 33554432), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 25]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 3 among pending : [4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, 67108864), (14, 33554432), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 3

After decision at level 3
 pending : [4, 8, 9, 10, 11, 14, 15, 16, 17, 21, 25]
 solution : [0, 5, 13]


New level: 4
 pending : [4, 8, 9, 10, 11, 14, 15, 16, 17, 21, 25]
 solution : [0, 5, 13]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 14, 15, 16, 17, 21, 25]
 solution : [0, 5, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, 67108864), (14, 33554432), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {4, 8, 9, 10, 11, 14, 15, 16, 17, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 5, 13]


Before reduction : 
 pending  : []
 solution : [0, 5, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 13]


Solution : [0, 5, 13] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [0, 5, 13]

After backtrack at level 4
 pending : [4, 8, 9, 10, 11, 14, 15, 16, 17, 21, 25]
 solution : [0, 5, 13]


Invert decision for 13 at level 3


New level: 4
 pending : [4, 8, 9, 10, 11, 14, 15, 16, 17, 21, 25]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 14, 15, 16, 17, 21, 25]
 solution : [0, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, 33554432), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 8, 9, 10, 11, 14, 15, 16, 17, 21, 25]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 4 among pending : [4, 8, 9, 10, 11, 14, 15, 16, 17, 21, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, 33554432), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 14]


New level: 5
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 14]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, 33554432), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {4, 8, 9, 10, 11, 15, 16, 17, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 5, 14]


Before reduction : 
 pending  : []
 solution : [0, 5, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 14]


Solution : [0, 5, 14] has cost 18.


Before backtrack at level 5
 pending : []
 solution : [0, 5, 14]

After backtrack at level 5
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 5 among pending : [4, 8, 9, 10, 11, 15, 16, 17, 21, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 5

After decision at level 5
 pending : [4, 8, 9, 10, 11, 15, 17, 21, 25]
 solution : [0, 5, 16]


New level: 6
 pending : [4, 8, 9, 10, 11, 15, 17, 21, 25]
 solution : [0, 5, 16]


Before reduction : 
 pending  : [4, 8, 9, 10, 11, 15, 17, 21, 25]
 solution : [0, 5, 16]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 1048576), (16, 2097152), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 8192), (9, 0), (10, 2048), (11, 2048), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {9, 4, 17, 15}

After reduction : 
 pending  : [8, 10, 11, 21, 25]
 solution : [0, 5, 16]


Before reduction : 
 pending  : [8, 10, 11, 21, 25]
 solution : [0, 5, 16]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 8192), (9, 0), (10, 2048), (11, 2048), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, 2048), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 10, 11, 21, 25]
 solution : [0, 5, 16]


Solution : [0, 5, 16] has cost 20.


Before backtrack at level 6
 pending : [8, 10, 11, 21, 25]
 solution : [0, 5, 16]

After backtrack at level 6
 pending : [8, 10, 11, 21, 25, 4, 9, 15, 17]
 solution : [0, 5, 16]


Invert decision for 16 at level 5


New level: 6
 pending : [8, 10, 11, 21, 25, 4, 9, 15, 17]
 solution : [0, 5]


Before reduction : 
 pending  : [8, 10, 11, 21, 25, 4, 9, 15, 17]
 solution : [0, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, 2048), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 1048576), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 10, 11, 21, 25, 4, 9, 15, 17]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 6 among pending : [8, 10, 11, 21, 25, 4, 9, 15, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 1048576), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 6

After decision at level 6
 pending : [8, 10, 11, 21, 25, 4, 9, 17]
 solution : [0, 5, 15]


New level: 7
 pending : [8, 10, 11, 21, 25, 4, 9, 17]
 solution : [0, 5, 15]


Before reduction : 
 pending  : [8, 10, 11, 21, 25, 4, 9, 17]
 solution : [0, 5, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 1048576), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 8192), (9, 0), (10, 2048), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {9, 4, 17}

After reduction : 
 pending  : [8, 10, 11, 21, 25]
 solution : [0, 5, 15]


Before reduction : 
 pending  : [8, 10, 11, 21, 25]
 solution : [0, 5, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 8192), (9, 0), (10, 2048), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, 2048), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 10, 11, 21, 25]
 solution : [0, 5, 15]


Solution : [0, 5, 15] has cost 20.


Before backtrack at level 7
 pending : [8, 10, 11, 21, 25]
 solution : [0, 5, 15]

After backtrack at level 7
 pending : [8, 10, 11, 21, 25, 4, 9, 17]
 solution : [0, 5, 15]


Invert decision for 15 at level 6


New level: 7
 pending : [8, 10, 11, 21, 25, 4, 9, 17]
 solution : [0, 5]


Before reduction : 
 pending  : [8, 10, 11, 21, 25, 4, 9, 17]
 solution : [0, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, 2048), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 10, 11, 21, 25, 4, 9, 17]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 7 among pending : [8, 10, 11, 21, 25, 4, 9, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [10, 11, 21, 25, 4, 9, 17]
 solution : [0, 5, 8]


New level: 8
 pending : [10, 11, 21, 25, 4, 9, 17]
 solution : [0, 5, 8]


Before reduction : 
 pending  : [10, 11, 21, 25, 4, 9, 17]
 solution : [0, 5, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16896), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {9, 10, 11}

After reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 5, 8]


Before reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 5, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16896), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16896), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 5, 8]


Solution : [0, 5, 8] has cost 18.


Before backtrack at level 8
 pending : [21, 25, 4, 17]
 solution : [0, 5, 8]

After backtrack at level 8
 pending : [21, 25, 4, 17, 10, 11, 9]
 solution : [0, 5, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [21, 25, 4, 17, 10, 11, 9]
 solution : [0, 5]


Before reduction : 
 pending  : [21, 25, 4, 17, 10, 11, 9]
 solution : [0, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16896), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 25, 4, 17, 10, 11, 9]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 8 among pending : [21, 25, 4, 17, 10, 11, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 8

After decision at level 8
 pending : [21, 25, 4, 17, 11, 9]
 solution : [0, 5, 10]


New level: 9
 pending : [21, 25, 4, 17, 11, 9]
 solution : [0, 5, 10]


Before reduction : 
 pending  : [21, 25, 4, 17, 11, 9]
 solution : [0, 5, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16384), (10, 262144), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16896), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {9, 11}

After reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 5, 10]


Before reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 5, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16896), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16896), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 5, 10]


Solution : [0, 5, 10] has cost 18.


Before backtrack at level 9
 pending : [21, 25, 4, 17]
 solution : [0, 5, 10]

After backtrack at level 9
 pending : [21, 25, 4, 17, 11, 9]
 solution : [0, 5, 10]


Invert decision for 10 at level 8


New level: 9
 pending : [21, 25, 4, 17, 11, 9]
 solution : [0, 5]


Before reduction : 
 pending  : [21, 25, 4, 17, 11, 9]
 solution : [0, 5]

Essensial at level 9 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16896), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 17, 9]
 solution : [0, 5, 11]


Before reduction : 
 pending  : [21, 25, 4, 17, 9]
 solution : [0, 5, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 17, 9]
 solution : [0, 5, 11]


Solution : [0, 5, 11] has cost 18.


Before backtrack at level 9
 pending : [21, 25, 4, 17, 9]
 solution : [0, 5, 11]

After backtrack at level 9
 pending : [21, 25, 4, 17, 9, 11]
 solution : [0, 5]


Before backtrack at level 8
 pending : [21, 25, 4, 17, 9, 11]
 solution : [0, 5]

After backtrack at level 8
 pending : [21, 25, 4, 17, 9, 11, 10]
 solution : [0, 5]


Before backtrack at level 7
 pending : [21, 25, 4, 17, 9, 11, 10]
 solution : [0, 5]

After backtrack at level 7
 pending : [21, 25, 4, 17, 9, 11, 10, 8]
 solution : [0, 5]


Before backtrack at level 6
 pending : [21, 25, 4, 17, 9, 11, 10, 8]
 solution : [0, 5]

After backtrack at level 6
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15]
 solution : [0, 5]


Before backtrack at level 5
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15]
 solution : [0, 5]

After backtrack at level 5
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0, 5]


Before backtrack at level 4
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0, 5]

After backtrack at level 4
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0, 5]


Before backtrack at level 3
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0, 5]

After backtrack at level 3
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0, 5]


Before backtrack at level 2
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0, 5]

After backtrack at level 2
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13, 22]
 solution : [0, 5]


Invert decision for 5 at level 1


New level: 2
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13, 22]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13, 22]
 solution : [0]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 34816), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13, 22]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 2 among pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0, 22]


New level: 3
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0, 22]


Before reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 22]


Before reduction : 
 pending  : []
 solution : [0, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 22]


Solution : [0, 22] has cost 10.


Before backtrack at level 3
 pending : []
 solution : [0, 22]

After backtrack at level 3
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 3 among pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 3

After decision at level 3
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0, 13]


New level: 4
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0, 13]


Before reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, 268435456), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {4, 8, 9, 10, 11, 14, 15, 16, 17, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 13]


Before reduction : 
 pending  : []
 solution : [0, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 13]


Solution : [0, 13] has cost 13.


Before backtrack at level 4
 pending : []
 solution : [0, 13]

After backtrack at level 4
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0, 13]


Invert decision for 13 at level 3


New level: 4
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 4 among pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0, 14]


New level: 5
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0, 14]


Before reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, 134217728), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {4, 8, 9, 10, 11, 15, 16, 17, 21, 25}

After reduction : 
 pending  : []
 solution : [0, 14]


Before reduction : 
 pending  : []
 solution : [0, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 14]


Solution : [0, 14] has cost 13.


Before backtrack at level 5
 pending : []
 solution : [0, 14]

After backtrack at level 5
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 5 among pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 5

After decision at level 5
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15]
 solution : [0, 16]


New level: 6
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15]
 solution : [0, 16]


Before reduction : 
 pending  : [21, 25, 4, 17, 9, 11, 10, 8, 15]
 solution : [0, 16]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, 8388608), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 32768), (9, 0), (10, 8192), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {17, 4, 9, 15}

After reduction : 
 pending  : [21, 25, 11, 10, 8]
 solution : [0, 16]


Before reduction : 
 pending  : [21, 25, 11, 10, 8]
 solution : [0, 16]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 32768), (9, 0), (10, 8192), (11, 8192), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, 8192), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 25, 11, 10, 8]
 solution : [0, 16]


Solution : [0, 16] has cost 15.


Before backtrack at level 6
 pending : [21, 25, 11, 10, 8]
 solution : [0, 16]

After backtrack at level 6
 pending : [21, 25, 11, 10, 8, 4, 17, 9, 15]
 solution : [0, 16]


Invert decision for 16 at level 5


New level: 6
 pending : [21, 25, 11, 10, 8, 4, 17, 9, 15]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 11, 10, 8, 4, 17, 9, 15]
 solution : [0]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, 8192), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 25, 11, 10, 8, 4, 17, 9, 15]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 6 among pending : [21, 25, 11, 10, 8, 4, 17, 9, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 6

After decision at level 6
 pending : [21, 25, 11, 10, 8, 4, 17, 9]
 solution : [0, 15]


New level: 7
 pending : [21, 25, 11, 10, 8, 4, 17, 9]
 solution : [0, 15]


Before reduction : 
 pending  : [21, 25, 11, 10, 8, 4, 17, 9]
 solution : [0, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 32768), (9, 0), (10, 8192), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {17, 4, 9}

After reduction : 
 pending  : [21, 25, 11, 10, 8]
 solution : [0, 15]


Before reduction : 
 pending  : [21, 25, 11, 10, 8]
 solution : [0, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 32768), (9, 0), (10, 8192), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, 8192), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 25, 11, 10, 8]
 solution : [0, 15]


Solution : [0, 15] has cost 15.


Before backtrack at level 7
 pending : [21, 25, 11, 10, 8]
 solution : [0, 15]

After backtrack at level 7
 pending : [21, 25, 11, 10, 8, 4, 17, 9]
 solution : [0, 15]


Invert decision for 15 at level 6


New level: 7
 pending : [21, 25, 11, 10, 8, 4, 17, 9]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 11, 10, 8, 4, 17, 9]
 solution : [0]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, 8192), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 25, 11, 10, 8, 4, 17, 9]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 7 among pending : [21, 25, 11, 10, 8, 4, 17, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [21, 25, 11, 10, 4, 17, 9]
 solution : [0, 8]


New level: 8
 pending : [21, 25, 11, 10, 4, 17, 9]
 solution : [0, 8]


Before reduction : 
 pending  : [21, 25, 11, 10, 4, 17, 9]
 solution : [0, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 67584), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {9, 10, 11}

After reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 8]


Before reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 67584), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 67584), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 8]


Solution : [0, 8] has cost 13.


Before backtrack at level 8
 pending : [21, 25, 4, 17]
 solution : [0, 8]

After backtrack at level 8
 pending : [21, 25, 4, 17, 11, 10, 9]
 solution : [0, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [21, 25, 4, 17, 11, 10, 9]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 17, 11, 10, 9]
 solution : [0]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 67584), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 25, 4, 17, 11, 10, 9]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 8 among pending : [21, 25, 4, 17, 11, 10, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 8

After decision at level 8
 pending : [21, 25, 4, 17, 11, 9]
 solution : [0, 10]


New level: 9
 pending : [21, 25, 4, 17, 11, 9]
 solution : [0, 10]


Before reduction : 
 pending  : [21, 25, 4, 17, 11, 9]
 solution : [0, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, 65536), (10, 1048576), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 67584), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {9, 11}

After reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 10]


Before reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 67584), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 67584), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 17]
 solution : [0, 10]


Solution : [0, 10] has cost 13.


Before backtrack at level 9
 pending : [21, 25, 4, 17]
 solution : [0, 10]

After backtrack at level 9
 pending : [21, 25, 4, 17, 11, 9]
 solution : [0, 10]


Invert decision for 10 at level 8


New level: 9
 pending : [21, 25, 4, 17, 11, 9]
 solution : [0]


Before reduction : 
 pending  : [21, 25, 4, 17, 11, 9]
 solution : [0]

Essensial at level 9 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 67584), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 17, 9]
 solution : [0, 11]


Before reduction : 
 pending  : [21, 25, 4, 17, 9]
 solution : [0, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 139264), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 25, 4, 17, 9]
 solution : [0, 11]


Solution : [0, 11] has cost 13.


Before backtrack at level 9
 pending : [21, 25, 4, 17, 9]
 solution : [0, 11]

After backtrack at level 9
 pending : [21, 25, 4, 17, 9, 11]
 solution : [0]


Before backtrack at level 8
 pending : [21, 25, 4, 17, 9, 11]
 solution : [0]

After backtrack at level 8
 pending : [21, 25, 4, 17, 9, 11, 10]
 solution : [0]


Before backtrack at level 7
 pending : [21, 25, 4, 17, 9, 11, 10]
 solution : [0]

After backtrack at level 7
 pending : [21, 25, 4, 17, 9, 11, 10, 8]
 solution : [0]


Before backtrack at level 6
 pending : [21, 25, 4, 17, 9, 11, 10, 8]
 solution : [0]

After backtrack at level 6
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15]
 solution : [0]


Before backtrack at level 5
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15]
 solution : [0]

After backtrack at level 5
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0]


Before backtrack at level 4
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16]
 solution : [0]

After backtrack at level 4
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0]


Before backtrack at level 3
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14]
 solution : [0]

After backtrack at level 3
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0]


Before backtrack at level 2
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13]
 solution : [0]

After backtrack at level 2
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13, 22]
 solution : [0]


Before backtrack at level 1
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13, 22]
 solution : [0]

After backtrack at level 1
 pending : [21, 25, 4, 17, 9, 11, 10, 8, 15, 16, 14, 13, 22, 5]
 solution : [0]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 10

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=2)

invariant [def_didNotVote] didNotVote(N) = forall V. ~vote(N,V) # definition

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [0, 22] (length = 2)

invariant [invar_0] forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_22] forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 7.021 seconds

[QRM NOTE]: Time elapsed since last: 0.115 seconds

[QRM NOTE]: Peak memory: 2585930 bytes


===============================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===============================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.199 seconds

[QRM NOTE]: Time elapsed since last: 0.178 seconds

[QRM NOTE]: Peak memory: 1570389 bytes


================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall N. didNotVote(N) <-> (forall V. ~vote(N,V))) & (forall V,Q. chosenAt(Q,V) <-> (forall N. member(N,Q) -> vote(N,V))) & (forall Q2,Q1. (exists N. (member(N,Q1) & member(N,Q2)))) & (forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1) & (forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))))

[QRM NOTE]: Time elapsed since start: 9.071 seconds

[QRM NOTE]: Time elapsed since last: 1.872 seconds

[QRM NOTE]: Peak memory: 1612175 bytes


********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************

[QRM RESULT]: PASS

