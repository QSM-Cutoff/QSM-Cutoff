
************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_epr.ivy

************************************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_3.finite.cpp toy_consensus_epr.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_3.finite.o toy_consensus_epr.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.195 seconds

[QRM NOTE]: Time elapsed since last: 7.195 seconds

[QRM NOTE]: Peak memory: 1190837 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        94

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 84


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: vote('node', 'value')
predicate: voted('node',)
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
predicate: decided('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 16816043, 1225039787, 1227136939, 17342379, 19439531, 18913195, 42923, 348075


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000
lex min decimal: 427
states:
000000000000000000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000100000000100
lex min decimal: 5035
states:
000000000000000000100001
000000000000010000000100
000000000000000000010001
000000000000000000001001
000000000000000100000010
000000000000001000000100
000000000000000001000010
000000000000100000000100
000000000000000010000010




=== State Orbit 2 =====================
size : 9
repr state: 100000000000100100000110
lex min decimal: 16816043
states:
001000000000001001000110
000100000000100000100101
000001000000001000001101
000000001000000001001011
100000000000100100000110
010000000000010010000110
000000010000000010010011
000000100000000100100011
000010000000010000010101




=== State Orbit 3 =====================
size : 3
repr state: 100100100000100100100111
lex min decimal: 1225039787
states:
010010010000010010010111
100100100000100100100111
001001001000001001001111




=== State Orbit 4 =====================
size : 3
repr state: 100100100100100100100111
lex min decimal: 1227136939
states:
010010010010010010010111
001001001001001001001111
100100100100100100100111




=== State Orbit 5 =====================
size : 18
repr state: 100000000000100100010111
lex min decimal: 17342379
states:
000000001000100001001111
010000000000010010001111
100000000000100100001111
000001000000001100001111
000000010000001010010111
001000000000001001100111
001000000000001001010111
000010000000010001010111
000100000000100010100111
000100000000100001100111
000010000000010100010111
000001000000001010001111
000000100000001100100111
010000000000010010100111
000000100000010100100111
000000010000100010010111
000000001000010001001111
100000000000100100010111




=== State Orbit 6 =====================
size : 18
repr state: 100000000100100100010111
lex min decimal: 19439531
states:
100000000100100100001111
000100000100100010100111
000000100100001100100111
000000010010001010010111
000001000001001010001111
000000100100010100100111
000000001001100001001111
100000000100100100010111
001000000001001001010111
000010000010010100010111
000001000001001100001111
001000000001001001100111
000000010010100010010111
010000000010010010001111
000100000100100001100111
000010000010010001010111
000000001001010001001111
010000000010010010100111




=== State Orbit 7 =====================
size : 9
repr state: 100000000100100100000110
lex min decimal: 18913195
states:
000000010010000010010011
000010000010010000010101
000000100100000100100011
000100000100100000100101
010000000010010010000110
000001000001001000001101
000000001001000001001011
001000000001001001000110
100000000100100100000110




=== State Orbit 8 =====================
size : 18
repr state: 000000000000100010000110
lex min decimal: 42923
states:
000000000000001100000110
000000000000000001010011
000000000000000100001011
000000000000001010000110
000000000000000010001011
000000000000000010100011
000000000000100010000110
000000000000010001000110
000000000000010000001101
000000000000010000100101
000000000000001000100101
000000000000100000010101
000000000000001000010101
000000000000000001100011
000000000000100000001101
000000000000000100010011
000000000000010100000110
000000000000100001000110




=== State Orbit 9 =====================
size : 6
repr state: 000000000000100010001111
lex min decimal: 348075
states:
000000000000010100001111
000000000000010001100111
000000000000100010001111
000000000000100001010111
000000000000001100010111
000000000000001010100111



[QRM NOTE]: Time elapsed since start: 7.385 seconds

[QRM NOTE]: Time elapsed since last: 0.190 seconds

[QRM NOTE]: Peak memory: 1253464 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.387 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 227498 bytes


===============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

===============================================================================================================


==========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : --------1------1--------
9     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
10     : -------1-------1--------
10     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
11     : --------1-------1-------
11     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
12     : ------1---------1-------
12     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
13     : -------1---------1------
13     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
14     : ------1----------1------
14     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
15     : --------1---------1-----
15     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
16     : -------1----------1-----
16     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
17     : --------1----------1----
17     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
18     : ------1------------1----
18     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
19     : -------1------------1---
19     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
20     : ------1-------------1---
20     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
21     : -----1------1-----------
21     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
22     : ----1-------1-----------
22     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
23     : -----1-------1----------
23     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
24     : ---1---------1----------
24     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
25     : ----1---------1---------
25     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
26     : ---1----------1---------
26     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
27     : -----1------------1-----
27     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
28     : ----1-------------1-----
28     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
29     : -----1-------------1----
29     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
30     : ---1---------------1----
30     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
31     : ----1---------------1---
31     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
32     : ---1----------------1---
32     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
33     : --1---------1-----------
33     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
34     : -1----------1-----------
34     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
35     : --1----------1----------
35     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
36     : 1------------1----------
36     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
37     : -1------------1---------
37     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
38     : 1-------------1---------
38     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
39     : --1------------1--------
39     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
40     : -1-------------1--------
40     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
41     : --1-------------1-------
41     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
42     : 1---------------1-------
42     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
43     : -1---------------1------
43     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
44     : 1----------------1------
44     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : -------------1-------0--
45     : ['vote(node0,value1)', '~voted(node0)']
46     : --------------1------0--
46     : ['vote(node0,value2)', '~voted(node0)']
47     : ------------1--------0--
47     : ['vote(node0,value0)', '~voted(node0)']
48     : ----------------1-----0-
48     : ['vote(node1,value1)', '~voted(node1)']
49     : -----------------1----0-
49     : ['vote(node1,value2)', '~voted(node1)']
50     : ---------------1------0-
50     : ['vote(node1,value0)', '~voted(node1)']
51     : -------------------1---0
51     : ['vote(node2,value1)', '~voted(node2)']
52     : --------------------1--0
52     : ['vote(node2,value2)', '~voted(node2)']
53     : ------------------1----0
53     : ['vote(node2,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : -1-------1--------------
54     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
55     : --1------1--------------
55     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
56     : 1---------1-------------
56     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
57     : --1-------1-------------
57     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
58     : 1----------1------------
58     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
59     : -1---------1------------
59     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
60     : ----1----1--------------
60     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
61     : -----1---1--------------
61     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
62     : ---1------1-------------
62     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
63     : -----1----1-------------
63     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
64     : ---1-------1------------
64     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
65     : ----1------1------------
65     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
66     : -------1-1--------------
66     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
67     : --------11--------------
67     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
68     : ------1---1-------------
68     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
69     : --------1-1-------------
69     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
70     : ------1----1------------
70     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
71     : -------1---1------------
71     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ---------1-1------------
72     : ['decided(value0)', 'decided(value2)']
73     : ---------11-------------
73     : ['decided(value0)', 'decided(value1)']
74     : ----------11------------
74     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : ----1--------------0----
75     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
76     : -----1--------------0---
76     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
77     : ---1--------------0-----
77     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
78     : -1--------------0-------
78     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
79     : --1--------------0------
79     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
80     : 1--------------0--------
80     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
81     : -------1-----------0----
81     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
82     : --------1-----------0---
82     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
83     : ------1-----------0-----
83     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
84     : -1-----------0----------
84     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
85     : --1-----------0---------
85     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
86     : 1-----------0-----------
86     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
87     : -------1--------0-------
87     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
88     : --------1--------0------
88     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
89     : ------1--------0--------
89     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
90     : ----1--------0----------
90     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
91     : -----1--------0---------
91     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
92     : ---1--------0-----------
92     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 27
num_suborbits: 2
93 (*) : --1-1-------------------
93     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
94     : -1---1------------------
94     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
95     : --11--------------------
95     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
96     : 1----1------------------
96     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
97     : -1-1--------------------
97     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
98     : 1---1-------------------
98     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
99     : --1----1----------------
99     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
100     : -1------1---------------
100     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
101     : --1---1-----------------
101     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
102     : 1-------1---------------
102     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
103     : -1----1-----------------
103     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
104     : 1------1----------------
104     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
105     : -----1-1----------------
105     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
106     : ----1---1---------------
106     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
107     : -----11-----------------
107     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
108     : ---1----1---------------
108     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
109     : ----1-1-----------------
109     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
110     : ---1---1----------------
110     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
111 (*) : ---11-------------------
111     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
112     : ---1-1------------------
112     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
113     : ----11------------------
113     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
114     : 11----------------------
114     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
115     : 1-1---------------------
115     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
116     : -11---------------------
116     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
117     : ------11----------------
117     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
118     : ------1-1---------------
118     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
119     : -------11---------------
119     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 18
num_suborbits: 1
120 (*) : ----1----------------0--
120     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node0)']
121     : -----1---------------0--
121     : ['chosenAt(quorum__node0_node2,value2)', '~voted(node0)']
122     : ---1-----------------0--
122     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node0)']
123     : -1-------------------0--
123     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node0)']
124     : --1------------------0--
124     : ['chosenAt(quorum__node0_node1,value2)', '~voted(node0)']
125     : 1--------------------0--
125     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
126     : -------1--------------0-
126     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node1)']
127     : --------1-------------0-
127     : ['chosenAt(quorum__node1_node2,value2)', '~voted(node1)']
128     : ------1---------------0-
128     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node1)']
129     : -1--------------------0-
129     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node1)']
130     : --1-------------------0-
130     : ['chosenAt(quorum__node0_node1,value2)', '~voted(node1)']
131     : 1---------------------0-
131     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
132     : -------1---------------0
132     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node2)']
133     : --------1--------------0
133     : ['chosenAt(quorum__node1_node2,value2)', '~voted(node2)']
134     : ------1----------------0
134     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node2)']
135     : ----1------------------0
135     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node2)']
136     : -----1-----------------0
136     : ['chosenAt(quorum__node0_node2,value2)', '~voted(node2)']
137     : ---1-------------------0
137     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
138 (*) : -0--------1------------0
138     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
139     : --0--------1-----------0
139     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
140     : 0--------1-------------0
140     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
141     : ----0-----1-----------0-
141     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
142     : -----0-----1----------0-
142     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
143     : ---0-----1------------0-
143     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
144     : -------0--1----------0--
144     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
145     : --------0--1---------0--
145     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
146     : ------0--1-----------0--
146     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
147 (*) : -0--------1--------0----
147     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
148     : --0--------1--------0---
148     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
149     : 0--------1--------0-----
149     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
150     : ----0-----1-----0-------
150     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
151     : -----0-----1-----0------
151     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
152     : ---0-----1-----0--------
152     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
153     : -------0--1--0----------
153     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
154     : --------0--1--0---------
154     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
155     : ------0--1--0-----------
155     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
156 (*) : ----------1-----0--0----
156     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
157     : -----------1-----0--0---
157     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
158     : ---------1-----0--0-----
158     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
159     : ----------1--0-----0----
159     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
160     : -----------1--0-----0---
160     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
161     : ---------1--0-----0-----
161     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
162     : ----------1--0--0-------
162     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
163     : -----------1--0--0------
163     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
164     : ---------1--0--0--------
164     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
165 (*) : ----------1-----0------0
165     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
166     : -----------1-----0-----0
166     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
167     : ---------1-----0-------0
167     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
168     : ----------1--------0--0-
168     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
169     : -----------1--------0-0-
169     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
170     : ---------1--------0---0-
170     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
171     : ----------1--0---------0
171     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
172     : -----------1--0--------0
172     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
173     : ---------1--0----------0
173     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
174     : ----------1--------0-0--
174     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
175     : -----------1--------00--
175     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
176     : ---------1--------0--0--
176     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
177     : ----------1--0--------0-
177     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
178     : -----------1--0-------0-
178     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
179     : ---------1--0---------0-
179     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
180     : ----------1-----0----0--
180     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
181     : -----------1-----0---0--
181     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
182     : ---------1-----0-----0--
182     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
183 (*) : ----------1--0-1--------
183     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
184     : -----------1--01--------
184     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
185     : ---------1--0---1-------
185     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
186     : -----------1--0-1-------
186     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
187     : ---------1--0----1------
187     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
188     : ----------1--0---1------
188     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
189     : ----------1--0----1-----
189     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
190     : -----------1--0---1-----
190     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
191     : ---------1--0------1----
191     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
192     : -----------1--0----1----
192     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
193     : ---------1--0-------1---
193     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
194     : ----------1--0------1---
194     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
195     : ----------1-1---0-------
195     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
196     : -----------11----0------
196     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
197     : ---------1---1-0--------
197     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
198     : -----------1-1---0------
198     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
199     : ---------1----10--------
199     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
200     : ----------1---1-0-------
200     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
201     : ----------1-----0-1-----
201     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
202     : -----------1-----01-----
202     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
203     : ---------1-----0---1----
203     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
204     : -----------1-----0-1----
204     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
205     : ---------1-----0----1---
205     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
206     : ----------1-----0---1---
206     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
207     : ----------1-1------0----
207     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
208     : -----------11-------0---
208     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
209     : ---------1---1----0-----
209     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
210     : -----------1-1------0---
210     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
211     : ---------1----1---0-----
211     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
212     : ----------1---1----0----
212     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
213     : ----------1----1---0----
213     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
214     : -----------1---1----0---
214     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
215     : ---------1------1-0-----
215     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
216     : -----------1----1---0---
216     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
217     : ---------1-------10-----
217     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
218     : ----------1------1-0----
218     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
219 (*) : ----0-----1----1--------
219     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
220     : -----0-----1---1--------
220     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
221     : ---0-----1------1-------
221     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
222     : -----0-----1----1-------
222     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
223     : ---0-----1-------1------
223     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
224     : ----0-----1------1------
224     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
225     : -0--------1-------1-----
225     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
226     : --0--------1------1-----
226     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
227     : 0--------1---------1----
227     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
228     : --0--------1-------1----
228     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
229     : 0--------1----------1---
229     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
230     : -0--------1---------1---
230     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
231     : -------0--1-1-----------
231     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
232     : --------0--11-----------
232     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
233     : ------0--1---1----------
233     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
234     : --------0--1-1----------
234     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
235     : ------0--1----1---------
235     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
236     : -------0--1---1---------
236     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
237 (*) : ----------1----1-------0
237     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
238     : -----------1---1-------0
238     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
239     : ---------1------1------0
239     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
240     : -----------1----1------0
240     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
241     : ---------1-------1-----0
241     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
242     : ----------1------1-----0
242     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
243     : ----------1-------1---0-
243     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
244     : -----------1------1---0-
244     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
245     : ---------1---------1--0-
245     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
246     : -----------1-------1--0-
246     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
247     : ---------1----------1-0-
247     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
248     : ----------1---------1-0-
248     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
249     : ----------1-1----------0
249     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
250     : -----------11----------0
250     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
251     : ---------1---1---------0
251     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
252     : -----------1-1---------0
252     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
253     : ---------1----1--------0
253     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
254     : ----------1---1--------0
254     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
255     : ----------1-------1--0--
255     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
256     : -----------1------1--0--
256     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
257     : ---------1---------1-0--
257     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
258     : -----------1-------1-0--
258     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
259     : ---------1----------10--
259     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
260     : ----------1---------10--
260     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
261     : ----------1-1---------0-
261     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
262     : -----------11---------0-
262     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
263     : ---------1---1--------0-
263     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
264     : -----------1-1--------0-
264     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
265     : ---------1----1-------0-
265     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
266     : ----------1---1-------0-
266     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
267     : ----------1----1-----0--
267     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
268     : -----------1---1-----0--
268     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
269     : ---------1------1----0--
269     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
270     : -----------1----1----0--
270     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
271     : ---------1-------1---0--
271     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
272     : ----------1------1---0--
272     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 36
num_suborbits: 2
273 (*) : ----------1-1--1--------
273     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
274     : -----------11--1--------
274     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
275     : ---------1---1--1-------
275     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
276     : -----------1-1--1-------
276     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
277     : ---------1----1--1------
277     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
278     : ----------1---1--1------
278     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
279     : ----------1-1-----1-----
279     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
280     : -----------11-----1-----
280     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
281     : ---------1---1-----1----
281     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
282     : -----------1-1-----1----
282     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
283     : ---------1----1-----1---
283     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
284     : ----------1---1-----1---
284     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
285     : ----------1----1--1-----
285     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
286     : -----------1---1--1-----
286     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
287     : ---------1------1--1----
287     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
288     : -----------1----1--1----
288     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
289     : ---------1-------1--1---
289     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
290     : ----------1------1--1---
290     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
291 (*) : ----------1---11--------
291     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
292     : -----------1-1-1--------
292     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
293     : ---------1----1-1-------
293     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
294     : -----------11---1-------
294     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
295     : ---------1---1---1------
295     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
296     : ----------1-1----1------
296     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
297     : ----------1---1---1-----
297     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
298     : -----------1-1----1-----
298     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
299     : ---------1----1----1----
299     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
300     : -----------11------1----
300     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
301     : ---------1---1------1---
301     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
302     : ----------1-1-------1---
302     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
303     : ----------1------11-----
303     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
304     : -----------1----1-1-----
304     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
305     : ---------1-------1-1----
305     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
306     : -----------1---1---1----
306     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
307     : ---------1------1---1---
307     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
308     : ----------1----1----1---
308     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----------1----------0-0
309     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
310     : -----------1---------0-0
310     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
311     : ---------1-----------0-0
311     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
312     : ----------1----------00-
312     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
313     : -----------1---------00-
313     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
314     : ---------1-----------00-
314     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
315     : ----------1-----------00
315     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
316     : -----------1----------00
316     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
317     : ---------1------------00
317     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
318 (*) : --0-----------1--1------
318     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
319     : -0-----------1--1-------
319     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
320     : 0-----------1--1--------
320     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
321     : -----0--------1-----1---
321     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
322     : ----0--------1-----1----
322     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
323     : ---0--------1-----1-----
323     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
324     : --------0--------1--1---
324     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
325     : -------0--------1--1----
325     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
326     : ------0--------1--1-----
326     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
327 (*) : --0--1-----------1------
327     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
328     : -0--1-----------1-------
328     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
329     : 0--1-----------1--------
329     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
330     : --1--0--------------1---
330     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
331     : -1--0--------------1----
331     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
332     : 1--0--------------1-----
332     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
333     : --0-----1-----1---------
333     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
334     : -0-----1-----1----------
334     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
335     : 0-----1-----1-----------
335     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
336     : --1-----0-----------1---
336     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
337     : -1-----0-----------1----
337     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
338     : 1-----0-----------1-----
338     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
339     : -----0--1-----1---------
339     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
340     : ----0--1-----1----------
340     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
341     : ---0--1-----1-----------
341     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
342     : -----1--0--------1------
342     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
343     : ----1--0--------1-------
343     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
344     : ---1--0--------1--------
344     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : --1--1--0---------------
345     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
346     : -1--1--0----------------
346     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
347     : 1--1--0-----------------
347     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
348     : --1--0--1---------------
348     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
349     : -1--0--1----------------
349     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
350     : 1--0--1-----------------
350     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
351     : --0--1--1---------------
351     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
352     : -0--1--1----------------
352     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
353     : 0--1--1-----------------
353     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : --0--0--0--1------------
354     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
355     : -0--0--0--1-------------
355     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : 0--0--0--1--------------
356     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : --0-----0--1-----1------
357     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : -0-----0--1-----1-------
358     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : 0-----0--1-----1--------
359     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : -----0--0--1--------1---
360     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
361     : ----0--0--1--------1----
361     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : ---0--0--1--------1-----
362     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : --0--0-----1--1---------
363     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
364     : -0--0-----1--1----------
364     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : ------------000------1--
366     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
367     : ---------------000----1-
367     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
368     : ------------------000--1
368     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 1
369 (*) : ---0--1------00------1--
369     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
370     : ----0--1----0-0------1--
370     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
371     : -----0--1---00-------1--
371     : ['chosenAt(quorum__node1_node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
372     : 0-----1------00------1--
372     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
373     : -0-----1----0-0------1--
373     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
374     : --0-----1---00-------1--
374     : ['chosenAt(quorum__node1_node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
375     : ---1--0---------00----1-
375     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
376     : ----1--0-------0-0----1-
376     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
377     : -----1--0------00-----1-
377     : ['chosenAt(quorum__node0_node2,value2)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
378     : 0--1------------00----1-
378     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
379     : -0--1----------0-0----1-
379     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
380     : --0--1---------00-----1-
380     : ['chosenAt(quorum__node0_node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
381     : 1-----0------------00--1
381     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
382     : -1-----0----------0-0--1
382     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
383     : --1-----0---------00---1
383     : ['chosenAt(quorum__node0_node1,value2)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
384     : 1--0---------------00--1
384     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
385     : -1--0-------------0-0--1
385     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
386     : --1--0------------00---1
386     : ['chosenAt(quorum__node0_node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 1
387 (*) : -----0------00------11--
387     : ['vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
388     : ----0-------0-0----1-1--
388     : ['vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
389     : ---0---------00---1--1--
389     : ['vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
390     : --0---------00---1---1--
390     : ['vote(node1,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
391     : -0----------0-0-1----1--
391     : ['vote(node1,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
392     : 0------------001-----1--
392     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
393     : --------0------00---1-1-
393     : ['vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
394     : -------0-------0-0-1--1-
394     : ['vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
395     : ------0---------001---1-
395     : ['vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
396     : --0-----------100-----1-
396     : ['vote(node0,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
397     : -0-----------1-0-0----1-
397     : ['vote(node0,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
398     : 0-----------1---00----1-
398     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
399     : --------0--------100---1
399     : ['vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
400     : -------0--------1-0-0--1
400     : ['vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
401     : ------0--------1---00--1
401     : ['vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
402     : -----0--------1---00---1
402     : ['vote(node0,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
403     : ----0--------1----0-0--1
403     : ['vote(node0,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
404     : ---0--------1------00--1
404     : ['vote(node0,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 18
num_suborbits: 1
405 (*) : --0----0------10---1--1-
405     : ['vote(node0,value2)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
406     : -0------0----1-0----1-1-
406     : ['vote(node0,value1)', 'vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)']
407     : --0---0-------1-0-1---1-
407     : ['vote(node0,value2)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
408     : 0-------0---1---0---1-1-
408     : ['vote(node0,value0)', 'vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)']
409     : -0----0------1---01---1-
409     : ['vote(node0,value1)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)']
410     : 0------0----1----0-1--1-
410     : ['vote(node0,value0)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)']
411     : -----0-0------1-1-0----1
411     : ['vote(node0,value2)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
412     : ----0---0----1---10----1
412     : ['vote(node0,value1)', 'vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)']
413     : -----00-------11---0---1
413     : ['vote(node0,value2)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
414     : ---0----0---1----1-0---1
414     : ['vote(node0,value0)', 'vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value1)']
415     : ----0-0------1-1----0--1
415     : ['vote(node0,value1)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value2)']
416     : ---0---0----1---1---0--1
416     : ['vote(node0,value0)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value2)']
417     : --0-0-------0----1-1-1--
417     : ['vote(node1,value2)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
418     : -0---0------0---1---11--
418     : ['vote(node1,value1)', 'vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)']
419     : --00---------0---11--1--
419     : ['vote(node1,value2)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
420     : 0----0-------0-1----11--
420     : ['vote(node1,value0)', 'vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)']
421     : -0-0----------0-1-1--1--
421     : ['vote(node1,value1)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)']
422     : 0---0---------01---1-1--
422     : ['vote(node1,value0)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : 0-----0--1------00----1-
423     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
424     : -0-----0--1----0-0----1-
424     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
425     : --0-----0--1---00-----1-
425     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
426     : ---0--0--1---------00--1
426     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
427     : ----0--0--1-------0-0--1
427     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
428     : -----0--0--1------00---1
428     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
429     : 0--0-----1---00------1--
429     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0-0------1--
430     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----100-------1--
431     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
432 (*) : -0----------0-00-0---11-
432     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
433     : --0---------00-00----11-
433     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
434     : 0------------00-00---11-
434     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
435     : ----0-------0-0---0-01-1
435     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
436     : -----0------00----00-1-1
436     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
437     : ---0---------00----001-1
437     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
438     : -------0-------0-00-0-11
438     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
439     : --------0------00-00--11
439     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
440     : ------0---------00-00-11
440     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 18
num_suborbits: 1
441 (*) : -0--0-0------1---0--0-11
441     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
442     : --0--00-------1-0--0--11
442     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
443     : 0--0---0----1----0--0-11
443     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
444     : --0--0-0------10--0---11
444     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
445     : 0--0----0---1---0--0--11
445     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
446     : -0--0---0----1-0--0---11
446     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
447     : -0-0---0------0-1---01-1
447     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
448     : --00----0----0---1-0-1-1
448     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node2,value1)']
449     : 0---0-0-------01----01-1
449     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
450     : --0-0---0---0----10--1-1
450     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node2,value0)']
451     : 0----00------0-1---0-1-1
451     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
452     : -0---0-0----0---1-0--1-1
452     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)']
453     : 0---0--0------0--0-1-11-
453     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
454     : 0----0--0----0--0---111-
454     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)']
455     : -0-0--0-------0--01--11-
455     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
456     : -0---0--0---0--0----111-
456     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)']
457     : --00--0------0--0-1--11-
457     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
458     : --0-0--0----0--0---1-11-
458     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 36
num_suborbits: 1
459 (*) : ----0-0------1--00--0-11
459     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
460     : -----00-------1-00-0--11
460     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
461     : ---0---0----1--0-0--0-11
461     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
462     : -----0-0------10-00---11
462     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
463     : ---0----0---1--00--0--11
463     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
464     : ----0---0----1-00-0---11
464     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
465     : -0----0------1---0-00-11
465     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
466     : --0---0-------1-0--00-11
466     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
467     : 0------0----1----00-0-11
467     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
468     : --0----0------10--0-0-11
468     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
469     : 0-------0---1---0-00--11
469     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
470     : -0------0----1-0--00--11
470     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
471     : ---0---0-----00-1---01-1
471     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
472     : ---0----0----00--1-0-1-1
472     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
473     : ----0-0-----0-01----01-1
473     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
474     : ----0---0---0-0--10--1-1
474     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
475     : -----00-----00-1---0-1-1
475     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
476     : -----0-0----00--1-0--1-1
476     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
477     : -0-0----------0-1--001-1
477     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
478     : --00---------0---1-001-1
478     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
479     : 0---0---------01--0-01-1
479     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
480     : --0-0-------0----10-01-1
480     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
481     : 0----0-------0-1--00-1-1
481     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
482     : -0---0------0---1-00-1-1
482     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
483     : 0------0-----00--0-1-11-
483     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
484     : 0-------0----00-0---111-
484     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
485     : -0----0-----0-0--01--11-
485     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
486     : -0------0---0-00----111-
486     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
487     : --0---0-----00--0-1--11-
487     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
488     : --0----0----00-0---1-11-
488     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
489     : 0---0---------0-00-1-11-
489     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
490     : 0----0-------0--00--111-
490     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
491     : -0-0----------00-01--11-
491     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
492     : -0---0------0--0-0--111-
492     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
493     : --00---------0-00-1--11-
493     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
494     : --0-0-------0--00--1-11-
494     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 1
495 (*) : -0---0-0----0--0-00--111
495     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
496     : --0-0---0---0--00-0--111
496     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
497     : 0----00------0--00-0-111
497     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
498     : --00----0----0-00--0-111
498     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
499     : 0---0-0-------0-00--0111
499     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
500     : -0-0---0------00-0--0111
500     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
501     : --0-0--0----0--0--0-0111
501     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
502     : -0---0--0---0--0--00-111
502     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
503     : --00--0------0--0--00111
503     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
504     : 0----0--0----0--0-00-111
504     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
505     : -0-0--0-------0--0-00111
505     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
506     : 0---0--0------0--00-0111
506     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
507     : -0--0---0---0-00--0--111
507     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
508     : --0--0-0----00-0--0--111
508     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
509     : 0--0----0----00-0--0-111
509     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
510     : --0--00-----00--0--0-111
510     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
511     : 0--0---0-----00--0--0111
511     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
512     : -0--0-0-----0-0--0--0111
512     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 1
513 (*) : -----0-0----00-0-00--111
513     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
514     : ----0---0---0-000-0--111
514     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
515     : -----00-----00--00-0-111
515     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
516     : ---0----0----0000--0-111
516     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
517     : ----0-0-----0-0-00--0111
517     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
518     : ---0---0-----000-0--0111
518     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
519     : --0----0----00-0--0-0111
519     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
520     : -0------0---0-00--00-111
520     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
521     : --0---0-----00--0--00111
521     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
522     : 0-------0----00-0-00-111
522     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
523     : -0----0-----0-0--0-00111
523     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
524     : 0------0-----00--00-0111
524     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
525     : --0-0-------0--00-0-0111
525     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
526     : -0---0------0--0-000-111
526     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
527     : --00---------0-00--00111
527     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
528     : 0----0-------0--0000-111
528     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
529     : -0-0----------00-0-00111
529     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
530     : 0---0---------0-000-0111
530     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
531 (*) : -00-00-00---0--0--0--111
531     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
532     : 0-00-00-0----0--0--0-111
532     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
533     : 00-00-00------0--0--0111
533     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 7.623 seconds

[QRM NOTE]: Time elapsed since last: 0.236 seconds

[QRM NOTE]: Peak memory: 1912087 bytes


====================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

====================================================================================================

definition primes: {17, 18, 19, 5}


New level: 0
 pending : [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []

Essensial at level 0 : {0, 2, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, 0), (7, 0), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, 536870912), (21, 524288), (22, -1), (23, 0), (24, 0), (25, 0), (26, 524288), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0)]

Covered at level 0 : {32, 1, 6, 7, 23, 24, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]
 solution : [0, 2, 22]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, 0), (7, 0), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, 536870912), (21, 524288), (22, -1), (23, 0), (24, 0), (25, 0), (26, 524288), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, 536870912), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]
 solution : [0, 2, 22]

[QRM NOTE]: Time elapsed since start: 7.705 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 850751 bytes


========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', 'vote(node1,value1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', 'vote(node1,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : -------------1-------0--
45     : ['vote(node0,value1)', '~voted(node0)']
46     : --------------1------0--
46     : ['vote(node0,value2)', '~voted(node0)']
47     : ------------1--------0--
47     : ['vote(node0,value0)', '~voted(node0)']
48     : ----------------1-----0-
48     : ['vote(node1,value1)', '~voted(node1)']
49     : -----------------1----0-
49     : ['vote(node1,value2)', '~voted(node1)']
50     : ---------------1------0-
50     : ['vote(node1,value0)', '~voted(node1)']
51     : -------------------1---0
51     : ['vote(node2,value1)', '~voted(node2)']
52     : --------------------1--0
52     : ['vote(node2,value2)', '~voted(node2)']
53     : ------------------1----0
53     : ['vote(node2,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value1)', '~voted(node0)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node0,value1)', '~voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0)


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : ------------000------1--
366     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
367     : ---------------000----1-
367     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
368     : ------------------000--1
368     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)']

sign_func_name2args: {'1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$1$vote$0$2, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$2]}

sig2const: {'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$2': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2', 'value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2')


---------- SigGenerator ----------

terms:  ['~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 3, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : -1-------1--------------
54     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
55     : --1------1--------------
55     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
56     : 1---------1-------------
56     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
57     : --1-------1-------------
57     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
58     : 1----------1------------
58     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
59     : -1---------1------------
59     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
60     : ----1----1--------------
60     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
61     : -----1---1--------------
61     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
62     : ---1------1-------------
62     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
63     : -----1----1-------------
63     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
64     : ---1-------1------------
64     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
65     : ----1------1------------
65     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
66     : -------1-1--------------
66     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
67     : --------11--------------
67     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
68     : ------1---1-------------
68     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
69     : --------1-1-------------
69     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
70     : ------1----1------------
70     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
71     : -------1---1------------
71     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decided$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decided$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE1)', 'chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,QUORUM0. ~decided(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ---------1-1------------
72     : ['decided(value0)', 'decided(value2)']
73     : ---------11-------------
73     : ['decided(value0)', 'decided(value1)']
74     : ----------11------------
74     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
138 (*) : -0--------1------------0
138     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
139     : --0--------1-----------0
139     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
140     : 0--------1-------------0
140     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
141     : ----0-----1-----------0-
141     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
142     : -----0-----1----------0-
142     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
143     : ---0-----1------------0-
143     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
144     : -------0--1----------0--
144     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
145     : --------0--1---------0--
145     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
146     : ------0--1-----------0--
146     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~voted(node2)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~voted(node2)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)', '~voted(NODE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | voted(NODE0) | ~decided(VALUE0)


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
147 (*) : -0--------1--------0----
147     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
148     : --0--------1--------0---
148     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
149     : 0--------1--------0-----
149     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
150     : ----0-----1-----0-------
150     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
151     : -----0-----1-----0------
151     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
152     : ---0-----1-----0--------
152     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
153     : -------0--1--0----------
153     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
154     : --------0--1--0---------
154     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
155     : ------0--1--0-----------
155     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)', '~vote(NODE0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | ~decided(VALUE0)


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
156 (*) : ----------1-----0--0----
156     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
157     : -----------1-----0--0---
157     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
158     : ---------1-----0--0-----
158     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
159     : ----------1--0-----0----
159     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
160     : -----------1--0-----0---
160     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
161     : ---------1--0-----0-----
161     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
162     : ----------1--0--0-------
162     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
163     : -----------1--0--0------
163     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
164     : ---------1--0--0--------
164     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', '~vote(NODE0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0. vote(NODE1,VALUE0) | vote(NODE0,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
165 (*) : ----------1-----0------0
165     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
166     : -----------1-----0-----0
166     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
167     : ---------1-----0-------0
167     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
168     : ----------1--------0--0-
168     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
169     : -----------1--------0-0-
169     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
170     : ---------1--------0---0-
170     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
171     : ----------1--0---------0
171     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
172     : -----------1--0--------0
172     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
173     : ---------1--0----------0
173     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
174     : ----------1--------0-0--
174     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
175     : -----------1--------00--
175     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
176     : ---------1--------0--0--
176     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
177     : ----------1--0--------0-
177     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
178     : -----------1--0-------0-
178     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
179     : ---------1--0---------0-
179     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
180     : ----------1-----0----0--
180     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
181     : -----------1-----0---0--
181     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
182     : ---------1-----0-----0--
182     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', '~vote(NODE0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0. voted(NODE1) | vote(NODE0,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
183 (*) : ----------1--0-1--------
183     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
184     : -----------1--01--------
184     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
185     : ---------1--0---1-------
185     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
186     : -----------1--0-1-------
186     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
187     : ---------1--0----1------
187     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
188     : ----------1--0---1------
188     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
189     : ----------1--0----1-----
189     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
190     : -----------1--0---1-----
190     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
191     : ---------1--0------1----
191     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
192     : -----------1--0----1----
192     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
193     : ---------1--0-------1---
193     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
194     : ----------1--0------1---
194     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
195     : ----------1-1---0-------
195     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
196     : -----------11----0------
196     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
197     : ---------1---1-0--------
197     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
198     : -----------1-1---0------
198     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
199     : ---------1----10--------
199     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
200     : ----------1---1-0-------
200     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
201     : ----------1-----0-1-----
201     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
202     : -----------1-----01-----
202     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
203     : ---------1-----0---1----
203     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
204     : -----------1-----0-1----
204     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
205     : ---------1-----0----1---
205     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
206     : ----------1-----0---1---
206     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
207     : ----------1-1------0----
207     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
208     : -----------11-------0---
208     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
209     : ---------1---1----0-----
209     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
210     : -----------1-1------0---
210     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
211     : ---------1----1---0-----
211     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
212     : ----------1---1----0----
212     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
213     : ----------1----1---0----
213     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
214     : -----------1---1----0---
214     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
215     : ---------1------1-0-----
215     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
216     : -----------1----1---0---
216     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
217     : ---------1-------10-----
217     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
218     : ----------1------1-0----
218     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node0,value1)', 'vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node0,value1)', 'vote(node1,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE1,NODE0. ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | ~decided(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
219 (*) : ----0-----1----1--------
219     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
220     : -----0-----1---1--------
220     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
221     : ---0-----1------1-------
221     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
222     : -----0-----1----1-------
222     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
223     : ---0-----1-------1------
223     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
224     : ----0-----1------1------
224     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
225     : -0--------1-------1-----
225     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
226     : --0--------1------1-----
226     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
227     : 0--------1---------1----
227     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
228     : --0--------1-------1----
228     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
229     : 0--------1----------1---
229     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
230     : -0--------1---------1---
230     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
231     : -------0--1-1-----------
231     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
232     : --------0--11-----------
232     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
233     : ------0--1---1----------
233     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
234     : --------0--1-1----------
234     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
235     : ------0--1----1---------
235     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
236     : -------0--1---1---------
236     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decided(value1)', 'vote(node1,value0)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decided(value1)', 'vote(node1,value0)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'vote(NODE0,VALUE1)', '~member(NODE0,QUORUM0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE1) | member(NODE0,QUORUM0) | ~decided(VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
237 (*) : ----------1----1-------0
237     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
238     : -----------1---1-------0
238     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
239     : ---------1------1------0
239     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
240     : -----------1----1------0
240     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
241     : ---------1-------1-----0
241     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
242     : ----------1------1-----0
242     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
243     : ----------1-------1---0-
243     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
244     : -----------1------1---0-
244     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
245     : ---------1---------1--0-
245     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
246     : -----------1-------1--0-
246     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
247     : ---------1----------1-0-
247     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
248     : ----------1---------1-0-
248     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
249     : ----------1-1----------0
249     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
250     : -----------11----------0
250     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
251     : ---------1---1---------0
251     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
252     : -----------1-1---------0
252     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
253     : ---------1----1--------0
253     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
254     : ----------1---1--------0
254     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
255     : ----------1-------1--0--
255     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
256     : -----------1------1--0--
256     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
257     : ---------1---------1-0--
257     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
258     : -----------1-------1-0--
258     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
259     : ---------1----------10--
259     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
260     : ----------1---------10--
260     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
261     : ----------1-1---------0-
261     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
262     : -----------11---------0-
262     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
263     : ---------1---1--------0-
263     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
264     : -----------1-1--------0-
264     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
265     : ---------1----1-------0-
265     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
266     : ----------1---1-------0-
266     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
267     : ----------1----1-----0--
267     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
268     : -----------1---1-----0--
268     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
269     : ---------1------1----0--
269     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
270     : -----------1----1----0--
270     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
271     : ---------1-------1---0--
271     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
272     : ----------1------1---0--
272     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'vote(NODE0,VALUE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE1,NODE0. voted(NODE1) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 15 =====================
size : 36
num_suborbits: 2
273 (*) : ----------1-1--1--------
273     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
274     : -----------11--1--------
274     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
275     : ---------1---1--1-------
275     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
276     : -----------1-1--1-------
276     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
277     : ---------1----1--1------
277     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
278     : ----------1---1--1------
278     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
279     : ----------1-1-----1-----
279     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
280     : -----------11-----1-----
280     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
281     : ---------1---1-----1----
281     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
282     : -----------1-1-----1----
282     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
283     : ---------1----1-----1---
283     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
284     : ----------1---1-----1---
284     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
285     : ----------1----1--1-----
285     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
286     : -----------1---1--1-----
286     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
287     : ---------1------1--1----
287     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
288     : -----------1----1--1----
288     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
289     : ---------1-------1--1---
289     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
290     : ----------1------1--1---
290     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
291 (*) : ----------1---11--------
291     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
292     : -----------1-1-1--------
292     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
293     : ---------1----1-1-------
293     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
294     : -----------11---1-------
294     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
295     : ---------1---1---1------
295     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
296     : ----------1-1----1------
296     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
297     : ----------1---1---1-----
297     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
298     : -----------1-1----1-----
298     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
299     : ---------1----1----1----
299     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
300     : -----------11------1----
300     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
301     : ---------1---1------1---
301     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
302     : ----------1-1-------1---
302     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
303     : ----------1------11-----
303     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
304     : -----------1----1-1-----
304     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
305     : ---------1-------1-1----
305     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
306     : -----------1---1---1----
306     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
307     : ---------1------1---1---
307     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
308     : ----------1----1----1---
308     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE1,VALUE2)', 'vote(NODE0,VALUE1)', 'decided(VALUE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE1,NODE1,VALUE2. ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2 | VALUE0 = VALUE1))


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----------1----------0-0
309     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
310     : -----------1---------0-0
310     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
311     : ---------1-----------0-0
311     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
312     : ----------1----------00-
312     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
313     : -----------1---------00-
313     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
314     : ---------1-----------00-
314     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
315     : ----------1-----------00
315     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
316     : -----------1----------00
316     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
317     : ---------1------------00
317     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', '~voted(NODE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0. voted(NODE0) | voted(NODE1) | ~decided(VALUE0) | NODE0 = NODE1


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : --0--0--0--1------------
354     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
355     : -0--0--0--1-------------
355     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : 0--0--0--1--------------
356     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0))


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : --0-----0--1-----1------
357     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : -0-----0--1-----1-------
358     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : 0-----0--1-----1--------
359     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : -----0--0--1--------1---
360     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
361     : ----0--0--1--------1----
361     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : ---0--0--1--------1-----
362     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : --0--0-----1--1---------
363     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
364     : -0--0-----1--1----------
364     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', 'vote(node1,value2)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', 'vote(node1,value2)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM1,VALUE0)', 'vote(NODE0,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)', 'member(NODE0,QUORUM0)', 'member(NODE0,QUORUM1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM1,VALUE0,QUORUM0. chosenAt(QUORUM1,VALUE0) | ~vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | QUORUM0 = QUORUM1


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : 0-----0--1------00----1-
423     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
424     : -0-----0--1----0-0----1-
424     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
425     : --0-----0--1---00-----1-
425     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
426     : ---0--0--1---------00--1
426     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
427     : ----0--0--1-------0-0--1
427     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
428     : -----0--0--1------00---1
428     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
429     : 0--0-----1---00------1--
429     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0-0------1--
430     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----100-------1--
431     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node1,value1)', '~vote(node1,value2)', 'voted(node1)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0, node$0$member$0$0, node$0$member$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node1,value1)', '~vote(node1,value2)', 'voted(node1)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '1$vote': 2, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', 'voted(NODE0)', '~vote(NODE0,VALUE0)', '~chosenAt(QUORUM1,VALUE1)', '~chosenAt(QUORUM0,VALUE1)', 'decided(VALUE1)', 'member(NODE0,QUORUM1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,QUORUM1,NODE0,QUORUM0. ~member(NODE0,QUORUM0) | ~voted(NODE0) | chosenAt(QUORUM1,VALUE1) | chosenAt(QUORUM0,VALUE1) | ~decided(VALUE1) | ~member(NODE0,QUORUM1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


==================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : -------------1-------0--
45     : ['vote(node0,value1)', '~voted(node0)']
46     : --------------1------0--
46     : ['vote(node0,value2)', '~voted(node0)']
47     : ------------1--------0--
47     : ['vote(node0,value0)', '~voted(node0)']
48     : ----------------1-----0-
48     : ['vote(node1,value1)', '~voted(node1)']
49     : -----------------1----0-
49     : ['vote(node1,value2)', '~voted(node1)']
50     : ---------------1------0-
50     : ['vote(node1,value0)', '~voted(node1)']
51     : -------------------1---0
51     : ['vote(node2,value1)', '~voted(node2)']
52     : --------------------1--0
52     : ['vote(node2,value2)', '~voted(node2)']
53     : ------------------1----0
53     : ['vote(node2,value0)', '~voted(node2)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : ------------000------1--
366     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
367     : ---------------000----1-
367     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
368     : ------------------000--1
368     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))
qcost : 4




=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : -1-------1--------------
54     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
55     : --1------1--------------
55     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
56     : 1---------1-------------
56     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
57     : --1-------1-------------
57     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
58     : 1----------1------------
58     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
59     : -1---------1------------
59     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
60     : ----1----1--------------
60     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
61     : -----1---1--------------
61     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
62     : ---1------1-------------
62     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
63     : -----1----1-------------
63     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
64     : ---1-------1------------
64     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
65     : ----1------1------------
65     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
66     : -------1-1--------------
66     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
67     : --------11--------------
67     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
68     : ------1---1-------------
68     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
69     : --------1-1-------------
69     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
70     : ------1----1------------
70     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
71     : -------1---1------------
71     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0,QUORUM0. ~decided(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ---------1-1------------
72     : ['decided(value0)', 'decided(value2)']
73     : ---------11-------------
73     : ['decided(value0)', 'decided(value1)']
74     : ----------11------------
74     : ['decided(value1)', 'decided(value2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
138 (*) : -0--------1------------0
138     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
139     : --0--------1-----------0
139     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
140     : 0--------1-------------0
140     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
141     : ----0-----1-----------0-
141     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
142     : -----0-----1----------0-
142     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
143     : ---0-----1------------0-
143     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
144     : -------0--1----------0--
144     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
145     : --------0--1---------0--
145     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
146     : ------0--1-----------0--
146     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | voted(NODE0) | ~decided(VALUE0)
qcost : 7




=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
147 (*) : -0--------1--------0----
147     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
148     : --0--------1--------0---
148     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
149     : 0--------1--------0-----
149     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
150     : ----0-----1-----0-------
150     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
151     : -----0-----1-----0------
151     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
152     : ---0-----1-----0--------
152     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
153     : -------0--1--0----------
153     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
154     : --------0--1--0---------
154     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
155     : ------0--1--0-----------
155     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | ~decided(VALUE0)
qcost : 7




=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
156 (*) : ----------1-----0--0----
156     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
157     : -----------1-----0--0---
157     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
158     : ---------1-----0--0-----
158     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
159     : ----------1--0-----0----
159     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
160     : -----------1--0-----0---
160     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
161     : ---------1--0-----0-----
161     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
162     : ----------1--0--0-------
162     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
163     : -----------1--0--0------
163     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
164     : ---------1--0--0--------
164     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,VALUE0,NODE0. vote(NODE1,VALUE0) | vote(NODE0,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
165 (*) : ----------1-----0------0
165     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
166     : -----------1-----0-----0
166     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
167     : ---------1-----0-------0
167     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
168     : ----------1--------0--0-
168     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
169     : -----------1--------0-0-
169     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
170     : ---------1--------0---0-
170     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
171     : ----------1--0---------0
171     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
172     : -----------1--0--------0
172     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
173     : ---------1--0----------0
173     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
174     : ----------1--------0-0--
174     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
175     : -----------1--------00--
175     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
176     : ---------1--------0--0--
176     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
177     : ----------1--0--------0-
177     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
178     : -----------1--0-------0-
178     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
179     : ---------1--0---------0-
179     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
180     : ----------1-----0----0--
180     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
181     : -----------1-----0---0--
181     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
182     : ---------1-----0-----0--
182     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,VALUE0,NODE0. voted(NODE1) | vote(NODE0,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
183 (*) : ----------1--0-1--------
183     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
184     : -----------1--01--------
184     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
185     : ---------1--0---1-------
185     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
186     : -----------1--0-1-------
186     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
187     : ---------1--0----1------
187     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
188     : ----------1--0---1------
188     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
189     : ----------1--0----1-----
189     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
190     : -----------1--0---1-----
190     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
191     : ---------1--0------1----
191     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
192     : -----------1--0----1----
192     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
193     : ---------1--0-------1---
193     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
194     : ----------1--0------1---
194     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
195     : ----------1-1---0-------
195     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
196     : -----------11----0------
196     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
197     : ---------1---1-0--------
197     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
198     : -----------1-1---0------
198     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
199     : ---------1----10--------
199     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
200     : ----------1---1-0-------
200     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
201     : ----------1-----0-1-----
201     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
202     : -----------1-----01-----
202     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
203     : ---------1-----0---1----
203     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
204     : -----------1-----0-1----
204     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
205     : ---------1-----0----1---
205     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
206     : ----------1-----0---1---
206     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
207     : ----------1-1------0----
207     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
208     : -----------11-------0---
208     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
209     : ---------1---1----0-----
209     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
210     : -----------1-1------0---
210     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
211     : ---------1----1---0-----
211     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
212     : ----------1---1----0----
212     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
213     : ----------1----1---0----
213     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
214     : -----------1---1----0---
214     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
215     : ---------1------1-0-----
215     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
216     : -----------1----1---0---
216     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
217     : ---------1-------10-----
217     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
218     : ----------1------1-0----
218     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,NODE1,NODE0. ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | ~decided(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
219 (*) : ----0-----1----1--------
219     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
220     : -----0-----1---1--------
220     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
221     : ---0-----1------1-------
221     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
222     : -----0-----1----1-------
222     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
223     : ---0-----1-------1------
223     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
224     : ----0-----1------1------
224     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
225     : -0--------1-------1-----
225     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
226     : --0--------1------1-----
226     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
227     : 0--------1---------1----
227     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
228     : --0--------1-------1----
228     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
229     : 0--------1----------1---
229     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
230     : -0--------1---------1---
230     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
231     : -------0--1-1-----------
231     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
232     : --------0--11-----------
232     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
233     : ------0--1---1----------
233     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
234     : --------0--1-1----------
234     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
235     : ------0--1----1---------
235     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
236     : -------0--1---1---------
236     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE1) | member(NODE0,QUORUM0) | ~decided(VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
237 (*) : ----------1----1-------0
237     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
238     : -----------1---1-------0
238     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
239     : ---------1------1------0
239     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
240     : -----------1----1------0
240     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
241     : ---------1-------1-----0
241     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
242     : ----------1------1-----0
242     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
243     : ----------1-------1---0-
243     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
244     : -----------1------1---0-
244     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
245     : ---------1---------1--0-
245     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
246     : -----------1-------1--0-
246     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
247     : ---------1----------1-0-
247     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
248     : ----------1---------1-0-
248     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
249     : ----------1-1----------0
249     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
250     : -----------11----------0
250     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
251     : ---------1---1---------0
251     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
252     : -----------1-1---------0
252     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
253     : ---------1----1--------0
253     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
254     : ----------1---1--------0
254     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
255     : ----------1-------1--0--
255     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
256     : -----------1------1--0--
256     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
257     : ---------1---------1-0--
257     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
258     : -----------1-------1-0--
258     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
259     : ---------1----------10--
259     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
260     : ----------1---------10--
260     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
261     : ----------1-1---------0-
261     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
262     : -----------11---------0-
262     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
263     : ---------1---1--------0-
263     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
264     : -----------1-1--------0-
264     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
265     : ---------1----1-------0-
265     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
266     : ----------1---1-------0-
266     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
267     : ----------1----1-----0--
267     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
268     : -----------1---1-----0--
268     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
269     : ---------1------1----0--
269     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
270     : -----------1----1----0--
270     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
271     : ---------1-------1---0--
271     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
272     : ----------1------1---0--
272     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,NODE1,NODE0. voted(NODE1) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 36
num_suborbits: 2
273 (*) : ----------1-1--1--------
273     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
274     : -----------11--1--------
274     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
275     : ---------1---1--1-------
275     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
276     : -----------1-1--1-------
276     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
277     : ---------1----1--1------
277     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
278     : ----------1---1--1------
278     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
279     : ----------1-1-----1-----
279     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
280     : -----------11-----1-----
280     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
281     : ---------1---1-----1----
281     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
282     : -----------1-1-----1----
282     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
283     : ---------1----1-----1---
283     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
284     : ----------1---1-----1---
284     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
285     : ----------1----1--1-----
285     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
286     : -----------1---1--1-----
286     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
287     : ---------1------1--1----
287     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
288     : -----------1----1--1----
288     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
289     : ---------1-------1--1---
289     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
290     : ----------1------1--1---
290     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
291 (*) : ----------1---11--------
291     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
292     : -----------1-1-1--------
292     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
293     : ---------1----1-1-------
293     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
294     : -----------11---1-------
294     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
295     : ---------1---1---1------
295     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
296     : ----------1-1----1------
296     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
297     : ----------1---1---1-----
297     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
298     : -----------1-1----1-----
298     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
299     : ---------1----1----1----
299     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
300     : -----------11------1----
300     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
301     : ---------1---1------1---
301     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
302     : ----------1-1-------1---
302     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
303     : ----------1------11-----
303     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
304     : -----------1----1-1-----
304     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
305     : ---------1-------1-1----
305     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
306     : -----------1---1---1----
306     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
307     : ---------1------1---1---
307     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
308     : ----------1----1----1---
308     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
num_forall :   5
num_exists :   0
num_literals : 10
quantified form : forall VALUE0,NODE0,VALUE1,NODE1,VALUE2. ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2 | VALUE0 = VALUE1))
qcost : 15




=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----------1----------0-0
309     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
310     : -----------1---------0-0
310     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
311     : ---------1-----------0-0
311     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
312     : ----------1----------00-
312     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
313     : -----------1---------00-
313     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
314     : ---------1-----------00-
314     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
315     : ----------1-----------00
315     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
316     : -----------1----------00
316     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
317     : ---------1------------00
317     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,VALUE0,NODE0. voted(NODE0) | voted(NODE1) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : --0--0--0--1------------
354     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
355     : -0--0--0--1-------------
355     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : 0--0--0--1--------------
356     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0))
qcost : 4




=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : --0-----0--1-----1------
357     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : -0-----0--1-----1-------
358     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : 0-----0--1-----1--------
359     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : -----0--0--1--------1---
360     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
361     : ----0--0--1--------1----
361     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : ---0--0--1--------1-----
362     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : --0--0-----1--1---------
363     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
364     : -0--0-----1--1----------
364     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall NODE0,QUORUM1,VALUE0,QUORUM0. chosenAt(QUORUM1,VALUE0) | ~vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : 0-----0--1------00----1-
423     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
424     : -0-----0--1----0-0----1-
424     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
425     : --0-----0--1---00-----1-
425     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
426     : ---0--0--1---------00--1
426     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
427     : ----0--0--1-------0-0--1
427     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
428     : -----0--0--1------00---1
428     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
429     : 0--0-----1---00------1--
429     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0-0------1--
430     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----100-------1--
431     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall VALUE1,QUORUM1,NODE0,QUORUM0. ~member(NODE0,QUORUM0) | ~voted(NODE0) | chosenAt(QUORUM1,VALUE1) | chosenAt(QUORUM0,VALUE1) | ~decided(VALUE1) | ~member(NODE0,QUORUM1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 7.900 seconds

[QRM NOTE]: Time elapsed since last: 0.195 seconds

[QRM NOTE]: Peak memory: 2630768 bytes


=================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

=================================================================================================


New level: 1
 pending : [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]
 solution : [0, 2, 22]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, 536870912), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, 536870912), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 1 among pending : [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, 536870912), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 4 with phase True at level 1

After decision at level 1
 pending : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]
 solution : [0, 2, 22, 4]


New level: 2
 pending : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]
 solution : [0, 2, 22, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, 536870912), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 67108864), (10, 33554432), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 134217728), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 2 among pending : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 67108864), (10, 33554432), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 134217728), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 20 with phase True at level 2

After decision at level 2
 pending : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 20]


New level: 3
 pending : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 20]


Before reduction : 
 pending  : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 20]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 67108864), (10, 33554432), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 134217728), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 20]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 20]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 20]


Solution : [0, 2, 22, 4, 20] has cost 23.


Before backtrack at level 3
 pending : []
 solution : [0, 2, 22, 4, 20]

After backtrack at level 3
 pending : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 20]


Invert decision for 20 at level 2


New level: 3
 pending : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 67108864), (10, 33554432), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 3 among pending : [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 67108864), (10, 33554432), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 9 with phase True at level 3

After decision at level 3
 pending : [3, 8, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 9]


New level: 4
 pending : [3, 8, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 9]


Before reduction : 
 pending  : [3, 8, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, 67108864), (10, 33554432), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {3, 8, 10, 11, 12, 13, 14, 15, 16, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 9]


Solution : [0, 2, 22, 4, 9] has cost 26.


Before backtrack at level 4
 pending : []
 solution : [0, 2, 22, 4, 9]

After backtrack at level 4
 pending : [3, 8, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 9]


Invert decision for 9 at level 3


New level: 4
 pending : [3, 8, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [3, 8, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, 33554432), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 8, 10, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 4 among pending : [3, 8, 10, 11, 12, 13, 14, 15, 16, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, 33554432), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 4

After decision at level 4
 pending : [3, 8, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 10]


New level: 5
 pending : [3, 8, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 10]


Before reduction : 
 pending  : [3, 8, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 10]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, 33554432), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {3, 8, 11, 12, 13, 14, 15, 16, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 10]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 10]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 10]


Solution : [0, 2, 22, 4, 10] has cost 26.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 22, 4, 10]

After backtrack at level 5
 pending : [3, 8, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 10]


Invert decision for 10 at level 4


New level: 5
 pending : [3, 8, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [3, 8, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, -1), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 8, 11, 12, 13, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 5 among pending : [3, 8, 11, 12, 13, 14, 15, 16, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, -1), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 5

After decision at level 5
 pending : [3, 8, 11, 12, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 13]


New level: 6
 pending : [3, 8, 11, 12, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 13]


Before reduction : 
 pending  : [3, 8, 11, 12, 14, 15, 16, 21, 26]
 solution : [0, 2, 22, 4, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, -1), (11, 262144), (12, 1048576), (13, 2097152), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, -1), (11, 2048), (12, 0), (13, -1), (14, 0), (15, 0), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {3, 12, 14, 15}

After reduction : 
 pending  : [8, 11, 16, 21, 26]
 solution : [0, 2, 22, 4, 13]


Before reduction : 
 pending  : [8, 11, 16, 21, 26]
 solution : [0, 2, 22, 4, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, -1), (11, 2048), (12, 0), (13, -1), (14, 0), (15, 0), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, -1), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 11, 16, 21, 26]
 solution : [0, 2, 22, 4, 13]


Solution : [0, 2, 22, 4, 13] has cost 28.


Before backtrack at level 6
 pending : [8, 11, 16, 21, 26]
 solution : [0, 2, 22, 4, 13]

After backtrack at level 6
 pending : [8, 11, 16, 21, 26, 3, 12, 14, 15]
 solution : [0, 2, 22, 4, 13]


Invert decision for 13 at level 5


New level: 6
 pending : [8, 11, 16, 21, 26, 3, 12, 14, 15]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [8, 11, 16, 21, 26, 3, 12, 14, 15]
 solution : [0, 2, 22, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, -1), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, -1), (11, 262144), (12, 1048576), (13, -1), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 11, 16, 21, 26, 3, 12, 14, 15]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 6 among pending : [8, 11, 16, 21, 26, 3, 12, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, -1), (11, 262144), (12, 1048576), (13, -1), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 12 with phase True at level 6

After decision at level 6
 pending : [8, 11, 16, 21, 26, 3, 14, 15]
 solution : [0, 2, 22, 4, 12]


New level: 7
 pending : [8, 11, 16, 21, 26, 3, 14, 15]
 solution : [0, 2, 22, 4, 12]


Before reduction : 
 pending  : [8, 11, 16, 21, 26, 3, 14, 15]
 solution : [0, 2, 22, 4, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, -1), (11, 262144), (12, 1048576), (13, -1), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, -1), (11, 2048), (12, -1), (13, -1), (14, 0), (15, 0), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {3, 14, 15}

After reduction : 
 pending  : [8, 11, 16, 21, 26]
 solution : [0, 2, 22, 4, 12]


Before reduction : 
 pending  : [8, 11, 16, 21, 26]
 solution : [0, 2, 22, 4, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, -1), (11, 2048), (12, -1), (13, -1), (14, 0), (15, 0), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, -1), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 11, 16, 21, 26]
 solution : [0, 2, 22, 4, 12]


Solution : [0, 2, 22, 4, 12] has cost 28.


Before backtrack at level 7
 pending : [8, 11, 16, 21, 26]
 solution : [0, 2, 22, 4, 12]

After backtrack at level 7
 pending : [8, 11, 16, 21, 26, 3, 14, 15]
 solution : [0, 2, 22, 4, 12]


Invert decision for 12 at level 6


New level: 7
 pending : [8, 11, 16, 21, 26, 3, 14, 15]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [8, 11, 16, 21, 26, 3, 14, 15]
 solution : [0, 2, 22, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8192), (9, -1), (10, -1), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, -1), (11, 262144), (12, -1), (13, -1), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 11, 16, 21, 26, 3, 14, 15]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 7 among pending : [8, 11, 16, 21, 26, 3, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, -1), (11, 262144), (12, -1), (13, -1), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [11, 16, 21, 26, 3, 14, 15]
 solution : [0, 2, 22, 4, 8]


New level: 8
 pending : [11, 16, 21, 26, 3, 14, 15]
 solution : [0, 2, 22, 4, 8]


Before reduction : 
 pending  : [11, 16, 21, 26, 3, 14, 15]
 solution : [0, 2, 22, 4, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, 524288), (9, -1), (10, -1), (11, 262144), (12, -1), (13, -1), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, 16896), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {16, 11, 14}

After reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 4, 8]


Before reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 4, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, 16896), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 16896), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 4, 8]


Solution : [0, 2, 22, 4, 8] has cost 26.


Before backtrack at level 8
 pending : [21, 26, 3, 15]
 solution : [0, 2, 22, 4, 8]

After backtrack at level 8
 pending : [21, 26, 3, 15, 11, 16, 14]
 solution : [0, 2, 22, 4, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [21, 26, 3, 15, 11, 16, 14]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [21, 26, 3, 15, 11, 16, 14]
 solution : [0, 2, 22, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 16896), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, -1), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 3, 15, 11, 16, 14]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 8 among pending : [21, 26, 3, 15, 11, 16, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, -1), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22, 4, 11]


New level: 9
 pending : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22, 4, 11]


Before reduction : 
 pending  : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22, 4, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, -1), (14, 16384), (15, 34816), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 16896), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {16, 14}

After reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 4, 11]


Before reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 4, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 16896), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 16896), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 4, 11]


Solution : [0, 2, 22, 4, 11] has cost 26.


Before backtrack at level 9
 pending : [21, 26, 3, 15]
 solution : [0, 2, 22, 4, 11]

After backtrack at level 9
 pending : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22, 4, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22, 4]

Essensial at level 9 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 16896), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 34816), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 15, 14]
 solution : [0, 2, 22, 4, 16]


Before reduction : 
 pending  : [21, 26, 3, 15, 14]
 solution : [0, 2, 22, 4, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 34816), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 34816), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 15, 14]
 solution : [0, 2, 22, 4, 16]


Solution : [0, 2, 22, 4, 16] has cost 26.


Before backtrack at level 9
 pending : [21, 26, 3, 15, 14]
 solution : [0, 2, 22, 4, 16]

After backtrack at level 9
 pending : [21, 26, 3, 15, 14, 16]
 solution : [0, 2, 22, 4]


Before backtrack at level 8
 pending : [21, 26, 3, 15, 14, 16]
 solution : [0, 2, 22, 4]

After backtrack at level 8
 pending : [21, 26, 3, 15, 14, 16, 11]
 solution : [0, 2, 22, 4]


Before backtrack at level 7
 pending : [21, 26, 3, 15, 14, 16, 11]
 solution : [0, 2, 22, 4]

After backtrack at level 7
 pending : [21, 26, 3, 15, 14, 16, 11, 8]
 solution : [0, 2, 22, 4]


Before backtrack at level 6
 pending : [21, 26, 3, 15, 14, 16, 11, 8]
 solution : [0, 2, 22, 4]

After backtrack at level 6
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12]
 solution : [0, 2, 22, 4]


Before backtrack at level 5
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12]
 solution : [0, 2, 22, 4]

After backtrack at level 5
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22, 4]


Before backtrack at level 4
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22, 4]

After backtrack at level 4
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22, 4]


Before backtrack at level 3
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22, 4]

After backtrack at level 3
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22, 4]


Before backtrack at level 2
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22, 4]

After backtrack at level 2
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9, 20]
 solution : [0, 2, 22, 4]


Invert decision for 4 at level 1


New level: 2
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9, 20]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9, 20]
 solution : [0, 2, 22]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 34816), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, 536870912), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9, 20]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 2 among pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, 536870912), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 20 with phase True at level 2

After decision at level 2
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22, 20]


New level: 3
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22, 20]


Before reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22, 20]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, 536870912), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 20]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 20]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 20]


Solution : [0, 2, 22, 20] has cost 18.


Before backtrack at level 3
 pending : []
 solution : [0, 2, 22, 20]

After backtrack at level 3
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22, 20]


Invert decision for 20 at level 2


New level: 3
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 3 among pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 9 with phase True at level 3

After decision at level 3
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22, 9]


New level: 4
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22, 9]


Before reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, 268435456), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {3, 8, 10, 11, 12, 13, 14, 15, 16, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 9]


Solution : [0, 2, 22, 9] has cost 21.


Before backtrack at level 4
 pending : []
 solution : [0, 2, 22, 9]

After backtrack at level 4
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22, 9]


Invert decision for 9 at level 3


New level: 4
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 4 among pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 4

After decision at level 4
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22, 10]


New level: 5
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22, 10]


Before reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22, 10]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, 134217728), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {3, 8, 11, 12, 13, 14, 15, 16, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 10]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 10]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 10]


Solution : [0, 2, 22, 10] has cost 21.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 22, 10]

After backtrack at level 5
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22, 10]


Invert decision for 10 at level 4


New level: 5
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, -1), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 5 among pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, -1), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 5

After decision at level 5
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12]
 solution : [0, 2, 22, 13]


New level: 6
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12]
 solution : [0, 2, 22, 13]


Before reduction : 
 pending  : [21, 26, 3, 15, 14, 16, 11, 8, 12]
 solution : [0, 2, 22, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, -1), (11, 1048576), (12, 4194304), (13, 8388608), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, -1), (11, 8192), (12, 0), (13, -1), (14, 0), (15, 0), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {3, 12, 14, 15}

After reduction : 
 pending  : [21, 26, 16, 11, 8]
 solution : [0, 2, 22, 13]


Before reduction : 
 pending  : [21, 26, 16, 11, 8]
 solution : [0, 2, 22, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, -1), (11, 8192), (12, 0), (13, -1), (14, 0), (15, 0), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 26, 16, 11, 8]
 solution : [0, 2, 22, 13]


Solution : [0, 2, 22, 13] has cost 23.


Before backtrack at level 6
 pending : [21, 26, 16, 11, 8]
 solution : [0, 2, 22, 13]

After backtrack at level 6
 pending : [21, 26, 16, 11, 8, 3, 15, 14, 12]
 solution : [0, 2, 22, 13]


Invert decision for 13 at level 5


New level: 6
 pending : [21, 26, 16, 11, 8, 3, 15, 14, 12]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [21, 26, 16, 11, 8, 3, 15, 14, 12]
 solution : [0, 2, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, -1), (11, 1048576), (12, 4194304), (13, -1), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 26, 16, 11, 8, 3, 15, 14, 12]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 6 among pending : [21, 26, 16, 11, 8, 3, 15, 14, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, -1), (11, 1048576), (12, 4194304), (13, -1), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 12 with phase True at level 6

After decision at level 6
 pending : [21, 26, 16, 11, 8, 3, 15, 14]
 solution : [0, 2, 22, 12]


New level: 7
 pending : [21, 26, 16, 11, 8, 3, 15, 14]
 solution : [0, 2, 22, 12]


Before reduction : 
 pending  : [21, 26, 16, 11, 8, 3, 15, 14]
 solution : [0, 2, 22, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, -1), (11, 1048576), (12, 4194304), (13, -1), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 0), (15, 0), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {3, 14, 15}

After reduction : 
 pending  : [21, 26, 16, 11, 8]
 solution : [0, 2, 22, 12]


Before reduction : 
 pending  : [21, 26, 16, 11, 8]
 solution : [0, 2, 22, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 0), (15, 0), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 26, 16, 11, 8]
 solution : [0, 2, 22, 12]


Solution : [0, 2, 22, 12] has cost 23.


Before backtrack at level 7
 pending : [21, 26, 16, 11, 8]
 solution : [0, 2, 22, 12]

After backtrack at level 7
 pending : [21, 26, 16, 11, 8, 3, 15, 14]
 solution : [0, 2, 22, 12]


Invert decision for 12 at level 6


New level: 7
 pending : [21, 26, 16, 11, 8, 3, 15, 14]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [21, 26, 16, 11, 8, 3, 15, 14]
 solution : [0, 2, 22]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32768), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, -1), (11, 1048576), (12, -1), (13, -1), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 26, 16, 11, 8, 3, 15, 14]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 7 among pending : [21, 26, 16, 11, 8, 3, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, -1), (11, 1048576), (12, -1), (13, -1), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [21, 26, 16, 11, 3, 15, 14]
 solution : [0, 2, 22, 8]


New level: 8
 pending : [21, 26, 16, 11, 3, 15, 14]
 solution : [0, 2, 22, 8]


Before reduction : 
 pending  : [21, 26, 16, 11, 3, 15, 14]
 solution : [0, 2, 22, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2097152), (9, -1), (10, -1), (11, 1048576), (12, -1), (13, -1), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, 67584), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {16, 11, 14}

After reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 8]


Before reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, 67584), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 67584), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 8]


Solution : [0, 2, 22, 8] has cost 21.


Before backtrack at level 8
 pending : [21, 26, 3, 15]
 solution : [0, 2, 22, 8]

After backtrack at level 8
 pending : [21, 26, 3, 15, 16, 11, 14]
 solution : [0, 2, 22, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [21, 26, 3, 15, 16, 11, 14]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [21, 26, 3, 15, 16, 11, 14]
 solution : [0, 2, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 67584), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1048576), (12, -1), (13, -1), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 3, 15, 16, 11, 14]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 8 among pending : [21, 26, 3, 15, 16, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1048576), (12, -1), (13, -1), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22, 11]


New level: 9
 pending : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22, 11]


Before reduction : 
 pending  : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1048576), (12, -1), (13, -1), (14, 65536), (15, 139264), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 67584), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {16, 14}

After reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 11]


Before reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 67584), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 67584), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 15]
 solution : [0, 2, 22, 11]


Solution : [0, 2, 22, 11] has cost 21.


Before backtrack at level 9
 pending : [21, 26, 3, 15]
 solution : [0, 2, 22, 11]

After backtrack at level 9
 pending : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [21, 26, 3, 15, 16, 14]
 solution : [0, 2, 22]

Essensial at level 9 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 67584), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32768), (15, 139264), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 15, 14]
 solution : [0, 2, 22, 16]


Before reduction : 
 pending  : [21, 26, 3, 15, 14]
 solution : [0, 2, 22, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32768), (15, 139264), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32768), (15, 139264), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 15, 14]
 solution : [0, 2, 22, 16]


Solution : [0, 2, 22, 16] has cost 21.


Before backtrack at level 9
 pending : [21, 26, 3, 15, 14]
 solution : [0, 2, 22, 16]

After backtrack at level 9
 pending : [21, 26, 3, 15, 14, 16]
 solution : [0, 2, 22]


Before backtrack at level 8
 pending : [21, 26, 3, 15, 14, 16]
 solution : [0, 2, 22]

After backtrack at level 8
 pending : [21, 26, 3, 15, 14, 16, 11]
 solution : [0, 2, 22]


Before backtrack at level 7
 pending : [21, 26, 3, 15, 14, 16, 11]
 solution : [0, 2, 22]

After backtrack at level 7
 pending : [21, 26, 3, 15, 14, 16, 11, 8]
 solution : [0, 2, 22]


Before backtrack at level 6
 pending : [21, 26, 3, 15, 14, 16, 11, 8]
 solution : [0, 2, 22]

After backtrack at level 6
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12]
 solution : [0, 2, 22]


Before backtrack at level 5
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12]
 solution : [0, 2, 22]

After backtrack at level 5
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22]


Before backtrack at level 4
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13]
 solution : [0, 2, 22]

After backtrack at level 4
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22]


Before backtrack at level 3
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10]
 solution : [0, 2, 22]

After backtrack at level 3
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22]


Before backtrack at level 2
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9]
 solution : [0, 2, 22]

After backtrack at level 2
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9, 20]
 solution : [0, 2, 22]


Before backtrack at level 1
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9, 20]
 solution : [0, 2, 22]

After backtrack at level 1
 pending : [21, 26, 3, 15, 14, 16, 11, 8, 12, 13, 10, 9, 20, 4]
 solution : [0, 2, 22]


================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 18

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=1)

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [0, 2, 22, 20] (length = 4)

invariant [invar_0] forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_2] forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_22] forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0)) # qcost: 4

invariant [invar_20] forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 8.018 seconds

[QRM NOTE]: Time elapsed since last: 0.118 seconds

[QRM NOTE]: Peak memory: 2591319 bytes


====================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

====================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_20

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_20 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_20 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_20 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 30: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall Q,V. chosenAt(Q,V) <-> (forall N. member(N,Q) -> vote(N,V))) & (forall Q2,Q1. (exists N. (member(N,Q1) & member(N,Q2)))) & (forall VALUE1,NODE0,VALUE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1) & (forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0))))

[QRM NOTE]: Time elapsed since start: 10.046 seconds

[QRM NOTE]: Time elapsed since last: 2.028 seconds

[QRM NOTE]: Peak memory: 1592543 bytes


************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_epr.ivy

************************************************************************

[QRM RESULT]: PASS

