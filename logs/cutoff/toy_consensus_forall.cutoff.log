
***************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_forall.ivy

***************************************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 18

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm toy_consensus_forall.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_3_value_3.finite.cpp toy_consensus_forall.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_3_value_3.finite.o toy_consensus_forall.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.693 seconds

[QRM NOTE]: Time elapsed since last: 6.693 seconds

[QRM NOTE]: Peak memory: 1187637 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        228

[FW NOTE]: number of dfs representative states:     14

[FW NOTE]: number of dfs non-representative states: 214


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

==================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decided('value',)
predicate: voting_quorum=('quorum',)
predicate: voted('node',)
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
representative states : 939, 39339, 308651, 2421675, 19198891, 2454443, 19233195, 17085355, 341419, 2455979, 2782123, 37803, 308139, 340907


=== State Orbit 0 =====================
size : 3
repr state: 000000000000000001
lex min decimal: 939
states:
000000000000000001
000000000000000100
000000000000000010




=== State Orbit 1 =====================
size : 9
repr state: 000100000000100001
lex min decimal: 39339
states:
000001000000100001
000000000001001100
000010000000100001
000000001000010010
000000000100001100
000000000010001100
000100000000100001
000000100000010010
000000010000010010




=== State Orbit 2 =====================
size : 18
repr state: 000100100000110001
lex min decimal: 308651
states:
000010000010101100
000010010000110010
000000010010011100
000010000010101001
000000100100011010
000000010010011010
000000001001011010
000010010000110001
000100000100101001
000100100000110001
000100100000110010
000001001000110010
000000001001011100
000001000001101100
000001001000110001
000000100100011100
000001000001101001
000100000100101100




=== State Orbit 3 =====================
size : 9
repr state: 000100100100111001
lex min decimal: 2421675
states:
000001001001111001
000001001001111010
000100100100111100
000001001001111100
000100100100111001
000100100100111010
000010010010111001
000010010010111100
000010010010111010




=== State Orbit 4 =====================
size : 9
repr state: 100100100100111100
lex min decimal: 19198891
states:
001001001001111001
001001001001111100
001001001001111010
100100100100111001
010010010010111010
100100100100111010
010010010010111001
100100100100111100
010010010010111100




=== State Orbit 5 =====================
size : 36
repr state: 000100100010111001
lex min decimal: 2454443
states:
000001100001111100
000001010010111100
000010010001111010
000001100001111001
000010001010111100
000100001001111010
000010010100111001
000100001100111100
000010100100111100
000010010001111001
000001001010111010
000010001001111010
000010100100111010
000010100010111100
000001010001111001
000001010001111100
000001001100111001
000100010010111010
000100100001111001
000100010010111100
000010001001111100
000100100010111010
000100100010111001
000010010100111010
000100100001111010
000001001100111010
000100010100111001
000010001010111001
000010100010111001
000100001100111001
000001100100111100
000001100100111010
000100010100111100
000001001010111001
000001010010111010
000100001001111100




=== State Orbit 6 =====================
size : 18
repr state: 100100100010111100
lex min decimal: 19233195
states:
001001100001111010
001100001001111001
010010010001111100
010010010100111100
010010100010111010
001001001100111100
001001010001111010
100010100100111001
010010001010111010
010001010010111001
010100010010111001
100100001100111010
100100010100111010
100001100100111001
001010001001111001
001001001010111100
100100100001111100
100100100010111100




=== State Orbit 7 =====================
size : 9
repr state: 100100100000110100
lex min decimal: 17085355
states:
010010010000110100
010000010010011001
001001000001101010
010010000010101010
100100100000110100
100000100100011001
001000001001011001
001001001000110100
100100000100101010




=== State Orbit 8 =====================
size : 36
repr state: 000100010000110001
lex min decimal: 341419
states:
000001100000110001
000000100001011010
000100000001101100
000001100000110010
000000001100011010
000001000010101001
000010100000110001
000000010100011010
000100001000110001
000010001000110001
000100010000110001
000000100010011100
000000001010011010
000010100000110010
000001010000110010
000000100010011010
000010001000110010
000001000100101100
000000001010011100
000001000100101001
000000001100011100
000100000010101001
000100010000110010
000001000010101100
000010000001101100
000001010000110001
000100000010101100
000000010001011100
000100000001101001
000100001000110010
000010000100101100
000000010001011010
000000010100011100
000000100001011100
000010000100101001
000010000001101001




=== State Orbit 9 =====================
size : 18
repr state: 000100010010111001
lex min decimal: 2455979
states:
000100001001111001
000010100100111001
000001100001111010
000100100010111100
000100100001111100
000001010010111001
000010001001111001
000100010100111010
000010010001111100
000100010010111001
000001010001111010
000010001010111010
000010100010111010
000001001100111100
000001001010111100
000100001100111010
000010010100111100
000001100100111001




=== State Orbit 10 =====================
size : 18
repr state: 000100010001111001
lex min decimal: 2782123
states:
000100001010111100
000001010100111100
000010100001111010
000001100010111010
000010001100111001
000010001100111100
000001010100111010
000100010001111100
000001100010111001
000100001010111001
000001100010111100
000100001010111010
000010100001111100
000010100001111001
000001010100111001
000100010001111010
000100010001111001
000010001100111010




=== State Orbit 11 =====================
size : 18
repr state: 000000100000010001
lex min decimal: 37803
states:
000000000010001001
000000000100001001
000000100000010100
000000000001001010
000010000000100100
000000000001001001
000000010000010100
000000010000010001
000010000000100010
000000100000010001
000000000010001010
000001000000100010
000000000100001010
000001000000100100
000000001000010001
000100000000100010
000100000000100100
000000001000010100




=== State Orbit 12 =====================
size : 9
repr state: 000000100100011001
lex min decimal: 308139
states:
000001000001101010
000010010000110100
000000100100011001
000001001000110100
000010000010101010
000000010010011001
000100100000110100
000000001001011001
000100000100101010




=== State Orbit 13 =====================
size : 18
repr state: 000000100010011001
lex min decimal: 340907
states:
000010000001101010
000001010000110100
000000100010011001
000010001000110100
000100000001101010
000000010001011001
000001000100101010
000001000010101010
000000100001011001
000000001010011001
000010000100101010
000000010100011001
000100000010101010
000100010000110100
000001100000110100
000100001000110100
000010100000110100
000000001100011001



[QRM NOTE]: Time elapsed since start: 6.880 seconds

[QRM NOTE]: Time elapsed since last: 0.187 seconds

[QRM NOTE]: Peak memory: 1277794 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.884 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 276529 bytes


==================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

==================================================================================================================


=============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

=============================================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : ---------------11-
0     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)']
1     : ---------------1-1
1     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node1_node2)']
2     : ----------------11
2     : ['(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
3 (*) : ------1------0----
3     : ['vote(node1,value0)', '~voted(node1)']
4     : -------1-----0----
4     : ['vote(node1,value1)', '~voted(node1)']
5     : --------1----0----
5     : ['vote(node1,value2)', '~voted(node1)']
6     : ---------1----0---
6     : ['vote(node2,value0)', '~voted(node2)']
7     : ----------1---0---
7     : ['vote(node2,value1)', '~voted(node2)']
8     : -----------1--0---
8     : ['vote(node2,value2)', '~voted(node2)']
9     : ---1--------0-----
9     : ['vote(node0,value0)', '~voted(node0)']
10     : ----1-------0-----
10     : ['vote(node0,value1)', '~voted(node0)']
11     : -----1------0-----
11     : ['vote(node0,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
12 (*) : 1-1---------------
12     : ['decided(value0)', 'decided(value2)']
13     : 11----------------
13     : ['decided(value0)', 'decided(value1)']
14     : -11---------------
14     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 9
num_suborbits: 1
15 (*) : ----11------------
15     : ['vote(node0,value1)', 'vote(node0,value2)']
16     : ---1-1------------
16     : ['vote(node0,value0)', 'vote(node0,value2)']
17     : ---11-------------
17     : ['vote(node0,value0)', 'vote(node0,value1)']
18     : -------11---------
18     : ['vote(node1,value1)', 'vote(node1,value2)']
19     : ------1-1---------
19     : ['vote(node1,value0)', 'vote(node1,value2)']
20     : ------11----------
20     : ['vote(node1,value0)', 'vote(node1,value1)']
21     : ----------11------
21     : ['vote(node2,value1)', 'vote(node2,value2)']
22     : ---------1-1------
22     : ['vote(node2,value0)', 'vote(node2,value2)']
23     : ---------11-------
23     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 9
num_suborbits: 1
24 (*) : -1------------00--
24     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
25     : --1-----------00--
25     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
26     : 1-------------00--
26     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
27     : -1-----------0--0-
27     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
28     : --1----------0--0-
28     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
29     : 1------------0--0-
29     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
30     : -1----------0----0
30     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
31     : --1---------0----0
31     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
32     : 1-----------0----0
32     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 9
num_suborbits: 1
33 (*) : -1-----------00---
33     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
34     : --1----------00---
34     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
35     : 1------------00---
35     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
36     : -1----------0-0---
36     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
37     : --1---------0-0---
37     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
38     : 1-----------0-0---
38     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
39     : -1----------00----
39     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
40     : --1---------00----
40     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
41     : 1-----------00----
41     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
42 (*) : -1------------0-1-
42     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
43     : --1-----------0-1-
43     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
44     : 1-------------0-1-
44     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
45     : -1-----------0-1--
45     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
46     : --1----------0-1--
46     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
47     : 1------------0-1--
47     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
48     : -1------------0--1
48     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
49     : --1-----------0--1
49     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
50     : 1-------------0--1
50     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
51     : -1----------0--1--
51     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
52     : --1---------0--1--
52     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
53     : 1-----------0--1--
53     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
54     : -1-----------0---1
54     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
55     : --1----------0---1
55     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
56     : 1------------0---1
56     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
57     : -1----------0---1-
57     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
58     : --1---------0---1-
58     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
59     : 1-----------0---1-
59     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 36
num_suborbits: 1
60 (*) : -1-1----------0---
60     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
61     : --11----------0---
61     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
62     : 1---1---------0---
62     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
63     : --1-1---------0---
63     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
64     : 1----1--------0---
64     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
65     : -1---1--------0---
65     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
66     : -1-1---------0----
66     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
67     : --11---------0----
67     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
68     : 1---1--------0----
68     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
69     : --1-1--------0----
69     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
70     : 1----1-------0----
70     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
71     : -1---1-------0----
71     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
72     : -1----1-------0---
72     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
73     : --1---1-------0---
73     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
74     : 1------1------0---
74     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
75     : --1----1------0---
75     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
76     : 1-------1-----0---
76     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
77     : -1------1-----0---
77     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
78     : -1----1-----0-----
78     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
79     : --1---1-----0-----
79     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
80     : 1------1----0-----
80     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
81     : --1----1----0-----
81     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
82     : 1-------1---0-----
82     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
83     : -1------1---0-----
83     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
84     : -1-------1---0----
84     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
85     : --1------1---0----
85     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
86     : 1---------1--0----
86     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
87     : --1-------1--0----
87     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
88     : 1----------1-0----
88     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
89     : -1---------1-0----
89     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
90     : -1-------1--0-----
90     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
91     : --1------1--0-----
91     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
92     : 1---------1-0-----
92     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
93     : --1-------1-0-----
93     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
94     : 1----------10-----
94     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
95     : -1---------10-----
95     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
96 (*) : -1-----0------0---
96     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
97     : --1-----0-----0---
97     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
98     : 1-----0-------0---
98     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
99     : -1--------0--0----
99     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
100     : --1--------0-0----
100     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
101     : 1--------0---0----
101     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
102     : -1--0---------0---
102     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
103     : --1--0--------0---
103     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
104     : 1--0----------0---
104     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
105     : -1--------0-0-----
105     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
106     : --1--------00-----
106     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
107     : 1--------0--0-----
107     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
108     : -1--0--------0----
108     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
109     : --1--0-------0----
109     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
110     : 1--0---------0----
110     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
111     : -1-----0----0-----
111     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
112     : --1-----0---0-----
112     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
113     : 1-----0-----0-----
113     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
114 (*) : --1-----0-------0-
114     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
115     : -1-----0--------0-
115     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
116     : 1-----0---------0-
116     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
117     : --1--------0---0--
117     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
118     : -1--------0----0--
118     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
119     : 1--------0-----0--
119     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
120     : --1--0-----------0
120     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
121     : -1--0------------0
121     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
122     : 1--0-------------0
122     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
123 (*) : --1-----0--0------
123     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
124     : -1-----0--0-------
124     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
125     : 1-----0--0--------
125     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
126     : --1--0-----0------
126     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
127     : -1--0-----0-------
127     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
128     : 1--0-----0--------
128     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
129     : --1--0--0---------
129     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
130     : -1--0--0----------
130     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
131     : 1--0--0-----------
131     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
132 (*) : --1-----0------1--
132     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
133     : -1-----0-------1--
133     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
134     : 1-----0--------1--
134     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
135     : --1--------0----1-
135     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
136     : -1--------0-----1-
136     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
137     : 1--------0------1-
137     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
138     : --1--0---------1--
138     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
139     : -1--0----------1--
139     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
140     : 1--0-----------1--
140     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
141     : --1--------0-----1
141     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
142     : -1--------0------1
142     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
143     : 1--------0-------1
143     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
144     : --1--0----------1-
144     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
145     : -1--0-----------1-
145     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
146     : 1--0------------1-
146     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
147     : --1-----0--------1
147     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
148     : -1-----0---------1
148     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
149     : 1-----0----------1
149     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
150 (*) : --1---1--------1--
150     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
151     : -1----1--------1--
151     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
152     : --1----1-------1--
152     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
153     : 1------1-------1--
153     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
154     : -1------1------1--
154     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
155     : 1-------1------1--
155     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
156     : --1------1------1-
156     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
157     : -1-------1------1-
157     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
158     : --1-------1-----1-
158     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
159     : 1---------1-----1-
159     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
160     : -1---------1----1-
160     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
161     : 1----------1----1-
161     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
162     : --11-----------1--
162     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
163     : -1-1-----------1--
163     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
164     : --1-1----------1--
164     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
165     : 1---1----------1--
165     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
166     : -1---1---------1--
166     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
167     : 1----1---------1--
167     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
168     : --1------1-------1
168     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
169     : -1-------1-------1
169     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
170     : --1-------1------1
170     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
171     : 1---------1------1
171     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
172     : -1---------1-----1
172     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
173     : 1----------1-----1
173     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
174     : --11------------1-
174     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
175     : -1-1------------1-
175     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
176     : --1-1-----------1-
176     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
177     : 1---1-----------1-
177     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
178     : -1---1----------1-
178     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
179     : 1----1----------1-
179     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
180     : --1---1----------1
180     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
181     : -1----1----------1
181     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
182     : --1----1---------1
182     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
183     : 1------1---------1
183     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
184     : -1------1--------1
184     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
185     : 1-------1--------1
185     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
186 (*) : --1---1----0------
186     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
187     : -1----1---0-------
187     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
188     : --1----1---0------
188     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
189     : 1------1-0--------
189     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
190     : -1------1-0-------
190     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
191     : 1-------10--------
191     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
192     : --1-----01--------
192     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
193     : -1-----0-1--------
193     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
194     : --1-----0-1-------
194     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
195     : 1-----0---1-------
195     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
196     : -1-----0---1------
196     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
197     : 1-----0----1------
197     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
198     : --11-------0------
198     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
199     : -1-1------0-------
199     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
200     : --1-1------0------
200     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
201     : 1---1----0--------
201     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
202     : -1---1----0-------
202     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
203     : 1----1---0--------
203     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
204     : --1--0---1--------
204     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
205     : -1--0----1--------
205     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
206     : --1--0----1-------
206     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
207     : 1--0------1-------
207     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
208     : -1--0------1------
208     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
209     : 1--0-------1------
209     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
210     : --11----0---------
210     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
211     : -1-1---0----------
211     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
212     : --1-1---0---------
212     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
213     : 1---1-0-----------
213     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
214     : -1---1-0----------
214     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
215     : 1----10-----------
215     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
216     : --1--01-----------
216     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
217     : -1--0-1-----------
217     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
218     : --1--0-1----------
218     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
219     : 1--0---1----------
219     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
220     : -1--0---1---------
220     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
221     : 1--0----1---------
221     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 18
num_suborbits: 1
222 (*) : --1---1---------0-
222     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
223     : -1----1---------0-
223     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
224     : --1----1--------0-
224     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
225     : 1------1--------0-
225     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
226     : -1------1-------0-
226     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
227     : 1-------1-------0-
227     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
228     : --1------1-----0--
228     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
229     : -1-------1-----0--
229     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
230     : --1-------1----0--
230     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
231     : 1---------1----0--
231     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
232     : -1---------1---0--
232     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
233     : 1----------1---0--
233     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
234     : --11-------------0
234     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
235     : -1-1-------------0
235     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
236     : --1-1------------0
236     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
237     : 1---1------------0
237     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
238     : -1---1-----------0
238     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
239     : 1----1-----------0
239     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 36
num_suborbits: 2
240 (*) : --11--1-----------
240     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
241     : -1-1--1-----------
241     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
242     : --1-1--1----------
242     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
243     : 1---1--1----------
243     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
244     : -1---1--1---------
244     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
245     : 1----1--1---------
245     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
246     : --11-----1--------
246     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
247     : -1-1-----1--------
247     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
248     : --1-1-----1-------
248     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
249     : 1---1-----1-------
249     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
250     : -1---1-----1------
250     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
251     : 1----1-----1------
251     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
252     : --1---1--1--------
252     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
253     : -1----1--1--------
253     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
254     : --1----1--1-------
254     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
255     : 1------1--1-------
255     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
256     : -1------1--1------
256     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
257     : 1-------1--1------
257     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
258 (*) : --11---1----------
258     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
259     : -1-1----1---------
259     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
260     : --1-1-1-----------
260     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
261     : 1---1---1---------
261     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
262     : -1---11-----------
262     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
263     : 1----1-1----------
263     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
264     : --11------1-------
264     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
265     : -1-1-------1------
265     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
266     : --1-1----1--------
266     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
267     : 1---1------1------
267     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
268     : -1---1---1--------
268     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
269     : 1----1----1-------
269     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
270     : --1---1---1-------
270     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
271     : -1----1----1------
271     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
272     : --1----1-1--------
272     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
273     : 1------1---1------
273     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
274     : -1------11--------
274     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
275     : 1-------1-1-------
275     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 1
num_suborbits: 1
276 (*) : ---------------000
276     : ['~(voting_quorum=quorum__node0_node1)', '~(voting_quorum=quorum__node0_node2)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---000------1-----
277     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---------000--1---
279     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 18

[PRIME NOTE]: number of orbits before merging: 19

[PRIME NOTE]: number of primes: 280

[QRM NOTE]: Time elapsed since start: 6.987 seconds

[QRM NOTE]: Time elapsed since last: 0.103 seconds

[QRM NOTE]: Peak memory: 1609969 bytes


=======================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

=======================================================================================================

definition primes: {0, 16}


New level: 0
 pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17]
 solution : []


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17]
 solution : []

Essensial at level 0 : {1, 3, 17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, 16777216), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, 16777216), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, 16777216), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17]

[QRM NOTE]: Time elapsed since start: 7.028 seconds

[QRM NOTE]: Time elapsed since last: 0.041 seconds

[QRM NOTE]: Peak memory: 564782 bytes


===========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

===========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
3 (*) : ------1------0----
3     : ['vote(node1,value0)', '~voted(node1)']
4     : -------1-----0----
4     : ['vote(node1,value1)', '~voted(node1)']
5     : --------1----0----
5     : ['vote(node1,value2)', '~voted(node1)']
6     : ---------1----0---
6     : ['vote(node2,value0)', '~voted(node2)']
7     : ----------1---0---
7     : ['vote(node2,value1)', '~voted(node2)']
8     : -----------1--0---
8     : ['vote(node2,value2)', '~voted(node2)']
9     : ---1--------0-----
9     : ['vote(node0,value0)', '~voted(node0)']
10     : ----1-------0-----
10     : ['vote(node0,value1)', '~voted(node0)']
11     : -----1------0-----
11     : ['vote(node0,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', '~voted(node1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', '~voted(node1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)


=== Prime Orbit 3 =====================
size : 9
num_suborbits: 1
15 (*) : ----11------------
15     : ['vote(node0,value1)', 'vote(node0,value2)']
16     : ---1-1------------
16     : ['vote(node0,value0)', 'vote(node0,value2)']
17     : ---11-------------
17     : ['vote(node0,value0)', 'vote(node0,value1)']
18     : -------11---------
18     : ['vote(node1,value1)', 'vote(node1,value2)']
19     : ------1-1---------
19     : ['vote(node1,value0)', 'vote(node1,value2)']
20     : ------11----------
20     : ['vote(node1,value0)', 'vote(node1,value1)']
21     : ----------11------
21     : ['vote(node2,value1)', 'vote(node2,value2)']
22     : ---------1-1------
22     : ['vote(node2,value0)', 'vote(node2,value2)']
23     : ---------11-------
23     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value1)', 'vote(node0,value2)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value1)', 'vote(node0,value2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---000------1-----
277     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---------000--1---
279     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)']

sign_func_name2args: {'1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$1$vote$0$2, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$2]}

sig2const: {'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$2': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2', 'value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2')


---------- SigGenerator ----------

terms:  ['~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 3, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
12 (*) : 1-1---------------
12     : ['decided(value0)', 'decided(value2)']
13     : 11----------------
13     : ['decided(value0)', 'decided(value1)']
14     : -11---------------
14     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 9
num_suborbits: 1
24 (*) : -1------------00--
24     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
25     : --1-----------00--
25     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
26     : 1-------------00--
26     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
27     : -1-----------0--0-
27     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
28     : --1----------0--0-
28     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
29     : 1------------0--0-
29     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
30     : -1----------0----0
30     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
31     : --1---------0----0
31     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
32     : 1-----------0----0
32     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node2)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node2)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'voting_quorum ~= QUORUM0', '~voted(NODE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | voting_quorum = QUORUM0 | voted(NODE0) | member(NODE0,QUORUM0)


=== Prime Orbit 5 =====================
size : 9
num_suborbits: 1
33 (*) : -1-----------00---
33     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
34     : --1----------00---
34     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
35     : 1------------00---
35     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
36     : -1----------0-0---
36     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
37     : --1---------0-0---
37     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
38     : 1-----------0-0---
38     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
39     : -1----------00----
39     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
40     : --1---------00----
40     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
41     : 1-----------00----
41     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node1)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node1)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. ~decided(VALUE0) | voted(NODE0) | voted(NODE1) | NODE0 = NODE1


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
42 (*) : -1------------0-1-
42     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
43     : --1-----------0-1-
43     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
44     : 1-------------0-1-
44     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
45     : -1-----------0-1--
45     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
46     : --1----------0-1--
46     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
47     : 1------------0-1--
47     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
48     : -1------------0--1
48     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
49     : --1-----------0--1
49     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
50     : 1-------------0--1
50     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
51     : -1----------0--1--
51     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
52     : --1---------0--1--
52     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
53     : 1-----------0--1--
53     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
54     : -1-----------0---1
54     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
55     : --1----------0---1
55     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
56     : 1------------0---1
56     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
57     : -1----------0---1-
57     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
58     : --1---------0---1-
58     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
59     : 1-----------0---1-
59     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node2)', 'voting_quorum = quorum__node0_node2', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$member$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$voted$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node2)', 'voting_quorum = quorum__node0_node2', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$voted$0': [node$0$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$voted$0': node$0$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'voting_quorum = QUORUM0', 'member(NODE0,QUORUM0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0) | voted(NODE0)


=== Prime Orbit 7 =====================
size : 36
num_suborbits: 1
60 (*) : -1-1----------0---
60     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
61     : --11----------0---
61     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
62     : 1---1---------0---
62     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
63     : --1-1---------0---
63     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
64     : 1----1--------0---
64     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
65     : -1---1--------0---
65     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
66     : -1-1---------0----
66     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
67     : --11---------0----
67     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
68     : 1---1--------0----
68     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
69     : --1-1--------0----
69     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
70     : 1----1-------0----
70     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
71     : -1---1-------0----
71     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
72     : -1----1-------0---
72     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
73     : --1---1-------0---
73     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
74     : 1------1------0---
74     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
75     : --1----1------0---
75     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
76     : 1-------1-----0---
76     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
77     : -1------1-----0---
77     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
78     : -1----1-----0-----
78     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
79     : --1---1-----0-----
79     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
80     : 1------1----0-----
80     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
81     : --1----1----0-----
81     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
82     : 1-------1---0-----
82     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
83     : -1------1---0-----
83     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
84     : -1-------1---0----
84     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
85     : --1------1---0----
85     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
86     : 1---------1--0----
86     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
87     : --1-------1--0----
87     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
88     : 1----------1-0----
88     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
89     : -1---------1-0----
89     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
90     : -1-------1--0-----
90     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
91     : --1------1--0-----
91     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
92     : 1---------1-0-----
92     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
93     : --1-------1-0-----
93     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
94     : 1----------10-----
94     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
95     : -1---------10-----
95     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | voted(NODE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
96 (*) : -1-----0------0---
96     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
97     : --1-----0-----0---
97     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
98     : 1-----0-------0---
98     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
99     : -1--------0--0----
99     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
100     : --1--------0-0----
100     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
101     : 1--------0---0----
101     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
102     : -1--0---------0---
102     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
103     : --1--0--------0---
103     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
104     : 1--0----------0---
104     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
105     : -1--------0-0-----
105     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
106     : --1--------00-----
106     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
107     : 1--------0--0-----
107     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
108     : -1--0--------0----
108     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
109     : --1--0-------0----
109     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
110     : 1--0---------0----
110     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
111     : -1-----0----0-----
111     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
112     : --1-----0---0-----
112     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
113     : 1-----0-----0-----
113     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. ~decided(VALUE0) | vote(NODE0,VALUE0) | voted(NODE1) | NODE0 = NODE1


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
114 (*) : --1-----0-------0-
114     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
115     : -1-----0--------0-
115     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
116     : 1-----0---------0-
116     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
117     : --1--------0---0--
117     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
118     : -1--------0----0--
118     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
119     : 1--------0-----0--
119     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
120     : --1--0-----------0
120     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
121     : -1--0------------0
121     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
122     : 1--0-------------0
122     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node1,value2)', 'voting_quorum ~= quorum__node0_node2', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node1,value2)', 'voting_quorum ~= quorum__node0_node2', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', 'voting_quorum ~= QUORUM0', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | vote(NODE0,VALUE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0)


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
123 (*) : --1-----0--0------
123     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
124     : -1-----0--0-------
124     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
125     : 1-----0--0--------
125     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
126     : --1--0-----0------
126     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
127     : -1--0-----0-------
127     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
128     : 1--0-----0--------
128     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
129     : --1--0--0---------
129     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
130     : -1--0--0----------
130     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
131     : 1--0--0-----------
131     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. ~decided(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
132 (*) : --1-----0------1--
132     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
133     : -1-----0-------1--
133     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
134     : 1-----0--------1--
134     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
135     : --1--------0----1-
135     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
136     : -1--------0-----1-
136     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
137     : 1--------0------1-
137     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
138     : --1--0---------1--
138     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
139     : -1--0----------1--
139     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
140     : 1--0-----------1--
140     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
141     : --1--------0-----1
141     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
142     : -1--------0------1
142     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
143     : 1--------0-------1
143     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
144     : --1--0----------1-
144     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
145     : -1--0-----------1-
145     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
146     : 1--0------------1-
146     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
147     : --1-----0--------1
147     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
148     : -1-----0---------1
148     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
149     : 1-----0----------1
149     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node1,value2)', 'voting_quorum = quorum__node0_node1', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$member$0$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node1,value2)', 'voting_quorum = quorum__node0_node1', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', 'voting_quorum = QUORUM0', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | vote(NODE0,VALUE0) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0)


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
150 (*) : --1---1--------1--
150     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
151     : -1----1--------1--
151     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
152     : --1----1-------1--
152     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
153     : 1------1-------1--
153     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
154     : -1------1------1--
154     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
155     : 1-------1------1--
155     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
156     : --1------1------1-
156     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
157     : -1-------1------1-
157     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
158     : --1-------1-----1-
158     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
159     : 1---------1-----1-
159     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
160     : -1---------1----1-
160     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
161     : 1----------1----1-
161     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
162     : --11-----------1--
162     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
163     : -1-1-----------1--
163     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
164     : --1-1----------1--
164     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
165     : 1---1----------1--
165     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
166     : -1---1---------1--
166     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
167     : 1----1---------1--
167     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
168     : --1------1-------1
168     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
169     : -1-------1-------1
169     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
170     : --1-------1------1
170     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
171     : 1---------1------1
171     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
172     : -1---------1-----1
172     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
173     : 1----------1-----1
173     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
174     : --11------------1-
174     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
175     : -1-1------------1-
175     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
176     : --1-1-----------1-
176     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
177     : 1---1-----------1-
177     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
178     : -1---1----------1-
178     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
179     : 1----1----------1-
179     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
180     : --1---1----------1
180     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
181     : -1----1----------1
181     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
182     : --1----1---------1
182     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
183     : 1------1---------1
183     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
184     : -1------1--------1
184     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
185     : 1-------1--------1
185     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', 'vote(node1,value0)', 'voting_quorum = quorum__node0_node1', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', 'vote(node1,value0)', 'voting_quorum = quorum__node0_node1', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', 'voting_quorum = QUORUM0', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0) | VALUE0 = VALUE1


=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
186 (*) : --1---1----0------
186     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
187     : -1----1---0-------
187     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
188     : --1----1---0------
188     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
189     : 1------1-0--------
189     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
190     : -1------1-0-------
190     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
191     : 1-------10--------
191     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
192     : --1-----01--------
192     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
193     : -1-----0-1--------
193     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
194     : --1-----0-1-------
194     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
195     : 1-----0---1-------
195     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
196     : -1-----0---1------
196     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
197     : 1-----0----1------
197     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
198     : --11-------0------
198     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
199     : -1-1------0-------
199     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
200     : --1-1------0------
200     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
201     : 1---1----0--------
201     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
202     : -1---1----0-------
202     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
203     : 1----1---0--------
203     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
204     : --1--0---1--------
204     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
205     : -1--0----1--------
205     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
206     : --1--0----1-------
206     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
207     : 1--0------1-------
207     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
208     : -1--0------1------
208     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
209     : 1--0-------1------
209     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
210     : --11----0---------
210     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
211     : -1-1---0----------
211     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
212     : --1-1---0---------
212     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
213     : 1---1-0-----------
213     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
214     : -1---1-0----------
214     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
215     : 1----10-----------
215     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
216     : --1--01-----------
216     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
217     : -1--0-1-----------
217     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
218     : --1--0-1----------
218     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
219     : 1--0---1----------
219     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
220     : -1--0---1---------
220     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
221     : 1--0----1---------
221     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 14 =====================
size : 18
num_suborbits: 1
222 (*) : --1---1---------0-
222     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
223     : -1----1---------0-
223     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
224     : --1----1--------0-
224     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
225     : 1------1--------0-
225     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
226     : -1------1-------0-
226     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
227     : 1-------1-------0-
227     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
228     : --1------1-----0--
228     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
229     : -1-------1-----0--
229     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
230     : --1-------1----0--
230     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
231     : 1---------1----0--
231     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
232     : -1---------1---0--
232     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
233     : 1----------1---0--
233     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
234     : --11-------------0
234     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
235     : -1-1-------------0
235     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
236     : --1-1------------0
236     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
237     : 1---1------------0
237     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
238     : -1---1-----------0
238     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
239     : 1----1-----------0
239     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', 'vote(node1,value0)', 'voting_quorum ~= quorum__node0_node2', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', 'vote(node1,value0)', 'voting_quorum ~= quorum__node0_node2', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', 'voting_quorum ~= QUORUM0', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0) | VALUE0 = VALUE1


=== Prime Orbit 15 =====================
size : 36
num_suborbits: 2
240 (*) : --11--1-----------
240     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
241     : -1-1--1-----------
241     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
242     : --1-1--1----------
242     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
243     : 1---1--1----------
243     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
244     : -1---1--1---------
244     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
245     : 1----1--1---------
245     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
246     : --11-----1--------
246     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
247     : -1-1-----1--------
247     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
248     : --1-1-----1-------
248     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
249     : 1---1-----1-------
249     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
250     : -1---1-----1------
250     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
251     : 1----1-----1------
251     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
252     : --1---1--1--------
252     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
253     : -1----1--1--------
253     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
254     : --1----1--1-------
254     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
255     : 1------1--1-------
255     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
256     : -1------1--1------
256     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
257     : 1-------1--1------
257     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
258 (*) : --11---1----------
258     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
259     : -1-1----1---------
259     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
260     : --1-1-1-----------
260     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
261     : 1---1---1---------
261     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
262     : -1---11-----------
262     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
263     : 1----1-1----------
263     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
264     : --11------1-------
264     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
265     : -1-1-------1------
265     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
266     : --1-1----1--------
266     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
267     : 1---1------1------
267     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
268     : -1---1---1--------
268     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
269     : 1----1----1-------
269     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
270     : --1---1---1-------
270     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
271     : -1----1----1------
271     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
272     : --1----1-1--------
272     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
273     : 1------1---1------
273     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
274     : -1------11--------
274     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
275     : 1-------1-1-------
275     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', 'vote(NODE1,VALUE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE2:value', 'VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE2:value', 'VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE2:value', 'VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE2:value', 'VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,VALUE1,NODE0,VALUE2. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | ~vote(NODE1,VALUE2) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2 | VALUE0 = VALUE1))


=====================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

=====================================================================================================================


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
3 (*) : ------1------0----
3     : ['vote(node1,value0)', '~voted(node1)']
4     : -------1-----0----
4     : ['vote(node1,value1)', '~voted(node1)']
5     : --------1----0----
5     : ['vote(node1,value2)', '~voted(node1)']
6     : ---------1----0---
6     : ['vote(node2,value0)', '~voted(node2)']
7     : ----------1---0---
7     : ['vote(node2,value1)', '~voted(node2)']
8     : -----------1--0---
8     : ['vote(node2,value2)', '~voted(node2)']
9     : ---1--------0-----
9     : ['vote(node0,value0)', '~voted(node0)']
10     : ----1-------0-----
10     : ['vote(node0,value1)', '~voted(node0)']
11     : -----1------0-----
11     : ['vote(node0,value2)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 3 =====================
size : 9
num_suborbits: 1
15 (*) : ----11------------
15     : ['vote(node0,value1)', 'vote(node0,value2)']
16     : ---1-1------------
16     : ['vote(node0,value0)', 'vote(node0,value2)']
17     : ---11-------------
17     : ['vote(node0,value0)', 'vote(node0,value1)']
18     : -------11---------
18     : ['vote(node1,value1)', 'vote(node1,value2)']
19     : ------1-1---------
19     : ['vote(node1,value0)', 'vote(node1,value2)']
20     : ------11----------
20     : ['vote(node1,value0)', 'vote(node1,value1)']
21     : ----------11------
21     : ['vote(node2,value1)', 'vote(node2,value2)']
22     : ---------1-1------
22     : ['vote(node2,value0)', 'vote(node2,value2)']
23     : ---------11-------
23     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---000------1-----
277     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---------000--1---
279     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))
qcost : 4




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
12 (*) : 1-1---------------
12     : ['decided(value0)', 'decided(value2)']
13     : 11----------------
13     : ['decided(value0)', 'decided(value1)']
14     : -11---------------
14     : ['decided(value1)', 'decided(value2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 4 =====================
size : 9
num_suborbits: 1
24 (*) : -1------------00--
24     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
25     : --1-----------00--
25     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
26     : 1-------------00--
26     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
27     : -1-----------0--0-
27     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
28     : --1----------0--0-
28     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
29     : 1------------0--0-
29     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
30     : -1----------0----0
30     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
31     : --1---------0----0
31     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
32     : 1-----------0----0
32     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | voting_quorum = QUORUM0 | voted(NODE0) | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 5 =====================
size : 9
num_suborbits: 1
33 (*) : -1-----------00---
33     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
34     : --1----------00---
34     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
35     : 1------------00---
35     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
36     : -1----------0-0---
36     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
37     : --1---------0-0---
37     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
38     : 1-----------0-0---
38     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
39     : -1----------00----
39     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
40     : --1---------00----
40     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
41     : 1-----------00----
41     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. ~decided(VALUE0) | voted(NODE0) | voted(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
42 (*) : -1------------0-1-
42     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
43     : --1-----------0-1-
43     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
44     : 1-------------0-1-
44     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
45     : -1-----------0-1--
45     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
46     : --1----------0-1--
46     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
47     : 1------------0-1--
47     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
48     : -1------------0--1
48     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
49     : --1-----------0--1
49     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
50     : 1-------------0--1
50     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
51     : -1----------0--1--
51     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
52     : --1---------0--1--
52     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
53     : 1-----------0--1--
53     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
54     : -1-----------0---1
54     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
55     : --1----------0---1
55     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
56     : 1------------0---1
56     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
57     : -1----------0---1-
57     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
58     : --1---------0---1-
58     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
59     : 1-----------0---1-
59     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0) | voted(NODE0)
qcost : 7




=== Prime Orbit 7 =====================
size : 36
num_suborbits: 1
60 (*) : -1-1----------0---
60     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
61     : --11----------0---
61     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
62     : 1---1---------0---
62     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
63     : --1-1---------0---
63     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
64     : 1----1--------0---
64     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
65     : -1---1--------0---
65     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
66     : -1-1---------0----
66     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
67     : --11---------0----
67     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
68     : 1---1--------0----
68     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
69     : --1-1--------0----
69     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
70     : 1----1-------0----
70     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
71     : -1---1-------0----
71     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
72     : -1----1-------0---
72     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
73     : --1---1-------0---
73     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
74     : 1------1------0---
74     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
75     : --1----1------0---
75     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
76     : 1-------1-----0---
76     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
77     : -1------1-----0---
77     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
78     : -1----1-----0-----
78     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
79     : --1---1-----0-----
79     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
80     : 1------1----0-----
80     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
81     : --1----1----0-----
81     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
82     : 1-------1---0-----
82     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
83     : -1------1---0-----
83     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
84     : -1-------1---0----
84     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
85     : --1------1---0----
85     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
86     : 1---------1--0----
86     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
87     : --1-------1--0----
87     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
88     : 1----------1-0----
88     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
89     : -1---------1-0----
89     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
90     : -1-------1--0-----
90     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
91     : --1------1--0-----
91     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
92     : 1---------1-0-----
92     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
93     : --1-------1-0-----
93     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
94     : 1----------10-----
94     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
95     : -1---------10-----
95     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,NODE1,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | voted(NODE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
96 (*) : -1-----0------0---
96     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
97     : --1-----0-----0---
97     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
98     : 1-----0-------0---
98     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
99     : -1--------0--0----
99     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
100     : --1--------0-0----
100     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
101     : 1--------0---0----
101     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
102     : -1--0---------0---
102     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
103     : --1--0--------0---
103     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
104     : 1--0----------0---
104     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
105     : -1--------0-0-----
105     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
106     : --1--------00-----
106     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
107     : 1--------0--0-----
107     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
108     : -1--0--------0----
108     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
109     : --1--0-------0----
109     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
110     : 1--0---------0----
110     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
111     : -1-----0----0-----
111     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
112     : --1-----0---0-----
112     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
113     : 1-----0-----0-----
113     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. ~decided(VALUE0) | vote(NODE0,VALUE0) | voted(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
114 (*) : --1-----0-------0-
114     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
115     : -1-----0--------0-
115     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
116     : 1-----0---------0-
116     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
117     : --1--------0---0--
117     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
118     : -1--------0----0--
118     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
119     : 1--------0-----0--
119     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
120     : --1--0-----------0
120     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
121     : -1--0------------0
121     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
122     : 1--0-------------0
122     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | vote(NODE0,VALUE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
123 (*) : --1-----0--0------
123     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
124     : -1-----0--0-------
124     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
125     : 1-----0--0--------
125     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
126     : --1--0-----0------
126     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
127     : -1--0-----0-------
127     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
128     : 1--0-----0--------
128     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
129     : --1--0--0---------
129     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
130     : -1--0--0----------
130     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
131     : 1--0--0-----------
131     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. ~decided(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
132 (*) : --1-----0------1--
132     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
133     : -1-----0-------1--
133     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
134     : 1-----0--------1--
134     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
135     : --1--------0----1-
135     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
136     : -1--------0-----1-
136     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
137     : 1--------0------1-
137     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
138     : --1--0---------1--
138     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
139     : -1--0----------1--
139     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
140     : 1--0-----------1--
140     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
141     : --1--------0-----1
141     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
142     : -1--------0------1
142     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
143     : 1--------0-------1
143     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
144     : --1--0----------1-
144     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
145     : -1--0-----------1-
145     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
146     : 1--0------------1-
146     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
147     : --1-----0--------1
147     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
148     : -1-----0---------1
148     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
149     : 1-----0----------1
149     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | vote(NODE0,VALUE0) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
150 (*) : --1---1--------1--
150     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
151     : -1----1--------1--
151     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
152     : --1----1-------1--
152     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
153     : 1------1-------1--
153     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
154     : -1------1------1--
154     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
155     : 1-------1------1--
155     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
156     : --1------1------1-
156     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
157     : -1-------1------1-
157     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
158     : --1-------1-----1-
158     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
159     : 1---------1-----1-
159     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
160     : -1---------1----1-
160     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
161     : 1----------1----1-
161     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
162     : --11-----------1--
162     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
163     : -1-1-----------1--
163     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
164     : --1-1----------1--
164     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
165     : 1---1----------1--
165     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
166     : -1---1---------1--
166     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
167     : 1----1---------1--
167     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
168     : --1------1-------1
168     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
169     : -1-------1-------1
169     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
170     : --1-------1------1
170     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
171     : 1---------1------1
171     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
172     : -1---------1-----1
172     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
173     : 1----------1-----1
173     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
174     : --11------------1-
174     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
175     : -1-1------------1-
175     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
176     : --1-1-----------1-
176     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
177     : 1---1-----------1-
177     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
178     : -1---1----------1-
178     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
179     : 1----1----------1-
179     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
180     : --1---1----------1
180     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
181     : -1----1----------1
181     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
182     : --1----1---------1
182     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
183     : 1------1---------1
183     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
184     : -1------1--------1
184     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
185     : 1-------1--------1
185     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,QUORUM0,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
186 (*) : --1---1----0------
186     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
187     : -1----1---0-------
187     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
188     : --1----1---0------
188     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
189     : 1------1-0--------
189     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
190     : -1------1-0-------
190     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
191     : 1-------10--------
191     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
192     : --1-----01--------
192     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
193     : -1-----0-1--------
193     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
194     : --1-----0-1-------
194     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
195     : 1-----0---1-------
195     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
196     : -1-----0---1------
196     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
197     : 1-----0----1------
197     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
198     : --11-------0------
198     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
199     : -1-1------0-------
199     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
200     : --1-1------0------
200     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
201     : 1---1----0--------
201     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
202     : -1---1----0-------
202     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
203     : 1----1---0--------
203     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
204     : --1--0---1--------
204     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
205     : -1--0----1--------
205     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
206     : --1--0----1-------
206     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
207     : 1--0------1-------
207     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
208     : -1--0------1------
208     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
209     : 1--0-------1------
209     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
210     : --11----0---------
210     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
211     : -1-1---0----------
211     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
212     : --1-1---0---------
212     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
213     : 1---1-0-----------
213     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
214     : -1---1-0----------
214     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
215     : 1----10-----------
215     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
216     : --1--01-----------
216     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
217     : -1--0-1-----------
217     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
218     : --1--0-1----------
218     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
219     : 1--0---1----------
219     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
220     : -1--0---1---------
220     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
221     : 1--0----1---------
221     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,NODE1,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 14 =====================
size : 18
num_suborbits: 1
222 (*) : --1---1---------0-
222     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
223     : -1----1---------0-
223     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
224     : --1----1--------0-
224     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
225     : 1------1--------0-
225     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
226     : -1------1-------0-
226     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
227     : 1-------1-------0-
227     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
228     : --1------1-----0--
228     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
229     : -1-------1-----0--
229     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
230     : --1-------1----0--
230     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
231     : 1---------1----0--
231     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
232     : -1---------1---0--
232     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
233     : 1----------1---0--
233     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
234     : --11-------------0
234     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
235     : -1-1-------------0
235     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
236     : --1-1------------0
236     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
237     : 1---1------------0
237     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
238     : -1---1-----------0
238     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
239     : 1----1-----------0
239     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,QUORUM0,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 15 =====================
size : 36
num_suborbits: 2
240 (*) : --11--1-----------
240     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
241     : -1-1--1-----------
241     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
242     : --1-1--1----------
242     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
243     : 1---1--1----------
243     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
244     : -1---1--1---------
244     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
245     : 1----1--1---------
245     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
246     : --11-----1--------
246     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
247     : -1-1-----1--------
247     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
248     : --1-1-----1-------
248     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
249     : 1---1-----1-------
249     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
250     : -1---1-----1------
250     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
251     : 1----1-----1------
251     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
252     : --1---1--1--------
252     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
253     : -1----1--1--------
253     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
254     : --1----1--1-------
254     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
255     : 1------1--1-------
255     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
256     : -1------1--1------
256     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
257     : 1-------1--1------
257     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
258 (*) : --11---1----------
258     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
259     : -1-1----1---------
259     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
260     : --1-1-1-----------
260     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
261     : 1---1---1---------
261     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
262     : -1---11-----------
262     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
263     : 1----1-1----------
263     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
264     : --11------1-------
264     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
265     : -1-1-------1------
265     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
266     : --1-1----1--------
266     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
267     : 1---1------1------
267     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
268     : -1---1---1--------
268     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
269     : 1----1----1-------
269     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
270     : --1---1---1-------
270     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
271     : -1----1----1------
271     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
272     : --1----1-1--------
272     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
273     : 1------1---1------
273     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
274     : -1------11--------
274     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
275     : 1-------1-1-------
275     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
num_forall :   5
num_exists :   0
num_literals : 10
quantified form : forall VALUE0,NODE1,VALUE1,NODE0,VALUE2. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | ~vote(NODE1,VALUE2) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2 | VALUE0 = VALUE1))
qcost : 15



[QRM NOTE]: Time elapsed since start: 7.260 seconds

[QRM NOTE]: Time elapsed since last: 0.232 seconds

[QRM NOTE]: Peak memory: 2324718 bytes


====================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

====================================================================================================


New level: 1
 pending : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, 16777216), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, 16777216), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17]


Solution : [1, 3, 17] has cost 14.


Decide in level 1 among pending : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, 16777216), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2]


New level: 2
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, 16777216), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, 4194304), (10, 4194304), (11, 1048576), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2]


Solution : [1, 3, 17, 2] has cost 19.


Decide in level 2 among pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, 4194304), (10, 4194304), (11, 1048576), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

Decide 9 with phase True at level 2

After decision at level 2
 pending : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2, 9]


New level: 3
 pending : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2, 9]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2, 9]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, 4194304), (10, 4194304), (11, 1048576), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 3 : {4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 9]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 9]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 9]


Solution : [1, 3, 17, 2, 9] has cost 26.


Before backtrack at level 3
 pending : []
 solution : [1, 3, 17, 2, 9]

After backtrack at level 3
 pending : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2, 9]


Invert decision for 9 at level 2


New level: 3
 pending : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, -1), (10, 4194304), (11, 1048576), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2]


Solution : [1, 3, 17, 2] has cost 19.


Decide in level 3 among pending : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, -1), (10, 4194304), (11, 1048576), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

Decide 10 with phase True at level 3

After decision at level 3
 pending : [4, 5, 6, 7, 8, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2, 10]


New level: 4
 pending : [4, 5, 6, 7, 8, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2, 10]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 11, 12, 13, 14, 15]
 solution : [1, 3, 17, 2, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, -1), (10, 4194304), (11, 1048576), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 0), (6, 512), (7, 0), (8, 0), (9, -1), (10, -1), (11, 4096), (12, 512), (13, 0), (14, 2048), (15, 0), (16, -1), (17, -1)]

Covered at level 4 : {5, 7, 8, 13, 15}

After reduction : 
 pending  : [4, 6, 11, 12, 14]
 solution : [1, 3, 17, 2, 10]


Before reduction : 
 pending  : [4, 6, 11, 12, 14]
 solution : [1, 3, 17, 2, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 0), (6, 512), (7, 0), (8, 0), (9, -1), (10, -1), (11, 4096), (12, 512), (13, 0), (14, 2048), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4096), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 6, 11, 12, 14]
 solution : [1, 3, 17, 2, 10]


Solution : [1, 3, 17, 2, 10] has cost 26.


Decide in level 4 among pending : [4, 6, 11, 12, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4096), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 11 with phase True at level 4

After decision at level 4
 pending : [4, 6, 12, 14]
 solution : [1, 3, 17, 2, 10, 11]


New level: 5
 pending : [4, 6, 12, 14]
 solution : [1, 3, 17, 2, 10, 11]


Before reduction : 
 pending  : [4, 6, 12, 14]
 solution : [1, 3, 17, 2, 10, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4096), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {4, 12, 6, 14}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 10, 11]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 10, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 10, 11]


Solution : [1, 3, 17, 2, 10, 11] has cost 33.


Before backtrack at level 5
 pending : []
 solution : [1, 3, 17, 2, 10, 11]

After backtrack at level 5
 pending : [4, 6, 12, 14]
 solution : [1, 3, 17, 2, 10, 11]


Invert decision for 11 at level 4


New level: 5
 pending : [4, 6, 12, 14]
 solution : [1, 3, 17, 2, 10]


Before reduction : 
 pending  : [4, 6, 12, 14]
 solution : [1, 3, 17, 2, 10]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 6, 12, 14]
 solution : [1, 3, 17, 2, 10]


Solution : [1, 3, 17, 2, 10] has cost 26.


Decide in level 5 among pending : [4, 6, 12, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 5

After decision at level 5
 pending : [6, 12, 14]
 solution : [1, 3, 17, 2, 10, 4]


New level: 6
 pending : [6, 12, 14]
 solution : [1, 3, 17, 2, 10, 4]


Before reduction : 
 pending  : [6, 12, 14]
 solution : [1, 3, 17, 2, 10, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {6}

After reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 2, 10, 4]


Before reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 2, 10, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 2, 10, 4]


Solution : [1, 3, 17, 2, 10, 4] has cost 33.


Before backtrack at level 6
 pending : [12, 14]
 solution : [1, 3, 17, 2, 10, 4]

After backtrack at level 6
 pending : [12, 14, 6]
 solution : [1, 3, 17, 2, 10, 4]


Invert decision for 4 at level 5


New level: 6
 pending : [12, 14, 6]
 solution : [1, 3, 17, 2, 10]


Before reduction : 
 pending  : [12, 14, 6]
 solution : [1, 3, 17, 2, 10]

Essensial at level 6 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 2, 10, 6]


Before reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 2, 10, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 2, 10, 6]


Solution : [1, 3, 17, 2, 10, 6] has cost 33.


Before backtrack at level 6
 pending : [12, 14]
 solution : [1, 3, 17, 2, 10, 6]

After backtrack at level 6
 pending : [12, 14, 6]
 solution : [1, 3, 17, 2, 10]


Before backtrack at level 5
 pending : [12, 14, 6]
 solution : [1, 3, 17, 2, 10]

After backtrack at level 5
 pending : [12, 14, 6, 4]
 solution : [1, 3, 17, 2, 10]


Before backtrack at level 4
 pending : [12, 14, 6, 4]
 solution : [1, 3, 17, 2, 10]

After backtrack at level 4
 pending : [12, 14, 6, 4, 5, 7, 8, 13, 15, 11]
 solution : [1, 3, 17, 2, 10]


Invert decision for 10 at level 3


New level: 4
 pending : [12, 14, 6, 4, 5, 7, 8, 13, 15, 11]
 solution : [1, 3, 17, 2]


Before reduction : 
 pending  : [12, 14, 6, 4, 5, 7, 8, 13, 15, 11]
 solution : [1, 3, 17, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, -1), (10, -1), (11, 1048576), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [12, 14, 6, 4, 5, 7, 8, 13, 15, 11]
 solution : [1, 3, 17, 2]


Solution : [1, 3, 17, 2] has cost 19.


Decide in level 4 among pending : [12, 14, 6, 4, 5, 7, 8, 13, 15, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, -1), (10, -1), (11, 1048576), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

Decide 11 with phase True at level 4

After decision at level 4
 pending : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 2, 11]


New level: 5
 pending : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 2, 11]


Before reduction : 
 pending  : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 2, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, -1), (10, -1), (11, 1048576), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 5 : {4, 5, 6, 7, 8, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 11]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 11]


Solution : [1, 3, 17, 2, 11] has cost 26.


Before backtrack at level 5
 pending : []
 solution : [1, 3, 17, 2, 11]

After backtrack at level 5
 pending : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 2, 11]


Invert decision for 11 at level 4


New level: 5
 pending : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 2]


Before reduction : 
 pending  : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, -1), (10, -1), (11, -1), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 2]


Solution : [1, 3, 17, 2] has cost 19.


Decide in level 5 among pending : [12, 14, 6, 4, 5, 7, 8, 13, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, -1), (10, -1), (11, -1), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

Decide 14 with phase True at level 5

After decision at level 5
 pending : [12, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 2, 14]


New level: 6
 pending : [12, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 2, 14]


Before reduction : 
 pending  : [12, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 2, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 131072), (7, 65536), (8, 524288), (9, -1), (10, -1), (11, -1), (12, 131072), (13, 524288), (14, 524288), (15, 81920), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 32768), (7, 2048), (8, 524288), (9, -1), (10, -1), (11, -1), (12, 0), (13, 2048), (14, -1), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {12, 15}

After reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 2, 14]


Before reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 2, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 32768), (7, 2048), (8, 524288), (9, -1), (10, -1), (11, -1), (12, 0), (13, 2048), (14, -1), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 32768), (7, 2048), (8, 524288), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 2, 14]


Solution : [1, 3, 17, 2, 14] has cost 28.


Before backtrack at level 6
 pending : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 2, 14]

After backtrack at level 6
 pending : [6, 4, 5, 7, 8, 13, 12, 15]
 solution : [1, 3, 17, 2, 14]


Invert decision for 14 at level 5


New level: 6
 pending : [6, 4, 5, 7, 8, 13, 12, 15]
 solution : [1, 3, 17, 2]


Before reduction : 
 pending  : [6, 4, 5, 7, 8, 13, 12, 15]
 solution : [1, 3, 17, 2]

Essensial at level 6 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 32768), (7, 2048), (8, 524288), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 32768), (7, 2048), (8, 524288), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, -1), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {15}

After reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 2, 12]


Before reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 2, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 32768), (7, 2048), (8, 524288), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, -1), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 32768), (7, 2048), (8, 524288), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 2, 12]


Solution : [1, 3, 17, 2, 12] has cost 28.


Before backtrack at level 6
 pending : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 2, 12]

After backtrack at level 6
 pending : [6, 4, 5, 7, 8, 13, 12, 15]
 solution : [1, 3, 17, 2]


Before backtrack at level 5
 pending : [6, 4, 5, 7, 8, 13, 12, 15]
 solution : [1, 3, 17, 2]

After backtrack at level 5
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14]
 solution : [1, 3, 17, 2]


Before backtrack at level 4
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14]
 solution : [1, 3, 17, 2]

After backtrack at level 4
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11]
 solution : [1, 3, 17, 2]


Before backtrack at level 3
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11]
 solution : [1, 3, 17, 2]

After backtrack at level 3
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 10]
 solution : [1, 3, 17, 2]


Before backtrack at level 2
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 10]
 solution : [1, 3, 17, 2]

After backtrack at level 2
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 10, 9]
 solution : [1, 3, 17, 2]


Invert decision for 2 at level 1


New level: 2
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 10, 9]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 10, 9]
 solution : [1, 3, 17]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 65536), (6, 32768), (7, 2048), (8, 524288), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, 16777216), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 10, 9]
 solution : [1, 3, 17]


Solution : [1, 3, 17] has cost 14.


Decide in level 2 among pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 10, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, 16777216), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Decide 10 with phase True at level 2

After decision at level 2
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 9]
 solution : [1, 3, 17, 10]


New level: 3
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 9]
 solution : [1, 3, 17, 10]


Before reduction : 
 pending  : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 9]
 solution : [1, 3, 17, 10]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, 16777216), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 0), (6, 512), (7, 0), (8, 0), (9, 16384), (10, -1), (11, 4096), (12, 512), (13, 0), (14, 2048), (15, 0), (16, -1), (17, -1)]

Covered at level 3 : {5, 7, 8, 13, 15}

After reduction : 
 pending  : [6, 4, 12, 14, 11, 9]
 solution : [1, 3, 17, 10]


Before reduction : 
 pending  : [6, 4, 12, 14, 11, 9]
 solution : [1, 3, 17, 10]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 0), (6, 512), (7, 0), (8, 0), (9, 16384), (10, -1), (11, 4096), (12, 512), (13, 0), (14, 2048), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, 16384), (10, -1), (11, 4096), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [6, 4, 12, 14, 11, 9]
 solution : [1, 3, 17, 10]


Solution : [1, 3, 17, 10] has cost 21.


Decide in level 3 among pending : [6, 4, 12, 14, 11, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, 16384), (10, -1), (11, 4096), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 9 with phase True at level 3

After decision at level 3
 pending : [6, 4, 12, 14, 11]
 solution : [1, 3, 17, 10, 9]


New level: 4
 pending : [6, 4, 12, 14, 11]
 solution : [1, 3, 17, 10, 9]


Before reduction : 
 pending  : [6, 4, 12, 14, 11]
 solution : [1, 3, 17, 10, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, 16384), (10, -1), (11, 4096), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : {4, 6, 11, 12, 14}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 9]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 9]


Solution : [1, 3, 17, 10, 9] has cost 28.


Before backtrack at level 4
 pending : []
 solution : [1, 3, 17, 10, 9]

After backtrack at level 4
 pending : [6, 4, 12, 14, 11]
 solution : [1, 3, 17, 10, 9]


Invert decision for 9 at level 3


New level: 4
 pending : [6, 4, 12, 14, 11]
 solution : [1, 3, 17, 10]


Before reduction : 
 pending  : [6, 4, 12, 14, 11]
 solution : [1, 3, 17, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4096), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [6, 4, 12, 14, 11]
 solution : [1, 3, 17, 10]


Solution : [1, 3, 17, 10] has cost 21.


Decide in level 4 among pending : [6, 4, 12, 14, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4096), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 11 with phase True at level 4

After decision at level 4
 pending : [6, 4, 12, 14]
 solution : [1, 3, 17, 10, 11]


New level: 5
 pending : [6, 4, 12, 14]
 solution : [1, 3, 17, 10, 11]


Before reduction : 
 pending  : [6, 4, 12, 14]
 solution : [1, 3, 17, 10, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4096), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {4, 12, 6, 14}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 11]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 11]


Solution : [1, 3, 17, 10, 11] has cost 28.


Before backtrack at level 5
 pending : []
 solution : [1, 3, 17, 10, 11]

After backtrack at level 5
 pending : [6, 4, 12, 14]
 solution : [1, 3, 17, 10, 11]


Invert decision for 11 at level 4


New level: 5
 pending : [6, 4, 12, 14]
 solution : [1, 3, 17, 10]


Before reduction : 
 pending  : [6, 4, 12, 14]
 solution : [1, 3, 17, 10]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [6, 4, 12, 14]
 solution : [1, 3, 17, 10]


Solution : [1, 3, 17, 10] has cost 21.


Decide in level 5 among pending : [6, 4, 12, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 5

After decision at level 5
 pending : [6, 12, 14]
 solution : [1, 3, 17, 10, 4]


New level: 6
 pending : [6, 12, 14]
 solution : [1, 3, 17, 10, 4]


Before reduction : 
 pending  : [6, 12, 14]
 solution : [1, 3, 17, 10, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 512), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {6}

After reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 10, 4]


Before reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 10, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 10, 4]


Solution : [1, 3, 17, 10, 4] has cost 28.


Before backtrack at level 6
 pending : [12, 14]
 solution : [1, 3, 17, 10, 4]

After backtrack at level 6
 pending : [12, 14, 6]
 solution : [1, 3, 17, 10, 4]


Invert decision for 4 at level 5


New level: 6
 pending : [12, 14, 6]
 solution : [1, 3, 17, 10]


Before reduction : 
 pending  : [12, 14, 6]
 solution : [1, 3, 17, 10]

Essensial at level 6 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 10, 6]


Before reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 10, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 14]
 solution : [1, 3, 17, 10, 6]


Solution : [1, 3, 17, 10, 6] has cost 28.


Before backtrack at level 6
 pending : [12, 14]
 solution : [1, 3, 17, 10, 6]

After backtrack at level 6
 pending : [12, 14, 6]
 solution : [1, 3, 17, 10]


Before backtrack at level 5
 pending : [12, 14, 6]
 solution : [1, 3, 17, 10]

After backtrack at level 5
 pending : [12, 14, 6, 4]
 solution : [1, 3, 17, 10]


Before backtrack at level 4
 pending : [12, 14, 6, 4]
 solution : [1, 3, 17, 10]

After backtrack at level 4
 pending : [12, 14, 6, 4, 11]
 solution : [1, 3, 17, 10]


Before backtrack at level 3
 pending : [12, 14, 6, 4, 11]
 solution : [1, 3, 17, 10]

After backtrack at level 3
 pending : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15, 9]
 solution : [1, 3, 17, 10]


Invert decision for 10 at level 2


New level: 3
 pending : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15, 9]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15, 9]
 solution : [1, 3, 17]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, -1), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15, 9]
 solution : [1, 3, 17]


Solution : [1, 3, 17] has cost 14.


Decide in level 3 among pending : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, -1), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Decide 9 with phase True at level 3

After decision at level 3
 pending : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 9]


New level: 4
 pending : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 9]


Before reduction : 
 pending  : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, 16777216), (10, -1), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 4 : {4, 5, 6, 7, 8, 11, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 9]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 9]


Solution : [1, 3, 17, 9] has cost 21.


Before backtrack at level 4
 pending : []
 solution : [1, 3, 17, 9]

After backtrack at level 4
 pending : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 9]


Invert decision for 9 at level 3


New level: 4
 pending : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15]
 solution : [1, 3, 17]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, -1), (10, -1), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15]
 solution : [1, 3, 17]


Solution : [1, 3, 17] has cost 14.


Decide in level 4 among pending : [12, 14, 6, 4, 11, 5, 7, 8, 13, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, -1), (10, -1), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Decide 11 with phase True at level 4

After decision at level 4
 pending : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 11]


New level: 5
 pending : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 11]


Before reduction : 
 pending  : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, -1), (10, -1), (11, 4194304), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 5 : {4, 5, 6, 7, 8, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 11]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 11]


Solution : [1, 3, 17, 11] has cost 21.


Before backtrack at level 5
 pending : []
 solution : [1, 3, 17, 11]

After backtrack at level 5
 pending : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 11]


Invert decision for 11 at level 4


New level: 5
 pending : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, -1), (10, -1), (11, -1), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [12, 14, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17]


Solution : [1, 3, 17] has cost 14.


Decide in level 5 among pending : [12, 14, 6, 4, 5, 7, 8, 13, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, -1), (10, -1), (11, -1), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

Decide 14 with phase True at level 5

After decision at level 5
 pending : [12, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 14]


New level: 6
 pending : [12, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 14]


Before reduction : 
 pending  : [12, 6, 4, 5, 7, 8, 13, 15]
 solution : [1, 3, 17, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 524288), (7, 262144), (8, 2097152), (9, -1), (10, -1), (11, -1), (12, 524288), (13, 2097152), (14, 2097152), (15, 327680), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 131072), (7, 8192), (8, 2097152), (9, -1), (10, -1), (11, -1), (12, 0), (13, 8192), (14, -1), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {12, 15}

After reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 14]


Before reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 131072), (7, 8192), (8, 2097152), (9, -1), (10, -1), (11, -1), (12, 0), (13, 8192), (14, -1), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 131072), (7, 8192), (8, 2097152), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 14]


Solution : [1, 3, 17, 14] has cost 23.


Before backtrack at level 6
 pending : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 14]

After backtrack at level 6
 pending : [6, 4, 5, 7, 8, 13, 12, 15]
 solution : [1, 3, 17, 14]


Invert decision for 14 at level 5


New level: 6
 pending : [6, 4, 5, 7, 8, 13, 12, 15]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [6, 4, 5, 7, 8, 13, 12, 15]
 solution : [1, 3, 17]

Essensial at level 6 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 131072), (7, 8192), (8, 2097152), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 131072), (7, 8192), (8, 2097152), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {15}

After reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 12]


Before reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 131072), (7, 8192), (8, 2097152), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 262144), (6, 131072), (7, 8192), (8, 2097152), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 12]


Solution : [1, 3, 17, 12] has cost 23.


Before backtrack at level 6
 pending : [6, 4, 5, 7, 8, 13]
 solution : [1, 3, 17, 12]

After backtrack at level 6
 pending : [6, 4, 5, 7, 8, 13, 12, 15]
 solution : [1, 3, 17]


Before backtrack at level 5
 pending : [6, 4, 5, 7, 8, 13, 12, 15]
 solution : [1, 3, 17]

After backtrack at level 5
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14]
 solution : [1, 3, 17]


Before backtrack at level 4
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14]
 solution : [1, 3, 17]

After backtrack at level 4
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11]
 solution : [1, 3, 17]


Before backtrack at level 3
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11]
 solution : [1, 3, 17]

After backtrack at level 3
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 9]
 solution : [1, 3, 17]


Before backtrack at level 2
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 9]
 solution : [1, 3, 17]

After backtrack at level 2
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 9, 10]
 solution : [1, 3, 17]


Before backtrack at level 1
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 9, 10]
 solution : [1, 3, 17]

After backtrack at level 1
 pending : [6, 4, 5, 7, 8, 13, 12, 15, 14, 11, 9, 10, 2]
 solution : [1, 3, 17]


===================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

===================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: total qcost: 21

[MIN NOTE]: maximum branch and bound depth: 6

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [1, 3, 17, 9] (length = 4)

invariant [invar_1] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_3] forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_17] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_9] forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | vote(NODE0,VALUE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0) # qcost: 7




Solution 1 : [1, 3, 17, 11] (length = 4)

invariant [invar_1] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_3] forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_17] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_11] forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | vote(NODE0,VALUE0) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0) # qcost: 7




[QRM NOTE]: Time elapsed since start: 7.375 seconds

[QRM NOTE]: Time elapsed since last: 0.115 seconds

[QRM NOTE]: Peak memory: 2273381 bytes


=======================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

=======================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_3
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_9

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_3 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_9 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_9 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_9 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_11

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_11 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_11 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_11 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall Q2,Q1. (exists N. (member(N,Q1) & member(N,Q2)))) & (forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1) & (forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | vote(NODE0,VALUE0) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0)))

[QRM NOTE]: Time elapsed since start: 11.072 seconds

[QRM NOTE]: Time elapsed since last: 3.697 seconds

[QRM NOTE]: Peak memory: 1274724 bytes


***************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_forall.ivy

***************************************************************************

[QRM RESULT]: PASS

