
****************************************************************

	[QRM]: ivybench/sym/ivy/client_server_ae.ivy

****************************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=============================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 5

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 1

[FW NOTE]: number of branching actions: 3

ivy_to_cpp target=qrm client_server_ae.node_1_request_1_response_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o client_server_ae.node_1_request_1_response_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 client_server_ae.node_1_request_1_response_1.finite.cpp client_server_ae.node_1_request_1_response_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared client_server_ae.node_1_request_1_response_1.finite.o client_server_ae.node_1_request_1_response_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.703 seconds

[QRM NOTE]: Time elapsed since last: 7.703 seconds

[QRM NOTE]: Peak memory: 1180841 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 3

[FW NOTE]: number of total reachable states:        6

[FW NOTE]: number of dfs representative states:     6

[FW NOTE]: number of dfs non-representative states: 0


====================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

====================================================================================================================

sort: node=['node0']
sort: request=['request0']
sort: response=['response0']
predicate: match('request', 'response')
predicate: response_sent('node', 'response')
predicate: responseMatched('node', 'response')
predicate: request_sent('node', 'request')
predicate: response_received('node', 'response')
interpreted atoms: {}
state atoms: ['match(request0,response0)', 'request_sent(node0,request0)', 'responseMatched(node0,response0)', 'response_received(node0,response0)', 'response_sent(node0,response0)']
representative states : 0, 16, 8, 28, 29, 31


=== State Orbit 0 =====================
size : 1
repr state: 00000
lex min decimal: 0
states:
00000




=== State Orbit 1 =====================
size : 1
repr state: 10000
lex min decimal: 16
states:
10000




=== State Orbit 2 =====================
size : 1
repr state: 01000
lex min decimal: 8
states:
01000




=== State Orbit 3 =====================
size : 1
repr state: 11100
lex min decimal: 28
states:
11100




=== State Orbit 4 =====================
size : 1
repr state: 11101
lex min decimal: 29
states:
11101




=== State Orbit 5 =====================
size : 1
repr state: 11111
lex min decimal: 31
states:
11111



[QRM NOTE]: Time elapsed since start: 7.894 seconds

[QRM NOTE]: Time elapsed since last: 0.191 seconds

[QRM NOTE]: Peak memory: 1210104 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.895 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 160179 bytes


====================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

====================================================================================================================


===============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

===============================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : ---10
0     : ['response_received(node0,response0)', '~response_sent(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : -01--
1     : ['responseMatched(node0,response0)', '~request_sent(node0,request0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -0-1-
2     : ['response_received(node0,response0)', '~request_sent(node0,request0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : -0--1
3     : ['response_sent(node0,response0)', '~request_sent(node0,request0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : 0-1--
4     : ['responseMatched(node0,response0)', '~match(request0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 0--1-
5     : ['response_received(node0,response0)', '~match(request0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 0---1
6     : ['response_sent(node0,response0)', '~match(request0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
7 (*) : --01-
7     : ['response_received(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : --0-1
8     : ['response_sent(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
9 (*) : 110--
9     : ['match(request0,response0)', 'request_sent(node0,request0)', '~responseMatched(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 10

[PRIME NOTE]: number of primes: 10

[QRM NOTE]: Time elapsed since start: 7.907 seconds

[QRM NOTE]: Time elapsed since last: 0.011 seconds

[QRM NOTE]: Peak memory: 1233335 bytes


=========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=========================================================================================================

definition primes: {1, 4, 9}


New level: 0
 pending : [0, 2, 3, 5, 6, 7, 8]
 solution : []


Before reduction : 
 pending  : [0, 2, 3, 5, 6, 7, 8]
 solution : []

Essensial at level 0 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, 4), (4, -1), (5, 2), (6, 4), (7, 4), (8, 8), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8]
 solution : [0]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8]
 solution : [0]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, 4), (4, -1), (5, 2), (6, 4), (7, 4), (8, 8), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, 4), (4, -1), (5, 2), (6, 4), (7, 4), (8, 8), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8]
 solution : [0]

[QRM NOTE]: Time elapsed since start: 7.911 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 185168 bytes


=============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : ---10
0     : ['response_received(node0,response0)', '~response_sent(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['response_received(node0,response0)', '~response_sent(node0,response0)']

sign_func_name2args: {'0$response_received': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))], '1$response_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$response_received$0$0, node$1$response_sent$0$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$0$response_received$1$0, response$1$response_sent$1$0]}

sig2const: {'node$0$response_received$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_received$1$0': Const('response0', EnumeratedSort('response', ('response0',))), 'node$1$response_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$1$response_sent$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$response_sent$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$response_sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$response_sent$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$response_sent$1$0}

part_sig: ('node$0$response_received$0$0; node$1$response_sent$0$0', 'response$0$response_received$1$0; response$1$response_sent$1$0')


---------- SigGenerator ----------

terms:  ['response_received(node0,response0)', '~response_sent(node0,response0)']

func_name2symbol:  {'response_received': Const('response_received', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort())), 'response_sent': Const('response_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'response_received': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',))), 'response_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'0$response_received': 1, '1$response_sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$response_sent$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$response_sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$response_sent$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$response_sent$1$0}

	sort: node

	identical_classes: {'node$0$response_received$0; node$1$response_sent$0': [node$0$response_received$0$0; node$1$response_sent$0$0]}

	identical_single_classes: {'node$0$response_received$0; node$1$response_sent$0': node$0$response_received$0$0; node$1$response_sent$0$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_received$1; response$1$response_sent$1': [response$0$response_received$1$0; response$1$response_sent$1$0]}

	identical_single_classes: {'response$0$response_received$1; response$1$response_sent$1': response$0$response_received$1$0; response$1$response_sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$response_received': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]], '1$response_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~response_sent(NODE0,RESPONSE0)', 'response_received(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall RESPONSE0,NODE0. response_sent(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -0-1-
2     : ['response_received(node0,response0)', '~request_sent(node0,request0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~request_sent(node0,request0)', 'response_received(node0,response0)']

sign_func_name2args: {'1$request_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('request0', EnumeratedSort('request', ('request0',))))], '0$response_received': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$request_sent$0$0, node$0$response_received$0$0], Const('request0', EnumeratedSort('request', ('request0',))): [request$1$request_sent$1$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$0$response_received$1$0]}

sig2const: {'node$1$request_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'request$1$request_sent$1$0': Const('request0', EnumeratedSort('request', ('request0',))), 'node$0$response_received$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_received$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$request_sent$0$0], EnumeratedSort('request', ('request0',)): [request$1$request_sent$1$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$request_sent$0$0, EnumeratedSort('request', ('request0',)): request$1$request_sent$1$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0}

part_sig: ('node$0$response_received$0$0; node$1$request_sent$0$0', 'request$1$request_sent$1$0', 'response$0$response_received$1$0')


---------- SigGenerator ----------

terms:  ['~request_sent(node0,request0)', 'response_received(node0,response0)']

func_name2symbol:  {'request_sent': Const('request_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('request', ('request0',)), BooleanSort())), 'response_received': Const('response_received', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'request_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('request', ('request0',))), 'response_received': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$request_sent': 1, '0$response_received': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$request_sent$0$0], EnumeratedSort('request', ('request0',)): [request$1$request_sent$1$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$request_sent$0$0, EnumeratedSort('request', ('request0',)): request$1$request_sent$1$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0}

	sort: node

	identical_classes: {'node$0$response_received$0; node$1$request_sent$0': [node$0$response_received$0$0; node$1$request_sent$0$0]}

	identical_single_classes: {'node$0$response_received$0; node$1$request_sent$0': node$0$response_received$0$0; node$1$request_sent$0$0}

	identical_multi_classes: {}

	sort: request

	identical_classes: {'request$1$request_sent$1': [request$1$request_sent$1$0]}

	identical_single_classes: {'request$1$request_sent$1': request$1$request_sent$1$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_received$1': [response$0$response_received$1$0]}

	identical_single_classes: {'response$0$response_received$1': response$0$response_received$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: request: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$request_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',)))]], '0$response_received': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~request_sent(NODE0,REQUEST0)', 'response_received(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall REQUEST0,RESPONSE0,NODE0. request_sent(NODE0,REQUEST0) | ~response_received(NODE0,RESPONSE0)


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : -0--1
3     : ['response_sent(node0,response0)', '~request_sent(node0,request0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~request_sent(node0,request0)', 'response_sent(node0,response0)']

sign_func_name2args: {'1$request_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('request0', EnumeratedSort('request', ('request0',))))], '0$response_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$request_sent$0$0, node$0$response_sent$0$0], Const('request0', EnumeratedSort('request', ('request0',))): [request$1$request_sent$1$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$0$response_sent$1$0]}

sig2const: {'node$1$request_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'request$1$request_sent$1$0': Const('request0', EnumeratedSort('request', ('request0',))), 'node$0$response_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_sent$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0; node$1$request_sent$0$0], EnumeratedSort('request', ('request0',)): [request$1$request_sent$1$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0; node$1$request_sent$0$0, EnumeratedSort('request', ('request0',)): request$1$request_sent$1$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0}

part_sig: ('node$0$response_sent$0$0; node$1$request_sent$0$0', 'request$1$request_sent$1$0', 'response$0$response_sent$1$0')


---------- SigGenerator ----------

terms:  ['~request_sent(node0,request0)', 'response_sent(node0,response0)']

func_name2symbol:  {'request_sent': Const('request_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('request', ('request0',)), BooleanSort())), 'response_sent': Const('response_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'request_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('request', ('request0',))), 'response_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$request_sent': 1, '0$response_sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0; node$1$request_sent$0$0], EnumeratedSort('request', ('request0',)): [request$1$request_sent$1$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0; node$1$request_sent$0$0, EnumeratedSort('request', ('request0',)): request$1$request_sent$1$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0}

	sort: node

	identical_classes: {'node$0$response_sent$0; node$1$request_sent$0': [node$0$response_sent$0$0; node$1$request_sent$0$0]}

	identical_single_classes: {'node$0$response_sent$0; node$1$request_sent$0': node$0$response_sent$0$0; node$1$request_sent$0$0}

	identical_multi_classes: {}

	sort: request

	identical_classes: {'request$1$request_sent$1': [request$1$request_sent$1$0]}

	identical_single_classes: {'request$1$request_sent$1': request$1$request_sent$1$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_sent$1': [response$0$response_sent$1$0]}

	identical_single_classes: {'response$0$response_sent$1': response$0$response_sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: request: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$request_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',)))]], '0$response_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~request_sent(NODE0,REQUEST0)', 'response_sent(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall REQUEST0,RESPONSE0,NODE0. request_sent(NODE0,REQUEST0) | ~response_sent(NODE0,RESPONSE0)


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 0--1-
5     : ['response_received(node0,response0)', '~match(request0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~match(request0,response0)', 'response_received(node0,response0)']

sign_func_name2args: {'1$match': [(Const('request0', EnumeratedSort('request', ('request0',))), Const('response0', EnumeratedSort('response', ('response0',))))], '0$response_received': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('request0', EnumeratedSort('request', ('request0',))): [request$1$match$0$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$1$match$1$0, response$0$response_received$1$0], Const('node0', EnumeratedSort('node', ('node0',))): [node$0$response_received$0$0]}

sig2const: {'request$1$match$0$0': Const('request0', EnumeratedSort('request', ('request0',))), 'response$1$match$1$0': Const('response0', EnumeratedSort('response', ('response0',))), 'node$0$response_received$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_received$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('request', ('request0',)): [request$1$match$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$match$1$0], EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0]}

sort2part_sig: {EnumeratedSort('request', ('request0',)): request$1$match$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$match$1$0, EnumeratedSort('node', ('node0',)): node$0$response_received$0$0}

part_sig: ('node$0$response_received$0$0', 'request$1$match$0$0', 'response$0$response_received$1$0; response$1$match$1$0')


---------- SigGenerator ----------

terms:  ['~match(request0,response0)', 'response_received(node0,response0)']

func_name2symbol:  {'match': Const('match', FunctionSort(EnumeratedSort('request', ('request0',)), EnumeratedSort('response', ('response0',)), BooleanSort())), 'response_received': Const('response_received', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'match': (EnumeratedSort('request', ('request0',)), EnumeratedSort('response', ('response0',))), 'response_received': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$match': 1, '0$response_received': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('request', ('request0',)): [request$1$match$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$match$1$0], EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0]}

sort2part_sig: {EnumeratedSort('request', ('request0',)): request$1$match$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$match$1$0, EnumeratedSort('node', ('node0',)): node$0$response_received$0$0}

	sort: request

	identical_classes: {'request$1$match$0': [request$1$match$0$0]}

	identical_single_classes: {'request$1$match$0': request$1$match$0$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_received$1; response$1$match$1': [response$0$response_received$1$0; response$1$match$1$0]}

	identical_single_classes: {'response$0$response_received$1; response$1$match$1': response$0$response_received$1$0; response$1$match$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$response_received$0': [node$0$response_received$0$0]}

	identical_single_classes: {'node$0$response_received$0': node$0$response_received$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: request: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$match': [[Var('REQUEST0', EnumeratedSort('request', ('request0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]], '0$response_received': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~match(REQUEST0,RESPONSE0)', 'response_received(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall REQUEST0,RESPONSE0,NODE0. match(REQUEST0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 0---1
6     : ['response_sent(node0,response0)', '~match(request0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~match(request0,response0)', 'response_sent(node0,response0)']

sign_func_name2args: {'1$match': [(Const('request0', EnumeratedSort('request', ('request0',))), Const('response0', EnumeratedSort('response', ('response0',))))], '0$response_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('request0', EnumeratedSort('request', ('request0',))): [request$1$match$0$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$1$match$1$0, response$0$response_sent$1$0], Const('node0', EnumeratedSort('node', ('node0',))): [node$0$response_sent$0$0]}

sig2const: {'request$1$match$0$0': Const('request0', EnumeratedSort('request', ('request0',))), 'response$1$match$1$0': Const('response0', EnumeratedSort('response', ('response0',))), 'node$0$response_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_sent$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('request', ('request0',)): [request$1$match$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0; response$1$match$1$0], EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0]}

sort2part_sig: {EnumeratedSort('request', ('request0',)): request$1$match$0$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0; response$1$match$1$0, EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0}

part_sig: ('node$0$response_sent$0$0', 'request$1$match$0$0', 'response$0$response_sent$1$0; response$1$match$1$0')


---------- SigGenerator ----------

terms:  ['~match(request0,response0)', 'response_sent(node0,response0)']

func_name2symbol:  {'match': Const('match', FunctionSort(EnumeratedSort('request', ('request0',)), EnumeratedSort('response', ('response0',)), BooleanSort())), 'response_sent': Const('response_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'match': (EnumeratedSort('request', ('request0',)), EnumeratedSort('response', ('response0',))), 'response_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$match': 1, '0$response_sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('request', ('request0',)): [request$1$match$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0; response$1$match$1$0], EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0]}

sort2part_sig: {EnumeratedSort('request', ('request0',)): request$1$match$0$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0; response$1$match$1$0, EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0}

	sort: request

	identical_classes: {'request$1$match$0': [request$1$match$0$0]}

	identical_single_classes: {'request$1$match$0': request$1$match$0$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_sent$1; response$1$match$1': [response$0$response_sent$1$0; response$1$match$1$0]}

	identical_single_classes: {'response$0$response_sent$1; response$1$match$1': response$0$response_sent$1$0; response$1$match$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$response_sent$0': [node$0$response_sent$0$0]}

	identical_single_classes: {'node$0$response_sent$0': node$0$response_sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: request: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$match': [[Var('REQUEST0', EnumeratedSort('request', ('request0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]], '0$response_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~match(REQUEST0,RESPONSE0)', 'response_sent(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall REQUEST0,RESPONSE0,NODE0. match(REQUEST0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0)


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
7 (*) : --01-
7     : ['response_received(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~responseMatched(node0,response0)', 'response_received(node0,response0)']

sign_func_name2args: {'1$responseMatched': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))], '0$response_received': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$responseMatched$0$0, node$0$response_received$0$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$1$responseMatched$1$0, response$0$response_received$1$0]}

sig2const: {'node$1$responseMatched$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$1$responseMatched$1$0': Const('response0', EnumeratedSort('response', ('response0',))), 'node$0$response_received$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_received$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$responseMatched$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$responseMatched$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$responseMatched$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$responseMatched$1$0}

part_sig: ('node$0$response_received$0$0; node$1$responseMatched$0$0', 'response$0$response_received$1$0; response$1$responseMatched$1$0')


---------- SigGenerator ----------

terms:  ['~responseMatched(node0,response0)', 'response_received(node0,response0)']

func_name2symbol:  {'responseMatched': Const('responseMatched', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort())), 'response_received': Const('response_received', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'responseMatched': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',))), 'response_received': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$responseMatched': 1, '0$response_received': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$responseMatched$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$responseMatched$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$responseMatched$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$responseMatched$1$0}

	sort: node

	identical_classes: {'node$0$response_received$0; node$1$responseMatched$0': [node$0$response_received$0$0; node$1$responseMatched$0$0]}

	identical_single_classes: {'node$0$response_received$0; node$1$responseMatched$0': node$0$response_received$0$0; node$1$responseMatched$0$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_received$1; response$1$responseMatched$1': [response$0$response_received$1$0; response$1$responseMatched$1$0]}

	identical_single_classes: {'response$0$response_received$1; response$1$responseMatched$1': response$0$response_received$1$0; response$1$responseMatched$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$responseMatched': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]], '0$response_received': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~responseMatched(NODE0,RESPONSE0)', 'response_received(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall RESPONSE0,NODE0. responseMatched(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : --0-1
8     : ['response_sent(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~responseMatched(node0,response0)', 'response_sent(node0,response0)']

sign_func_name2args: {'1$responseMatched': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))], '0$response_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$responseMatched$0$0, node$0$response_sent$0$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$1$responseMatched$1$0, response$0$response_sent$1$0]}

sig2const: {'node$1$responseMatched$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$1$responseMatched$1$0': Const('response0', EnumeratedSort('response', ('response0',))), 'node$0$response_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_sent$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0; node$1$responseMatched$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0; response$1$responseMatched$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0; node$1$responseMatched$0$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0; response$1$responseMatched$1$0}

part_sig: ('node$0$response_sent$0$0; node$1$responseMatched$0$0', 'response$0$response_sent$1$0; response$1$responseMatched$1$0')


---------- SigGenerator ----------

terms:  ['~responseMatched(node0,response0)', 'response_sent(node0,response0)']

func_name2symbol:  {'responseMatched': Const('responseMatched', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort())), 'response_sent': Const('response_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'responseMatched': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',))), 'response_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$responseMatched': 1, '0$response_sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0; node$1$responseMatched$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0; response$1$responseMatched$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0; node$1$responseMatched$0$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0; response$1$responseMatched$1$0}

	sort: node

	identical_classes: {'node$0$response_sent$0; node$1$responseMatched$0': [node$0$response_sent$0$0; node$1$responseMatched$0$0]}

	identical_single_classes: {'node$0$response_sent$0; node$1$responseMatched$0': node$0$response_sent$0$0; node$1$responseMatched$0$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_sent$1; response$1$responseMatched$1': [response$0$response_sent$1$0; response$1$responseMatched$1$0]}

	identical_single_classes: {'response$0$response_sent$1; response$1$responseMatched$1': response$0$response_sent$1$0; response$1$responseMatched$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$responseMatched': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]], '0$response_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~responseMatched(NODE0,RESPONSE0)', 'response_sent(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall RESPONSE0,NODE0. responseMatched(NODE0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0)


=======================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=======================================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : ---10
0     : ['response_received(node0,response0)', '~response_sent(node0,response0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall RESPONSE0,NODE0. response_sent(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -0-1-
2     : ['response_received(node0,response0)', '~request_sent(node0,request0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall REQUEST0,RESPONSE0,NODE0. request_sent(NODE0,REQUEST0) | ~response_received(NODE0,RESPONSE0)
qcost : 5




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : -0--1
3     : ['response_sent(node0,response0)', '~request_sent(node0,request0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall REQUEST0,RESPONSE0,NODE0. request_sent(NODE0,REQUEST0) | ~response_sent(NODE0,RESPONSE0)
qcost : 5




=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 0--1-
5     : ['response_received(node0,response0)', '~match(request0,response0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall REQUEST0,RESPONSE0,NODE0. match(REQUEST0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)
qcost : 5




=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 0---1
6     : ['response_sent(node0,response0)', '~match(request0,response0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall REQUEST0,RESPONSE0,NODE0. match(REQUEST0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0)
qcost : 5




=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
7 (*) : --01-
7     : ['response_received(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall RESPONSE0,NODE0. responseMatched(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)
qcost : 4




=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : --0-1
8     : ['response_sent(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall RESPONSE0,NODE0. responseMatched(NODE0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 8.064 seconds

[QRM NOTE]: Time elapsed since last: 0.153 seconds

[QRM NOTE]: Peak memory: 1853088 bytes


======================================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

======================================================================================================


New level: 1
 pending : [2, 3, 5, 6, 7, 8]
 solution : [0]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8]
 solution : [0]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, 4), (4, -1), (5, 2), (6, 4), (7, 4), (8, 8), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, 4), (4, -1), (5, 2), (6, 4), (7, 4), (8, 8), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8]
 solution : [0]


Solution : [0] has cost 4.


Decide in level 1 among pending : [2, 3, 5, 6, 7, 8]

Coverage : [(0, -1), (1, -1), (2, 2), (3, 4), (4, -1), (5, 2), (6, 4), (7, 4), (8, 8), (9, -1)]

Decide 8 with phase True at level 1

After decision at level 1
 pending : [2, 3, 5, 6, 7]
 solution : [0, 8]


New level: 2
 pending : [2, 3, 5, 6, 7]
 solution : [0, 8]


Before reduction : 
 pending  : [2, 3, 5, 6, 7]
 solution : [0, 8]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, 4), (4, -1), (5, 2), (6, 4), (7, 4), (8, 8), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, -1)]

Covered at level 2 : {2, 3, 5, 6, 7}

After reduction : 
 pending  : []
 solution : [0, 8]


Before reduction : 
 pending  : []
 solution : [0, 8]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [0, 8]


Solution : [0, 8] has cost 8.


Before backtrack at level 2
 pending : []
 solution : [0, 8]

After backtrack at level 2
 pending : [2, 3, 5, 6, 7]
 solution : [0, 8]


Invert decision for 8 at level 1


New level: 2
 pending : [2, 3, 5, 6, 7]
 solution : [0]


Before reduction : 
 pending  : [2, 3, 5, 6, 7]
 solution : [0]

Essensial at level 2 : {3, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1)]

Covered at level 2 : {2, 5, 7}

After reduction : 
 pending  : []
 solution : [0, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 3, 6]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 6]


Solution : [0, 3, 6] has cost 14.


Before backtrack at level 2
 pending : []
 solution : [0, 3, 6]

After backtrack at level 2
 pending : [3, 6, 2, 5, 7]
 solution : [0]


Before backtrack at level 1
 pending : [3, 6, 2, 5, 7]
 solution : [0]

After backtrack at level 1
 pending : [3, 6, 2, 5, 7, 8]
 solution : [0]


=====================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=====================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 8

[MIN NOTE]: maximum branch and bound depth: 2

Definitions (length=1)

invariant [def_responseMatched] responseMatched(N,P) = exists R. (request_sent(N,R) & match(R,P)) # definition

Equality Relations (length=0)

Solution 0 : [0, 8] (length = 2)

invariant [invar_0] forall RESPONSE0,NODE0. response_sent(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0) # qcost: 4

invariant [invar_8] forall RESPONSE0,NODE0. responseMatched(NODE0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0) # qcost: 4




[QRM NOTE]: Time elapsed since start: 8.209 seconds

[QRM NOTE]: Time elapsed since last: 0.145 seconds

[QRM NOTE]: Peak memory: 1839441 bytes


=========================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=========================================================================================================

ivy_check complete=fo ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy


Isolate this:

    The following definitions are used:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 21: def1

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_8

    The following action implementations are present:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 30: implementation of new_request
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 40: implementation of receive_response
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 33: implementation of respond

    The following initializers are present:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 23: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_8 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:new_request
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_8 ... PASS
        (internal) ext:receive_response
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_8 ... PASS
        (internal) ext:respond
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_8 ... PASS

    The following program assertions are treated as assumptions:
        in action respond when called from the environment:
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 34: assumption
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 35: assumption
        in action receive_response when called from the environment:
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 41: assumption

OK
[IVY_CHECK RESULT]: PASS

[(R & P) & T & ~(R' & P')]: unsatisfiable

[Strengthening Assertion]: ((forall N,P. responseMatched(N,P) <-> (exists R. (request_sent(N,R) & match(R,P)))) & (forall RESPONSE0,NODE0. response_sent(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)) & (forall RESPONSE0,NODE0. responseMatched(NODE0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0)))

[QRM NOTE]: Time elapsed since start: 10.537 seconds

[QRM NOTE]: Time elapsed since last: 2.328 seconds

[QRM NOTE]: Peak memory: 869925 bytes


****************************************************************

	[QRM]: ivybench/sym/ivy/client_server_ae.ivy

****************************************************************

[QRM RESULT]: PASS

