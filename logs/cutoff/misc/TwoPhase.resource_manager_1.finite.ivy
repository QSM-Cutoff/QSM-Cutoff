#lang ivy1.7

type resource_manager = {resource_manager0}

relation working(R:resource_manager)
relation prepared(R:resource_manager)
relation committed(R:resource_manager)
relation aborted(R:resource_manager)

relation tm_init
relation tm_committed
relation tm_aborted
relation tm_prepared(R:resource_manager)

relation msg_prepared(R:resource_manager)
relation msg_commit
relation msg_abort

after init {
	working(R) := true;
	prepared(R) := false;
	committed(R) := false;
	aborted(R) := false;
	
	tm_init := true;
	tm_committed := false;
	tm_aborted := false;
	tm_prepared(R) := false;
	
	msg_prepared(R) := false;
	msg_commit := false;
	msg_abort := false;
}

action tMRcvPrepared(rm:resource_manager) = {
	require tm_init;
	require msg_prepared(rm);
	tm_prepared(rm) := true;
}

action tMCommit = {
	require tm_init;
	require forall R. tm_prepared(R);
	tm_init := false;
	tm_committed := true;
	tm_aborted := false;
	msg_commit := true;
}

action tMAbort = {
	require tm_init;
	tm_init := false;
	tm_committed := false;
	tm_aborted := true;
	msg_abort := true;
}

action rMPrepare(rm:resource_manager) = {
	require working(rm);
	working(rm) := false;
	prepared(rm) := true;
	committed(rm) := false;
	aborted(rm) := false;
	msg_prepared(rm) := true;
}

action rMChooseToAbort(rm:resource_manager) = {
	require working(rm);
	working(rm) := false;
	prepared(rm) := false;
	committed(rm) := false;
	aborted(rm) := true;
}

action rMRcvCommitMsg(rm:resource_manager) = {
	require msg_commit;
	working(rm) := false;
	prepared(rm) := false;
	committed(rm) := true;
	aborted(rm) := false;
}

action rMRcvAbortMsg(rm:resource_manager) = {
	require msg_abort;
	working(rm) := false;
	prepared(rm) := false;
	committed(rm) := false;
	aborted(rm) := true;
}

export tMRcvPrepared
export tMCommit
export tMAbort

export rMPrepare
export rMChooseToAbort
export rMRcvCommitMsg
export rMRcvAbortMsg

invariant [safety] (forall R1, R2. ~(aborted(R1) & committed(R2)) )

#invariant [manual_1] forall R:resource_manager. working(R) | prepared(R) | committed(R) | aborted(R)
#invariant [manual_2] tm_init | tm_committed | tm_aborted
#invariant [manual_3] forall R:resource_manager. tm_committed -> tm_prepared(R)
#invariant [manual_4] msg_commit -> tm_committed
#invariant [manual_5] msg_abort -> tm_aborted
#invariant [manual_6] forall R:resource_manager. tm_prepared(R) -> msg_prepared(R)
#invariant [manual_7] forall R:resource_manager. msg_prepared(R) -> (~working(R) & (aborted(R) -> msg_abort))
#invariant [manual_8] forall R:resource_manager. committed(R) -> msg_commit

#invariant [manual_ic3po9]	(tm_committed -> ~tm_init)
#invariant [manual_ic3po10]	(tm_init -> ~msg_abort)
#invariant [manual_ic3po11]	(tm_committed -> ~tm_aborted)

### For QRM DFS reachability ###

## Dependent relation axioms ##

## Access actions ##
action get_prepared(r0: resource_manager) returns(qrm_result: bool) = {
    qrm_result := prepared(r0)
}
export get_prepared

action get_bool_prepared(r0: resource_manager, result: bool) returns(qrm_result: bool) = {
    qrm_result := (prepared(r0) = result)
}
export get_bool_prepared

action get_tm_init returns(qrm_result: bool) = {
    qrm_result := tm_init
}
export get_tm_init

action get_bool_tm_init(result: bool) returns(qrm_result: bool) = {
    qrm_result := (tm_init = result)
}
export get_bool_tm_init

action get_tm_prepared(r0: resource_manager) returns(qrm_result: bool) = {
    qrm_result := tm_prepared(r0)
}
export get_tm_prepared

action get_bool_tm_prepared(r0: resource_manager, result: bool) returns(qrm_result: bool) = {
    qrm_result := (tm_prepared(r0) = result)
}
export get_bool_tm_prepared

action get_tm_aborted returns(qrm_result: bool) = {
    qrm_result := tm_aborted
}
export get_tm_aborted

action get_bool_tm_aborted(result: bool) returns(qrm_result: bool) = {
    qrm_result := (tm_aborted = result)
}
export get_bool_tm_aborted

action get_msg_prepared(r0: resource_manager) returns(qrm_result: bool) = {
    qrm_result := msg_prepared(r0)
}
export get_msg_prepared

action get_bool_msg_prepared(r0: resource_manager, result: bool) returns(qrm_result: bool) = {
    qrm_result := (msg_prepared(r0) = result)
}
export get_bool_msg_prepared

action get_tm_committed returns(qrm_result: bool) = {
    qrm_result := tm_committed
}
export get_tm_committed

action get_bool_tm_committed(result: bool) returns(qrm_result: bool) = {
    qrm_result := (tm_committed = result)
}
export get_bool_tm_committed

action get_working(r0: resource_manager) returns(qrm_result: bool) = {
    qrm_result := working(r0)
}
export get_working

action get_bool_working(r0: resource_manager, result: bool) returns(qrm_result: bool) = {
    qrm_result := (working(r0) = result)
}
export get_bool_working

action get_committed(r0: resource_manager) returns(qrm_result: bool) = {
    qrm_result := committed(r0)
}
export get_committed

action get_bool_committed(r0: resource_manager, result: bool) returns(qrm_result: bool) = {
    qrm_result := (committed(r0) = result)
}
export get_bool_committed

action get_msg_commit returns(qrm_result: bool) = {
    qrm_result := msg_commit
}
export get_msg_commit

action get_bool_msg_commit(result: bool) returns(qrm_result: bool) = {
    qrm_result := (msg_commit = result)
}
export get_bool_msg_commit

action get_aborted(r0: resource_manager) returns(qrm_result: bool) = {
    qrm_result := aborted(r0)
}
export get_aborted

action get_bool_aborted(r0: resource_manager, result: bool) returns(qrm_result: bool) = {
    qrm_result := (aborted(r0) = result)
}
export get_bool_aborted

action get_msg_abort returns(qrm_result: bool) = {
    qrm_result := msg_abort
}
export get_msg_abort

action get_bool_msg_abort(result: bool) returns(qrm_result: bool) = {
    qrm_result := (msg_abort = result)
}
export get_bool_msg_abort

