#lang ivy1.7

type node = {node0, node1}

relation internal(N:node)

relation sent(N0:node, N1:node)
relation allowed_in(N:node)

after init  {
	sent(S,D) := false;
	allowed_in(N) := false;
}

action send_from_internal(src: node, dst: node) = {
  require internal(src);
  require ~internal(dst);
  
  sent(src,dst) := true;
  allowed_in(dst) := true;
}

action send_to_internal(src: node, dst: node) = {
  require ~internal(src);
  require internal(dst);
  require allowed_in(src);
  
  sent(src,dst) := true;
}

export send_from_internal
export send_to_internal

invariant [safety] sent(S,D) & internal(D) -> exists I. internal(I) & sent(I,S)

#invariant [manual_1] allowed_in(D) -> exists I. internal(I) & sent(I,D)

### For QRM DFS reachability ###

## Dependent relation axioms ##

## Access actions ##
action get_internal(n0: node) returns(x: bool) = {
    x := internal(n0)
}
export get_internal

action get_bool_internal(n0: node, result: bool) returns(x: bool) = {
    x := (internal(n0) = result)
}
export get_bool_internal

action get_sent(n0: node, n1: node) returns(x: bool) = {
    x := sent(n0, n1)
}
export get_sent

action get_bool_sent(n0: node, n1: node, result: bool) returns(x: bool) = {
    x := (sent(n0, n1) = result)
}
export get_bool_sent

action get_allowed_in(n0: node) returns(x: bool) = {
    x := allowed_in(n0)
}
export get_allowed_in

action get_bool_allowed_in(n0: node, result: bool) returns(x: bool) = {
    x := (allowed_in(n0) = result)
}
export get_bool_allowed_in

