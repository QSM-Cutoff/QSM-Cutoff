(declare-sort value 0)

(define-fun .value ((S value)) value (! S :sort 0))

(declare-fun __chosen (value) Bool)

(declare-fun chosen (value) Bool)

(define-fun .chosen ((V0 value)) Bool (! (__chosen V0) :next chosen))

(define-fun .prop () Bool (! 
 (let (($v (forall ((V1 value) (V2 value)) (=> (and (__chosen V1) (__chosen V2)) (= V1 V2)))
 ))
 (and $v))
 :invar-property 0))

(define-fun .init () Bool (! 
 (let (($v (forall ((V0 value)) (= (__chosen V0) false))
 ))
 (and $v))
 :init true))

(declare-fun choose (value) Bool)
(define-fun .choose ((V0 value)) Bool (! (choose V0) :action true))


