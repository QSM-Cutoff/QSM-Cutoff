#lang ivy1.7

type key
type value
type node

relation table(N:node, K:key, V:value)
relation owner(N:node, K:key)
relation transfer_msg(N:node, K:key, V:value)

after init {
    table(N, K, V) := false;
    transfer_msg(N, K, V) := false;
    assume(owner(N1, K) & owner(N2, K) -> N1 = N2);
    assume(forall K. exists N. owner(N, K));
}

action reshard(k: key, v: value, n_old: node, n_new: node) = {
    require table(n_old, k, v);
    
    table(n_old, k, v) := false;
    owner(n_old, k) := false;
    transfer_msg(n_new, k, v) := true;
}

action recv_transfer_msg(n: node, k: key, v: value) = {
    require transfer_msg(n, k, v);

    transfer_msg(n, k, v) := false;
    table(n, k, v) := true;
    owner(n, k) := true;
}

action put(n: node, k: key, v: value) = {
    require owner(n, k);

    table(n, k, V) := (V = v);
}

export reshard
export recv_transfer_msg
export put

invariant [safety] (exists N,K,V. transfer_msg(N,K,V)) | (forall K. exists N. owner(N,K))

#invariant [manual_1] forall K. (exists N. owner(N, K)) | (exists N, V. transfer_msg(N, K, V))

invariant [invar_1] (forall K0, V0, N0, N1 . (~owner(N0, K0) | ~transfer_msg(N1, K0, V0))) # qcost: 6
invariant [invar_2] (forall K0, N0, N1 . ((N0 = N1) | ~owner(N0, K0) | ~owner(N1, K0))) # qcost: 6
invariant [invar_3] (forall K0, N0, N1, V0, V1 . (~transfer_msg(N0, K0, V0) | ~transfer_msg(N1, K0, V1) | ((N0 = N1) & (V0 = V1)))) # qcost: 9
invariant [invar_6] (forall K0, N0, N1, V0, V1 . (~table(N0, K0, V0) | ~table(N1, K0, V1) | ((N0 = N1) & (V0 = V1)))) # qcost: 9
invariant [invar_7] (forall K0 . (exists V0, N0 . (owner(N0, K0) | transfer_msg(N0, K0, V0)))) # qcost: 5
invariant [invar_5] (forall K0, V0, N0 . (owner(N0, K0) | ~table(N0, K0, V0))) # qcost: 5
