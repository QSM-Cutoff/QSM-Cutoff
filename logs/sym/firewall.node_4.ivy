#lang ivy1.7

type node

relation internal(N:node)

relation sent(N0:node, N1:node)
relation allowed_in(N:node)

after init  {
	sent(S,D) := false;
	allowed_in(N) := false;
}

action send_from_internal(src: node, dst: node) = {
  require internal(src);
  require ~internal(dst);
  
  sent(src,dst) := true;
  allowed_in(dst) := true;
}

action send_to_internal(src: node, dst: node) = {
  require ~internal(src);
  require internal(dst);
  require allowed_in(src);
  
  sent(src,dst) := true;
}

export send_from_internal
export send_to_internal

invariant [safety] sent(S,D) & internal(D) -> exists I. internal(I) & sent(I,S)

#invariant [manual_1] allowed_in(D) -> exists I. internal(I) & sent(I,D)

invariant [invar_0] (forall N0 . ~sent(N0, N0)) # qcost: 2
invariant [invar_14] (forall N1 . (~allowed_in(N1) | (exists N0 . (~(N1 = N0) & sent(N0, N1))))) # qcost: 5
invariant [invar_1] (forall N0 . (~allowed_in(N0) | ~internal(N0))) # qcost: 3
invariant [invar_6] (forall N0, N1 . ((N0 = N1) | internal(N1) | internal(N0) | ~sent(N1, N0))) # qcost: 6
invariant [invar_7] (forall N0, N1 . ((N0 = N1) | allowed_in(N1) | allowed_in(N0) | ~sent(N1, N0))) # qcost: 6
