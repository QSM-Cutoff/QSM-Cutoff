
***************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_forall.ivy

***************************************************************************


***************************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1

***************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.ivy -s node=2,value=1 -f 1 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 3

ivy_to_cpp target=qrm toy_consensus_forall.node_2_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_2_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_2_value_1.finite.cpp toy_consensus_forall.node_2_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_2_value_1.finite.o toy_consensus_forall.node_2_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.794 seconds

[QRM NOTE]: Time elapsed since last: 7.794 seconds

[QRM NOTE]: Peak memory: 1180193 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 3

[FW NOTE]: number of total reachable states:        5

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 1


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

==================================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0']
sort: quorum=['quorum__node0_node1']
predicate: voting_quorum=('quorum',)
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: voted('node',)
predicate: decided('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'voted(node0)', 'voted(node1)', '(voting_quorum=quorum__node0_node1)']
representative states : 7, 47, 127, 255


=== State Orbit 0 =====================
size : 1
repr state: 000001
lex min decimal: 7
states:
000001




=== State Orbit 1 =====================
size : 2
repr state: 010101
lex min decimal: 47
states:
010101
001011




=== State Orbit 2 =====================
size : 1
repr state: 011111
lex min decimal: 127
states:
011111




=== State Orbit 3 =====================
size : 1
repr state: 111111
lex min decimal: 255
states:
111111



[QRM NOTE]: Time elapsed since start: 7.882 seconds

[QRM NOTE]: Time elapsed since last: 0.087 seconds

[QRM NOTE]: Peak memory: 1207792 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.885 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 157440 bytes


==================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

==================================================================================================================


=============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

=============================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : -----0
0     : ['~(voting_quorum=quorum__node0_node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -1-0--
1     : ['vote(node0,value0)', '~voted(node0)']
2     : --1-0-
2     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
3 (*) : 1--0--
3     : ['decided(value0)', '~voted(node0)']
4     : 1---0-
4     : ['decided(value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : --0-1-
5     : ['voted(node1)', '~vote(node1,value0)']
6     : -0-1--
6     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1-0---
7     : ['decided(value0)', '~vote(node1,value0)']
8     : 10----
8     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 5

[PRIME NOTE]: number of orbits before merging: 5

[PRIME NOTE]: number of primes: 9

[QRM NOTE]: Time elapsed since start: 7.895 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 1229241 bytes


=======================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

=======================================================================================================

definition primes: {0}


New level: 0
 pending : [1, 2, 3, 4]
 solution : []


Before reduction : 
 pending  : [1, 2, 3, 4]
 solution : []

Essensial at level 0 : {1, 3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4]
 solution : [1, 3]


Before reduction : 
 pending  : [2, 4]
 solution : [1, 3]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4]
 solution : [1, 3]

[QRM NOTE]: Time elapsed since start: 7.902 seconds

[QRM NOTE]: Time elapsed since last: 0.007 seconds

[QRM NOTE]: Peak memory: 183475 bytes


===========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

===========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -1-0--
1     : ['vote(node0,value0)', '~voted(node0)']
2     : --1-0-
2     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', '~voted(node0)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', '~voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0)


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : --0-1-
5     : ['voted(node1)', '~vote(node1,value0)']
6     : -0-1--
6     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node1,value0)', 'voted(node1)']

sign_func_name2args: {'1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$vote$1$0]}

sig2const: {'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0', 'value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~vote(node1,value0)', 'voted(node1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$vote': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
3 (*) : 1--0--
3     : ['decided(value0)', '~voted(node0)']
4     : 1---0-
4     : ['decided(value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1')): node$1$voted$0$0}

part_sig: ('node$1$voted$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1')): node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. voted(NODE0) | ~decided(VALUE0)


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1-0---
7     : ['decided(value0)', '~vote(node1,value0)']
8     : 10----
8     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

part_sig: ('node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node1,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~decided(VALUE0)


=====================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

=====================================================================================================================


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -1-0--
1     : ['vote(node0,value0)', '~voted(node0)']
2     : --1-0-
2     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : --0-1-
5     : ['voted(node1)', '~vote(node1,value0)']
6     : -0-1--
6     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
3 (*) : 1--0--
3     : ['decided(value0)', '~voted(node0)']
4     : 1---0-
4     : ['decided(value0)', '~voted(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. voted(NODE0) | ~decided(VALUE0)
qcost : 4




=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1-0---
7     : ['decided(value0)', '~vote(node1,value0)']
8     : 10----
8     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~decided(VALUE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 7.979 seconds

[QRM NOTE]: Time elapsed since last: 0.077 seconds

[QRM NOTE]: Peak memory: 1845085 bytes


====================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

====================================================================================================


New level: 1
 pending : [2, 4]
 solution : [1, 3]


Before reduction : 
 pending  : [2, 4]
 solution : [1, 3]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 4]
 solution : [1, 3]


Solution : [1, 3] has cost 8.


Decide in level 1 among pending : [2, 4]

Coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [4]
 solution : [1, 3, 2]


New level: 2
 pending : [4]
 solution : [1, 3, 2]


Before reduction : 
 pending  : [4]
 solution : [1, 3, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0)]

Covered at level 2 : {4}

After reduction : 
 pending  : []
 solution : [1, 3, 2]


Before reduction : 
 pending  : []
 solution : [1, 3, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 2]


Solution : [1, 3, 2] has cost 12.


Before backtrack at level 2
 pending : []
 solution : [1, 3, 2]

After backtrack at level 2
 pending : [4]
 solution : [1, 3, 2]


Invert decision for 2 at level 1


New level: 2
 pending : [4]
 solution : [1, 3]


Before reduction : 
 pending  : [4]
 solution : [1, 3]

Essensial at level 2 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 4]


Before reduction : 
 pending  : []
 solution : [1, 3, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 4]


Solution : [1, 3, 4] has cost 12.


Before backtrack at level 2
 pending : []
 solution : [1, 3, 4]

After backtrack at level 2
 pending : [4]
 solution : [1, 3]


Before backtrack at level 1
 pending : [4]
 solution : [1, 3]

After backtrack at level 1
 pending : [4, 2]
 solution : [1, 3]


===================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

===================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: total qcost: 12

[MIN NOTE]: maximum branch and bound depth: 2

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [1, 3, 2] (length = 3)

invariant [invar_1] forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_3] forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_2] forall NODE0,VALUE0. voted(NODE0) | ~decided(VALUE0) # qcost: 4




Solution 1 : [1, 3, 4] (length = 3)

invariant [invar_1] forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_3] forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_4] forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~decided(VALUE0) # qcost: 4




[QRM NOTE]: Time elapsed since start: 8.053 seconds

[QRM NOTE]: Time elapsed since last: 0.074 seconds

[QRM NOTE]: Peak memory: 1834821 bytes


=======================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

=======================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 44: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 45: invar_3
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 46: invar_2

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 44: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 45: invar_3 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 46: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 45: invar_3 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 46: invar_2 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 46: invar_2 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: line 29: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 44: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 45: invar_3
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 46: invar_4

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 44: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 45: invar_3 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 46: invar_4 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 45: invar_3 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 46: invar_4 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 46: invar_4 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: line 29: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 12.327 seconds

[QRM NOTE]: Time elapsed since last: 4.274 seconds

[QRM NOTE]: Peak memory: 836653 bytes


******************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1

******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=1]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm toy_consensus_forall.node_3_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_3_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_3_value_1.finite.cpp toy_consensus_forall.node_3_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_3_value_1.finite.o toy_consensus_forall.node_3_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.984 seconds

[QRM NOTE]: Time elapsed since last: 6.984 seconds

[QRM NOTE]: Peak memory: 1184470 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        30

[FW NOTE]: number of dfs representative states:     8

[FW NOTE]: number of dfs non-representative states: 22


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=1]

==================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: decided('value',)
predicate: voting_quorum=('quorum',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
representative states : 939, 39339, 112043, 258987, 521131, 373675, 37803, 111531


=== State Orbit 0 =====================
size : 3
repr state: 0000000001
lex min decimal: 939
states:
0000000100
0000000001
0000000010




=== State Orbit 1 =====================
size : 3
repr state: 0100100001
lex min decimal: 39339
states:
0010010010
0001001100
0100100001




=== State Orbit 2 =====================
size : 6
repr state: 0110110001
lex min decimal: 112043
states:
0101101100
0011011010
0011011100
0101101001
0110110001
0110110010




=== State Orbit 3 =====================
size : 3
repr state: 0111111001
lex min decimal: 258987
states:
0111111100
0111111001
0111111010




=== State Orbit 4 =====================
size : 3
repr state: 1111111100
lex min decimal: 521131
states:
1111111001
1111111100
1111111010




=== State Orbit 5 =====================
size : 3
repr state: 1110110100
lex min decimal: 373675
states:
1011011001
1101101010
1110110100




=== State Orbit 6 =====================
size : 6
repr state: 0010010001
lex min decimal: 37803
states:
0001001010
0010010001
0100100010
0010010100
0100100100
0001001001




=== State Orbit 7 =====================
size : 3
repr state: 0011011001
lex min decimal: 111531
states:
0110110100
0101101010
0011011001



[QRM NOTE]: Time elapsed since start: 7.085 seconds

[QRM NOTE]: Time elapsed since last: 0.101 seconds

[QRM NOTE]: Peak memory: 1222885 bytes


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=1]

=======================================================================================================================================

Representatitive states in reachability not in Rmin

{373675}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.133 seconds

[QRM NOTE]: Time elapsed since last: 0.048 seconds

[QRM NOTE]: Peak memory: 200055 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy -s node=2,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=2]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 9

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 4

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm toy_consensus_forall.node_2_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_2_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_2_value_2.finite.cpp toy_consensus_forall.node_2_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_2_value_2.finite.o toy_consensus_forall.node_2_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.760 seconds

[QRM NOTE]: Time elapsed since last: 7.760 seconds

[QRM NOTE]: Peak memory: 1180013 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 3

[FW NOTE]: number of total reachable states:        11

[FW NOTE]: number of dfs representative states:     5

[FW NOTE]: number of dfs non-representative states: 6


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=2]

==================================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1']
predicate: voting_quorum=('quorum',)
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: decided('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'voted(node0)', 'voted(node1)', '(voting_quorum=quorum__node0_node1)']
representative states : 7, 47, 191, 703, 223


=== State Orbit 0 =====================
size : 1
repr state: 000000001
lex min decimal: 7
states:
000000001




=== State Orbit 1 =====================
size : 4
repr state: 001000101
lex min decimal: 47
states:
000100101
000001011
001000101
000010011




=== State Orbit 2 =====================
size : 2
repr state: 001010111
lex min decimal: 191
states:
000101111
001010111




=== State Orbit 3 =====================
size : 2
repr state: 101010111
lex min decimal: 703
states:
010101111
101010111




=== State Orbit 4 =====================
size : 2
repr state: 001001111
lex min decimal: 223
states:
001001111
000110111



[QRM NOTE]: Time elapsed since start: 7.848 seconds

[QRM NOTE]: Time elapsed since last: 0.089 seconds

[QRM NOTE]: Peak memory: 1209946 bytes


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=2]

=======================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 2047, binary: 111111111

Found a representative state in Rmin not in reachability: decimal: 1023, binary: 011111111

Found a representative state in Rmin not in reachability: decimal: 511, binary: 001111111

Found a representative state in Rmin not in reachability: decimal: 111, binary: 000011011

Representatitive states in reachability not in Rmin

{703, 47, 191, 223}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.866 seconds

[QRM NOTE]: Time elapsed since last: 0.018 seconds

[QRM NOTE]: Peak memory: 167582 bytes

next size: node=3,value=2


******************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1

******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy -s node=3,value=1 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=1]

=======================================================================================================================================

Representatitive states in reachability not in Rmin

{373675}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.069 seconds

[QRM NOTE]: Time elapsed since last: 0.069 seconds

[QRM NOTE]: Peak memory: 32923 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy -s node=2,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=2]

=======================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 2047, binary: 111111111

Found a representative state in Rmin not in reachability: decimal: 1023, binary: 011111111

Found a representative state in Rmin not in reachability: decimal: 511, binary: 001111111

Found a representative state in Rmin not in reachability: decimal: 111, binary: 000011011

Representatitive states in reachability not in Rmin

{703, 47, 191, 223}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.048 seconds

[QRM NOTE]: Time elapsed since last: 0.048 seconds

[QRM NOTE]: Peak memory: 12741 bytes

next size: node=3,value=2


***************************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2

***************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.ivy -s node=3,value=2 -f 1 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 14

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 12

[FW NOTE]: number of branching actions: 12

ivy_to_cpp target=qrm toy_consensus_forall.node_3_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_3_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_3_value_2.finite.cpp toy_consensus_forall.node_3_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_3_value_2.finite.o toy_consensus_forall.node_3_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.459 seconds

[QRM NOTE]: Time elapsed since last: 7.459 seconds

[QRM NOTE]: Peak memory: 1187042 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        99

[FW NOTE]: number of dfs representative states:     13

[FW NOTE]: number of dfs non-representative states: 86


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

==================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voting_quorum=('quorum',)
predicate: decided('value',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: voted('node',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
representative states : 939, 39339, 177579, 717739, 2814891, 750507, 2849195, 2274219, 210347, 752043, 37803, 177067, 209835


=== State Orbit 0 =====================
size : 3
repr state: 00000000000001
lex min decimal: 939
states:
00000000000100
00000000000001
00000000000010




=== State Orbit 1 =====================
size : 6
repr state: 00100000100001
lex min decimal: 39339
states:
00000010001100
00001000010010
00000100010010
00000001001100
00010000100001
00100000100001




=== State Orbit 2 =====================
size : 12
repr state: 00101000110001
lex min decimal: 177579
states:
00000101011010
00010001101100
00010001101001
00000101011100
00101000110010
00101000110001
00001010011100
00100010101100
00100010101001
00001010011010
00010100110001
00010100110010




=== State Orbit 3 =====================
size : 6
repr state: 00101010111001
lex min decimal: 717739
states:
00101010111010
00010101111001
00010101111010
00010101111100
00101010111001
00101010111100




=== State Orbit 4 =====================
size : 6
repr state: 10101010111100
lex min decimal: 2814891
states:
01010101111010
01010101111001
10101010111100
01010101111100
10101010111001
10101010111010




=== State Orbit 5 =====================
size : 12
repr state: 00101001111001
lex min decimal: 750507
states:
00100110111100
00010110111001
00101001111010
00011010111100
00101001111001
00100101111100
00100101111010
00011001111100
00011001111001
00011010111010
00010110111010
00100110111001




=== State Orbit 6 =====================
size : 6
repr state: 10101001111100
lex min decimal: 2849195
states:
01011001111010
01010110111100
10101001111100
10011010111001
10100110111010
01100101111001




=== State Orbit 7 =====================
size : 6
repr state: 10101000110100
lex min decimal: 2274219
states:
10101000110100
01000101011001
01010100110100
10100010101010
01010001101010
10001010011001




=== State Orbit 8 =====================
size : 12
repr state: 00100100110001
lex min decimal: 210347
states:
00100100110001
00010010101001
00001001011100
00011000110010
00000110011010
00001001011010
00100001101100
00000110011100
00100100110010
00100001101001
00011000110001
00010010101100




=== State Orbit 9 =====================
size : 6
repr state: 00100101111001
lex min decimal: 752043
states:
00100110111010
00010110111100
00011010111001
00101001111100
00100101111001
00011001111010




=== State Orbit 10 =====================
size : 12
repr state: 00001000010001
lex min decimal: 37803
states:
00000100010001
00000100010100
00001000010001
00001000010100
00010000100100
00100000100010
00010000100010
00100000100100
00000010001001
00000001001010
00000010001010
00000001001001




=== State Orbit 11 =====================
size : 6
repr state: 00001010011001
lex min decimal: 177067
states:
00010100110100
00010001101010
00001010011001
00101000110100
00100010101010
00000101011001




=== State Orbit 12 =====================
size : 6
repr state: 00001001011001
lex min decimal: 209835
states:
00000110011001
00100100110100
00100001101010
00001001011001
00010010101010
00011000110100



[QRM NOTE]: Time elapsed since start: 7.574 seconds

[QRM NOTE]: Time elapsed since last: 0.116 seconds

[QRM NOTE]: Peak memory: 1248221 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.577 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 214273 bytes


==================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

==================================================================================================================


=============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

=============================================================================================================


=== Prime Orbit 0 =====================
size : 6
num_suborbits: 1
0 (*) : ----1----0----
0     : ['vote(node1,value0)', '~voted(node1)']
1     : -----1---0----
1     : ['vote(node1,value1)', '~voted(node1)']
2     : ------1---0---
2     : ['vote(node2,value0)', '~voted(node2)']
3     : -------1--0---
3     : ['vote(node2,value1)', '~voted(node2)']
4     : --1-----0-----
4     : ['vote(node0,value0)', '~voted(node0)']
5     : ---1----0-----
5     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
6 (*) : -----------1-1
6     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node1_node2)']
7     : ------------11
7     : ['(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
8     : -----------11-
8     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
9 (*) : ------11------
9     : ['vote(node2,value0)', 'vote(node2,value1)']
10     : ----11--------
10     : ['vote(node1,value0)', 'vote(node1,value1)']
11     : --11----------
11     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
12 (*) : 11------------
12     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
13 (*) : 1----10-------
13     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
14     : -1--1--0------
14     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
15     : 1---0--1------
15     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
16     : -1---01-------
16     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
17     : 1--1--0-------
17     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
18     : -11----0------
18     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
19     : 1-0----1------
19     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
20     : -1-0--1-------
20     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
21     : 1--10---------
21     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
22     : -11--0--------
22     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
23     : 1-0--1--------
23     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
24     : -1-01---------
24     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
25 (*) : 1----1-1------
25     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
26     : -1--1-1-------
26     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
27     : 1--1---1------
27     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
28     : -11---1-------
28     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
29     : 1--1-1--------
29     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
30     : -11-1---------
30     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
31 (*) : 1----1------0-
31     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
32     : -1--1-------0-
32     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
33     : 1------1---0--
33     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
34     : -1----1----0--
34     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
35     : 1--1---------0
35     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
36     : -11----------0
36     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 1
37 (*) : 1----1-------1
37     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
38     : -1--1--------1
38     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
39     : 1------1-----1
39     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
40     : -1----1------1
40     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
41     : 1--1--------1-
41     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
42     : -11---------1-
42     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
43     : 1------1----1-
43     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
44     : -1----1-----1-
44     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
45     : 1--1-------1--
45     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
46     : -11--------1--
46     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
47     : 1----1-----1--
47     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
48     : -1--1------1--
48     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 12
num_suborbits: 1
49 (*) : 1----1----0---
49     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
50     : -1--1-----0---
50     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
51     : 1------1-0----
51     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
52     : -1----1--0----
52     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
53     : 1--1------0---
53     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
54     : -11-------0---
54     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
55     : 1------10-----
55     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
56     : -1----1-0-----
56     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
57     : 1--1-----0----
57     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
58     : -11------0----
58     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
59     : 1----1--0-----
59     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
60     : -1--1---0-----
60     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 12
num_suborbits: 1
61 (*) : -1-0--------1-
61     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
62     : 1-0---------1-
62     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
63     : -1-0-------1--
63     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
64     : 1-0--------1--
64     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
65     : -1---0-------1
65     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
66     : 1---0--------1
66     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
67     : -1---0-----1--
67     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
68     : 1---0------1--
68     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
69     : -1-----0-----1
69     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
70     : 1-----0------1
70     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
71     : -1-----0----1-
71     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
72     : 1-----0-----1-
72     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
73 (*) : -1------0---1-
73     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
74     : 1-------0---1-
74     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
75     : -1------0--1--
75     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
76     : 1-------0--1--
76     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
77     : -1-------0---1
77     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
78     : 1--------0---1
78     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
79     : -1-------0-1--
79     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
80     : 1--------0-1--
80     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
81     : -1--------0--1
81     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
82     : 1---------0--1
82     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
83     : -1--------0-1-
83     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
84     : 1---------0-1-
84     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
85 (*) : ------00--1---
85     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
86     : ----00---1----
86     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
87     : --00----1-----
87     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 1
num_suborbits: 1
88 (*) : -----------000
88     : ['~(voting_quorum=quorum__node0_node1)', '~(voting_quorum=quorum__node0_node2)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
89 (*) : -1-0---------0
89     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
90     : 1-0----------0
90     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
91     : -1---0------0-
91     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
92     : 1---0-------0-
92     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
93     : -1-----0---0--
93     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
94     : 1-----0----0--
94     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
95 (*) : -1------0----0
95     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
96     : 1-------0----0
96     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
97     : -1-------0--0-
97     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
98     : 1--------0--0-
98     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
99     : -1--------00--
99     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
100     : 1---------00--
100     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
101 (*) : -1-0-0--------
101     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
102     : 1-0-0---------
102     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
103     : -1-0---0------
103     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
104     : 1-0---0-------
104     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
105     : -1---0-0------
105     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
106     : 1---0-0-------
106     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 12
num_suborbits: 1
107 (*) : -1---0--0-----
107     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
108     : 1---0---0-----
108     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
109     : -1-----00-----
109     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
110     : 1-----0-0-----
110     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
111     : -1-0-----0----
111     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
112     : 1-0------0----
112     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
113     : -1-----0-0----
113     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
114     : 1-----0--0----
114     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
115     : -1-0------0---
115     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
116     : 1-0-------0---
116     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
117     : -1---0----0---
117     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
118     : 1---0-----0---
118     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
119 (*) : -1------00----
119     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
120     : 1-------00----
120     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
121     : -1------0-0---
121     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
122     : 1-------0-0---
122     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
123     : -1-------00---
123     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
124     : 1--------00---
124     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 18

[PRIME NOTE]: number of orbits before merging: 18

[PRIME NOTE]: number of primes: 125

[QRM NOTE]: Time elapsed since start: 7.618 seconds

[QRM NOTE]: Time elapsed since last: 0.041 seconds

[QRM NOTE]: Peak memory: 1408978 bytes


=======================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

=======================================================================================================

definition primes: {1, 12}


New level: 0
 pending : [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17]
 solution : []


Before reduction : 
 pending  : [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17]
 solution : []

Essensial at level 0 : {0, 2, 11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, 1048576), (16, 262144), (17, 65536)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]
 solution : [0, 2, 11]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]
 solution : [0, 2, 11]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, 1048576), (16, 262144), (17, 65536)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, 1048576), (16, 262144), (17, 65536)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]
 solution : [0, 2, 11]

[QRM NOTE]: Time elapsed since start: 7.653 seconds

[QRM NOTE]: Time elapsed since last: 0.035 seconds

[QRM NOTE]: Peak memory: 373111 bytes


===========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

===========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 6
num_suborbits: 1
0 (*) : ----1----0----
0     : ['vote(node1,value0)', '~voted(node1)']
1     : -----1---0----
1     : ['vote(node1,value1)', '~voted(node1)']
2     : ------1---0---
2     : ['vote(node2,value0)', '~voted(node2)']
3     : -------1--0---
3     : ['vote(node2,value1)', '~voted(node2)']
4     : --1-----0-----
4     : ['vote(node0,value0)', '~voted(node0)']
5     : ---1----0-----
5     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', '~voted(node1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', '~voted(node1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
9 (*) : ------11------
9     : ['vote(node2,value0)', 'vote(node2,value1)']
10     : ----11--------
10     : ['vote(node1,value0)', 'vote(node1,value1)']
11     : --11----------
11     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', 'vote(node2,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
85 (*) : ------00--1---
85     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
86     : ----00---1----
86     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
87     : --00----1-----
87     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node2,value0)', '~vote(node2,value1)', 'voted(node2)']

sign_func_name2args: {'1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$1]}

sig2const: {'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~vote(node2,value0)', '~vote(node2,value1)', 'voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 2, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
12 (*) : 11------------
12     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: exists VALUE0. ~decided(VALUE0)


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
13 (*) : 1----10-------
13     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
14     : -1--1--0------
14     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
15     : 1---0--1------
15     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
16     : -1---01-------
16     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
17     : 1--1--0-------
17     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
18     : -11----0------
18     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
19     : 1-0----1------
19     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
20     : -1-0--1-------
20     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
21     : 1--10---------
21     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
22     : -11--0--------
22     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
23     : 1-0--1--------
23     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
24     : -1-01---------
24     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE1,NODE0. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
25 (*) : 1----1-1------
25     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
26     : -1--1-1-------
26     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
27     : 1--1---1------
27     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
28     : -11---1-------
28     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
29     : 1--1-1--------
29     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
30     : -11-1---------
30     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE1,VALUE1)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE1,NODE0. ~decided(VALUE0) | ~vote(NODE1,VALUE1) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
31 (*) : 1----1------0-
31     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
32     : -1--1-------0-
32     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
33     : 1------1---0--
33     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
34     : -1----1----0--
34     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
35     : 1--1---------0
35     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
36     : -11----------0
36     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', 'voting_quorum ~= quorum__node0_node2', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', 'voting_quorum ~= quorum__node0_node2', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'voting_quorum ~= QUORUM0', 'vote(NODE0,VALUE1)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voting_quorum = QUORUM0 | ~vote(NODE0,VALUE1) | member(NODE0,QUORUM0) | VALUE0 = VALUE1


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 1
37 (*) : 1----1-------1
37     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
38     : -1--1--------1
38     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
39     : 1------1-----1
39     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
40     : -1----1------1
40     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
41     : 1--1--------1-
41     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
42     : -11---------1-
42     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
43     : 1------1----1-
43     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
44     : -1----1-----1-
44     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
45     : 1--1-------1--
45     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
46     : -11--------1--
46     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
47     : 1----1-----1--
47     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
48     : -1--1------1--
48     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', 'voting_quorum = quorum__node1_node2', 'member(node1,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', 'voting_quorum = quorum__node1_node2', 'member(node1,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'member(NODE0,QUORUM0)', 'vote(NODE0,VALUE1)', 'voting_quorum = QUORUM0']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | voting_quorum ~= QUORUM0 | VALUE0 = VALUE1


=== Prime Orbit 8 =====================
size : 12
num_suborbits: 1
49 (*) : 1----1----0---
49     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
50     : -1--1-----0---
50     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
51     : 1------1-0----
51     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
52     : -1----1--0----
52     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
53     : 1--1------0---
53     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
54     : -11-------0---
54     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
55     : 1------10-----
55     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
56     : -1----1-0-----
56     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
57     : 1--1-----0----
57     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
58     : -11------0----
58     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
59     : 1----1--0-----
59     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
60     : -1--1---0-----
60     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE1)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE1,NODE0. ~decided(VALUE0) | voted(NODE1) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 9 =====================
size : 12
num_suborbits: 1
61 (*) : -1-0--------1-
61     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
62     : 1-0---------1-
62     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
63     : -1-0-------1--
63     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
64     : 1-0--------1--
64     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
65     : -1---0-------1
65     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
66     : 1---0--------1
66     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
67     : -1---0-----1--
67     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
68     : 1---0------1--
68     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
69     : -1-----0-----1
69     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
70     : 1-----0------1
70     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
71     : -1-----0----1-
71     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
72     : 1-----0-----1-
72     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node0,value1)', 'voting_quorum = quorum__node0_node2', 'member(node0,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$member$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node0,value1)', 'voting_quorum = quorum__node0_node2', 'member(node0,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'member(NODE0,QUORUM0)', '~vote(NODE0,VALUE0)', 'voting_quorum = QUORUM0']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | voting_quorum ~= QUORUM0


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
73 (*) : -1------0---1-
73     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
74     : 1-------0---1-
74     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
75     : -1------0--1--
75     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
76     : 1-------0--1--
76     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
77     : -1-------0---1
77     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
78     : 1--------0---1
78     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
79     : -1-------0-1--
79     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
80     : 1--------0-1--
80     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
81     : -1--------0--1
81     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
82     : 1---------0--1
82     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
83     : -1--------0-1-
83     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
84     : 1---------0-1-
84     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node0)', 'voting_quorum = quorum__node0_node2', 'member(node0,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$member$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$voted$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node0)', 'voting_quorum = quorum__node0_node2', 'member(node0,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$voted$0': [node$0$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$voted$0': node$0$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)', 'member(NODE0,QUORUM0)', 'voting_quorum = QUORUM0']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0) | ~member(NODE0,QUORUM0) | voting_quorum ~= QUORUM0


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
89 (*) : -1-0---------0
89     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
90     : 1-0----------0
90     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
91     : -1---0------0-
91     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
92     : 1---0-------0-
92     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
93     : -1-----0---0--
93     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
94     : 1-----0----0--
94     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node0,value1)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node0,value1)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'voting_quorum ~= QUORUM0', '~vote(NODE0,VALUE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voting_quorum = QUORUM0 | vote(NODE0,VALUE0) | member(NODE0,QUORUM0)


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
95 (*) : -1------0----0
95     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
96     : 1-------0----0
96     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
97     : -1-------0--0-
97     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
98     : 1--------0--0-
98     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
99     : -1--------00--
99     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
100     : 1---------00--
100     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node0)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node0)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)', 'voting_quorum ~= QUORUM0', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0)


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
101 (*) : -1-0-0--------
101     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
102     : 1-0-0---------
102     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
103     : -1-0---0------
103     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
104     : 1-0---0-------
104     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
105     : -1---0-0------
105     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
106     : 1---0-0-------
106     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


=== Prime Orbit 16 =====================
size : 12
num_suborbits: 1
107 (*) : -1---0--0-----
107     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
108     : 1---0---0-----
108     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
109     : -1-----00-----
109     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
110     : 1-----0-0-----
110     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
111     : -1-0-----0----
111     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
112     : 1-0------0----
112     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
113     : -1-----0-0----
113     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
114     : 1-----0--0----
114     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
115     : -1-0------0---
115     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
116     : 1-0-------0---
116     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
117     : -1---0----0---
117     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
118     : 1---0-----0---
118     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE1)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~decided(VALUE0) | voted(NODE1) | vote(NODE0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
119 (*) : -1------00----
119     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
120     : 1-------00----
120     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
121     : -1------0-0---
121     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
122     : 1-------0-0---
122     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
123     : -1-------00---
123     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
124     : 1--------00---
124     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node0)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node0)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~decided(VALUE0) | voted(NODE0) | voted(NODE1) | NODE0 = NODE1


=====================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

=====================================================================================================================


=== Prime Orbit 0 =====================
size : 6
num_suborbits: 1
0 (*) : ----1----0----
0     : ['vote(node1,value0)', '~voted(node1)']
1     : -----1---0----
1     : ['vote(node1,value1)', '~voted(node1)']
2     : ------1---0---
2     : ['vote(node2,value0)', '~voted(node2)']
3     : -------1--0---
3     : ['vote(node2,value1)', '~voted(node2)']
4     : --1-----0-----
4     : ['vote(node0,value0)', '~voted(node0)']
5     : ---1----0-----
5     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
9 (*) : ------11------
9     : ['vote(node2,value0)', 'vote(node2,value1)']
10     : ----11--------
10     : ['vote(node1,value0)', 'vote(node1,value1)']
11     : --11----------
11     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3




=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
85 (*) : ------00--1---
85     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
86     : ----00---1----
86     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
87     : --00----1-----
87     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))
qcost : 4




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
12 (*) : 11------------
12     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists VALUE0. ~decided(VALUE0)
qcost : 2




=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
13 (*) : 1----10-------
13     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
14     : -1--1--0------
14     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
15     : 1---0--1------
15     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
16     : -1---01-------
16     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
17     : 1--1--0-------
17     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
18     : -11----0------
18     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
19     : 1-0----1------
19     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
20     : -1-0--1-------
20     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
21     : 1--10---------
21     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
22     : -11--0--------
22     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
23     : 1-0--1--------
23     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
24     : -1-01---------
24     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,NODE1,NODE0. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
25 (*) : 1----1-1------
25     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
26     : -1--1-1-------
26     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
27     : 1--1---1------
27     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
28     : -11---1-------
28     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
29     : 1--1-1--------
29     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
30     : -11-1---------
30     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,NODE1,NODE0. ~decided(VALUE0) | ~vote(NODE1,VALUE1) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
31 (*) : 1----1------0-
31     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
32     : -1--1-------0-
32     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
33     : 1------1---0--
33     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
34     : -1----1----0--
34     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
35     : 1--1---------0
35     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
36     : -11----------0
36     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voting_quorum = QUORUM0 | ~vote(NODE0,VALUE1) | member(NODE0,QUORUM0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 7 =====================
size : 12
num_suborbits: 1
37 (*) : 1----1-------1
37     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
38     : -1--1--------1
38     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
39     : 1------1-----1
39     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
40     : -1----1------1
40     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
41     : 1--1--------1-
41     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
42     : -11---------1-
42     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
43     : 1------1----1-
43     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
44     : -1----1-----1-
44     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
45     : 1--1-------1--
45     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
46     : -11--------1--
46     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
47     : 1----1-----1--
47     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
48     : -1--1------1--
48     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | voting_quorum ~= QUORUM0 | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 8 =====================
size : 12
num_suborbits: 1
49 (*) : 1----1----0---
49     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
50     : -1--1-----0---
50     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
51     : 1------1-0----
51     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
52     : -1----1--0----
52     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
53     : 1--1------0---
53     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
54     : -11-------0---
54     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
55     : 1------10-----
55     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
56     : -1----1-0-----
56     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
57     : 1--1-----0----
57     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
58     : -11------0----
58     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
59     : 1----1--0-----
59     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
60     : -1--1---0-----
60     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,NODE1,NODE0. ~decided(VALUE0) | voted(NODE1) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 9 =====================
size : 12
num_suborbits: 1
61 (*) : -1-0--------1-
61     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
62     : 1-0---------1-
62     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
63     : -1-0-------1--
63     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
64     : 1-0--------1--
64     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
65     : -1---0-------1
65     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
66     : 1---0--------1
66     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
67     : -1---0-----1--
67     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
68     : 1---0------1--
68     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
69     : -1-----0-----1
69     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
70     : 1-----0------1
70     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
71     : -1-----0----1-
71     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
72     : 1-----0-----1-
72     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | voting_quorum ~= QUORUM0
qcost : 7




=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
73 (*) : -1------0---1-
73     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
74     : 1-------0---1-
74     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
75     : -1------0--1--
75     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
76     : 1-------0--1--
76     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
77     : -1-------0---1
77     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
78     : 1--------0---1
78     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
79     : -1-------0-1--
79     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
80     : 1--------0-1--
80     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
81     : -1--------0--1
81     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
82     : 1---------0--1
82     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
83     : -1--------0-1-
83     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
84     : 1---------0-1-
84     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0) | ~member(NODE0,QUORUM0) | voting_quorum ~= QUORUM0
qcost : 7




=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
89 (*) : -1-0---------0
89     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
90     : 1-0----------0
90     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
91     : -1---0------0-
91     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
92     : 1---0-------0-
92     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
93     : -1-----0---0--
93     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
94     : 1-----0----0--
94     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voting_quorum = QUORUM0 | vote(NODE0,VALUE0) | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
95 (*) : -1------0----0
95     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
96     : 1-------0----0
96     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
97     : -1-------0--0-
97     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
98     : 1--------0--0-
98     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
99     : -1--------00--
99     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
100     : 1---------00--
100     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
101 (*) : -1-0-0--------
101     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
102     : 1-0-0---------
102     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
103     : -1-0---0------
103     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
104     : 1-0---0-------
104     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
105     : -1---0-0------
105     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
106     : 1---0-0-------
106     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 16 =====================
size : 12
num_suborbits: 1
107 (*) : -1---0--0-----
107     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
108     : 1---0---0-----
108     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
109     : -1-----00-----
109     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
110     : 1-----0-0-----
110     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
111     : -1-0-----0----
111     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
112     : 1-0------0----
112     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
113     : -1-----0-0----
113     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
114     : 1-----0--0----
114     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
115     : -1-0------0---
115     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
116     : 1-0-------0---
116     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
117     : -1---0----0---
117     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
118     : 1---0-----0---
118     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~decided(VALUE0) | voted(NODE1) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
119 (*) : -1------00----
119     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
120     : 1-------00----
120     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
121     : -1------0-0---
121     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
122     : 1-------0-0---
122     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
123     : -1-------00---
123     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
124     : 1--------00---
124     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~decided(VALUE0) | voted(NODE0) | voted(NODE1) | NODE0 = NODE1
qcost : 7



[QRM NOTE]: Time elapsed since start: 7.806 seconds

[QRM NOTE]: Time elapsed since last: 0.153 seconds

[QRM NOTE]: Peak memory: 2081900 bytes


====================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

====================================================================================================


New level: 1
 pending : [3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]
 solution : [0, 2, 11]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]
 solution : [0, 2, 11]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, 1048576), (16, 262144), (17, 65536)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, 1048576), (16, 262144), (17, 65536)]

Covered at level 1 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]
 solution : [0, 2, 11]


Solution : [0, 2, 11] has cost 11.


Decide in level 1 among pending : [3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, 1048576), (16, 262144), (17, 65536)]

Decide 3 with phase True at level 1

After decision at level 1
 pending : [4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]
 solution : [0, 2, 11, 3]


New level: 2
 pending : [4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]
 solution : [0, 2, 11, 3]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]
 solution : [0, 2, 11, 3]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, 1048576), (16, 262144), (17, 65536)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, 524288), (14, 131072), (15, 524288), (16, 131072), (17, 32768)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]
 solution : [0, 2, 11, 3]


Solution : [0, 2, 11, 3] has cost 13.


Decide in level 2 among pending : [4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, 524288), (14, 131072), (15, 524288), (16, 131072), (17, 32768)]

Decide 13 with phase True at level 2

After decision at level 2
 pending : [4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17]
 solution : [0, 2, 11, 3, 13]


New level: 3
 pending : [4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17]
 solution : [0, 2, 11, 3, 13]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17]
 solution : [0, 2, 11, 3, 13]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, 524288), (14, 131072), (15, 524288), (16, 131072), (17, 32768)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0)]

Covered at level 3 : {4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 13]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 13]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 13]


Solution : [0, 2, 11, 3, 13] has cost 20.


Before backtrack at level 3
 pending : []
 solution : [0, 2, 11, 3, 13]

After backtrack at level 3
 pending : [4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17]
 solution : [0, 2, 11, 3, 13]


Invert decision for 13 at level 2


New level: 3
 pending : [4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17]
 solution : [0, 2, 11, 3]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17]
 solution : [0, 2, 11, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 131072), (15, 524288), (16, 131072), (17, 32768)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17]
 solution : [0, 2, 11, 3]


Solution : [0, 2, 11, 3] has cost 13.


Decide in level 3 among pending : [4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 131072), (15, 524288), (16, 131072), (17, 32768)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [4, 5, 6, 7, 8, 9, 10, 14, 16, 17]
 solution : [0, 2, 11, 3, 15]


New level: 4
 pending : [4, 5, 6, 7, 8, 9, 10, 14, 16, 17]
 solution : [0, 2, 11, 3, 15]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 14, 16, 17]
 solution : [0, 2, 11, 3, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 131072), (15, 524288), (16, 131072), (17, 32768)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 2048), (7, 512), (8, 0), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, 0), (17, 0)]

Covered at level 4 : {4, 5, 8, 16, 17}

After reduction : 
 pending  : [6, 7, 9, 10, 14]
 solution : [0, 2, 11, 3, 15]


Before reduction : 
 pending  : [6, 7, 9, 10, 14]
 solution : [0, 2, 11, 3, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 2048), (7, 512), (8, 0), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, 0), (17, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [6, 7, 9, 10, 14]
 solution : [0, 2, 11, 3, 15]


Solution : [0, 2, 11, 3, 15] has cost 20.


Decide in level 4 among pending : [6, 7, 9, 10, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 6 with phase True at level 4

After decision at level 4
 pending : [7, 9, 10, 14]
 solution : [0, 2, 11, 3, 15, 6]


New level: 5
 pending : [7, 9, 10, 14]
 solution : [0, 2, 11, 3, 15, 6]


Before reduction : 
 pending  : [7, 9, 10, 14]
 solution : [0, 2, 11, 3, 15, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 512), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {7}

After reduction : 
 pending  : [9, 10, 14]
 solution : [0, 2, 11, 3, 15, 6]


Before reduction : 
 pending  : [9, 10, 14]
 solution : [0, 2, 11, 3, 15, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 512), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 512), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [9, 10, 14]
 solution : [0, 2, 11, 3, 15, 6]


Solution : [0, 2, 11, 3, 15, 6] has cost 29.


Before backtrack at level 5
 pending : [9, 10, 14]
 solution : [0, 2, 11, 3, 15, 6]

After backtrack at level 5
 pending : [9, 10, 14, 7]
 solution : [0, 2, 11, 3, 15, 6]


Invert decision for 6 at level 4


New level: 5
 pending : [9, 10, 14, 7]
 solution : [0, 2, 11, 3, 15]


Before reduction : 
 pending  : [9, 10, 14, 7]
 solution : [0, 2, 11, 3, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 512), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [9, 10, 14, 7]
 solution : [0, 2, 11, 3, 15]


Solution : [0, 2, 11, 3, 15] has cost 20.


Decide in level 5 among pending : [9, 10, 14, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [10, 14, 7]
 solution : [0, 2, 11, 3, 15, 9]


New level: 6
 pending : [10, 14, 7]
 solution : [0, 2, 11, 3, 15, 9]


Before reduction : 
 pending  : [10, 14, 7]
 solution : [0, 2, 11, 3, 15, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {10, 14, 7}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 15, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 15, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 15, 9]


Solution : [0, 2, 11, 3, 15, 9] has cost 27.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 11, 3, 15, 9]

After backtrack at level 6
 pending : [10, 14, 7]
 solution : [0, 2, 11, 3, 15, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [10, 14, 7]
 solution : [0, 2, 11, 3, 15]


Before reduction : 
 pending  : [10, 14, 7]
 solution : [0, 2, 11, 3, 15]

Essensial at level 6 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 14]
 solution : [0, 2, 11, 3, 15, 7]


Before reduction : 
 pending  : [10, 14]
 solution : [0, 2, 11, 3, 15, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 14]
 solution : [0, 2, 11, 3, 15, 7]


Solution : [0, 2, 11, 3, 15, 7] has cost 29.


Before backtrack at level 6
 pending : [10, 14]
 solution : [0, 2, 11, 3, 15, 7]

After backtrack at level 6
 pending : [10, 14, 7]
 solution : [0, 2, 11, 3, 15]


Before backtrack at level 5
 pending : [10, 14, 7]
 solution : [0, 2, 11, 3, 15]

After backtrack at level 5
 pending : [10, 14, 7, 9]
 solution : [0, 2, 11, 3, 15]


Before backtrack at level 4
 pending : [10, 14, 7, 9]
 solution : [0, 2, 11, 3, 15]

After backtrack at level 4
 pending : [10, 14, 7, 9, 4, 5, 8, 16, 17, 6]
 solution : [0, 2, 11, 3, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [10, 14, 7, 9, 4, 5, 8, 16, 17, 6]
 solution : [0, 2, 11, 3]


Before reduction : 
 pending  : [10, 14, 7, 9, 4, 5, 8, 16, 17, 6]
 solution : [0, 2, 11, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 131072), (15, -1), (16, 131072), (17, 32768)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 14, 7, 9, 4, 5, 8, 16, 17, 6]
 solution : [0, 2, 11, 3]


Solution : [0, 2, 11, 3] has cost 13.


Decide in level 4 among pending : [10, 14, 7, 9, 4, 5, 8, 16, 17, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 131072), (15, -1), (16, 131072), (17, 32768)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [10, 7, 9, 4, 5, 8, 16, 17, 6]
 solution : [0, 2, 11, 3, 14]


New level: 5
 pending : [10, 7, 9, 4, 5, 8, 16, 17, 6]
 solution : [0, 2, 11, 3, 14]


Before reduction : 
 pending  : [10, 7, 9, 4, 5, 8, 16, 17, 6]
 solution : [0, 2, 11, 3, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 131072), (15, -1), (16, 131072), (17, 32768)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, 16384), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, 0)]

Covered at level 5 : {17, 10}

After reduction : 
 pending  : [7, 9, 4, 5, 8, 16, 6]
 solution : [0, 2, 11, 3, 14]


Before reduction : 
 pending  : [7, 9, 4, 5, 8, 16, 6]
 solution : [0, 2, 11, 3, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, 16384), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [7, 9, 4, 5, 8, 16, 6]
 solution : [0, 2, 11, 3, 14]


Solution : [0, 2, 11, 3, 14] has cost 20.


Decide in level 5 among pending : [7, 9, 4, 5, 8, 16, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

Decide 4 with phase True at level 5

After decision at level 5
 pending : [7, 9, 5, 8, 16, 6]
 solution : [0, 2, 11, 3, 14, 4]


New level: 6
 pending : [7, 9, 5, 8, 16, 6]
 solution : [0, 2, 11, 3, 14, 4]


Before reduction : 
 pending  : [7, 9, 5, 8, 16, 6]
 solution : [0, 2, 11, 3, 14, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 2048), (7, 512), (8, 0), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 6 : {8, 16, 5}

After reduction : 
 pending  : [7, 9, 6]
 solution : [0, 2, 11, 3, 14, 4]


Before reduction : 
 pending  : [7, 9, 6]
 solution : [0, 2, 11, 3, 14, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 2048), (7, 512), (8, 0), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [7, 9, 6]
 solution : [0, 2, 11, 3, 14, 4]


Solution : [0, 2, 11, 3, 14, 4] has cost 29.


Before backtrack at level 6
 pending : [7, 9, 6]
 solution : [0, 2, 11, 3, 14, 4]

After backtrack at level 6
 pending : [7, 9, 6, 5, 8, 16]
 solution : [0, 2, 11, 3, 14, 4]


Invert decision for 4 at level 5


New level: 6
 pending : [7, 9, 6, 5, 8, 16]
 solution : [0, 2, 11, 3, 14]


Before reduction : 
 pending  : [7, 9, 6, 5, 8, 16]
 solution : [0, 2, 11, 3, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [7, 9, 6, 5, 8, 16]
 solution : [0, 2, 11, 3, 14]


Solution : [0, 2, 11, 3, 14] has cost 20.


Decide in level 6 among pending : [7, 9, 6, 5, 8, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [7, 9, 5, 8, 16]
 solution : [0, 2, 11, 3, 14, 6]


New level: 7
 pending : [7, 9, 5, 8, 16]
 solution : [0, 2, 11, 3, 14, 6]


Before reduction : 
 pending  : [7, 9, 5, 8, 16]
 solution : [0, 2, 11, 3, 14, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 7 : {5, 7, 8, 9, 16}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 14, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 14, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 14, 6]


Solution : [0, 2, 11, 3, 14, 6] has cost 29.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 11, 3, 14, 6]

After backtrack at level 7
 pending : [7, 9, 5, 8, 16]
 solution : [0, 2, 11, 3, 14, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [7, 9, 5, 8, 16]
 solution : [0, 2, 11, 3, 14]


Before reduction : 
 pending  : [7, 9, 5, 8, 16]
 solution : [0, 2, 11, 3, 14]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [7, 9, 5, 8, 16]
 solution : [0, 2, 11, 3, 14]


Solution : [0, 2, 11, 3, 14] has cost 20.


Decide in level 7 among pending : [7, 9, 5, 8, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [7, 9, 8, 16]
 solution : [0, 2, 11, 3, 14, 5]


New level: 8
 pending : [7, 9, 8, 16]
 solution : [0, 2, 11, 3, 14, 5]


Before reduction : 
 pending  : [7, 9, 8, 16]
 solution : [0, 2, 11, 3, 14, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, 2048), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 512), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [7, 9, 8, 16]
 solution : [0, 2, 11, 3, 14, 5]


Solution : [0, 2, 11, 3, 14, 5] has cost 29.


Before backtrack at level 8
 pending : [7, 9, 8, 16]
 solution : [0, 2, 11, 3, 14, 5]

After backtrack at level 8
 pending : [7, 9, 8, 16]
 solution : [0, 2, 11, 3, 14, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [7, 9, 8, 16]
 solution : [0, 2, 11, 3, 14]


Before reduction : 
 pending  : [7, 9, 8, 16]
 solution : [0, 2, 11, 3, 14]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, 2048), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 512), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [7, 9, 8, 16]
 solution : [0, 2, 11, 3, 14]


Solution : [0, 2, 11, 3, 14] has cost 20.


Decide in level 8 among pending : [7, 9, 8, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [9, 8, 16]
 solution : [0, 2, 11, 3, 14, 7]


New level: 9
 pending : [9, 8, 16]
 solution : [0, 2, 11, 3, 14, 7]


Before reduction : 
 pending  : [9, 8, 16]
 solution : [0, 2, 11, 3, 14, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16384), (8, 2048), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 9 : {8, 9, 16}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 14, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 14, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 14, 7]


Solution : [0, 2, 11, 3, 14, 7] has cost 29.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 11, 3, 14, 7]

After backtrack at level 9
 pending : [9, 8, 16]
 solution : [0, 2, 11, 3, 14, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [9, 8, 16]
 solution : [0, 2, 11, 3, 14]


Before reduction : 
 pending  : [9, 8, 16]
 solution : [0, 2, 11, 3, 14]

Essensial at level 9 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 9 : {8, 16}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 14, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 14, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 14, 9]


Solution : [0, 2, 11, 3, 14, 9] has cost 27.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 11, 3, 14, 9]

After backtrack at level 9
 pending : [9, 8, 16]
 solution : [0, 2, 11, 3, 14]


Before backtrack at level 8
 pending : [9, 8, 16]
 solution : [0, 2, 11, 3, 14]

After backtrack at level 8
 pending : [9, 8, 16, 7]
 solution : [0, 2, 11, 3, 14]


Before backtrack at level 7
 pending : [9, 8, 16, 7]
 solution : [0, 2, 11, 3, 14]

After backtrack at level 7
 pending : [9, 8, 16, 7, 5]
 solution : [0, 2, 11, 3, 14]


Before backtrack at level 6
 pending : [9, 8, 16, 7, 5]
 solution : [0, 2, 11, 3, 14]

After backtrack at level 6
 pending : [9, 8, 16, 7, 5, 6]
 solution : [0, 2, 11, 3, 14]


Before backtrack at level 5
 pending : [9, 8, 16, 7, 5, 6]
 solution : [0, 2, 11, 3, 14]

After backtrack at level 5
 pending : [9, 8, 16, 7, 5, 6, 10, 17, 4]
 solution : [0, 2, 11, 3, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [9, 8, 16, 7, 5, 6, 10, 17, 4]
 solution : [0, 2, 11, 3]


Before reduction : 
 pending  : [9, 8, 16, 7, 5, 6, 10, 17, 4]
 solution : [0, 2, 11, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 131072), (17, 32768)]

Covered at level 5 : set()

After reduction : 
 pending  : [9, 8, 16, 7, 5, 6, 10, 17, 4]
 solution : [0, 2, 11, 3]


Solution : [0, 2, 11, 3] has cost 13.


Decide in level 5 among pending : [9, 8, 16, 7, 5, 6, 10, 17, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 131072), (17, 32768)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [8, 16, 7, 5, 6, 10, 17, 4]
 solution : [0, 2, 11, 3, 9]


New level: 6
 pending : [8, 16, 7, 5, 6, 10, 17, 4]
 solution : [0, 2, 11, 3, 9]


Before reduction : 
 pending  : [8, 16, 7, 5, 6, 10, 17, 4]
 solution : [0, 2, 11, 3, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 32768), (8, 32768), (9, 131072), (10, 32768), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 131072), (17, 32768)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0)]

Covered at level 6 : {4, 5, 6, 7, 8, 10, 16, 17}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 9]


Solution : [0, 2, 11, 3, 9] has cost 20.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 11, 3, 9]

After backtrack at level 6
 pending : [8, 16, 7, 5, 6, 10, 17, 4]
 solution : [0, 2, 11, 3, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [8, 16, 7, 5, 6, 10, 17, 4]
 solution : [0, 2, 11, 3]


Before reduction : 
 pending  : [8, 16, 7, 5, 6, 10, 17, 4]
 solution : [0, 2, 11, 3]

Essensial at level 6 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, 0)]

Covered at level 6 : {17}

After reduction : 
 pending  : [8, 16, 7, 5, 6, 4]
 solution : [0, 2, 11, 3, 10]


Before reduction : 
 pending  : [8, 16, 7, 5, 6, 4]
 solution : [0, 2, 11, 3, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 16, 7, 5, 6, 4]
 solution : [0, 2, 11, 3, 10]


Solution : [0, 2, 11, 3, 10] has cost 20.


Decide in level 6 among pending : [8, 16, 7, 5, 6, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [8, 16, 7, 5, 4]
 solution : [0, 2, 11, 3, 10, 6]


New level: 7
 pending : [8, 16, 7, 5, 4]
 solution : [0, 2, 11, 3, 10, 6]


Before reduction : 
 pending  : [8, 16, 7, 5, 4]
 solution : [0, 2, 11, 3, 10, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 32768), (6, 131072), (7, 16384), (8, 2048), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2048), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 7 : {4, 5, 7, 8, 16}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 10, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 10, 6]


Solution : [0, 2, 11, 3, 10, 6] has cost 29.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 11, 3, 10, 6]

After backtrack at level 7
 pending : [8, 16, 7, 5, 4]
 solution : [0, 2, 11, 3, 10, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [8, 16, 7, 5, 4]
 solution : [0, 2, 11, 3, 10]


Before reduction : 
 pending  : [8, 16, 7, 5, 4]
 solution : [0, 2, 11, 3, 10]

Essensial at level 7 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 7 : {8, 16, 4, 5}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 10, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 10, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 3, 10, 7]


Solution : [0, 2, 11, 3, 10, 7] has cost 29.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 11, 3, 10, 7]

After backtrack at level 7
 pending : [7, 8, 16, 5, 4]
 solution : [0, 2, 11, 3, 10]


Before backtrack at level 6
 pending : [7, 8, 16, 5, 4]
 solution : [0, 2, 11, 3, 10]

After backtrack at level 6
 pending : [7, 8, 16, 5, 4, 10, 17, 6]
 solution : [0, 2, 11, 3]


Before backtrack at level 5
 pending : [7, 8, 16, 5, 4, 10, 17, 6]
 solution : [0, 2, 11, 3]

After backtrack at level 5
 pending : [7, 8, 16, 5, 4, 10, 17, 6, 9]
 solution : [0, 2, 11, 3]


Before backtrack at level 4
 pending : [7, 8, 16, 5, 4, 10, 17, 6, 9]
 solution : [0, 2, 11, 3]

After backtrack at level 4
 pending : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14]
 solution : [0, 2, 11, 3]


Before backtrack at level 3
 pending : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14]
 solution : [0, 2, 11, 3]

After backtrack at level 3
 pending : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14, 15]
 solution : [0, 2, 11, 3]


Before backtrack at level 2
 pending : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14, 15]
 solution : [0, 2, 11, 3]

After backtrack at level 2
 pending : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14, 15, 13]
 solution : [0, 2, 11, 3]


Invert decision for 3 at level 1


New level: 2
 pending : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14, 15, 13]
 solution : [0, 2, 11]


Before reduction : 
 pending  : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14, 15, 13]
 solution : [0, 2, 11]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, 1048576), (16, 262144), (17, 65536)]

Covered at level 2 : set()

After reduction : 
 pending  : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14, 15, 13]
 solution : [0, 2, 11]


Solution : [0, 2, 11] has cost 11.


Decide in level 2 among pending : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14, 15, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, 1048576), (16, 262144), (17, 65536)]

Decide 15 with phase True at level 2

After decision at level 2
 pending : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14, 13]
 solution : [0, 2, 11, 15]


New level: 3
 pending : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14, 13]
 solution : [0, 2, 11, 15]


Before reduction : 
 pending  : [7, 8, 16, 5, 4, 10, 17, 6, 9, 14, 13]
 solution : [0, 2, 11, 15]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, 1048576), (16, 262144), (17, 65536)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 2048), (7, 512), (8, 0), (9, 2048), (10, 512), (11, -1), (12, -1), (13, 8192), (14, 2048), (15, -1), (16, 0), (17, 0)]

Covered at level 3 : {4, 5, 8, 16, 17}

After reduction : 
 pending  : [7, 10, 6, 9, 14, 13]
 solution : [0, 2, 11, 15]


Before reduction : 
 pending  : [7, 10, 6, 9, 14, 13]
 solution : [0, 2, 11, 15]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 2048), (7, 512), (8, 0), (9, 2048), (10, 512), (11, -1), (12, -1), (13, 8192), (14, 2048), (15, -1), (16, 0), (17, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, 8192), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [7, 10, 6, 9, 14, 13]
 solution : [0, 2, 11, 15]


Solution : [0, 2, 11, 15] has cost 18.


Decide in level 3 among pending : [7, 10, 6, 9, 14, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, 8192), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 13 with phase True at level 3

After decision at level 3
 pending : [7, 10, 6, 9, 14]
 solution : [0, 2, 11, 15, 13]


New level: 4
 pending : [7, 10, 6, 9, 14]
 solution : [0, 2, 11, 15, 13]


Before reduction : 
 pending  : [7, 10, 6, 9, 14]
 solution : [0, 2, 11, 15, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, 8192), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : {6, 7, 9, 10, 14}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 15, 13]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 15, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 15, 13]


Solution : [0, 2, 11, 15, 13] has cost 25.


Before backtrack at level 4
 pending : []
 solution : [0, 2, 11, 15, 13]

After backtrack at level 4
 pending : [7, 10, 6, 9, 14]
 solution : [0, 2, 11, 15, 13]


Invert decision for 13 at level 3


New level: 4
 pending : [7, 10, 6, 9, 14]
 solution : [0, 2, 11, 15]


Before reduction : 
 pending  : [7, 10, 6, 9, 14]
 solution : [0, 2, 11, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [7, 10, 6, 9, 14]
 solution : [0, 2, 11, 15]


Solution : [0, 2, 11, 15] has cost 18.


Decide in level 4 among pending : [7, 10, 6, 9, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 6 with phase True at level 4

After decision at level 4
 pending : [7, 10, 9, 14]
 solution : [0, 2, 11, 15, 6]


New level: 5
 pending : [7, 10, 9, 14]
 solution : [0, 2, 11, 15, 6]


Before reduction : 
 pending  : [7, 10, 9, 14]
 solution : [0, 2, 11, 15, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 512), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {7}

After reduction : 
 pending  : [10, 9, 14]
 solution : [0, 2, 11, 15, 6]


Before reduction : 
 pending  : [10, 9, 14]
 solution : [0, 2, 11, 15, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 512), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 512), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 9, 14]
 solution : [0, 2, 11, 15, 6]


Solution : [0, 2, 11, 15, 6] has cost 27.


Before backtrack at level 5
 pending : [10, 9, 14]
 solution : [0, 2, 11, 15, 6]

After backtrack at level 5
 pending : [10, 9, 14, 7]
 solution : [0, 2, 11, 15, 6]


Invert decision for 6 at level 4


New level: 5
 pending : [10, 9, 14, 7]
 solution : [0, 2, 11, 15]


Before reduction : 
 pending  : [10, 9, 14, 7]
 solution : [0, 2, 11, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 512), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 9, 14, 7]
 solution : [0, 2, 11, 15]


Solution : [0, 2, 11, 15] has cost 18.


Decide in level 5 among pending : [10, 9, 14, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [10, 14, 7]
 solution : [0, 2, 11, 15, 9]


New level: 6
 pending : [10, 14, 7]
 solution : [0, 2, 11, 15, 9]


Before reduction : 
 pending  : [10, 14, 7]
 solution : [0, 2, 11, 15, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, 2048), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {10, 14, 7}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 15, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 15, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 15, 9]


Solution : [0, 2, 11, 15, 9] has cost 25.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 11, 15, 9]

After backtrack at level 6
 pending : [10, 14, 7]
 solution : [0, 2, 11, 15, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [10, 14, 7]
 solution : [0, 2, 11, 15]


Before reduction : 
 pending  : [10, 14, 7]
 solution : [0, 2, 11, 15]

Essensial at level 6 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 14]
 solution : [0, 2, 11, 15, 7]


Before reduction : 
 pending  : [10, 14]
 solution : [0, 2, 11, 15, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 14]
 solution : [0, 2, 11, 15, 7]


Solution : [0, 2, 11, 15, 7] has cost 27.


Before backtrack at level 6
 pending : [10, 14]
 solution : [0, 2, 11, 15, 7]

After backtrack at level 6
 pending : [10, 14, 7]
 solution : [0, 2, 11, 15]


Before backtrack at level 5
 pending : [10, 14, 7]
 solution : [0, 2, 11, 15]

After backtrack at level 5
 pending : [10, 14, 7, 9]
 solution : [0, 2, 11, 15]


Before backtrack at level 4
 pending : [10, 14, 7, 9]
 solution : [0, 2, 11, 15]

After backtrack at level 4
 pending : [10, 14, 7, 9, 6]
 solution : [0, 2, 11, 15]


Before backtrack at level 3
 pending : [10, 14, 7, 9, 6]
 solution : [0, 2, 11, 15]

After backtrack at level 3
 pending : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17, 13]
 solution : [0, 2, 11, 15]


Invert decision for 15 at level 2


New level: 3
 pending : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17, 13]
 solution : [0, 2, 11]


Before reduction : 
 pending  : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17, 13]
 solution : [0, 2, 11]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, -1), (16, 262144), (17, 65536)]

Covered at level 3 : set()

After reduction : 
 pending  : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17, 13]
 solution : [0, 2, 11]


Solution : [0, 2, 11] has cost 11.


Decide in level 3 among pending : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, -1), (16, 262144), (17, 65536)]

Decide 13 with phase True at level 3

After decision at level 3
 pending : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17]
 solution : [0, 2, 11, 13]


New level: 4
 pending : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17]
 solution : [0, 2, 11, 13]


Before reduction : 
 pending  : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17]
 solution : [0, 2, 11, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, 1048576), (14, 262144), (15, -1), (16, 262144), (17, 65536)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0)]

Covered at level 4 : {4, 5, 6, 7, 8, 9, 10, 14, 16, 17}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 13]


Solution : [0, 2, 11, 13] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [0, 2, 11, 13]

After backtrack at level 4
 pending : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17]
 solution : [0, 2, 11, 13]


Invert decision for 13 at level 3


New level: 4
 pending : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17]
 solution : [0, 2, 11]


Before reduction : 
 pending  : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17]
 solution : [0, 2, 11]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, -1), (14, 262144), (15, -1), (16, 262144), (17, 65536)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17]
 solution : [0, 2, 11]


Solution : [0, 2, 11] has cost 11.


Decide in level 4 among pending : [10, 14, 7, 9, 6, 8, 16, 5, 4, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, -1), (14, 262144), (15, -1), (16, 262144), (17, 65536)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [10, 7, 9, 6, 8, 16, 5, 4, 17]
 solution : [0, 2, 11, 14]


New level: 5
 pending : [10, 7, 9, 6, 8, 16, 5, 4, 17]
 solution : [0, 2, 11, 14]


Before reduction : 
 pending  : [10, 7, 9, 6, 8, 16, 5, 4, 17]
 solution : [0, 2, 11, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, -1), (14, 262144), (15, -1), (16, 262144), (17, 65536)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, 32768), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, 0)]

Covered at level 5 : {17, 10}

After reduction : 
 pending  : [7, 9, 6, 8, 16, 5, 4]
 solution : [0, 2, 11, 14]


Before reduction : 
 pending  : [7, 9, 6, 8, 16, 5, 4]
 solution : [0, 2, 11, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, 32768), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [7, 9, 6, 8, 16, 5, 4]
 solution : [0, 2, 11, 14]


Solution : [0, 2, 11, 14] has cost 18.


Decide in level 5 among pending : [7, 9, 6, 8, 16, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Decide 6 with phase True at level 5

After decision at level 5
 pending : [7, 9, 8, 16, 5, 4]
 solution : [0, 2, 11, 14, 6]


New level: 6
 pending : [7, 9, 8, 16, 5, 4]
 solution : [0, 2, 11, 14, 6]


Before reduction : 
 pending  : [7, 9, 8, 16, 5, 4]
 solution : [0, 2, 11, 14, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 6 : {4, 5, 7, 8, 9, 16}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 14, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 14, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 14, 6]


Solution : [0, 2, 11, 14, 6] has cost 27.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 11, 14, 6]

After backtrack at level 6
 pending : [7, 9, 8, 16, 5, 4]
 solution : [0, 2, 11, 14, 6]


Invert decision for 6 at level 5


New level: 6
 pending : [7, 9, 8, 16, 5, 4]
 solution : [0, 2, 11, 14]


Before reduction : 
 pending  : [7, 9, 8, 16, 5, 4]
 solution : [0, 2, 11, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, -1), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [7, 9, 8, 16, 5, 4]
 solution : [0, 2, 11, 14]


Solution : [0, 2, 11, 14] has cost 18.


Decide in level 6 among pending : [7, 9, 8, 16, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, -1), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [7, 9, 8, 16, 5]
 solution : [0, 2, 11, 14, 4]


New level: 7
 pending : [7, 9, 8, 16, 5]
 solution : [0, 2, 11, 14, 4]


Before reduction : 
 pending  : [7, 9, 8, 16, 5]
 solution : [0, 2, 11, 14, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, -1), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 512), (8, 0), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 7 : {8, 16, 5}

After reduction : 
 pending  : [7, 9]
 solution : [0, 2, 11, 14, 4]


Before reduction : 
 pending  : [7, 9]
 solution : [0, 2, 11, 14, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 512), (8, 0), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [7, 9]
 solution : [0, 2, 11, 14, 4]


Solution : [0, 2, 11, 14, 4] has cost 27.


Before backtrack at level 7
 pending : [7, 9]
 solution : [0, 2, 11, 14, 4]

After backtrack at level 7
 pending : [7, 9, 8, 16, 5]
 solution : [0, 2, 11, 14, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [7, 9, 8, 16, 5]
 solution : [0, 2, 11, 14]


Before reduction : 
 pending  : [7, 9, 8, 16, 5]
 solution : [0, 2, 11, 14]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [7, 9, 8, 16, 5]
 solution : [0, 2, 11, 14]


Solution : [0, 2, 11, 14] has cost 18.


Decide in level 7 among pending : [7, 9, 8, 16, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [7, 9, 8, 16]
 solution : [0, 2, 11, 14, 5]


New level: 8
 pending : [7, 9, 8, 16]
 solution : [0, 2, 11, 14, 5]


Before reduction : 
 pending  : [7, 9, 8, 16]
 solution : [0, 2, 11, 14, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 4096), (8, 1024), (9, 4096), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 1024), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [7, 9, 8, 16]
 solution : [0, 2, 11, 14, 5]


Solution : [0, 2, 11, 14, 5] has cost 27.


Before backtrack at level 8
 pending : [7, 9, 8, 16]
 solution : [0, 2, 11, 14, 5]

After backtrack at level 8
 pending : [7, 9, 8, 16]
 solution : [0, 2, 11, 14, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [7, 9, 8, 16]
 solution : [0, 2, 11, 14]


Before reduction : 
 pending  : [7, 9, 8, 16]
 solution : [0, 2, 11, 14]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 4096), (8, 1024), (9, 4096), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 1024), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [7, 9, 8, 16]
 solution : [0, 2, 11, 14]


Solution : [0, 2, 11, 14] has cost 18.


Decide in level 8 among pending : [7, 9, 8, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [9, 8, 16]
 solution : [0, 2, 11, 14, 7]


New level: 9
 pending : [9, 8, 16]
 solution : [0, 2, 11, 14, 7]


Before reduction : 
 pending  : [9, 8, 16]
 solution : [0, 2, 11, 14, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32768), (8, 4096), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 9 : {8, 9, 16}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 14, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 14, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 14, 7]


Solution : [0, 2, 11, 14, 7] has cost 27.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 11, 14, 7]

After backtrack at level 9
 pending : [9, 8, 16]
 solution : [0, 2, 11, 14, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [9, 8, 16]
 solution : [0, 2, 11, 14]


Before reduction : 
 pending  : [9, 8, 16]
 solution : [0, 2, 11, 14]

Essensial at level 9 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 9 : {8, 16}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 14, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 14, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 14, 9]


Solution : [0, 2, 11, 14, 9] has cost 25.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 11, 14, 9]

After backtrack at level 9
 pending : [9, 8, 16]
 solution : [0, 2, 11, 14]


Before backtrack at level 8
 pending : [9, 8, 16]
 solution : [0, 2, 11, 14]

After backtrack at level 8
 pending : [9, 8, 16, 7]
 solution : [0, 2, 11, 14]


Before backtrack at level 7
 pending : [9, 8, 16, 7]
 solution : [0, 2, 11, 14]

After backtrack at level 7
 pending : [9, 8, 16, 7, 5]
 solution : [0, 2, 11, 14]


Before backtrack at level 6
 pending : [9, 8, 16, 7, 5]
 solution : [0, 2, 11, 14]

After backtrack at level 6
 pending : [9, 8, 16, 7, 5, 4]
 solution : [0, 2, 11, 14]


Before backtrack at level 5
 pending : [9, 8, 16, 7, 5, 4]
 solution : [0, 2, 11, 14]

After backtrack at level 5
 pending : [9, 8, 16, 7, 5, 4, 10, 17, 6]
 solution : [0, 2, 11, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [9, 8, 16, 7, 5, 4, 10, 17, 6]
 solution : [0, 2, 11]


Before reduction : 
 pending  : [9, 8, 16, 7, 5, 4, 10, 17, 6]
 solution : [0, 2, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 262144), (17, 65536)]

Covered at level 5 : set()

After reduction : 
 pending  : [9, 8, 16, 7, 5, 4, 10, 17, 6]
 solution : [0, 2, 11]


Solution : [0, 2, 11] has cost 11.


Decide in level 5 among pending : [9, 8, 16, 7, 5, 4, 10, 17, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 262144), (17, 65536)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [8, 16, 7, 5, 4, 10, 17, 6]
 solution : [0, 2, 11, 9]


New level: 6
 pending : [8, 16, 7, 5, 4, 10, 17, 6]
 solution : [0, 2, 11, 9]


Before reduction : 
 pending  : [8, 16, 7, 5, 4, 10, 17, 6]
 solution : [0, 2, 11, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 65536), (8, 65536), (9, 262144), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 262144), (17, 65536)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0)]

Covered at level 6 : {4, 5, 6, 7, 8, 10, 16, 17}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 9]


Solution : [0, 2, 11, 9] has cost 18.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 11, 9]

After backtrack at level 6
 pending : [8, 16, 7, 5, 4, 10, 17, 6]
 solution : [0, 2, 11, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [8, 16, 7, 5, 4, 10, 17, 6]
 solution : [0, 2, 11]


Before reduction : 
 pending  : [8, 16, 7, 5, 4, 10, 17, 6]
 solution : [0, 2, 11]

Essensial at level 6 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, 0)]

Covered at level 6 : {17}

After reduction : 
 pending  : [8, 16, 7, 5, 4, 6]
 solution : [0, 2, 11, 10]


Before reduction : 
 pending  : [8, 16, 7, 5, 4, 6]
 solution : [0, 2, 11, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 16, 7, 5, 4, 6]
 solution : [0, 2, 11, 10]


Solution : [0, 2, 11, 10] has cost 18.


Decide in level 6 among pending : [8, 16, 7, 5, 4, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [8, 16, 7, 5, 6]
 solution : [0, 2, 11, 10, 4]


New level: 7
 pending : [8, 16, 7, 5, 6]
 solution : [0, 2, 11, 10, 4]


Before reduction : 
 pending  : [8, 16, 7, 5, 6]
 solution : [0, 2, 11, 10, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 262144), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 2048), (7, 512), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 7 : {8, 16, 5}

After reduction : 
 pending  : [7, 6]
 solution : [0, 2, 11, 10, 4]


Before reduction : 
 pending  : [7, 6]
 solution : [0, 2, 11, 10, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 2048), (7, 512), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [7, 6]
 solution : [0, 2, 11, 10, 4]


Solution : [0, 2, 11, 10, 4] has cost 27.


Before backtrack at level 7
 pending : [7, 6]
 solution : [0, 2, 11, 10, 4]

After backtrack at level 7
 pending : [7, 6, 8, 16, 5]
 solution : [0, 2, 11, 10, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [7, 6, 8, 16, 5]
 solution : [0, 2, 11, 10]


Before reduction : 
 pending  : [7, 6, 8, 16, 5]
 solution : [0, 2, 11, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2048), (7, 512), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [7, 6, 8, 16, 5]
 solution : [0, 2, 11, 10]


Solution : [0, 2, 11, 10] has cost 18.


Decide in level 7 among pending : [7, 6, 8, 16, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

Decide 6 with phase True at level 7

After decision at level 7
 pending : [7, 8, 16, 5]
 solution : [0, 2, 11, 10, 6]


New level: 8
 pending : [7, 8, 16, 5]
 solution : [0, 2, 11, 10, 6]


Before reduction : 
 pending  : [7, 8, 16, 5]
 solution : [0, 2, 11, 10, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, 262144), (7, 32768), (8, 4096), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4096), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 8 : {8, 16, 5, 7}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 10, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 10, 6]


Solution : [0, 2, 11, 10, 6] has cost 27.


Before backtrack at level 8
 pending : []
 solution : [0, 2, 11, 10, 6]

After backtrack at level 8
 pending : [7, 8, 16, 5]
 solution : [0, 2, 11, 10, 6]


Invert decision for 6 at level 7


New level: 8
 pending : [7, 8, 16, 5]
 solution : [0, 2, 11, 10]


Before reduction : 
 pending  : [7, 8, 16, 5]
 solution : [0, 2, 11, 10]

Essensial at level 8 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 8 : {8, 16, 5}

After reduction : 
 pending  : []
 solution : [0, 2, 11, 10, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 11, 10, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 11, 10, 7]


Solution : [0, 2, 11, 10, 7] has cost 27.


Before backtrack at level 8
 pending : []
 solution : [0, 2, 11, 10, 7]

After backtrack at level 8
 pending : [7, 8, 16, 5]
 solution : [0, 2, 11, 10]


Before backtrack at level 7
 pending : [7, 8, 16, 5]
 solution : [0, 2, 11, 10]

After backtrack at level 7
 pending : [7, 8, 16, 5, 6]
 solution : [0, 2, 11, 10]


Before backtrack at level 6
 pending : [7, 8, 16, 5, 6]
 solution : [0, 2, 11, 10]

After backtrack at level 6
 pending : [7, 8, 16, 5, 6, 10, 17, 4]
 solution : [0, 2, 11]


Before backtrack at level 5
 pending : [7, 8, 16, 5, 6, 10, 17, 4]
 solution : [0, 2, 11]

After backtrack at level 5
 pending : [7, 8, 16, 5, 6, 10, 17, 4, 9]
 solution : [0, 2, 11]


Before backtrack at level 4
 pending : [7, 8, 16, 5, 6, 10, 17, 4, 9]
 solution : [0, 2, 11]

After backtrack at level 4
 pending : [7, 8, 16, 5, 6, 10, 17, 4, 9, 14]
 solution : [0, 2, 11]


Before backtrack at level 3
 pending : [7, 8, 16, 5, 6, 10, 17, 4, 9, 14]
 solution : [0, 2, 11]

After backtrack at level 3
 pending : [7, 8, 16, 5, 6, 10, 17, 4, 9, 14, 13]
 solution : [0, 2, 11]


Before backtrack at level 2
 pending : [7, 8, 16, 5, 6, 10, 17, 4, 9, 14, 13]
 solution : [0, 2, 11]

After backtrack at level 2
 pending : [7, 8, 16, 5, 6, 10, 17, 4, 9, 14, 13, 15]
 solution : [0, 2, 11]


Before backtrack at level 1
 pending : [7, 8, 16, 5, 6, 10, 17, 4, 9, 14, 13, 15]
 solution : [0, 2, 11]

After backtrack at level 1
 pending : [7, 8, 16, 5, 6, 10, 17, 4, 9, 14, 13, 15, 3]
 solution : [0, 2, 11]


===================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

===================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: total qcost: 18

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 2, 11, 13] (length = 4)

invariant [invar_0] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_2] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_11] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_13] forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voting_quorum = QUORUM0 | vote(NODE0,VALUE0) | member(NODE0,QUORUM0) # qcost: 7




Solution 1 : [0, 2, 11, 9] (length = 4)

invariant [invar_0] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_2] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_11] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_9] forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | voting_quorum ~= QUORUM0 # qcost: 7




[QRM NOTE]: Time elapsed since start: 7.944 seconds

[QRM NOTE]: Time elapsed since last: 0.137 seconds

[QRM NOTE]: Peak memory: 2056358 bytes


=======================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

=======================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 45: invar_2
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 46: invar_11
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 47: invar_13

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 45: invar_2 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 46: invar_11 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 47: invar_13 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 45: invar_2 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 46: invar_11 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 47: invar_13 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 45: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 46: invar_11 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 47: invar_13 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: line 29: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 45: invar_2
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 46: invar_11
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 47: invar_9

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 45: invar_2 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 46: invar_11 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 47: invar_9 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 45: invar_2 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 46: invar_11 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 47: invar_9 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 45: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 46: invar_11 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 47: invar_9 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: line 29: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 12.484 seconds

[QRM NOTE]: Time elapsed since last: 4.541 seconds

[QRM NOTE]: Peak memory: 1058008 bytes


******************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2

******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy -s node=4,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=4,value=2]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 18

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 48

[FW NOTE]: number of branching actions: 16

ivy_to_cpp target=qrm toy_consensus_forall.node_4_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_4_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_4_value_2.finite.cpp toy_consensus_forall.node_4_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_4_value_2.finite.o toy_consensus_forall.node_4_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 8.657 seconds

[QRM NOTE]: Time elapsed since last: 8.657 seconds

[QRM NOTE]: Peak memory: 1193363 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        348

[FW NOTE]: number of dfs representative states:     19

[FW NOTE]: number of dfs non-representative states: 329


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=4,value=2]

==================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: voting_quorum=('quorum',)
predicate: voted('node',)
predicate: decided('value',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)', '(voting_quorum=quorum__node0_node1_node2)', '(voting_quorum=quorum__node0_node1_node3)', '(voting_quorum=quorum__node0_node2_node3)', '(voting_quorum=quorum__node1_node2_node3)']
representative states : 126391, 17952183, 87158199, 359853495, 1441918391, 5736885687, 1458695607, 5754121655, 4654755255, 377023927, 1459154359, 1525804471, 359787959, 376565175, 103935415, 376630711, 87354807, 104132023, 18410935


=== State Orbit 0 =====================
size : 4
repr state: 000000000000000100
lex min decimal: 126391
states:
000000000000001000
000000000000000010
000000000000000001
000000000000000100




=== State Orbit 1 =====================
size : 24
repr state: 001000000010000100
lex min decimal: 17952183
states:
000000010000100001
001000000010000010
001000000010000100
001000000010001000
000001000001001000
000000001000010001
000000001000010100
000000001000010010
000010000001001000
000001000001000100
000010000001000001
000001000001000001
000000010000100010
000000000100010001
000000010000101000
000010000001000100
000000100000100001
000000000100010010
000100000010000010
000000000100010100
000100000010000100
000000100000100010
000000100000101000
000100000010001000




=== State Orbit 2 =====================
size : 24
repr state: 001010000011000100
lex min decimal: 87158199
states:
001000001010010100
000000010100110010
001010000011001000
001010000011000100
000101000011001000
000000010100110001
000000101000110001
001000001010010010
000100000110010100
000010100001101000
000100010010100010
000100010010101000
000010001001010001
000101000011000100
001000100010100010
000010100001100001
000010001001010100
000001010001100001
000100000110010010
000001000101010100
000001010001101000
000001000101010001
000000101000110010
001000100010101000




=== State Orbit 3 =====================
size : 24
repr state: 001010100011100100
lex min decimal: 359853495
states:
000010101001110100
001010001011010001
000101010011100100
000010101001111000
001010100011100010
001000101010110001
000010101001110010
001010001011011000
001000101010111000
000100010110111000
001010100011100001
000101000111010001
000101010011100001
000100010110110001
000101000111010010
000100010110110100
000101000111011000
000101010011100010
000001010101110010
001000101010110100
001010100011100100
000001010101110100
001010001011010010
000001010101111000




=== State Orbit 4 =====================
size : 8
repr state: 001010101011110100
lex min decimal: 1441918391
states:
001010101011110010
000101010111110010
000101010111110100
000101010111111000
001010101011110100
001010101011111000
000101010111110001
001010101011110001




=== State Orbit 5 =====================
size : 8
repr state: 101010101011111000
lex min decimal: 5736885687
states:
101010101011110010
101010101011110100
101010101011111000
010101010111110001
010101010111111000
101010101011110001
010101010111110100
010101010111110010




=== State Orbit 6 =====================
size : 24
repr state: 001010100111110100
lex min decimal: 1458695607
states:
000101100111110001
001001101011111000
000101100111111000
001001010111111000
001001010111110010
001010011011111000
001010100111110100
001001101011110100
000110101011111000
000101011011110010
001001010111110100
000110010111110001
001010011011110010
000101011011110001
001010100111110001
000110101011110100
000110101011110010
001010011011110001
001010100111110010
001001101011110001
000110010111111000
000101100111110010
000101011011110100
000110010111110100




=== State Orbit 7 =====================
size : 8
repr state: 101010100111111000
lex min decimal: 5754121655
states:
101001101011110010
011001010111110001
010101011011111000
100110101011110001
010110010111110010
101010100111111000
101010011011110100
010101100111110100




=== State Orbit 8 =====================
size : 8
repr state: 101010100011101000
lex min decimal: 4654755255
states:
010001010101110001
101010001011010100
010101010011101000
101010100011101000
010101000111010100
101000101010110010
010100010110110010
100010101001110001




=== State Orbit 9 =====================
size : 24
repr state: 001010010011100100
lex min decimal: 377023927
states:
001001000111010001
000100101010110001
000100100110110100
000110001011010001
001010000111011000
001001001011010010
000110100011100001
000100011010111000
000110000111010010
000010100101111000
000001101001110010
000101100011100100
001000100110111000
000010010101110010
000010011001110100
000001011001111000
001001100011100010
001010010011100100
001001010011100001
000110010011100010
000101001011011000
000001100101110100
001000011010110100
001000010110110001




=== State Orbit 10 =====================
size : 8
repr state: 001010011011110100
lex min decimal: 1459154359
states:
000101011011111000
001010011011110100
001001010111110001
001010100111111000
000110010111110010
001001101011110010
000110101011110001
000101100111110100




=== State Orbit 11 =====================
size : 24
repr state: 001010010111110100
lex min decimal: 1525804471
states:
000110011011110001
000101101011111000
000110011011110100
000101101011110100
001010010111110100
000110011011111000
001001100111111000
000110100111110100
000110100111110001
001001100111110010
001001100111110001
001001011011110010
000101101011110001
000110100111111000
000110011011110010
001001100111110100
000110100111110010
001010010111111000
001001011011110001
001010010111110001
001010010111110010
001001011011110100
000101101011110010
001001011011111000




=== State Orbit 12 =====================
size : 8
repr state: 001010001011010100
lex min decimal: 359787959
states:
000100010110110010
001010100011101000
000010101001110001
000001010101110001
000101000111010100
001010001011010100
001000101010110010
000101010011101000




=== State Orbit 13 =====================
size : 24
repr state: 001010000111010100
lex min decimal: 376565175
states:
001010010011101000
001001000111010100
000001011001110001
000010010101110001
000110000111010100
000110100011101000
000101001011010100
001000011010110010
000110001011010100
000010011001110001
000110010011101000
000001100101110001
001000010110110010
000100011010110010
000001101001110001
000101100011101000
001000100110110010
000010100101110001
001001010011101000
001010000111010100
001001100011101000
001001001011010100
000100101010110010
000100100110110010




=== State Orbit 14 =====================
size : 24
repr state: 001001000011000100
lex min decimal: 103935415
states:
000000011000110010
000010000101010001
001001000011000100
001000010010100010
000100001010010100
001000010010101000
000100100010101000
000000100100110010
000110000011001000
000100100010100010
000010000101010100
000000011000110001
000010010001101000
001000000110010100
000001001001010100
000001100001100001
001001000011001000
000001001001010001
000100001010010010
000010010001100001
001000000110010010
000110000011000100
000001100001101000
000000100100110001




=== State Orbit 15 =====================
size : 48
repr state: 001001100011100100
lex min decimal: 376630711
states:
000100101010111000
000101100011100010
001001000111010010
000110010011100100
000100011010110001
000101001011010010
000110100011100100
001010000111010010
000110001011010010
000100101010110100
000001101001111000
001000010110110100
000001011001110100
001010010011100010
001000100110110100
000001011001110010
001000100110110001
001000011010111000
001000010110111000
000110000111010001
001001010011100010
001001001011011000
000001100101111000
000010010101111000
001010000111010001
001001001011010001
000100100110110001
000110001011011000
000100100110111000
000110010011100001
000101100011100001
000001101001110100
000101001011010001
000010010101110100
000100011010110100
001010010011100001
001001100011100100
001001010011100100
001000011010110001
000110000111011000
000010100101110100
001001000111011000
000001100101110010
000010100101110010
000010011001110010
000010011001111000
001001100011100001
000110100011100010




=== State Orbit 16 =====================
size : 24
repr state: 001000100010100100
lex min decimal: 87354807
states:
000010100001100100
000000010100110100
001000100010100100
000100010010100001
001000100010100001
000010001001011000
000100010010100100
000001000101011000
000010100001100010
001000001010010001
000100000110010001
000000101000111000
001010000011000001
000001010001100100
000100000110011000
000001000101010010
000000010100111000
000101000011000010
000101000011000001
000010001001010010
000000101000110100
000001010001100010
001000001010011000
001010000011000010




=== State Orbit 17 =====================
size : 24
repr state: 001000010010100100
lex min decimal: 104132023
states:
000001100001100010
000010010001100010
000000011000111000
001000010010100001
000010000101010010
000100100010100100
000100001010010001
000110000011000001
000001001001010010
000001001001011000
000010000101011000
000000100100110100
000000011000110100
001001000011000001
000100001010011000
001001000011000010
000000100100111000
000100100010100001
000001100001100100
001000000110010001
001000010010100100
001000000110011000
000010010001100100
000110000011000010




=== State Orbit 18 =====================
size : 8
repr state: 000000100000100100
lex min decimal: 18410935
states:
000100000010000001
000000000100011000
000000100000100100
000001000001000010
000010000001000010
000000001000011000
001000000010000001
000000010000100100



[QRM NOTE]: Time elapsed since start: 8.945 seconds

[QRM NOTE]: Time elapsed since last: 0.287 seconds

[QRM NOTE]: Peak memory: 1346036 bytes


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=4,value=2]

=======================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 9.319 seconds

[QRM NOTE]: Time elapsed since last: 0.374 seconds

[QRM NOTE]: Peak memory: 389647 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 18

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm toy_consensus_forall.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_3_value_3.finite.cpp toy_consensus_forall.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_3_value_3.finite.o toy_consensus_forall.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.453 seconds

[QRM NOTE]: Time elapsed since last: 7.453 seconds

[QRM NOTE]: Peak memory: 1191237 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        228

[FW NOTE]: number of dfs representative states:     14

[FW NOTE]: number of dfs non-representative states: 214


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

==================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decided('value',)
predicate: vote('node', 'value')
predicate: voted('node',)
predicate: member('node', 'quorum')
predicate: voting_quorum=('quorum',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
representative states : 939, 39339, 308651, 2421675, 19198891, 2454443, 19233195, 17085355, 341419, 2455979, 2782123, 37803, 308139, 340907


=== State Orbit 0 =====================
size : 3
repr state: 000000000000000001
lex min decimal: 939
states:
000000000000000100
000000000000000010
000000000000000001




=== State Orbit 1 =====================
size : 9
repr state: 000100000000100001
lex min decimal: 39339
states:
000000000010001100
000000010000010010
000000100000010010
000001000000100001
000000000100001100
000000001000010010
000010000000100001
000100000000100001
000000000001001100




=== State Orbit 2 =====================
size : 18
repr state: 000100100000110001
lex min decimal: 308651
states:
000010000010101001
000001000001101001
000001000001101100
000001001000110001
000001001000110010
000000001001011100
000010010000110010
000100000100101001
000010000010101100
000010010000110001
000100100000110001
000000010010011010
000100100000110010
000000001001011010
000000100100011010
000100000100101100
000000010010011100
000000100100011100




=== State Orbit 3 =====================
size : 9
repr state: 000100100100111001
lex min decimal: 2421675
states:
000100100100111001
000010010010111001
000010010010111100
000100100100111100
000010010010111010
000001001001111100
000001001001111010
000100100100111010
000001001001111001




=== State Orbit 4 =====================
size : 9
repr state: 100100100100111100
lex min decimal: 19198891
states:
001001001001111010
100100100100111100
010010010010111001
010010010010111010
001001001001111001
100100100100111010
010010010010111100
001001001001111100
100100100100111001




=== State Orbit 5 =====================
size : 36
repr state: 000100100010111001
lex min decimal: 2454443
states:
000100010100111001
000100001001111100
000100001001111010
000001100001111100
000001001010111010
000010100100111100
000010010100111001
000001010010111010
000001100100111010
000001010001111001
000001010001111100
000010001010111100
000001100001111001
000010001001111010
000010010001111001
000010001010111001
000100010100111100
000010100010111100
000001010010111100
000100100010111001
000100001100111100
000100100001111001
000001100100111100
000100100010111010
000010001001111100
000001001100111010
000010100100111010
000100010010111010
000010100010111001
000010010001111010
000010010100111010
000100010010111100
000001001100111001
000100001100111001
000100100001111010
000001001010111001




=== State Orbit 6 =====================
size : 18
repr state: 100100100010111100
lex min decimal: 19233195
states:
100001100100111001
010010100010111010
010001010010111001
001100001001111001
001001001100111100
001001100001111010
001010001001111001
100010100100111001
100100100010111100
010010010001111100
100100010100111010
010010001010111010
010100010010111001
001001001010111100
100100001100111010
001001010001111010
100100100001111100
010010010100111100




=== State Orbit 7 =====================
size : 9
repr state: 100100100000110100
lex min decimal: 17085355
states:
010000010010011001
001001001000110100
100100100000110100
100000100100011001
100100000100101010
001000001001011001
010010000010101010
010010010000110100
001001000001101010




=== State Orbit 8 =====================
size : 36
repr state: 000100010000110001
lex min decimal: 341419
states:
000010000100101001
000001000100101100
000100000010101001
000001100000110010
000100010000110001
000001100000110001
000100001000110001
000000010100011100
000010000001101100
000010000001101001
000100000001101100
000000010001011010
000010100000110010
000000001100011010
000001000010101100
000010100000110001
000000001100011100
000001010000110010
000000100010011100
000010001000110001
000001000010101001
000001000100101001
000000100010011010
000000001010011010
000000100001011100
000100001000110010
000010000100101100
000100000010101100
000010001000110010
000100000001101001
000001010000110001
000000100001011010
000000001010011100
000000010100011010
000000010001011100
000100010000110010




=== State Orbit 9 =====================
size : 18
repr state: 000100010010111001
lex min decimal: 2455979
states:
000001100100111001
000010100010111010
000001010001111010
000100010100111010
000010001010111010
000100100010111100
000100010010111001
000100001100111010
000010001001111001
000001001100111100
000001001010111100
000010010100111100
000100001001111001
000100100001111100
000001100001111010
000010010001111100
000010100100111001
000001010010111001




=== State Orbit 10 =====================
size : 18
repr state: 000100010001111001
lex min decimal: 2782123
states:
000010100001111001
000100001010111100
000010100001111010
000001010100111010
000100001010111001
000001010100111100
000010001100111010
000100010001111001
000001100010111100
000100001010111010
000001100010111010
000010001100111100
000001100010111001
000010001100111001
000100010001111100
000010100001111100
000100010001111010
000001010100111001




=== State Orbit 11 =====================
size : 18
repr state: 000000100000010001
lex min decimal: 37803
states:
000000100000010100
000000000100001001
000100000000100010
000010000000100010
000000000001001010
000000100000010001
000001000000100100
000000000010001010
000001000000100010
000100000000100100
000000010000010100
000000001000010100
000000000010001001
000000000100001010
000000000001001001
000000010000010001
000000001000010001
000010000000100100




=== State Orbit 12 =====================
size : 9
repr state: 000000100100011001
lex min decimal: 308139
states:
000010000010101010
000000001001011001
000100100000110100
000000100100011001
000001000001101010
000010010000110100
000100000100101010
000001001000110100
000000010010011001




=== State Orbit 13 =====================
size : 18
repr state: 000000100010011001
lex min decimal: 340907
states:
000010001000110100
000100000001101010
000010000100101010
000010000001101010
000001000100101010
000000001010011001
000100010000110100
000010100000110100
000001100000110100
000100000010101010
000000100010011001
000000100001011001
000001010000110100
000000001100011001
000000010100011001
000001000010101010
000100001000110100
000000010001011001



[QRM NOTE]: Time elapsed since start: 7.640 seconds

[QRM NOTE]: Time elapsed since last: 0.187 seconds

[QRM NOTE]: Peak memory: 1281385 bytes


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

=======================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 103339, binary: 000000000011001001

Found a representative state in Rmin not in reachability: decimal: 104875, binary: 000000000011001100

Found a representative state in Rmin not in reachability: decimal: 898475, binary: 000000011011011010

Found a representative state in Rmin not in reachability: decimal: 897963, binary: 000000011011011001

Found a representative state in Rmin not in reachability: decimal: 17675179, binary: 001000011011011001

Found a representative state in Rmin not in reachability: decimal: 51229611, binary: 011000011011011001

Found a representative state in Rmin not in reachability: decimal: 17150891, binary: 001000001011011001

Found a representative state in Rmin not in reachability: decimal: 373675, binary: 000000001011011001

Found a representative state in Rmin not in reachability: decimal: 374187, binary: 000000001011011010

Found a representative state in Rmin not in reachability: decimal: 375211, binary: 000000001011011100

Found a representative state in Rmin not in reachability: decimal: 964011, binary: 000000011101011010

Found a representative state in Rmin not in reachability: decimal: 963499, binary: 000000011101011001

Found a representative state in Rmin not in reachability: decimal: 17740715, binary: 001000011101011001

Found a representative state in Rmin not in reachability: decimal: 471979, binary: 000000001110011001

Found a representative state in Rmin not in reachability: decimal: 472491, binary: 000000001110011010

Found a representative state in Rmin not in reachability: decimal: 473515, binary: 000000001110011100

Found a representative state in Rmin not in reachability: decimal: 3012011, binary: 000001011011111010

Found a representative state in Rmin not in reachability: decimal: 19789227, binary: 001001011011111010

Found a representative state in Rmin not in reachability: decimal: 3011499, binary: 000001011011111001

Found a representative state in Rmin not in reachability: decimal: 19788715, binary: 001001011011111001

Found a representative state in Rmin not in reachability: decimal: 21885867, binary: 001010011011111001

Found a representative state in Rmin not in reachability: decimal: 53343147, binary: 011001011011111001

Found a representative state in Rmin not in reachability: decimal: 7271339, binary: 000011011101111001

Found a representative state in Rmin not in reachability: decimal: 24048555, binary: 001011011101111001

Found a representative state in Rmin not in reachability: decimal: 7272875, binary: 000011011101111100

Found a representative state in Rmin not in reachability: decimal: 24050091, binary: 001011011101111100

Found a representative state in Rmin not in reachability: decimal: 24082859, binary: 001011011110111100

Found a representative state in Rmin not in reachability: decimal: 57604523, binary: 011011011101111100

Found a representative state in Rmin not in reachability: decimal: 3896747, binary: 000001110110111010

Found a representative state in Rmin not in reachability: decimal: 3896235, binary: 000001110110111001

Found a representative state in Rmin not in reachability: decimal: 22475691, binary: 001010101101111001

Found a representative state in Rmin not in reachability: decimal: 57571755, binary: 011011011100111100

Found a representative state in Rmin not in reachability: decimal: 7205803, binary: 000011011011111001

Found a representative state in Rmin not in reachability: decimal: 23983019, binary: 001011011011111001

Found a representative state in Rmin not in reachability: decimal: 57537451, binary: 011011011011111001

Found a representative state in Rmin not in reachability: decimal: 2816427, binary: 000001010101111100

Found a representative state in Rmin not in reachability: decimal: 2815403, binary: 000001010101111010

Found a representative state in Rmin not in reachability: decimal: 19592619, binary: 001001010101111010

Found a representative state in Rmin not in reachability: decimal: 2814891, binary: 000001010101111001

Found a representative state in Rmin not in reachability: decimal: 3109803, binary: 000001011110111001

Found a representative state in Rmin not in reachability: decimal: 21951403, binary: 001010011101111001

Found a representative state in Rmin not in reachability: decimal: 3111339, binary: 000001011110111100

Found a representative state in Rmin not in reachability: decimal: 19888555, binary: 001001011110111100

Found a representative state in Rmin not in reachability: decimal: 3110315, binary: 000001011110111010

Found a representative state in Rmin not in reachability: decimal: 2750891, binary: 000001010011111100

Found a representative state in Rmin not in reachability: decimal: 2749355, binary: 000001010011111001

Found a representative state in Rmin not in reachability: decimal: 19527083, binary: 001001010011111010

Found a representative state in Rmin not in reachability: decimal: 19265963, binary: 001001001011111100

Found a representative state in Rmin not in reachability: decimal: 2488747, binary: 000001001011111100

Found a representative state in Rmin not in reachability: decimal: 2487211, binary: 000001001011111001

Found a representative state in Rmin not in reachability: decimal: 19264427, binary: 001001001011111001

Found a representative state in Rmin not in reachability: decimal: 3077035, binary: 000001011101111001

Found a representative state in Rmin not in reachability: decimal: 19854251, binary: 001001011101111001

Found a representative state in Rmin not in reachability: decimal: 3077547, binary: 000001011101111010

Found a representative state in Rmin not in reachability: decimal: 19854763, binary: 001001011101111010

Found a representative state in Rmin not in reachability: decimal: 7828395, binary: 000011101110111001

Found a representative state in Rmin not in reachability: decimal: 24607147, binary: 001011101110111100

Found a representative state in Rmin not in reachability: decimal: 2587051, binary: 000001001110111100

Found a representative state in Rmin not in reachability: decimal: 19364267, binary: 001001001110111100

Found a representative state in Rmin not in reachability: decimal: 2585515, binary: 000001001110111001

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 8.289 seconds

[QRM NOTE]: Time elapsed since last: 0.649 seconds

[QRM NOTE]: Peak memory: 297352 bytes

next size: node=3,value=3


******************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2

******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy -s node=4,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=4,value=2]

=======================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.379 seconds

[QRM NOTE]: Time elapsed since last: 0.379 seconds

[QRM NOTE]: Peak memory: 150485 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy -s node=3,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

=======================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 103339, binary: 000000000011001001

Found a representative state in Rmin not in reachability: decimal: 104875, binary: 000000000011001100

Found a representative state in Rmin not in reachability: decimal: 898475, binary: 000000011011011010

Found a representative state in Rmin not in reachability: decimal: 897963, binary: 000000011011011001

Found a representative state in Rmin not in reachability: decimal: 17675179, binary: 001000011011011001

Found a representative state in Rmin not in reachability: decimal: 51229611, binary: 011000011011011001

Found a representative state in Rmin not in reachability: decimal: 17150891, binary: 001000001011011001

Found a representative state in Rmin not in reachability: decimal: 373675, binary: 000000001011011001

Found a representative state in Rmin not in reachability: decimal: 374187, binary: 000000001011011010

Found a representative state in Rmin not in reachability: decimal: 375211, binary: 000000001011011100

Found a representative state in Rmin not in reachability: decimal: 964011, binary: 000000011101011010

Found a representative state in Rmin not in reachability: decimal: 963499, binary: 000000011101011001

Found a representative state in Rmin not in reachability: decimal: 17740715, binary: 001000011101011001

Found a representative state in Rmin not in reachability: decimal: 471979, binary: 000000001110011001

Found a representative state in Rmin not in reachability: decimal: 472491, binary: 000000001110011010

Found a representative state in Rmin not in reachability: decimal: 473515, binary: 000000001110011100

Found a representative state in Rmin not in reachability: decimal: 3012011, binary: 000001011011111010

Found a representative state in Rmin not in reachability: decimal: 19789227, binary: 001001011011111010

Found a representative state in Rmin not in reachability: decimal: 19788715, binary: 001001011011111001

Found a representative state in Rmin not in reachability: decimal: 3011499, binary: 000001011011111001

Found a representative state in Rmin not in reachability: decimal: 21885867, binary: 001010011011111001

Found a representative state in Rmin not in reachability: decimal: 53343147, binary: 011001011011111001

Found a representative state in Rmin not in reachability: decimal: 24048555, binary: 001011011101111001

Found a representative state in Rmin not in reachability: decimal: 7271339, binary: 000011011101111001

Found a representative state in Rmin not in reachability: decimal: 24050091, binary: 001011011101111100

Found a representative state in Rmin not in reachability: decimal: 7272875, binary: 000011011101111100

Found a representative state in Rmin not in reachability: decimal: 24082859, binary: 001011011110111100

Found a representative state in Rmin not in reachability: decimal: 57604523, binary: 011011011101111100

Found a representative state in Rmin not in reachability: decimal: 3896747, binary: 000001110110111010

Found a representative state in Rmin not in reachability: decimal: 3896235, binary: 000001110110111001

Found a representative state in Rmin not in reachability: decimal: 22475691, binary: 001010101101111001

Found a representative state in Rmin not in reachability: decimal: 57571755, binary: 011011011100111100

Found a representative state in Rmin not in reachability: decimal: 23983019, binary: 001011011011111001

Found a representative state in Rmin not in reachability: decimal: 57537451, binary: 011011011011111001

Found a representative state in Rmin not in reachability: decimal: 7205803, binary: 000011011011111001

Found a representative state in Rmin not in reachability: decimal: 2816427, binary: 000001010101111100

Found a representative state in Rmin not in reachability: decimal: 2815403, binary: 000001010101111010

Found a representative state in Rmin not in reachability: decimal: 19592619, binary: 001001010101111010

Found a representative state in Rmin not in reachability: decimal: 2814891, binary: 000001010101111001

Found a representative state in Rmin not in reachability: decimal: 3109803, binary: 000001011110111001

Found a representative state in Rmin not in reachability: decimal: 21951403, binary: 001010011101111001

Found a representative state in Rmin not in reachability: decimal: 3111339, binary: 000001011110111100

Found a representative state in Rmin not in reachability: decimal: 19888555, binary: 001001011110111100

Found a representative state in Rmin not in reachability: decimal: 3110315, binary: 000001011110111010

Found a representative state in Rmin not in reachability: decimal: 2750891, binary: 000001010011111100

Found a representative state in Rmin not in reachability: decimal: 2749355, binary: 000001010011111001

Found a representative state in Rmin not in reachability: decimal: 19527083, binary: 001001010011111010

Found a representative state in Rmin not in reachability: decimal: 19265963, binary: 001001001011111100

Found a representative state in Rmin not in reachability: decimal: 2488747, binary: 000001001011111100

Found a representative state in Rmin not in reachability: decimal: 19264427, binary: 001001001011111001

Found a representative state in Rmin not in reachability: decimal: 2487211, binary: 000001001011111001

Found a representative state in Rmin not in reachability: decimal: 19854251, binary: 001001011101111001

Found a representative state in Rmin not in reachability: decimal: 3077035, binary: 000001011101111001

Found a representative state in Rmin not in reachability: decimal: 19854763, binary: 001001011101111010

Found a representative state in Rmin not in reachability: decimal: 3077547, binary: 000001011101111010

Found a representative state in Rmin not in reachability: decimal: 7828395, binary: 000011101110111001

Found a representative state in Rmin not in reachability: decimal: 24607147, binary: 001011101110111100

Found a representative state in Rmin not in reachability: decimal: 2587051, binary: 000001001110111100

Found a representative state in Rmin not in reachability: decimal: 19364267, binary: 001001001110111100

Found a representative state in Rmin not in reachability: decimal: 2585515, binary: 000001001110111001

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.669 seconds

[QRM NOTE]: Time elapsed since last: 0.669 seconds

[QRM NOTE]: Peak memory: 112215 bytes

next size: node=3,value=3


***************************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3

***************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.ivy -s node=3,value=3 -f 1 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.041 seconds

[QRM NOTE]: Time elapsed since last: 0.041 seconds

[QRM NOTE]: Peak memory: 71452 bytes


==================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

==================================================================================================================


=============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

=============================================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : ---------------11-
0     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)']
1     : ---------------1-1
1     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node1_node2)']
2     : ----------------11
2     : ['(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
3 (*) : ------1------0----
3     : ['vote(node1,value0)', '~voted(node1)']
4     : -------1-----0----
4     : ['vote(node1,value1)', '~voted(node1)']
5     : --------1----0----
5     : ['vote(node1,value2)', '~voted(node1)']
6     : ---------1----0---
6     : ['vote(node2,value0)', '~voted(node2)']
7     : ----------1---0---
7     : ['vote(node2,value1)', '~voted(node2)']
8     : -----------1--0---
8     : ['vote(node2,value2)', '~voted(node2)']
9     : ---1--------0-----
9     : ['vote(node0,value0)', '~voted(node0)']
10     : ----1-------0-----
10     : ['vote(node0,value1)', '~voted(node0)']
11     : -----1------0-----
11     : ['vote(node0,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
12 (*) : 1-1---------------
12     : ['decided(value0)', 'decided(value2)']
13     : 11----------------
13     : ['decided(value0)', 'decided(value1)']
14     : -11---------------
14     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 9
num_suborbits: 1
15 (*) : ----11------------
15     : ['vote(node0,value1)', 'vote(node0,value2)']
16     : ---1-1------------
16     : ['vote(node0,value0)', 'vote(node0,value2)']
17     : ---11-------------
17     : ['vote(node0,value0)', 'vote(node0,value1)']
18     : -------11---------
18     : ['vote(node1,value1)', 'vote(node1,value2)']
19     : ------1-1---------
19     : ['vote(node1,value0)', 'vote(node1,value2)']
20     : ------11----------
20     : ['vote(node1,value0)', 'vote(node1,value1)']
21     : ----------11------
21     : ['vote(node2,value1)', 'vote(node2,value2)']
22     : ---------1-1------
22     : ['vote(node2,value0)', 'vote(node2,value2)']
23     : ---------11-------
23     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 36
num_suborbits: 1
24 (*) : -1--0------1------
24     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
25     : --1--0----1-------
25     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
26     : 1--0-------1------
26     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
27     : --1--0---1--------
27     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
28     : 1--0------1-------
28     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
29     : -1--0----1--------
29     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
30     : -1--0---1---------
30     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
31     : --1--0-1----------
31     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
32     : 1--0----1---------
32     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
33     : --1--01-----------
33     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
34     : 1--0---1----------
34     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
35     : -1--0-1-----------
35     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
36     : -1-----0---1------
36     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
37     : --1-----0-1-------
37     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
38     : 1-----0----1------
38     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
39     : --1-----01--------
39     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
40     : 1-----0---1-------
40     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
41     : -1-----0-1--------
41     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
42     : -1---1-0----------
42     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
43     : --1-1---0---------
43     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
44     : 1----10-----------
44     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
45     : --11----0---------
45     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
46     : 1---1-0-----------
46     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
47     : -1-1---0----------
47     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
48     : -1------1-0-------
48     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
49     : --1----1---0------
49     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
50     : 1-------10--------
50     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
51     : --1---1----0------
51     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
52     : 1------1-0--------
52     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
53     : -1----1---0-------
53     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
54     : -1---1----0-------
54     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
55     : --1-1------0------
55     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
56     : 1----1---0--------
56     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
57     : --11-------0------
57     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
58     : 1---1----0--------
58     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
59     : -1-1------0-------
59     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 36
num_suborbits: 2
60 (*) : -1------1--1------
60     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
61     : --1----1--1-------
61     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
62     : 1-------1--1------
62     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
63     : --1---1--1--------
63     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
64     : 1------1--1-------
64     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
65     : -1----1--1--------
65     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
66     : -1---1-----1------
66     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
67     : --1-1-----1-------
67     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
68     : 1----1-----1------
68     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
69     : --11-----1--------
69     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
70     : 1---1-----1-------
70     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
71     : -1-1-----1--------
71     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
72     : -1---1--1---------
72     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
73     : --1-1--1----------
73     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
74     : 1----1--1---------
74     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
75     : --11--1-----------
75     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
76     : 1---1--1----------
76     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
77     : -1-1--1-----------
77     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
249 (*) : -1---1---1--------
249     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
250     : --1-1----1--------
250     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
251     : 1----1----1-------
251     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
252     : --11------1-------
252     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
253     : 1---1------1------
253     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
254     : -1-1-------1------
254     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
255     : -1---11-----------
255     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
256     : --1-1-1-----------
256     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
257     : 1----1-1----------
257     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
258     : --11---1----------
258     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
259     : 1---1---1---------
259     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
260     : -1-1----1---------
260     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
261     : -1------11--------
261     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
262     : --1----1-1--------
262     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
263     : 1-------1-1-------
263     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
264     : --1---1---1-------
264     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
265     : 1------1---1------
265     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
266     : -1----1----1------
266     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 36
num_suborbits: 1
78 (*) : -1---------10-----
78     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
79     : --1-------1-0-----
79     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
80     : 1----------10-----
80     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
81     : --1------1--0-----
81     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
82     : 1---------1-0-----
82     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
83     : -1-------1--0-----
83     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
84     : -1------1---0-----
84     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
85     : --1----1----0-----
85     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
86     : 1-------1---0-----
86     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
87     : --1---1-----0-----
87     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
88     : 1------1----0-----
88     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
89     : -1----1-----0-----
89     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
90     : -1---------1-0----
90     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
91     : --1-------1--0----
91     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
92     : 1----------1-0----
92     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
93     : --1------1---0----
93     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
94     : 1---------1--0----
94     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
95     : -1-------1---0----
95     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
96     : -1---1-------0----
96     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
97     : --1-1--------0----
97     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
98     : 1----1-------0----
98     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
99     : --11---------0----
99     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
100     : 1---1--------0----
100     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
101     : -1-1---------0----
101     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
102     : -1------1-----0---
102     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
103     : --1----1------0---
103     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
104     : 1-------1-----0---
104     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
105     : --1---1-------0---
105     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
106     : 1------1------0---
106     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
107     : -1----1-------0---
107     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
108     : -1---1--------0---
108     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
109     : --1-1---------0---
109     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
110     : 1----1--------0---
110     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
111     : --11----------0---
111     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
112     : 1---1---------0---
112     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
113     : -1-1----------0---
113     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 18
num_suborbits: 1
114 (*) : -1---------1---0--
114     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
115     : --1-------1----0--
115     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
116     : 1----------1---0--
116     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
117     : --1------1-----0--
117     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
118     : 1---------1----0--
118     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
119     : -1-------1-----0--
119     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
120     : -1------1-------0-
120     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
121     : --1----1--------0-
121     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
122     : 1-------1-------0-
122     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
123     : --1---1---------0-
123     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
124     : 1------1--------0-
124     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
125     : -1----1---------0-
125     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
126     : -1---1-----------0
126     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
127     : --1-1------------0
127     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
128     : 1----1-----------0
128     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
129     : --11-------------0
129     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
130     : 1---1------------0
130     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
131     : -1-1-------------0
131     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 36
num_suborbits: 1
132 (*) : -1---------1-----1
132     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
133     : --1-------1------1
133     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
134     : 1----------1-----1
134     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
135     : --1------1-------1
135     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
136     : 1---------1------1
136     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
137     : -1-------1-------1
137     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
138     : -1------1--------1
138     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
139     : --1----1---------1
139     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
140     : 1-------1--------1
140     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
141     : --1---1----------1
141     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
142     : 1------1---------1
142     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
143     : -1----1----------1
143     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
144     : -1---------1----1-
144     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
145     : --1-------1-----1-
145     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
146     : 1----------1----1-
146     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
147     : --1------1------1-
147     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
148     : 1---------1-----1-
148     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
149     : -1-------1------1-
149     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
150     : -1---1----------1-
150     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
151     : --1-1-----------1-
151     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
152     : 1----1----------1-
152     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
153     : --11------------1-
153     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
154     : 1---1-----------1-
154     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
155     : -1-1------------1-
155     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
156     : -1------1------1--
156     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
157     : --1----1-------1--
157     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
158     : 1-------1------1--
158     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
159     : --1---1--------1--
159     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
160     : 1------1-------1--
160     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
161     : -1----1--------1--
161     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
162     : -1---1---------1--
162     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
163     : --1-1----------1--
163     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
164     : 1----1---------1--
164     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
165     : --11-----------1--
165     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
166     : 1---1----------1--
166     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
167     : -1-1-----------1--
167     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
168 (*) : -1--------0-0-----
168     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
169     : --1--------00-----
169     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
170     : 1--------0--0-----
170     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
171     : -1-----0----0-----
171     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
172     : --1-----0---0-----
172     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
173     : 1-----0-----0-----
173     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
174     : -1--------0--0----
174     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
175     : --1--------0-0----
175     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
176     : 1--------0---0----
176     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
177     : -1--0--------0----
177     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
178     : --1--0-------0----
178     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
179     : 1--0---------0----
179     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
180     : -1-----0------0---
180     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
181     : --1-----0-----0---
181     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
182     : 1-----0-------0---
182     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
183     : -1--0---------0---
183     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
184     : --1--0--------0---
184     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
185     : 1--0----------0---
185     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
186 (*) : -1----------0----0
186     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
187     : --1---------0----0
187     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
188     : 1-----------0----0
188     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
189     : -1-----------0--0-
189     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
190     : --1----------0--0-
190     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
191     : 1------------0--0-
191     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
192     : -1------------00--
192     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
193     : --1-----------00--
193     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
194     : 1-------------00--
194     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
195 (*) : -1----------0--1--
195     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
196     : --1---------0--1--
196     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
197     : 1-----------0--1--
197     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
198     : -1----------0---1-
198     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
199     : --1---------0---1-
199     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
200     : 1-----------0---1-
200     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
201     : -1-----------0-1--
201     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
202     : --1----------0-1--
202     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
203     : 1------------0-1--
203     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
204     : -1-----------0---1
204     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
205     : --1----------0---1
205     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
206     : 1------------0---1
206     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
207     : -1------------0-1-
207     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
208     : --1-----------0-1-
208     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
209     : 1-------------0-1-
209     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
210     : -1------------0--1
210     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
211     : --1-----------0--1
211     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
212     : 1-------------0--1
212     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
213 (*) : -1--------0----0--
213     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
214     : --1--------0---0--
214     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
215     : 1--------0-----0--
215     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
216     : -1-----0--------0-
216     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
217     : --1-----0-------0-
217     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
218     : 1-----0---------0-
218     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
219     : -1--0------------0
219     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
220     : --1--0-----------0
220     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
221     : 1--0-------------0
221     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
222 (*) : -1--------0------1
222     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
223     : --1--------0-----1
223     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
224     : 1--------0-------1
224     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
225     : -1-----0---------1
225     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
226     : --1-----0--------1
226     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
227     : 1-----0----------1
227     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
228     : -1--------0-----1-
228     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
229     : --1--------0----1-
229     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
230     : 1--------0------1-
230     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
231     : -1--0-----------1-
231     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
232     : --1--0----------1-
232     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
233     : 1--0------------1-
233     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
234     : -1-----0-------1--
234     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
235     : --1-----0------1--
235     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
236     : 1-----0--------1--
236     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
237     : -1--0----------1--
237     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
238     : --1--0---------1--
238     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
239     : 1--0-----------1--
239     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
240 (*) : -1--0-----0-------
240     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
241     : --1--0-----0------
241     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
242     : 1--0-----0--------
242     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
243     : -1--0--0----------
243     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
244     : --1--0--0---------
244     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
245     : 1--0--0-----------
245     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
246     : -1-----0--0-------
246     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
247     : --1-----0--0------
247     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
248     : 1-----0--0--------
248     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
267 (*) : ---------------000
267     : ['~(voting_quorum=quorum__node0_node1)', '~(voting_quorum=quorum__node0_node2)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
268 (*) : --1---------0-0---
268     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
269     : -1----------0-0---
269     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
270     : 1-----------0-0---
270     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
271     : --1---------00----
271     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
272     : -1----------00----
272     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
273     : 1-----------00----
273     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
274     : --1----------00---
274     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
275     : -1-----------00---
275     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
276     : 1------------00---
276     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---000------1-----
277     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---------000--1---
279     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 18

[PRIME NOTE]: number of orbits before merging: 19

[PRIME NOTE]: number of primes: 280

[QRM NOTE]: Time elapsed since start: 0.157 seconds

[QRM NOTE]: Time elapsed since last: 0.117 seconds

[QRM NOTE]: Peak memory: 1406790 bytes


=======================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

=======================================================================================================

definition primes: {0, 15}


New level: 0
 pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17]
 solution : []


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17]
 solution : []

Essensial at level 0 : {1, 3, 17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, 16777216), (15, -1), (16, 262144), (17, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
 solution : [1, 3, 17]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, 16777216), (15, -1), (16, 262144), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, 16777216), (15, -1), (16, 262144), (17, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
 solution : [1, 3, 17]

[QRM NOTE]: Time elapsed since start: 0.199 seconds

[QRM NOTE]: Time elapsed since last: 0.042 seconds

[QRM NOTE]: Peak memory: 359557 bytes


===========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

===========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
3 (*) : ------1------0----
3     : ['vote(node1,value0)', '~voted(node1)']
4     : -------1-----0----
4     : ['vote(node1,value1)', '~voted(node1)']
5     : --------1----0----
5     : ['vote(node1,value2)', '~voted(node1)']
6     : ---------1----0---
6     : ['vote(node2,value0)', '~voted(node2)']
7     : ----------1---0---
7     : ['vote(node2,value1)', '~voted(node2)']
8     : -----------1--0---
8     : ['vote(node2,value2)', '~voted(node2)']
9     : ---1--------0-----
9     : ['vote(node0,value0)', '~voted(node0)']
10     : ----1-------0-----
10     : ['vote(node0,value1)', '~voted(node0)']
11     : -----1------0-----
11     : ['vote(node0,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', '~voted(node1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', '~voted(node1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0)


=== Prime Orbit 3 =====================
size : 9
num_suborbits: 1
15 (*) : ----11------------
15     : ['vote(node0,value1)', 'vote(node0,value2)']
16     : ---1-1------------
16     : ['vote(node0,value0)', 'vote(node0,value2)']
17     : ---11-------------
17     : ['vote(node0,value0)', 'vote(node0,value1)']
18     : -------11---------
18     : ['vote(node1,value1)', 'vote(node1,value2)']
19     : ------1-1---------
19     : ['vote(node1,value0)', 'vote(node1,value2)']
20     : ------11----------
20     : ['vote(node1,value0)', 'vote(node1,value1)']
21     : ----------11------
21     : ['vote(node2,value1)', 'vote(node2,value2)']
22     : ---------1-1------
22     : ['vote(node2,value0)', 'vote(node2,value2)']
23     : ---------11-------
23     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value1)', 'vote(node0,value2)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value1)', 'vote(node0,value2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---000------1-----
277     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---------000--1---
279     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)']

sign_func_name2args: {'1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$1$vote$0$2, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$2]}

sig2const: {'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$2': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2', 'value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2')


---------- SigGenerator ----------

terms:  ['~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 3, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
12 (*) : 1-1---------------
12     : ['decided(value0)', 'decided(value2)']
13     : 11----------------
13     : ['decided(value0)', 'decided(value1)']
14     : -11---------------
14     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 36
num_suborbits: 1
24 (*) : -1--0------1------
24     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
25     : --1--0----1-------
25     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
26     : 1--0-------1------
26     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
27     : --1--0---1--------
27     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
28     : 1--0------1-------
28     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
29     : -1--0----1--------
29     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
30     : -1--0---1---------
30     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
31     : --1--0-1----------
31     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
32     : 1--0----1---------
32     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
33     : --1--01-----------
33     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
34     : 1--0---1----------
34     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
35     : -1--0-1-----------
35     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
36     : -1-----0---1------
36     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
37     : --1-----0-1-------
37     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
38     : 1-----0----1------
38     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
39     : --1-----01--------
39     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
40     : 1-----0---1-------
40     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
41     : -1-----0-1--------
41     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
42     : -1---1-0----------
42     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
43     : --1-1---0---------
43     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
44     : 1----10-----------
44     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
45     : --11----0---------
45     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
46     : 1---1-0-----------
46     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
47     : -1-1---0----------
47     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
48     : -1------1-0-------
48     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
49     : --1----1---0------
49     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
50     : 1-------10--------
50     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
51     : --1---1----0------
51     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
52     : 1------1-0--------
52     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
53     : -1----1---0-------
53     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
54     : -1---1----0-------
54     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
55     : --1-1------0------
55     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
56     : 1----1---0--------
56     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
57     : --11-------0------
57     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
58     : 1---1----0--------
58     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
59     : -1-1------0-------
59     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node0,value1)', 'vote(node2,value2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node0,value1)', 'vote(node2,value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1,VALUE1. ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 5 =====================
size : 36
num_suborbits: 2
60 (*) : -1------1--1------
60     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
61     : --1----1--1-------
61     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
62     : 1-------1--1------
62     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
63     : --1---1--1--------
63     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
64     : 1------1--1-------
64     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
65     : -1----1--1--------
65     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
66     : -1---1-----1------
66     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
67     : --1-1-----1-------
67     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
68     : 1----1-----1------
68     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
69     : --11-----1--------
69     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
70     : 1---1-----1-------
70     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
71     : -1-1-----1--------
71     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
72     : -1---1--1---------
72     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
73     : --1-1--1----------
73     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
74     : 1----1--1---------
74     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
75     : --11--1-----------
75     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
76     : 1---1--1----------
76     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
77     : -1-1--1-----------
77     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
249 (*) : -1---1---1--------
249     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
250     : --1-1----1--------
250     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
251     : 1----1----1-------
251     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
252     : --11------1-------
252     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
253     : 1---1------1------
253     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
254     : -1-1-------1------
254     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
255     : -1---11-----------
255     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
256     : --1-1-1-----------
256     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
257     : 1----1-1----------
257     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
258     : --11---1----------
258     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
259     : 1---1---1---------
259     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
260     : -1-1----1---------
260     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
261     : -1------11--------
261     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
262     : --1----1-1--------
262     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
263     : 1-------1-1-------
263     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
264     : --1---1---1-------
264     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
265     : 1------1---1------
265     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
266     : -1----1----1------
266     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', 'vote(NODE1,VALUE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall VALUE2,VALUE0,NODE1,VALUE1,NODE0. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | ~vote(NODE1,VALUE2) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE0 = VALUE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2))


=== Prime Orbit 6 =====================
size : 36
num_suborbits: 1
78 (*) : -1---------10-----
78     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
79     : --1-------1-0-----
79     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
80     : 1----------10-----
80     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
81     : --1------1--0-----
81     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
82     : 1---------1-0-----
82     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
83     : -1-------1--0-----
83     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
84     : -1------1---0-----
84     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
85     : --1----1----0-----
85     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
86     : 1-------1---0-----
86     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
87     : --1---1-----0-----
87     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
88     : 1------1----0-----
88     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
89     : -1----1-----0-----
89     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
90     : -1---------1-0----
90     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
91     : --1-------1--0----
91     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
92     : 1----------1-0----
92     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
93     : --1------1---0----
93     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
94     : 1---------1--0----
94     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
95     : -1-------1---0----
95     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
96     : -1---1-------0----
96     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
97     : --1-1--------0----
97     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
98     : 1----1-------0----
98     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
99     : --11---------0----
99     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
100     : 1---1--------0----
100     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
101     : -1-1---------0----
101     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
102     : -1------1-----0---
102     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
103     : --1----1------0---
103     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
104     : 1-------1-----0---
104     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
105     : --1---1-------0---
105     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
106     : 1------1------0---
106     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
107     : -1----1-------0---
107     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
108     : -1---1--------0---
108     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
109     : --1-1---------0---
109     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
110     : 1----1--------0---
110     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
111     : --11----------0---
111     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
112     : 1---1---------0---
112     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
113     : -1-1----------0---
113     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1,VALUE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | voted(NODE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 7 =====================
size : 18
num_suborbits: 1
114 (*) : -1---------1---0--
114     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
115     : --1-------1----0--
115     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
116     : 1----------1---0--
116     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
117     : --1------1-----0--
117     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
118     : 1---------1----0--
118     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
119     : -1-------1-----0--
119     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
120     : -1------1-------0-
120     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
121     : --1----1--------0-
121     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
122     : 1-------1-------0-
122     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
123     : --1---1---------0-
123     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
124     : 1------1--------0-
124     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
125     : -1----1---------0-
125     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
126     : -1---1-----------0
126     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
127     : --1-1------------0
127     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
128     : 1----1-----------0
128     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
129     : --11-------------0
129     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
130     : 1---1------------0
130     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
131     : -1-1-------------0
131     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node2,value2)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node2,value2)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', '~member(NODE0,QUORUM0)', 'voting_quorum ~= QUORUM0']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0,VALUE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | VALUE0 = VALUE1


=== Prime Orbit 8 =====================
size : 36
num_suborbits: 1
132 (*) : -1---------1-----1
132     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
133     : --1-------1------1
133     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
134     : 1----------1-----1
134     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
135     : --1------1-------1
135     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
136     : 1---------1------1
136     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
137     : -1-------1-------1
137     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
138     : -1------1--------1
138     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
139     : --1----1---------1
139     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
140     : 1-------1--------1
140     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
141     : --1---1----------1
141     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
142     : 1------1---------1
142     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
143     : -1----1----------1
143     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
144     : -1---------1----1-
144     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
145     : --1-------1-----1-
145     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
146     : 1----------1----1-
146     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
147     : --1------1------1-
147     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
148     : 1---------1-----1-
148     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
149     : -1-------1------1-
149     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
150     : -1---1----------1-
150     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
151     : --1-1-----------1-
151     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
152     : 1----1----------1-
152     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
153     : --11------------1-
153     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
154     : 1---1-----------1-
154     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
155     : -1-1------------1-
155     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
156     : -1------1------1--
156     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
157     : --1----1-------1--
157     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
158     : 1-------1------1--
158     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
159     : --1---1--------1--
159     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
160     : 1------1-------1--
160     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
161     : -1----1--------1--
161     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
162     : -1---1---------1--
162     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
163     : --1-1----------1--
163     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
164     : 1----1---------1--
164     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
165     : --11-----------1--
165     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
166     : 1---1----------1--
166     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
167     : -1-1-----------1--
167     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node2,value2)', 'voting_quorum = quorum__node1_node2', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node2,value2)', 'voting_quorum = quorum__node1_node2', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'member(NODE0,QUORUM0)', 'decided(VALUE0)', 'voting_quorum = QUORUM0']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0,VALUE1. ~vote(NODE0,VALUE1) | ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | VALUE0 = VALUE1


=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
168 (*) : -1--------0-0-----
168     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
169     : --1--------00-----
169     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
170     : 1--------0--0-----
170     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
171     : -1-----0----0-----
171     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
172     : --1-----0---0-----
172     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
173     : 1-----0-----0-----
173     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
174     : -1--------0--0----
174     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
175     : --1--------0-0----
175     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
176     : 1--------0---0----
176     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
177     : -1--0--------0----
177     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
178     : --1--0-------0----
178     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
179     : 1--0---------0----
179     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
180     : -1-----0------0---
180     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
181     : --1-----0-----0---
181     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
182     : 1-----0-------0---
182     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
183     : -1--0---------0---
183     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
184     : --1--0--------0---
184     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
185     : 1--0----------0---
185     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. vote(NODE0,VALUE0) | ~decided(VALUE0) | voted(NODE1) | NODE0 = NODE1


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
186 (*) : -1----------0----0
186     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
187     : --1---------0----0
187     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
188     : 1-----------0----0
188     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
189     : -1-----------0--0-
189     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
190     : --1----------0--0-
190     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
191     : 1------------0--0-
191     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
192     : -1------------00--
192     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
193     : --1-----------00--
193     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
194     : 1-------------00--
194     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node0)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node0)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~member(NODE0,QUORUM0)', 'voting_quorum ~= QUORUM0', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | voted(NODE0)


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
195 (*) : -1----------0--1--
195     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
196     : --1---------0--1--
196     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
197     : 1-----------0--1--
197     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
198     : -1----------0---1-
198     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
199     : --1---------0---1-
199     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
200     : 1-----------0---1-
200     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
201     : -1-----------0-1--
201     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
202     : --1----------0-1--
202     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
203     : 1------------0-1--
203     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
204     : -1-----------0---1
204     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
205     : --1----------0---1
205     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
206     : 1------------0---1
206     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
207     : -1------------0-1-
207     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
208     : --1-----------0-1-
208     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
209     : 1-------------0-1-
209     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
210     : -1------------0--1
210     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
211     : --1-----------0--1
211     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
212     : 1-------------0--1
212     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node0)', 'voting_quorum = quorum__node0_node1', 'member(node0,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$member$0$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$voted$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node0)', 'voting_quorum = quorum__node0_node1', 'member(node0,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$voted$0': [node$0$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$voted$0': node$0$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', 'decided(VALUE0)', 'voting_quorum = QUORUM0', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | voted(NODE0)


=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
213 (*) : -1--------0----0--
213     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
214     : --1--------0---0--
214     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
215     : 1--------0-----0--
215     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
216     : -1-----0--------0-
216     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
217     : --1-----0-------0-
217     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
218     : 1-----0---------0-
218     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
219     : -1--0------------0
219     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
220     : --1--0-----------0
220     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
221     : 1--0-------------0
221     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node2,value1)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node2,value1)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~member(NODE0,QUORUM0)', 'voting_quorum ~= QUORUM0']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0


=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
222 (*) : -1--------0------1
222     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
223     : --1--------0-----1
223     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
224     : 1--------0-------1
224     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
225     : -1-----0---------1
225     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
226     : --1-----0--------1
226     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
227     : 1-----0----------1
227     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
228     : -1--------0-----1-
228     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
229     : --1--------0----1-
229     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
230     : 1--------0------1-
230     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
231     : -1--0-----------1-
231     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
232     : --1--0----------1-
232     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
233     : 1--0------------1-
233     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
234     : -1-----0-------1--
234     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
235     : --1-----0------1--
235     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
236     : 1-----0--------1--
236     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
237     : -1--0----------1--
237     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
238     : --1--0---------1--
238     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
239     : 1--0-----------1--
239     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node2,value1)', 'voting_quorum = quorum__node1_node2', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$member$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node2,value1)', 'voting_quorum = quorum__node1_node2', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'member(NODE0,QUORUM0)', 'decided(VALUE0)', 'voting_quorum = QUORUM0']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
240 (*) : -1--0-----0-------
240     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
241     : --1--0-----0------
241     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
242     : 1--0-----0--------
242     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
243     : -1--0--0----------
243     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
244     : --1--0--0---------
244     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
245     : 1--0--0-----------
245     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
246     : -1-----0--0-------
246     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
247     : --1-----0--0------
247     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
248     : 1-----0--0--------
248     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', '~vote(NODE1,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
268 (*) : --1---------0-0---
268     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
269     : -1----------0-0---
269     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
270     : 1-----------0-0---
270     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
271     : --1---------00----
271     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
272     : -1----------00----
272     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
273     : 1-----------00----
273     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
274     : --1----------00---
274     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
275     : -1-----------00---
275     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
276     : 1------------00---
276     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~voted(node0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~voted(node0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE1)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. ~decided(VALUE0) | voted(NODE1) | voted(NODE0) | NODE0 = NODE1


=====================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

=====================================================================================================================


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
3 (*) : ------1------0----
3     : ['vote(node1,value0)', '~voted(node1)']
4     : -------1-----0----
4     : ['vote(node1,value1)', '~voted(node1)']
5     : --------1----0----
5     : ['vote(node1,value2)', '~voted(node1)']
6     : ---------1----0---
6     : ['vote(node2,value0)', '~voted(node2)']
7     : ----------1---0---
7     : ['vote(node2,value1)', '~voted(node2)']
8     : -----------1--0---
8     : ['vote(node2,value2)', '~voted(node2)']
9     : ---1--------0-----
9     : ['vote(node0,value0)', '~voted(node0)']
10     : ----1-------0-----
10     : ['vote(node0,value1)', '~voted(node0)']
11     : -----1------0-----
11     : ['vote(node0,value2)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 3 =====================
size : 9
num_suborbits: 1
15 (*) : ----11------------
15     : ['vote(node0,value1)', 'vote(node0,value2)']
16     : ---1-1------------
16     : ['vote(node0,value0)', 'vote(node0,value2)']
17     : ---11-------------
17     : ['vote(node0,value0)', 'vote(node0,value1)']
18     : -------11---------
18     : ['vote(node1,value1)', 'vote(node1,value2)']
19     : ------1-1---------
19     : ['vote(node1,value0)', 'vote(node1,value2)']
20     : ------11----------
20     : ['vote(node1,value0)', 'vote(node1,value1)']
21     : ----------11------
21     : ['vote(node2,value1)', 'vote(node2,value2)']
22     : ---------1-1------
22     : ['vote(node2,value0)', 'vote(node2,value2)']
23     : ---------11-------
23     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---000------1-----
277     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---------000--1---
279     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))
qcost : 4




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
12 (*) : 1-1---------------
12     : ['decided(value0)', 'decided(value2)']
13     : 11----------------
13     : ['decided(value0)', 'decided(value1)']
14     : -11---------------
14     : ['decided(value1)', 'decided(value2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 4 =====================
size : 36
num_suborbits: 1
24 (*) : -1--0------1------
24     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
25     : --1--0----1-------
25     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
26     : 1--0-------1------
26     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
27     : --1--0---1--------
27     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
28     : 1--0------1-------
28     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
29     : -1--0----1--------
29     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
30     : -1--0---1---------
30     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
31     : --1--0-1----------
31     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
32     : 1--0----1---------
32     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
33     : --1--01-----------
33     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
34     : 1--0---1----------
34     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
35     : -1--0-1-----------
35     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
36     : -1-----0---1------
36     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
37     : --1-----0-1-------
37     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
38     : 1-----0----1------
38     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
39     : --1-----01--------
39     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
40     : 1-----0---1-------
40     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
41     : -1-----0-1--------
41     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
42     : -1---1-0----------
42     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
43     : --1-1---0---------
43     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
44     : 1----10-----------
44     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
45     : --11----0---------
45     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
46     : 1---1-0-----------
46     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
47     : -1-1---0----------
47     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
48     : -1------1-0-------
48     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
49     : --1----1---0------
49     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
50     : 1-------10--------
50     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
51     : --1---1----0------
51     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
52     : 1------1-0--------
52     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
53     : -1----1---0-------
53     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
54     : -1---1----0-------
54     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
55     : --1-1------0------
55     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
56     : 1----1---0--------
56     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
57     : --11-------0------
57     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
58     : 1---1----0--------
58     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
59     : -1-1------0-------
59     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,NODE1,VALUE1. ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 5 =====================
size : 36
num_suborbits: 2
60 (*) : -1------1--1------
60     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
61     : --1----1--1-------
61     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
62     : 1-------1--1------
62     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
63     : --1---1--1--------
63     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
64     : 1------1--1-------
64     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
65     : -1----1--1--------
65     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
66     : -1---1-----1------
66     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
67     : --1-1-----1-------
67     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
68     : 1----1-----1------
68     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
69     : --11-----1--------
69     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
70     : 1---1-----1-------
70     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
71     : -1-1-----1--------
71     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
72     : -1---1--1---------
72     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
73     : --1-1--1----------
73     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
74     : 1----1--1---------
74     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
75     : --11--1-----------
75     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
76     : 1---1--1----------
76     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
77     : -1-1--1-----------
77     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
249 (*) : -1---1---1--------
249     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
250     : --1-1----1--------
250     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
251     : 1----1----1-------
251     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
252     : --11------1-------
252     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
253     : 1---1------1------
253     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
254     : -1-1-------1------
254     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
255     : -1---11-----------
255     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
256     : --1-1-1-----------
256     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
257     : 1----1-1----------
257     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
258     : --11---1----------
258     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
259     : 1---1---1---------
259     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
260     : -1-1----1---------
260     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
261     : -1------11--------
261     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
262     : --1----1-1--------
262     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
263     : 1-------1-1-------
263     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
264     : --1---1---1-------
264     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
265     : 1------1---1------
265     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
266     : -1----1----1------
266     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
num_forall :   5
num_exists :   0
num_literals : 10
quantified form : forall VALUE2,VALUE0,NODE1,VALUE1,NODE0. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | ~vote(NODE1,VALUE2) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE0 = VALUE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2))
qcost : 15




=== Prime Orbit 6 =====================
size : 36
num_suborbits: 1
78 (*) : -1---------10-----
78     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
79     : --1-------1-0-----
79     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
80     : 1----------10-----
80     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
81     : --1------1--0-----
81     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
82     : 1---------1-0-----
82     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
83     : -1-------1--0-----
83     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
84     : -1------1---0-----
84     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
85     : --1----1----0-----
85     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
86     : 1-------1---0-----
86     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
87     : --1---1-----0-----
87     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
88     : 1------1----0-----
88     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
89     : -1----1-----0-----
89     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
90     : -1---------1-0----
90     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
91     : --1-------1--0----
91     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
92     : 1----------1-0----
92     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
93     : --1------1---0----
93     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
94     : 1---------1--0----
94     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
95     : -1-------1---0----
95     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
96     : -1---1-------0----
96     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
97     : --1-1--------0----
97     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
98     : 1----1-------0----
98     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
99     : --11---------0----
99     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
100     : 1---1--------0----
100     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
101     : -1-1---------0----
101     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
102     : -1------1-----0---
102     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
103     : --1----1------0---
103     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
104     : 1-------1-----0---
104     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
105     : --1---1-------0---
105     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
106     : 1------1------0---
106     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
107     : -1----1-------0---
107     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
108     : -1---1--------0---
108     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
109     : --1-1---------0---
109     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
110     : 1----1--------0---
110     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
111     : --11----------0---
111     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
112     : 1---1---------0---
112     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
113     : -1-1----------0---
113     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,NODE1,VALUE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | voted(NODE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 7 =====================
size : 18
num_suborbits: 1
114 (*) : -1---------1---0--
114     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
115     : --1-------1----0--
115     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
116     : 1----------1---0--
116     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
117     : --1------1-----0--
117     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
118     : 1---------1----0--
118     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
119     : -1-------1-----0--
119     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
120     : -1------1-------0-
120     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
121     : --1----1--------0-
121     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
122     : 1-------1-------0-
122     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
123     : --1---1---------0-
123     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
124     : 1------1--------0-
124     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
125     : -1----1---------0-
125     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
126     : -1---1-----------0
126     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
127     : --1-1------------0
127     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
128     : 1----1-----------0
128     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
129     : --11-------------0
129     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
130     : 1---1------------0
130     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
131     : -1-1-------------0
131     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,QUORUM0,VALUE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 8 =====================
size : 36
num_suborbits: 1
132 (*) : -1---------1-----1
132     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
133     : --1-------1------1
133     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
134     : 1----------1-----1
134     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
135     : --1------1-------1
135     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
136     : 1---------1------1
136     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
137     : -1-------1-------1
137     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
138     : -1------1--------1
138     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
139     : --1----1---------1
139     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
140     : 1-------1--------1
140     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
141     : --1---1----------1
141     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
142     : 1------1---------1
142     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
143     : -1----1----------1
143     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
144     : -1---------1----1-
144     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
145     : --1-------1-----1-
145     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
146     : 1----------1----1-
146     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
147     : --1------1------1-
147     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
148     : 1---------1-----1-
148     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
149     : -1-------1------1-
149     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
150     : -1---1----------1-
150     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
151     : --1-1-----------1-
151     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
152     : 1----1----------1-
152     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
153     : --11------------1-
153     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
154     : 1---1-----------1-
154     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
155     : -1-1------------1-
155     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
156     : -1------1------1--
156     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
157     : --1----1-------1--
157     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
158     : 1-------1------1--
158     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
159     : --1---1--------1--
159     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
160     : 1------1-------1--
160     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
161     : -1----1--------1--
161     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
162     : -1---1---------1--
162     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
163     : --1-1----------1--
163     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
164     : 1----1---------1--
164     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
165     : --11-----------1--
165     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
166     : 1---1----------1--
166     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
167     : -1-1-----------1--
167     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,QUORUM0,VALUE1. ~vote(NODE0,VALUE1) | ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
168 (*) : -1--------0-0-----
168     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
169     : --1--------00-----
169     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
170     : 1--------0--0-----
170     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
171     : -1-----0----0-----
171     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
172     : --1-----0---0-----
172     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
173     : 1-----0-----0-----
173     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
174     : -1--------0--0----
174     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
175     : --1--------0-0----
175     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
176     : 1--------0---0----
176     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
177     : -1--0--------0----
177     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
178     : --1--0-------0----
178     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
179     : 1--0---------0----
179     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
180     : -1-----0------0---
180     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
181     : --1-----0-----0---
181     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
182     : 1-----0-------0---
182     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
183     : -1--0---------0---
183     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
184     : --1--0--------0---
184     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
185     : 1--0----------0---
185     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. vote(NODE0,VALUE0) | ~decided(VALUE0) | voted(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
186 (*) : -1----------0----0
186     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
187     : --1---------0----0
187     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
188     : 1-----------0----0
188     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
189     : -1-----------0--0-
189     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
190     : --1----------0--0-
190     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
191     : 1------------0--0-
191     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
192     : -1------------00--
192     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
193     : --1-----------00--
193     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
194     : 1-------------00--
194     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,QUORUM0. ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | voted(NODE0)
qcost : 7




=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
195 (*) : -1----------0--1--
195     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
196     : --1---------0--1--
196     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
197     : 1-----------0--1--
197     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
198     : -1----------0---1-
198     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
199     : --1---------0---1-
199     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
200     : 1-----------0---1-
200     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
201     : -1-----------0-1--
201     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
202     : --1----------0-1--
202     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
203     : 1------------0-1--
203     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
204     : -1-----------0---1
204     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
205     : --1----------0---1
205     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
206     : 1------------0---1
206     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
207     : -1------------0-1-
207     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
208     : --1-----------0-1-
208     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
209     : 1-------------0-1-
209     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
210     : -1------------0--1
210     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
211     : --1-----------0--1
211     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
212     : 1-------------0--1
212     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,QUORUM0. ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | voted(NODE0)
qcost : 7




=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
213 (*) : -1--------0----0--
213     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
214     : --1--------0---0--
214     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
215     : 1--------0-----0--
215     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
216     : -1-----0--------0-
216     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
217     : --1-----0-------0-
217     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
218     : 1-----0---------0-
218     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
219     : -1--0------------0
219     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
220     : --1--0-----------0
220     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
221     : 1--0-------------0
221     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0
qcost : 7




=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
222 (*) : -1--------0------1
222     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
223     : --1--------0-----1
223     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
224     : 1--------0-------1
224     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
225     : -1-----0---------1
225     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
226     : --1-----0--------1
226     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
227     : 1-----0----------1
227     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
228     : -1--------0-----1-
228     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
229     : --1--------0----1-
229     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
230     : 1--------0------1-
230     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
231     : -1--0-----------1-
231     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
232     : --1--0----------1-
232     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
233     : 1--0------------1-
233     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
234     : -1-----0-------1--
234     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
235     : --1-----0------1--
235     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
236     : 1-----0--------1--
236     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
237     : -1--0----------1--
237     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
238     : --1--0---------1--
238     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
239     : 1--0-----------1--
239     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0
qcost : 7




=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
240 (*) : -1--0-----0-------
240     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
241     : --1--0-----0------
241     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
242     : 1--0-----0--------
242     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
243     : -1--0--0----------
243     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
244     : --1--0--0---------
244     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
245     : 1--0--0-----------
245     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
246     : -1-----0--0-------
246     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
247     : --1-----0--0------
247     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
248     : 1-----0--0--------
248     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
268 (*) : --1---------0-0---
268     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
269     : -1----------0-0---
269     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
270     : 1-----------0-0---
270     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
271     : --1---------00----
271     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
272     : -1----------00----
272     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
273     : 1-----------00----
273     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
274     : --1----------00---
274     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
275     : -1-----------00---
275     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
276     : 1------------00---
276     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. ~decided(VALUE0) | voted(NODE1) | voted(NODE0) | NODE0 = NODE1
qcost : 7



[QRM NOTE]: Time elapsed since start: 0.392 seconds

[QRM NOTE]: Time elapsed since last: 0.194 seconds

[QRM NOTE]: Peak memory: 2123801 bytes


====================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

====================================================================================================


New level: 1
 pending : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
 solution : [1, 3, 17]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, 16777216), (15, -1), (16, 262144), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, 16777216), (15, -1), (16, 262144), (17, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
 solution : [1, 3, 17]


Solution : [1, 3, 17] has cost 14.


Decide in level 1 among pending : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]

Coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, 16777216), (15, -1), (16, 262144), (17, -1)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
 solution : [1, 3, 17, 2]


New level: 2
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
 solution : [1, 3, 17, 2]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
 solution : [1, 3, 17, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, 16777216), (15, -1), (16, 262144), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, 4194304), (13, 1048576), (14, 4194304), (15, -1), (16, 65536), (17, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
 solution : [1, 3, 17, 2]


Solution : [1, 3, 17, 2] has cost 19.


Decide in level 2 among pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, 4194304), (13, 1048576), (14, 4194304), (15, -1), (16, 65536), (17, -1)]

Decide 12 with phase True at level 2

After decision at level 2
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16]
 solution : [1, 3, 17, 2, 12]


New level: 3
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16]
 solution : [1, 3, 17, 2, 12]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16]
 solution : [1, 3, 17, 2, 12]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, 4194304), (13, 1048576), (14, 4194304), (15, -1), (16, 65536), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1)]

Covered at level 3 : {4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 12]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 12]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 12]


Solution : [1, 3, 17, 2, 12] has cost 26.


Before backtrack at level 3
 pending : []
 solution : [1, 3, 17, 2, 12]

After backtrack at level 3
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16]
 solution : [1, 3, 17, 2, 12]


Invert decision for 12 at level 2


New level: 3
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16]
 solution : [1, 3, 17, 2]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16]
 solution : [1, 3, 17, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, -1), (13, 1048576), (14, 4194304), (15, -1), (16, 65536), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16]
 solution : [1, 3, 17, 2]


Solution : [1, 3, 17, 2] has cost 19.


Decide in level 3 among pending : [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, -1), (13, 1048576), (14, 4194304), (15, -1), (16, 65536), (17, -1)]

Decide 14 with phase True at level 3

After decision at level 3
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 13, 16]
 solution : [1, 3, 17, 2, 14]


New level: 4
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 13, 16]
 solution : [1, 3, 17, 2, 14]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 13, 16]
 solution : [1, 3, 17, 2, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, -1), (13, 1048576), (14, 4194304), (15, -1), (16, 65536), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 0), (10, 2048), (11, 512), (12, -1), (13, 4096), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 4 : {4, 5, 6, 9, 16}

After reduction : 
 pending  : [7, 8, 10, 11, 13]
 solution : [1, 3, 17, 2, 14]


Before reduction : 
 pending  : [7, 8, 10, 11, 13]
 solution : [1, 3, 17, 2, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 0), (10, 2048), (11, 512), (12, -1), (13, 4096), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [7, 8, 10, 11, 13]
 solution : [1, 3, 17, 2, 14]


Solution : [1, 3, 17, 2, 14] has cost 26.


Decide in level 4 among pending : [7, 8, 10, 11, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [7, 8, 10, 11]
 solution : [1, 3, 17, 2, 14, 13]


New level: 5
 pending : [7, 8, 10, 11]
 solution : [1, 3, 17, 2, 14, 13]


Before reduction : 
 pending  : [7, 8, 10, 11]
 solution : [1, 3, 17, 2, 14, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {8, 10, 11, 7}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 14, 13]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 14, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 14, 13]


Solution : [1, 3, 17, 2, 14, 13] has cost 33.


Before backtrack at level 5
 pending : []
 solution : [1, 3, 17, 2, 14, 13]

After backtrack at level 5
 pending : [7, 8, 10, 11]
 solution : [1, 3, 17, 2, 14, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [7, 8, 10, 11]
 solution : [1, 3, 17, 2, 14]


Before reduction : 
 pending  : [7, 8, 10, 11]
 solution : [1, 3, 17, 2, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [7, 8, 10, 11]
 solution : [1, 3, 17, 2, 14]


Solution : [1, 3, 17, 2, 14] has cost 26.


Decide in level 5 among pending : [7, 8, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 7 with phase True at level 5

After decision at level 5
 pending : [8, 10, 11]
 solution : [1, 3, 17, 2, 14, 7]


New level: 6
 pending : [8, 10, 11]
 solution : [1, 3, 17, 2, 14, 7]


Before reduction : 
 pending  : [8, 10, 11]
 solution : [1, 3, 17, 2, 14, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {8}

After reduction : 
 pending  : [10, 11]
 solution : [1, 3, 17, 2, 14, 7]


Before reduction : 
 pending  : [10, 11]
 solution : [1, 3, 17, 2, 14, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11]
 solution : [1, 3, 17, 2, 14, 7]


Solution : [1, 3, 17, 2, 14, 7] has cost 35.


Before backtrack at level 6
 pending : [10, 11]
 solution : [1, 3, 17, 2, 14, 7]

After backtrack at level 6
 pending : [10, 11, 8]
 solution : [1, 3, 17, 2, 14, 7]


Invert decision for 7 at level 5


New level: 6
 pending : [10, 11, 8]
 solution : [1, 3, 17, 2, 14]


Before reduction : 
 pending  : [10, 11, 8]
 solution : [1, 3, 17, 2, 14]

Essensial at level 6 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11]
 solution : [1, 3, 17, 2, 14, 8]


Before reduction : 
 pending  : [10, 11]
 solution : [1, 3, 17, 2, 14, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11]
 solution : [1, 3, 17, 2, 14, 8]


Solution : [1, 3, 17, 2, 14, 8] has cost 35.


Before backtrack at level 6
 pending : [10, 11]
 solution : [1, 3, 17, 2, 14, 8]

After backtrack at level 6
 pending : [10, 11, 8]
 solution : [1, 3, 17, 2, 14]


Before backtrack at level 5
 pending : [10, 11, 8]
 solution : [1, 3, 17, 2, 14]

After backtrack at level 5
 pending : [10, 11, 8, 7]
 solution : [1, 3, 17, 2, 14]


Before backtrack at level 4
 pending : [10, 11, 8, 7]
 solution : [1, 3, 17, 2, 14]

After backtrack at level 4
 pending : [10, 11, 8, 7, 4, 5, 6, 9, 16, 13]
 solution : [1, 3, 17, 2, 14]


Invert decision for 14 at level 3


New level: 4
 pending : [10, 11, 8, 7, 4, 5, 6, 9, 16, 13]
 solution : [1, 3, 17, 2]


Before reduction : 
 pending  : [10, 11, 8, 7, 4, 5, 6, 9, 16, 13]
 solution : [1, 3, 17, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, -1), (13, 1048576), (14, -1), (15, -1), (16, 65536), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 11, 8, 7, 4, 5, 6, 9, 16, 13]
 solution : [1, 3, 17, 2]


Solution : [1, 3, 17, 2] has cost 19.


Decide in level 4 among pending : [10, 11, 8, 7, 4, 5, 6, 9, 16, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, -1), (13, 1048576), (14, -1), (15, -1), (16, 65536), (17, -1)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [10, 11, 8, 7, 4, 5, 6, 9, 16]
 solution : [1, 3, 17, 2, 13]


New level: 5
 pending : [10, 11, 8, 7, 4, 5, 6, 9, 16]
 solution : [1, 3, 17, 2, 13]


Before reduction : 
 pending  : [10, 11, 8, 7, 4, 5, 6, 9, 16]
 solution : [1, 3, 17, 2, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, -1), (13, 1048576), (14, -1), (15, -1), (16, 65536), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 5 : {4, 5, 6, 7, 8, 9, 10, 11, 16}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 13]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 13]


Solution : [1, 3, 17, 2, 13] has cost 26.


Before backtrack at level 5
 pending : []
 solution : [1, 3, 17, 2, 13]

After backtrack at level 5
 pending : [10, 11, 8, 7, 4, 5, 6, 9, 16]
 solution : [1, 3, 17, 2, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [10, 11, 8, 7, 4, 5, 6, 9, 16]
 solution : [1, 3, 17, 2]


Before reduction : 
 pending  : [10, 11, 8, 7, 4, 5, 6, 9, 16]
 solution : [1, 3, 17, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, -1), (13, -1), (14, -1), (15, -1), (16, 65536), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 11, 8, 7, 4, 5, 6, 9, 16]
 solution : [1, 3, 17, 2]


Solution : [1, 3, 17, 2] has cost 19.


Decide in level 5 among pending : [10, 11, 8, 7, 4, 5, 6, 9, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, -1), (13, -1), (14, -1), (15, -1), (16, 65536), (17, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [11, 8, 7, 4, 5, 6, 9, 16]
 solution : [1, 3, 17, 2, 10]


New level: 6
 pending : [11, 8, 7, 4, 5, 6, 9, 16]
 solution : [1, 3, 17, 2, 10]


Before reduction : 
 pending  : [11, 8, 7, 4, 5, 6, 9, 16]
 solution : [1, 3, 17, 2, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 65536), (7, 524288), (8, 131072), (9, 524288), (10, 524288), (11, 131072), (12, -1), (13, -1), (14, -1), (15, -1), (16, 65536), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 6 : {16, 11}

After reduction : 
 pending  : [8, 7, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10]


Before reduction : 
 pending  : [8, 7, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 7, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10]


Solution : [1, 3, 17, 2, 10] has cost 26.


Decide in level 6 among pending : [8, 7, 4, 5, 6, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 7 with phase True at level 6

After decision at level 6
 pending : [8, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10, 7]


New level: 7
 pending : [8, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10, 7]


Before reduction : 
 pending  : [8, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {4, 5, 6, 8, 9}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 10, 7]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 10, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 10, 7]


Solution : [1, 3, 17, 2, 10, 7] has cost 35.


Before backtrack at level 7
 pending : []
 solution : [1, 3, 17, 2, 10, 7]

After backtrack at level 7
 pending : [8, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10, 7]


Invert decision for 7 at level 6


New level: 7
 pending : [8, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10]


Before reduction : 
 pending  : [8, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10]

Essensial at level 7 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {9, 4, 5, 6}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 10, 8]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 10, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 10, 8]


Solution : [1, 3, 17, 2, 10, 8] has cost 35.


Before backtrack at level 7
 pending : []
 solution : [1, 3, 17, 2, 10, 8]

After backtrack at level 7
 pending : [8, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10]


Before backtrack at level 6
 pending : [8, 4, 5, 6, 9]
 solution : [1, 3, 17, 2, 10]

After backtrack at level 6
 pending : [8, 4, 5, 6, 9, 11, 16, 7]
 solution : [1, 3, 17, 2, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [8, 4, 5, 6, 9, 11, 16, 7]
 solution : [1, 3, 17, 2]


Before reduction : 
 pending  : [8, 4, 5, 6, 9, 11, 16, 7]
 solution : [1, 3, 17, 2]

Essensial at level 6 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 6 : {16}

After reduction : 
 pending  : [8, 4, 5, 6, 9, 7]
 solution : [1, 3, 17, 2, 11]


Before reduction : 
 pending  : [8, 4, 5, 6, 9, 7]
 solution : [1, 3, 17, 2, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 4, 5, 6, 9, 7]
 solution : [1, 3, 17, 2, 11]


Solution : [1, 3, 17, 2, 11] has cost 26.


Decide in level 6 among pending : [8, 4, 5, 6, 9, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [8, 5, 6, 9, 7]
 solution : [1, 3, 17, 2, 11, 4]


New level: 7
 pending : [8, 5, 6, 9, 7]
 solution : [1, 3, 17, 2, 11, 4]


Before reduction : 
 pending  : [8, 5, 6, 9, 7]
 solution : [1, 3, 17, 2, 11, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {9, 5, 6}

After reduction : 
 pending  : [8, 7]
 solution : [1, 3, 17, 2, 11, 4]


Before reduction : 
 pending  : [8, 7]
 solution : [1, 3, 17, 2, 11, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 7]
 solution : [1, 3, 17, 2, 11, 4]


Solution : [1, 3, 17, 2, 11, 4] has cost 35.


Before backtrack at level 7
 pending : [8, 7]
 solution : [1, 3, 17, 2, 11, 4]

After backtrack at level 7
 pending : [8, 7, 5, 6, 9]
 solution : [1, 3, 17, 2, 11, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [8, 7, 5, 6, 9]
 solution : [1, 3, 17, 2, 11]


Before reduction : 
 pending  : [8, 7, 5, 6, 9]
 solution : [1, 3, 17, 2, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 7, 5, 6, 9]
 solution : [1, 3, 17, 2, 11]


Solution : [1, 3, 17, 2, 11] has cost 26.


Decide in level 7 among pending : [8, 7, 5, 6, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 2, 11, 7]


New level: 8
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 2, 11, 7]


Before reduction : 
 pending  : [8, 5, 6, 9]
 solution : [1, 3, 17, 2, 11, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 81920), (6, 4096), (7, 524288), (8, 65536), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {8, 9, 5, 6}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 11, 7]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 11, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 11, 7]


Solution : [1, 3, 17, 2, 11, 7] has cost 35.


Before backtrack at level 8
 pending : []
 solution : [1, 3, 17, 2, 11, 7]

After backtrack at level 8
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 2, 11, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 2, 11]


Before reduction : 
 pending  : [8, 5, 6, 9]
 solution : [1, 3, 17, 2, 11]

Essensial at level 8 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {9, 5, 6}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 11, 8]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 11, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 2, 11, 8]


Solution : [1, 3, 17, 2, 11, 8] has cost 35.


Before backtrack at level 8
 pending : []
 solution : [1, 3, 17, 2, 11, 8]

After backtrack at level 8
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 2, 11]


Before backtrack at level 7
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 2, 11]

After backtrack at level 7
 pending : [8, 5, 6, 9, 7]
 solution : [1, 3, 17, 2, 11]


Before backtrack at level 6
 pending : [8, 5, 6, 9, 7]
 solution : [1, 3, 17, 2, 11]

After backtrack at level 6
 pending : [8, 5, 6, 9, 7, 11, 16, 4]
 solution : [1, 3, 17, 2]


Before backtrack at level 5
 pending : [8, 5, 6, 9, 7, 11, 16, 4]
 solution : [1, 3, 17, 2]

After backtrack at level 5
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10]
 solution : [1, 3, 17, 2]


Before backtrack at level 4
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10]
 solution : [1, 3, 17, 2]

After backtrack at level 4
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13]
 solution : [1, 3, 17, 2]


Before backtrack at level 3
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13]
 solution : [1, 3, 17, 2]

After backtrack at level 3
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 14]
 solution : [1, 3, 17, 2]


Before backtrack at level 2
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 14]
 solution : [1, 3, 17, 2]

After backtrack at level 2
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 14, 12]
 solution : [1, 3, 17, 2]


Invert decision for 2 at level 1


New level: 2
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 14, 12]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 14, 12]
 solution : [1, 3, 17]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, 16777216), (15, -1), (16, 262144), (17, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 14, 12]
 solution : [1, 3, 17]


Solution : [1, 3, 17] has cost 14.


Decide in level 2 among pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 14, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, 16777216), (15, -1), (16, 262144), (17, -1)]

Decide 14 with phase True at level 2

After decision at level 2
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 12]
 solution : [1, 3, 17, 14]


New level: 3
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 12]
 solution : [1, 3, 17, 14]


Before reduction : 
 pending  : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 12]
 solution : [1, 3, 17, 14]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, 16777216), (15, -1), (16, 262144), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 0), (10, 2048), (11, 512), (12, 16384), (13, 4096), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 3 : {4, 5, 6, 9, 16}

After reduction : 
 pending  : [8, 7, 11, 10, 13, 12]
 solution : [1, 3, 17, 14]


Before reduction : 
 pending  : [8, 7, 11, 10, 13, 12]
 solution : [1, 3, 17, 14]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 0), (10, 2048), (11, 512), (12, 16384), (13, 4096), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, 16384), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [8, 7, 11, 10, 13, 12]
 solution : [1, 3, 17, 14]


Solution : [1, 3, 17, 14] has cost 21.


Decide in level 3 among pending : [8, 7, 11, 10, 13, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, 16384), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 12 with phase True at level 3

After decision at level 3
 pending : [8, 7, 11, 10, 13]
 solution : [1, 3, 17, 14, 12]


New level: 4
 pending : [8, 7, 11, 10, 13]
 solution : [1, 3, 17, 14, 12]


Before reduction : 
 pending  : [8, 7, 11, 10, 13]
 solution : [1, 3, 17, 14, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, 16384), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : {7, 8, 10, 11, 13}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 14, 12]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 14, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 14, 12]


Solution : [1, 3, 17, 14, 12] has cost 28.


Before backtrack at level 4
 pending : []
 solution : [1, 3, 17, 14, 12]

After backtrack at level 4
 pending : [8, 7, 11, 10, 13]
 solution : [1, 3, 17, 14, 12]


Invert decision for 12 at level 3


New level: 4
 pending : [8, 7, 11, 10, 13]
 solution : [1, 3, 17, 14]


Before reduction : 
 pending  : [8, 7, 11, 10, 13]
 solution : [1, 3, 17, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [8, 7, 11, 10, 13]
 solution : [1, 3, 17, 14]


Solution : [1, 3, 17, 14] has cost 21.


Decide in level 4 among pending : [8, 7, 11, 10, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [8, 7, 11, 10]
 solution : [1, 3, 17, 14, 13]


New level: 5
 pending : [8, 7, 11, 10]
 solution : [1, 3, 17, 14, 13]


Before reduction : 
 pending  : [8, 7, 11, 10]
 solution : [1, 3, 17, 14, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {8, 10, 11, 7}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 14, 13]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 14, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 14, 13]


Solution : [1, 3, 17, 14, 13] has cost 28.


Before backtrack at level 5
 pending : []
 solution : [1, 3, 17, 14, 13]

After backtrack at level 5
 pending : [8, 7, 11, 10]
 solution : [1, 3, 17, 14, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [8, 7, 11, 10]
 solution : [1, 3, 17, 14]


Before reduction : 
 pending  : [8, 7, 11, 10]
 solution : [1, 3, 17, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [8, 7, 11, 10]
 solution : [1, 3, 17, 14]


Solution : [1, 3, 17, 14] has cost 21.


Decide in level 5 among pending : [8, 7, 11, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 7 with phase True at level 5

After decision at level 5
 pending : [8, 11, 10]
 solution : [1, 3, 17, 14, 7]


New level: 6
 pending : [8, 11, 10]
 solution : [1, 3, 17, 14, 7]


Before reduction : 
 pending  : [8, 11, 10]
 solution : [1, 3, 17, 14, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {8}

After reduction : 
 pending  : [11, 10]
 solution : [1, 3, 17, 14, 7]


Before reduction : 
 pending  : [11, 10]
 solution : [1, 3, 17, 14, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [11, 10]
 solution : [1, 3, 17, 14, 7]


Solution : [1, 3, 17, 14, 7] has cost 30.


Before backtrack at level 6
 pending : [11, 10]
 solution : [1, 3, 17, 14, 7]

After backtrack at level 6
 pending : [11, 10, 8]
 solution : [1, 3, 17, 14, 7]


Invert decision for 7 at level 5


New level: 6
 pending : [11, 10, 8]
 solution : [1, 3, 17, 14]


Before reduction : 
 pending  : [11, 10, 8]
 solution : [1, 3, 17, 14]

Essensial at level 6 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [11, 10]
 solution : [1, 3, 17, 14, 8]


Before reduction : 
 pending  : [11, 10]
 solution : [1, 3, 17, 14, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [11, 10]
 solution : [1, 3, 17, 14, 8]


Solution : [1, 3, 17, 14, 8] has cost 30.


Before backtrack at level 6
 pending : [11, 10]
 solution : [1, 3, 17, 14, 8]

After backtrack at level 6
 pending : [11, 10, 8]
 solution : [1, 3, 17, 14]


Before backtrack at level 5
 pending : [11, 10, 8]
 solution : [1, 3, 17, 14]

After backtrack at level 5
 pending : [11, 10, 8, 7]
 solution : [1, 3, 17, 14]


Before backtrack at level 4
 pending : [11, 10, 8, 7]
 solution : [1, 3, 17, 14]

After backtrack at level 4
 pending : [11, 10, 8, 7, 13]
 solution : [1, 3, 17, 14]


Before backtrack at level 3
 pending : [11, 10, 8, 7, 13]
 solution : [1, 3, 17, 14]

After backtrack at level 3
 pending : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4, 12]
 solution : [1, 3, 17, 14]


Invert decision for 14 at level 2


New level: 3
 pending : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4, 12]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4, 12]
 solution : [1, 3, 17]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, -1), (15, -1), (16, 262144), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4, 12]
 solution : [1, 3, 17]


Solution : [1, 3, 17] has cost 14.


Decide in level 3 among pending : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, -1), (15, -1), (16, 262144), (17, -1)]

Decide 12 with phase True at level 3

After decision at level 3
 pending : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 12]


New level: 4
 pending : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 12]


Before reduction : 
 pending  : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, 16777216), (13, 4194304), (14, -1), (15, -1), (16, 262144), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 4 : {4, 5, 6, 7, 8, 9, 10, 11, 13, 16}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 12]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 12]


Solution : [1, 3, 17, 12] has cost 21.


Before backtrack at level 4
 pending : []
 solution : [1, 3, 17, 12]

After backtrack at level 4
 pending : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 12]


Invert decision for 12 at level 3


New level: 4
 pending : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4]
 solution : [1, 3, 17]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, -1), (13, 4194304), (14, -1), (15, -1), (16, 262144), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4]
 solution : [1, 3, 17]


Solution : [1, 3, 17] has cost 14.


Decide in level 4 among pending : [11, 10, 8, 7, 13, 5, 6, 9, 16, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, -1), (13, 4194304), (14, -1), (15, -1), (16, 262144), (17, -1)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [11, 10, 8, 7, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 13]


New level: 5
 pending : [11, 10, 8, 7, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 13]


Before reduction : 
 pending  : [11, 10, 8, 7, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, -1), (13, 4194304), (14, -1), (15, -1), (16, 262144), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 5 : {4, 5, 6, 7, 8, 9, 10, 11, 16}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 13]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 13]


Solution : [1, 3, 17, 13] has cost 21.


Before backtrack at level 5
 pending : []
 solution : [1, 3, 17, 13]

After backtrack at level 5
 pending : [11, 10, 8, 7, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [11, 10, 8, 7, 5, 6, 9, 16, 4]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [11, 10, 8, 7, 5, 6, 9, 16, 4]
 solution : [1, 3, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, -1), (13, -1), (14, -1), (15, -1), (16, 262144), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [11, 10, 8, 7, 5, 6, 9, 16, 4]
 solution : [1, 3, 17]


Solution : [1, 3, 17] has cost 14.


Decide in level 5 among pending : [11, 10, 8, 7, 5, 6, 9, 16, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, -1), (13, -1), (14, -1), (15, -1), (16, 262144), (17, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [11, 8, 7, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 10]


New level: 6
 pending : [11, 8, 7, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 10]


Before reduction : 
 pending  : [11, 8, 7, 5, 6, 9, 16, 4]
 solution : [1, 3, 17, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 262144), (7, 2097152), (8, 524288), (9, 2097152), (10, 2097152), (11, 524288), (12, -1), (13, -1), (14, -1), (15, -1), (16, 262144), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 6 : {16, 11}

After reduction : 
 pending  : [8, 7, 5, 6, 9, 4]
 solution : [1, 3, 17, 10]


Before reduction : 
 pending  : [8, 7, 5, 6, 9, 4]
 solution : [1, 3, 17, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 7, 5, 6, 9, 4]
 solution : [1, 3, 17, 10]


Solution : [1, 3, 17, 10] has cost 21.


Decide in level 6 among pending : [8, 7, 5, 6, 9, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 7 with phase True at level 6

After decision at level 6
 pending : [8, 5, 6, 9, 4]
 solution : [1, 3, 17, 10, 7]


New level: 7
 pending : [8, 5, 6, 9, 4]
 solution : [1, 3, 17, 10, 7]


Before reduction : 
 pending  : [8, 5, 6, 9, 4]
 solution : [1, 3, 17, 10, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {4, 5, 6, 8, 9}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 7]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 7]


Solution : [1, 3, 17, 10, 7] has cost 30.


Before backtrack at level 7
 pending : []
 solution : [1, 3, 17, 10, 7]

After backtrack at level 7
 pending : [8, 5, 6, 9, 4]
 solution : [1, 3, 17, 10, 7]


Invert decision for 7 at level 6


New level: 7
 pending : [8, 5, 6, 9, 4]
 solution : [1, 3, 17, 10]


Before reduction : 
 pending  : [8, 5, 6, 9, 4]
 solution : [1, 3, 17, 10]

Essensial at level 7 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {9, 4, 5, 6}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 8]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 10, 8]


Solution : [1, 3, 17, 10, 8] has cost 30.


Before backtrack at level 7
 pending : []
 solution : [1, 3, 17, 10, 8]

After backtrack at level 7
 pending : [8, 5, 6, 9, 4]
 solution : [1, 3, 17, 10]


Before backtrack at level 6
 pending : [8, 5, 6, 9, 4]
 solution : [1, 3, 17, 10]

After backtrack at level 6
 pending : [8, 5, 6, 9, 4, 11, 16, 7]
 solution : [1, 3, 17, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [8, 5, 6, 9, 4, 11, 16, 7]
 solution : [1, 3, 17]


Before reduction : 
 pending  : [8, 5, 6, 9, 4, 11, 16, 7]
 solution : [1, 3, 17]

Essensial at level 6 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

Covered at level 6 : {16}

After reduction : 
 pending  : [8, 5, 6, 9, 4, 7]
 solution : [1, 3, 17, 11]


Before reduction : 
 pending  : [8, 5, 6, 9, 4, 7]
 solution : [1, 3, 17, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 5, 6, 9, 4, 7]
 solution : [1, 3, 17, 11]


Solution : [1, 3, 17, 11] has cost 21.


Decide in level 6 among pending : [8, 5, 6, 9, 4, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [8, 5, 6, 9, 7]
 solution : [1, 3, 17, 11, 4]


New level: 7
 pending : [8, 5, 6, 9, 7]
 solution : [1, 3, 17, 11, 4]


Before reduction : 
 pending  : [8, 5, 6, 9, 7]
 solution : [1, 3, 17, 11, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {9, 5, 6}

After reduction : 
 pending  : [8, 7]
 solution : [1, 3, 17, 11, 4]


Before reduction : 
 pending  : [8, 7]
 solution : [1, 3, 17, 11, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 7]
 solution : [1, 3, 17, 11, 4]


Solution : [1, 3, 17, 11, 4] has cost 30.


Before backtrack at level 7
 pending : [8, 7]
 solution : [1, 3, 17, 11, 4]

After backtrack at level 7
 pending : [8, 7, 5, 6, 9]
 solution : [1, 3, 17, 11, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [8, 7, 5, 6, 9]
 solution : [1, 3, 17, 11]


Before reduction : 
 pending  : [8, 7, 5, 6, 9]
 solution : [1, 3, 17, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 7, 5, 6, 9]
 solution : [1, 3, 17, 11]


Solution : [1, 3, 17, 11] has cost 21.


Decide in level 7 among pending : [8, 7, 5, 6, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 11, 7]


New level: 8
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 11, 7]


Before reduction : 
 pending  : [8, 5, 6, 9]
 solution : [1, 3, 17, 11, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 327680), (6, 16384), (7, 2097152), (8, 262144), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {8, 9, 5, 6}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 11, 7]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 11, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 11, 7]


Solution : [1, 3, 17, 11, 7] has cost 30.


Before backtrack at level 8
 pending : []
 solution : [1, 3, 17, 11, 7]

After backtrack at level 8
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 11, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 11]


Before reduction : 
 pending  : [8, 5, 6, 9]
 solution : [1, 3, 17, 11]

Essensial at level 8 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {9, 5, 6}

After reduction : 
 pending  : []
 solution : [1, 3, 17, 11, 8]


Before reduction : 
 pending  : []
 solution : [1, 3, 17, 11, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 17, 11, 8]


Solution : [1, 3, 17, 11, 8] has cost 30.


Before backtrack at level 8
 pending : []
 solution : [1, 3, 17, 11, 8]

After backtrack at level 8
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 11]


Before backtrack at level 7
 pending : [8, 5, 6, 9]
 solution : [1, 3, 17, 11]

After backtrack at level 7
 pending : [8, 5, 6, 9, 7]
 solution : [1, 3, 17, 11]


Before backtrack at level 6
 pending : [8, 5, 6, 9, 7]
 solution : [1, 3, 17, 11]

After backtrack at level 6
 pending : [8, 5, 6, 9, 7, 11, 16, 4]
 solution : [1, 3, 17]


Before backtrack at level 5
 pending : [8, 5, 6, 9, 7, 11, 16, 4]
 solution : [1, 3, 17]

After backtrack at level 5
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10]
 solution : [1, 3, 17]


Before backtrack at level 4
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10]
 solution : [1, 3, 17]

After backtrack at level 4
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13]
 solution : [1, 3, 17]


Before backtrack at level 3
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13]
 solution : [1, 3, 17]

After backtrack at level 3
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 12]
 solution : [1, 3, 17]


Before backtrack at level 2
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 12]
 solution : [1, 3, 17]

After backtrack at level 2
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 12, 14]
 solution : [1, 3, 17]


Before backtrack at level 1
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 12, 14]
 solution : [1, 3, 17]

After backtrack at level 1
 pending : [8, 5, 6, 9, 7, 11, 16, 4, 10, 13, 12, 14, 2]
 solution : [1, 3, 17]


===================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

===================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: total qcost: 21

[MIN NOTE]: maximum branch and bound depth: 8

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [1, 3, 17, 12] (length = 4)

invariant [invar_1] forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_3] forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_17] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_12] forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 # qcost: 7




Solution 1 : [1, 3, 17, 13] (length = 4)

invariant [invar_1] forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_3] forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_17] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_13] forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 # qcost: 7




[QRM NOTE]: Time elapsed since start: 0.542 seconds

[QRM NOTE]: Time elapsed since last: 0.150 seconds

[QRM NOTE]: Peak memory: 2098071 bytes


=======================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

=======================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_3
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_12

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_3 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_12 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_12 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_12 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_13

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_13 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_13 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_13 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS

[(R & P) & T & ~(R' & P')]: unsatisfiable

[Strengthening Assertion]: ((forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0)) & (forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1) & (forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))) & (forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0))

[QRM NOTE]: Time elapsed since start: 5.348 seconds

[QRM NOTE]: Time elapsed since last: 4.806 seconds

[QRM NOTE]: Peak memory: 1101674 bytes


******************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3

******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy -s node=4,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=4,value=3]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 23

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 144

[FW NOTE]: number of branching actions: 24

ivy_to_cpp target=qrm toy_consensus_forall.node_4_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_4_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_4_value_3.finite.cpp toy_consensus_forall.node_4_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_4_value_3.finite.o toy_consensus_forall.node_4_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.595 seconds

[QRM NOTE]: Time elapsed since last: 7.595 seconds

[QRM NOTE]: Peak memory: 1202466 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        1072

[FW NOTE]: number of dfs representative states:     23

[FW NOTE]: number of dfs non-representative states: 1049


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=4,value=3]

==================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: voting_quorum=('quorum',)
predicate: voted('node',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)', '(voting_quorum=quorum__node0_node1_node2)', '(voting_quorum=quorum__node0_node1_node3)', '(voting_quorum=quorum__node0_node2_node3)', '(voting_quorum=quorum__node1_node2_node3)']
representative states : 126391, 17952183, 154267063, 1232268727, 9830526391, 78550003127, 9847303607, 78567239095, 69951679927, 1249439159, 9847762359, 9981521335, 10015272375, 1232203191, 1248980407, 171044279, 1249045943, 10015075767, 1416818103, 1416752567, 154463671, 171240887, 18410935


=== State Orbit 0 =====================
size : 4
repr state: 00000000000000000000100
lex min decimal: 126391
states:
00000000000000000000100
00000000000000000000001
00000000000000000001000
00000000000000000000010




=== State Orbit 1 =====================
size : 36
repr state: 00010000000000010000100
lex min decimal: 17952183
states:
00000001000000001000001
00000000000001000010100
00000000000010000010100
00000000001000000100001
00000000010000000100010
00010000000000010000010
00000000001000000101000
00000001000000001000100
00000000100000001001000
00000100000000010001000
00000010000000001001000
00000001000000001001000
00000000000100000101000
00010000000000010001000
00000100000000010000100
00000000000100000100010
00000000001000000100010
00000000000001000010001
00000000100000001000100
00000100000000010000010
00000010000000001000100
00001000000000010000100
00001000000000010000010
00000000000010000010001
00000000100000001000001
00001000000000010001000
00010000000000010000100
00000000000000100010010
00000000000100000100001
00000010000000001000001
00000000000000100010100
00000000010000000100001
00000000000010000010010
00000000000001000010010
00000000000000100010001
00000000010000000101000




=== State Orbit 2 =====================
size : 36
repr state: 00010010000000011000100
lex min decimal: 154267063
states:
00000100000100010101000
00000000000100100110001
00000000010010000110010
00000000100000101010001
00001000001000010101000
00000000000100100110010
00001000000001010010100
00000001001000001100001
00000001001000001101000
00000100000000110010010
00010000010000010100010
00001000001000010100010
00010000010000010101000
00000010000010001010100
00000010010000001100001
00000000001001000110010
00000001000001001010100
00010000000010010010100
00000000001001000110001
00001001000000011001000
00001001000000011000100
00010010000000011001000
00010010000000011000100
00010000000010010010010
00000100000000110010100
00001000000001010010010
00000010000010001010001
00000000100100001101000
00000001000001001010001
00000000100100001100001
00000000100000101010100
00000100100000011001000
00000100000100010100010
00000100100000011000100
00000000010010000110001
00000010010000001101000




=== State Orbit 3 =====================
size : 36
repr state: 00010010010000011100100
lex min decimal: 1232268727
states:
00000000100100101110010
00001001001000011100010
00000000100100101111000
00000000100100101110100
00010010010000011100100
00000010010010001110010
00001001000001011011000
00010010010000011100001
00000100100100011100001
00001001000001011010010
00010000010010010110001
00000001001001001110010
00000100100000111010001
00000010010010001110100
00000100000100110110001
00000100000100110110100
00000100100000111010010
00010000010010010111000
00000100000100110111000
00010000010010010110100
00001001001000011100100
00001000001001010111000
00000001001001001110100
00000100100100011100010
00010010000010011010010
00000100100000111011000
00001000001001010110001
00001001000001011010001
00000100100100011100100
00001000001001010110100
00000001001001001111000
00010010010000011100010
00000010010010001111000
00010010000010011010001
00010010000010011011000
00001001001000011100001




=== State Orbit 4 =====================
size : 12
repr state: 00010010010010011110100
lex min decimal: 9830526391
states:
00000100100100111110001
00001001001001011110100
00001001001001011110001
00000100100100111110100
00001001001001011110010
00010010010010011110001
00010010010010011110100
00000100100100111110010
00000100100100111111000
00001001001001011111000
00010010010010011110010
00010010010010011111000




=== State Orbit 5 =====================
size : 12
repr state: 10010010010010011111000
lex min decimal: 78550003127
states:
10010010010010011111000
00100100100100111110100
01001001001001011110001
01001001001001011111000
00100100100100111111000
00100100100100111110001
10010010010010011110010
00100100100100111110010
01001001001001011110010
10010010010010011110001
01001001001001011110100
10010010010010011110100




=== State Orbit 6 =====================
size : 72
repr state: 00010010010001011110100
lex min decimal: 9847303607
states:
00001001001010011110100
00001010010010011110010
00000100101000111110010
00001001001010011110001
00001010010010011111000
00001001010001011110010
00000100100101011110100
00000100110000111110010
00000100100110011110010
00000110000100111111000
00001001010001011111000
00000110000100111110001
00001000100100111111000
00000110000100111110100
00010010001010011110001
00000100100101011110010
00000110010010011110100
00001001000101011110001
00000101001001011110100
00000110010010011110010
00000101000100111111000
00010010010001011110010
00000100101000111110001
00001010010010011110100
00010001010010011110001
00001000101001011110001
00000101000100111110001
00010001001001011110100
00000100110000111111000
00010001010010011110100
00000100100110011110001
00001001001000111110001
00000100100110011110100
00001000101001011110100
00010010010001011110100
00010000100100111110100
00010010010001011110001
00001001001000111110010
00010010010000111110001
00010000100100111110010
00001010001001011111000
00010001001001011110010
00010001001001011111000
00001001010001011110001
00001010001001011110100
00010000110010011111000
00010010001010011111000
00001001000101011110010
00001000101001011111000
00001001000101011111000
00010000110010011110100
00000100100101011110001
00010010000110011110010
00010000100100111111000
00010001010010011111000
00010000110010011110001
00010010010000111110010
00010010010000111110100
00000110010010011111000
00000101001001011111000
00001000100100111110100
00010010001010011110010
00000101000100111110100
00010010000110011111000
00001010001001011110001
00010010000110011110001
00000100110000111110001
00001000100100111110010
00001001001000111110100
00001001001010011110010
00000100101000111111000
00000101001001011110010




=== State Orbit 7 =====================
size : 24
repr state: 10010010010001011111000
lex min decimal: 78567239095
states:
10010000110010011110010
01001001000101011110100
00101000100100111110001
01000101001001011110001
01001001001000111111000
01001010001001011110010
10010010010001011111000
10010010010000111111000
10010010001010011110100
10000110010010011110001
01001001001010011111000
01010001001001011110001
00100110000100111110010
01001001010001011110100
00100100110000111110100
00100101000100111110010
00100100100101011111000
10010001010010011110010
10001010010010011110001
00100100100110011111000
10010010000110011110100
01001000101001011110010
00110000100100111110001
00100100101000111110100




=== State Orbit 8 =====================
size : 12
repr state: 10010010010000011101000
lex min decimal: 69951679927
states:
01000001001001001110001
00100100000100110110010
10000010010010001110001
10010010010000011101000
00100100100000111010100
01001001001000011101000
01001000001001010110010
10010000010010010110010
00100000100100101110001
01001001000001011010100
00100100100100011101000
10010010000010011010100




=== State Orbit 9 =====================
size : 72
repr state: 00010010001000011100100
lex min decimal: 1249439159
states:
00001000100100011100001
00010001001000011100001
00001000101000011100010
00000101000001011010001
00001000100001011010010
00000000110000101110100
00000010010000101111000
00001001000010011011000
00010000001001010110001
00000110000100011100010
00000100010000110110100
00000100001000110110100
00001010001000011100010
00000010000110001110100
00000001010010001110010
00001000001010010111000
00000101000000111010010
00001001000000111011000
00010000100000111010001
00000100101000011100100
00000010001010001110100
00001001000100011100100
00000110000000111010010
00000000100101001111000
00001010000001011010010
00001000000100110110001
00000000101000101110100
00000100001001010110001
00000010001001001110010
00010010000000111011000
00000100000101010111000
00000110000010011010001
00000000110010001110010
00000100100001011011000
00000000101001001110010
00001001010000011100100
00000000100110001111000
00001000001000110111000
00010001010000011100010
00000001010001001110100
00010010000100011100100
00010000010001010111000
00001000000101010110100
00001000010001010110100
00010000000110010110100
00000110010000011100001
00001000010010010110001
00010000010000110111000
00000100000110010111000
00010001000010011010010
00000001001010001111000
00010010000001011011000
00000001001000101111000
00010000000100110110001
00010000110000011100010
00000100010010010110001
00001010000010011010001
00000010000100101110010
00010010001000011100100
00000101000100011100010
00000100100010011011000
00000001000101001110100
00010000001010010110100
00001010010000011100001
00010000100100011100001
00010001000001011010001
00001000100000111010001
00000101001000011100001
00000010010001001111000
00000100110000011100100
00010000100010011010010
00000001000100101110010




=== State Orbit 10 =====================
size : 24
repr state: 00010010001010011110100
lex min decimal: 9847762359
states:
00001000101001011110010
00000101001001011110001
00010010010001011111000
00010010001010011110100
00010000100100111110001
00000101000100111110010
00000100100101011111000
00000110010010011110001
00000100100110011111000
00001001001000111111000
00001000100100111110001
00010000110010011110010
00001001010001011110100
00010001010010011110010
00000110000100111110010
00010001001001011110001
00001010010010011110001
00010010000110011110100
00000100110000111110100
00001001000101011110100
00000100101000111110100
00010010010000111111000
00001001001010011111000
00001010001001011110010




=== State Orbit 11 =====================
size : 72
repr state: 00010010001001011110100
lex min decimal: 9981521335
states:
00000101000101011110010
00010000100110011110001
00000100110010011110001
00010000100110011111000
00010001001010011111000
00000100110010011110100
00001010001010011110010
00001010010001011111000
00000110000110011111000
00010001010001011110001
00001000101000111110001
00001010001010011110100
00000100110010011110010
00000100101001011110001
00010000100110011110010
00000110010000111110010
00001010001010011111000
00010001010001011110010
00000101000101011110100
00000101001000111110001
00000110010000111110100
00001000101000111110100
00001001010010011110001
00000110010000111110001
00010010001001011110001
00010010000100111111000
00001001010010011110100
00010001001010011110001
00000100101001011111000
00001000100101011110100
00010010000100111110001
00001001010010011110010
00000100101001011110010
00001010010001011110010
00010010001001011110010
00001001000100111110100
00010000100110011110100
00000101001000111110010
00000101000101011110001
00001000100101011110001
00001001010010011111000
00001000100101011110010
00010001001010011110100
00010010001001011110100
00000110010000111111000
00001000101000111110010
00000101001000111110100
00010010000100111110100
00010001001010011110010
00010000110000111110001
00001000101000111111000
00001010010001011110001
00010010000100111110010
00010001010001011110100
00001001000100111110001
00001001000100111110010
00010000110000111110010
00010000110000111111000
00010010001001011111000
00001001000100111111000
00000101001000111111000
00000101000101011111000
00001010010001011110100
00001000100101011111000
00001010001010011110001
00000110000110011110001
00010000110000111110100
00010001010001011111000
00000110000110011110010
00000100101001011110100
00000100110010011111000
00000110000110011110100




=== State Orbit 12 =====================
size : 72
repr state: 00010010001000111110100
lex min decimal: 10015272375
states:
00001001010000111110100
00000100110001011110100
00001000101010011111000
00000110010001011111000
00010001001000111111000
00010000101000111110001
00000110001001011110001
00001001010000111111000
00001000100110011110001
00001000110001011110010
00010000101000111110100
00001000110010011110010
00010010000101011111000
00001000100110011111000
00001000101010011110010
00001010000110011110001
00001001000110011111000
00001010000100111110001
00000101010001011110100
00000110001001011110010
00001010001000111110010
00010000101010011110100
00000101010001011110001
00000101000110011111000
00010000110001011110010
00001001000110011110100
00001010000101011110100
00000101000110011110010
00010001010000111111000
00010001000110011110010
00000101010000111110100
00001010001000111111000
00000110001000111110100
00001000110000111110001
00001010010000111111000
00000101001010011111000
00001000110000111110100
00000101010010011110001
00010010000101011110100
00001010000110011110100
00010000101010011110010
00010001000100111110001
00000110000101011110010
00010001000100111110010
00010010001000111111000
00001000110001011110100
00000110001000111110010
00010000100101011110001
00000100101010011110100
00001010010000111110001
00000100110001011111000
00010000101001011110001
00010001010000111110010
00010000100101011111000
00010000101001011110010
00010001000101011110100
00001010000101011110010
00000101010010011110010
00000100101010011111000
00010010001000111110100
00010000110001011111000
00001010000100111110010
00000101010000111110010
00010001000101011110001
00010001001000111110001
00000110001010011110001
00000110001010011110100
00000101001010011110001
00000110000101011111000
00000110010001011110001
00001000110010011110001
00010001000110011110100




=== State Orbit 13 =====================
size : 12
repr state: 00010010000010011010100
lex min decimal: 1232203191
states:
00001000001001010110010
00010010010000011101000
00010010000010011010100
00000000100100101110001
00000001001001001110001
00000100000100110110010
00000100100100011101000
00001001001000011101000
00001001000001011010100
00000100100000111010100
00010000010010010110010
00000010010010001110001




=== State Orbit 14 =====================
size : 72
repr state: 00010010000001011010100
lex min decimal: 1248980407
states:
00001010000001011010100
00010001010000011101000
00000100010000110110010
00000100100001011010100
00000000101001001110001
00000101000000111010100
00000101001000011101000
00001000010010010110010
00000000101000101110001
00010010000001011010100
00000110010000011101000
00000100000110010110010
00000000100110001110001
00010000010001010110010
00010000001010010110010
00010001000001011010100
00001001010000011101000
00001000001000110110010
00010001000010011010100
00010000100000111010100
00000110000010011010100
00000000110000101110001
00010000100010011010100
00000000100101001110001
00000100001001010110010
00000010010001001110001
00001010001000011101000
00001010000010011010100
00000110000000111010100
00000100010010010110010
00000110000100011101000
00010010001000011101000
00000001001010001110001
00000010000110001110001
00001000100100011101000
00001001000000111010100
00001000001010010110010
00010001001000011101000
00001000101000011101000
00000100001000110110010
00000001010001001110001
00000010000100101110001
00010000100100011101000
00010000001001010110010
00010000010000110110010
00000001000101001110001
00000100100010011010100
00000010010000101110001
00001001000010011010100
00000101000001011010100
00000100110000011101000
00010010000000111010100
00001000100001011010100
00001000000100110110010
00000000110010001110001
00001010010000011101000
00000001000100101110001
00000001010010001110001
00000100101000011101000
00000001001000101110001
00001000100000111010100
00001000000101010110010
00001000010001010110010
00010000000110010110010
00010000110000011101000
00000010001001001110001
00010000000100110110010
00010010000100011101000
00000010001010001110001
00000101000100011101000
00001001000100011101000
00000100000101010110010




=== State Orbit 15 =====================
size : 72
repr state: 00010001000000011000100
lex min decimal: 171044279
states:
00001000000000110010010
00001000000100010100010
00000000100010001010001
00000001000010001010100
00001010000000011001000
00000110000000011001000
00000101000000011000100
00010000100000011000100
00001000010000010101000
00001000000010010010100
00000000100001001010100
00000100010000010100010
00010000001000010101000
00010001000000011000100
00001000000010010010010
00000010000000101010001
00000000010000100110010
00000000101000001101000
00000001000000101010001
00000001000000101010100
00000010000100001101000
00000000010001000110001
00000000000101000110001
00000000000110000110010
00000001000010001010001
00010000000000110010100
00000000010001000110010
00010000000001010010100
00000000010000100110001
00000000001010000110001
00000000000110000110001
00000000001000100110010
00000100001000010100010
00000101000000011001000
00000001010000001101000
00000001000100001101000
00000100000001010010010
00001000000000110010100
00000100000001010010100
00000000100010001010100
00000001010000001100001
00010001000000011001000
00000000001000100110001
00000110000000011000100
00010000000100010100010
00010000000100010101000
00010000000001010010010
00000000101000001100001
00001000010000010100010
00000000100001001010001
00000000110000001101000
00001000100000011000100
00010000000000110010010
00000100000010010010010
00000100001000010101000
00000100000010010010100
00000100010000010101000
00000010000100001100001
00000010000000101010100
00010000001000010100010
00000000001010000110010
00001010000000011000100
00010000100000011001000
00000010001000001101000
00000000110000001100001
00001000100000011001000
00000010000001001010100
00000000000101000110010
00000010000001001010001
00000001000100001100001
00000010001000001100001
00001000000100010101000




=== State Orbit 16 =====================
size : 144
repr state: 00010001010000011100100
lex min decimal: 1249045943
states:
00001010000001011010001
00010001000001011011000
00010000010001010110001
00000001010010001110100
00000000110010001110100
00001010000010011010010
00010000100000111011000
00010000100000111010010
00000001001010001110010
00010010001000011100001
00000001010010001111000
00000010010000101110100
00001000001000110110001
00001001000100011100010
00000001000100101111000
00000110000100011100001
00010010000000111010010
00000001001010001110100
00000110000010011011000
00010010000001011010010
00000100110000011100010
00010000100100011100100
00000100001000110110001
00010000001010010111000
00001000100000111010010
00000100000110010110100
00000001000101001110010
00010000000100110110100
00001000101000011100100
00001001000100011100001
00000100010010010111000
00001010010000011100010
00010000100010011010001
00000000101001001111000
00000000100101001110010
00001000010010010110100
00001001010000011100010
00000010010001001110010
00000001000101001111000
00000100100001011010001
00001000100100011100100
00010001010000011100001
00000000101000101110010
00001000100001011010001
00000110000000111011000
00001000100100011100010
00000100001001010111000
00000010001001001111000
00001010010000011100100
00001000100001011011000
00000000100101001110100
00000100000101010110001
00000110000000111010001
00001000010001010110001
00001010000001011011000
00000101000001011010010
00010010000000111010001
00000100000110010110001
00000001000100101110100
00000000101001001110100
00001000000101010110001
00001001000010011010010
00010001001000011100010
00000000100110001110100
00000010000100101110100
00001000101000011100001
00010000100100011100010
00001010001000011100100
00010000010000110110100
00000101000000111010001
00000101001000011100100
00010000010000110110001
00000010001010001110010
00010000000110010111000
00001001000000111010010
00000101000100011100100
00000000110010001111000
00010000000110010110001
00000101000001011011000
00010000001001010110100
00000000100110001110010
00010001010000011100100
00010000010001010110100
00010010001000011100010
00010000100010011011000
00001010000010011011000
00000000110000101111000
00000001001000101110010
00001000000101010111000
00010010000100011100001
00010001000010011011000
00000010000110001110010
00000110010000011100100
00001001000010011010001
00000110000010011010010
00000010000110001111000
00000101000000111011000
00000100100001011010010
00001001000000111010001
00000010010001001110100
00010000001001010111000
00001000100000111011000
00000100100010011010010
00000001001000101110100
00000010010000101110010
00000001010001001110010
00000001010001001111000
00000100000101010110100
00000000101000101111000
00001000010001010111000
00000100010000110111000
00010010000100011100010
00001000000100110111000
00001000001000110110100
00000101001000011100010
00010000001010010110001
00000100101000011100001
00001000010010010111000
00000100001001010110100
00000100110000011100001
00000000110000101110010
00001000001010010110001
00000101000100011100001
00000100010010010110100
00010000110000011100001
00010001001000011100100
00001000001010010110100
00000100100010011010001
00010000110000011100100
00010001000010011010001
00000100101000011100010
00000110010000011100010
00010000000100110111000
00001010001000011100001
00000010000100101111000
00010001000001011010010
00000100010000110110001
00001000000100110110100
00010010000001011010001
00000100001000110111000
00000010001010001111000
00000010001001001110100
00000110000100011100100
00001001010000011100001




=== State Orbit 17 =====================
size : 72
repr state: 00010001010000111110100
lex min decimal: 10015075767
states:
00000101000110011110100
00000101010000111111000
00000110001000111111000
00001010000100111111000
00010000101001011111000
00010001000100111110100
00001010000101011110001
00001000100110011110010
00010001000110011111000
00001010001000111110001
00010000100101011110010
00001010000100111110100
00001010010000111110010
00010000101000111110010
00000100101010011110001
00001010010000111110100
00001000110000111111000
00010001010000111110001
00000110001000111110001
00010000110001011110001
00001000110010011110100
00000110001001011111000
00000101000110011110001
00001010000110011110010
00000100110001011110010
00000110001010011110010
00001001000110011110001
00010010000101011110010
00001001010000111110001
00010001000100111111000
00000101010010011111000
00001010000101011111000
00000101001010011110100
00010010000101011110001
00010000101001011110100
00010001001000111110100
00000101010001011111000
00010000101000111111000
00001001000110011110010
00000101010001011110010
00000100110001011110001
00001001010000111110010
00010001010000111110100
00001000110001011110001
00001000101010011110001
00001000101010011110100
00001010000110011111000
00010001000101011110010
00000101010000111110001
00000101001010011110010
00001000100110011110100
00001000110000111110010
00000110000101011110001
00000110001001011110100
00001010001000111110100
00010010001000111110010
00000110010001011110100
00000110010001011110010
00010001001000111110010
00010000100101011110100
00000110000101011110100
00001000110010011111000
00010000101010011111000
00000101010010011110100
00010000101010011110001
00000100101010011110010
00000110001010011111000
00010001000101011111000
00010001000110011110001
00010010001000111110001
00001000110001011111000
00010000110001011110100




=== State Orbit 18 =====================
size : 72
repr state: 00010001000100011100100
lex min decimal: 1416818103
states:
00000101000010011010010
00000010000101001110100
00000110001000011100001
00010000101000011100001
00000101010000011100001
00001000010000110111000
00000010000101001110010
00000101010000011100100
00000001000110001111000
00000100001010010111000
00010000001000110110001
00000000110001001110010
00000110001000011100010
00010000101000011100010
00000001010000101110100
00010001000100011100001
00001000100010011010001
00010000001000110111000
00001000110000011100010
00001010000100011100001
00001000000110010111000
00000001010000101111000
00001010000000111011000
00001000010000110110100
00000110000001011011000
00000000101010001110100
00001010000100011100100
00000100010001010110100
00001000110000011100100
00000000101010001110010
00010001000000111010010
00000101010000011100010
00001010000000111010010
00010000100001011010001
00001000100010011011000
00000100010001010110001
00000010001000101110100
00000001000110001110100
00010000000101010110001
00000001000110001110010
00010001000100011100100
00010000100001011011000
00000110001000011100100
00000010000101001111000
00000110000001011010010
00010000001000110110100
00000100001010010110001
00001000100010011010010
00001010000000111010001
00000001010000101110010
00010001000000111011000
00010001000000111010001
00010000000101010111000
00001000010000110110001
00001000000110010110001
00000000101010001111000
00000010001000101111000
00000000110001001111000
00001000000110010110100
00001010000100011100010
00000000110001001110100
00000101000010011011000
00001000110000011100001
00000101000010011010001
00010000101000011100100
00010000100001011010010
00000010001000101110010
00000100001010010110100
00000110000001011010001
00000100010001010111000
00010000000101010110100
00010001000100011100010




=== State Orbit 19 =====================
size : 24
repr state: 00010001000000111010100
lex min decimal: 1416752567
states:
00010000101000011101000
00001000100010011010100
00010001000000111010100
00010001000100011101000
00000010000101001110001
00001000110000011101000
00001010000000111010100
00001000000110010110010
00000101000010011010100
00000110001000011101000
00000001000110001110001
00000101010000011101000
00010000100001011010100
00000000110001001110001
00010000000101010110010
00010000001000110110010
00000100010001010110010
00000110000001011010100
00001000010000110110010
00000100001010010110010
00000000101010001110001
00000001010000101110001
00000010001000101110001
00001010000100011101000




=== State Orbit 20 =====================
size : 36
repr state: 00010000010000010100100
lex min decimal: 154463671
states:
00000001001000001100010
00000000100100001100010
00010000000010010011000
00010000010000010100001
00000000000100100111000
00000000001001000110100
00000100100000011000001
00000100000100010100001
00010000010000010100100
00000010000010001010010
00001000000001010011000
00001001000000011000010
00001000001000010100100
00001000000001010010001
00000000001001000111000
00000010010000001100010
00001001000000011000001
00001000001000010100001
00000100000000110011000
00010010000000011000010
00000000100100001100100
00000000100000101011000
00000100100000011000010
00000100000100010100100
00000000010010000111000
00000001000001001011000
00000010000010001011000
00000010010000001100100
00000000010010000110100
00000100000000110010001
00010010000000011000001
00000001000001001010010
00010000000010010010001
00000000100000101010010
00000000000100100110100
00000001001000001100100




=== State Orbit 21 =====================
size : 72
repr state: 00010000001000010100100
lex min decimal: 171240887
states:
00001010000000011000010
00000100010000010100100
00000100000010010011000
00000000110000001100010
00000010001000001100010
00000000100010001011000
00000000101000001100100
00000010000100001100100
00010001000000011000001
00000100000001010011000
00000000010001000111000
00000100010000010100001
00000010000001001010010
00000000100001001011000
00000000000110000111000
00001000000010010010001
00000000000101000110100
00000000010000100110100
00000100000010010010001
00000101000000011000010
00000010000001001011000
00000001010000001100010
00010000001000010100100
00001000000000110011000
00000010000100001100010
00010000000000110011000
00000110000000011000001
00000001000100001100100
00000000100010001010010
00000010000000101010010
00000001000000101010010
00000000001000100110100
00000001000000101011000
00010000000100010100100
00001000100000011000010
00000001000100001100010
00000100001000010100001
00000000010001000110100
00000100001000010100100
00000000001010000111000
00001000000010010011000
00000000001000100111000
00010000000000110010001
00001000010000010100100
00000000110000001100100
00000000010000100111000
00000000100001001010010
00000000001010000110100
00001000010000010100001
00000010001000001100100
00000000000110000110100
00000000000101000111000
00010001000000011000010
00000001000010001011000
00010000100000011000010
00000101000000011000001
00010000000001010010001
00000001010000001100100
00001000000100010100100
00000000101000001100010
00010000000001010011000
00001000000000110010001
00010000100000011000001
00010000001000010100001
00001010000000011000001
00001000000100010100001
00010000000100010100001
00000001000010001010010
00000010000000101011000
00000100000001010010001
00000110000000011000010
00001000100000011000001




=== State Orbit 22 =====================
size : 12
repr state: 00000000010000000100100
lex min decimal: 18410935
states:
00000000000001000011000
00000000000100000100100
00010000000000010000001
00000000000000100011000
00000000000010000011000
00000001000000001000010
00001000000000010000001
00000000001000000100100
00000010000000001000010
00000000010000000100100
00000100000000010000001
00000000100000001000010



[QRM NOTE]: Time elapsed since start: 8.531 seconds

[QRM NOTE]: Time elapsed since last: 0.935 seconds

[QRM NOTE]: Peak memory: 1437399 bytes


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=4,value=3]

=======================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 9.654 seconds

[QRM NOTE]: Time elapsed since last: 1.123 seconds

[QRM NOTE]: Peak memory: 565292 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=4]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 22

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 144

[FW NOTE]: number of branching actions: 24

ivy_to_cpp target=qrm toy_consensus_forall.node_3_value_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_3_value_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_3_value_4.finite.cpp toy_consensus_forall.node_3_value_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_3_value_4.finite.o toy_consensus_forall.node_3_value_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.466 seconds

[QRM NOTE]: Time elapsed since last: 7.466 seconds

[QRM NOTE]: Peak memory: 1201707 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        435

[FW NOTE]: number of dfs representative states:     14

[FW NOTE]: number of dfs non-representative states: 421


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=4]

==================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voting_quorum=('quorum',)
predicate: vote('node', 'value')
predicate: voted('node',)
predicate: decided('value',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'decided(value2)', 'decided(value3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
representative states : 939, 39339, 570795, 8975275, 143193003, 9008043, 143227307, 134788011, 603563, 9009579, 9597867, 37803, 570283, 603051


=== State Orbit 0 =====================
size : 3
repr state: 0000000000000000000001
lex min decimal: 939
states:
0000000000000000000100
0000000000000000000010
0000000000000000000001




=== State Orbit 1 =====================
size : 12
repr state: 0000100000000000100001
lex min decimal: 39339
states:
0000001000000000100001
0000000010000000010010
0000000000010000010010
0000000000100000010010
0000000000001000001100
0000000000000010001100
0000000000000001001100
0000010000000000100001
0000000001000000010010
0000000100000000100001
0000100000000000100001
0000000000000100001100




=== State Orbit 2 =====================
size : 24
repr state: 0000100010000000110001
lex min decimal: 570795
states:
0000000000100010011100
0000001000000010101100
0000100000001000101100
0000001000100000110001
0000010001000000110010
0000000000100010011010
0000000100000001101100
0000100000001000101001
0000001000000010101001
0000100010000000110001
0000000010001000011010
0000000100010000110010
0000100010000000110010
0000010000000100101001
0000000001000100011100
0000000100000001101001
0000010000000100101100
0000000001000100011010
0000000100010000110001
0000010001000000110001
0000001000100000110010
0000000000010001011010
0000000010001000011100
0000000000010001011100




=== State Orbit 3 =====================
size : 12
repr state: 0000100010001000111001
lex min decimal: 8975275
states:
0000000100010001111001
0000100010001000111010
0000100010001000111100
0000001000100010111010
0000010001000100111001
0000010001000100111010
0000010001000100111100
0000001000100010111100
0000100010001000111001
0000000100010001111100
0000000100010001111010
0000001000100010111001




=== State Orbit 4 =====================
size : 12
repr state: 1000100010001000111100
lex min decimal: 143193003
states:
1000100010001000111100
0001000100010001111100
1000100010001000111010
0010001000100010111010
1000100010001000111001
0001000100010001111001
0100010001000100111100
0001000100010001111010
0010001000100010111001
0100010001000100111001
0010001000100010111100
0100010001000100111010




=== State Orbit 5 =====================
size : 72
repr state: 0000100010000100111001
lex min decimal: 9008043
states:
0000010001000001111010
0000010000100100111001
0000100000010001111010
0000010001000001111001
0000001000100001111001
0000010001000010111010
0000000110000001111100
0000001000100001111010
0000001000101000111010
0000100010000001111001
0000001001000010111001
0000001000010010111100
0000000100011000111001
0000001001000100111100
0000100000010001111100
0000100010000010111001
0000010010000100111001
0000001000100100111001
0000010001001000111010
0000001000100100111010
0000010000100010111010
0000001000010001111010
0000001010000010111100
0000000101000001111100
0000000110001000111010
0000000100100001111100
0000010001000010111001
0000010000100100111100
0000000110001000111100
0000100010000100111010
0000010000100010111100
0000100010000001111010
0000000100100001111001
0000100000101000111001
0000001001000100111010
0000000100100010111010
0000001010000010111001
0000100001001000111001
0000000101000001111001
0000000100010010111010
0000001010001000111010
0000001001000010111100
0000100010000010111010
0000000100011000111010
0000000100010010111001
0000000101000100111010
0000010000010001111100
0000000101000100111100
0000100000011000111100
0000000100010100111010
0000001000010001111100
0000100001000100111100
0000000100100010111100
0000010000010100111001
0000000110000001111001
0000100001000100111010
0000010010001000111010
0000010000010100111100
0000010001001000111001
0000100000011000111001
0000001000101000111001
0000000100010100111001
0000001010001000111100
0000100000100010111010
0000010010000100111100
0000010010001000111100
0000100000100010111100
0000010000010001111010
0000100001001000111100
0000001000010010111001
0000100000101000111100
0000100010000100111001




=== State Orbit 6 =====================
size : 36
repr state: 1000100010000100111100
lex min decimal: 143227307
states:
0001000101000001111010
0010001000101000111100
1000100000101000111010
0010000100100010111001
0001000110000001111010
0010001001000010111010
0100100001000100111001
0010010000100010111001
1000100010000001111100
0001100000010001111001
0100000101000100111001
0100010001000010111100
1000000110001000111001
0100010001001000111100
0001000100011000111100
0001000100100001111010
0100010001000001111100
1000010010001000111001
0001000100010100111100
1000100001001000111010
0001001000010001111001
0010001000010010111010
0010001000100100111100
0100010010000100111010
0010001010000010111010
0001000100010010111100
1000100010000100111100
0100010000010100111010
1000100000011000111010
0010001000100001111100
0100010000100100111010
0001010000010001111001
1000001010001000111001
1000100010000010111100
0010100000100010111001
0100001001000100111001




=== State Orbit 7 =====================
size : 12
repr state: 1000100010000000110100
lex min decimal: 134788011
states:
0100010000000100101010
1000100000001000101010
0001000100010000110100
0010000000100010011001
0100000001000100011001
0010001000000010101010
1000000010001000011001
1000100010000000110100
0100010001000000110100
0001000000010001011001
0001000100000001101010
0010001000100000110100




=== State Orbit 8 =====================
size : 72
repr state: 0000100001000000110001
lex min decimal: 603563
states:
0000001000010000110010
0000010000000010101100
0000100000000010101100
0000000100000010101100
0000000000100100011100
0000000000010100011010
0000001000000001101001
0000000100100000110001
0000000001001000011010
0000100000000100101001
0000100000100000110001
0000001000010000110001
0000000010000001011010
0000000001000010011100
0000010000010000110010
0000000000011000011100
0000000000010100011100
0000100000010000110001
0000000110000000110010
0000000010000100011010
0000000000100100011010
0000000000100001011010
0000000001000010011010
0000000000101000011100
0000001001000000110001
0000000100000010101001
0000100001000000110010
0000000010000010011010
0000100000010000110010
0000000101000000110010
0000010000100000110010
0000000000010010011010
0000001000000100101001
0000000100000100101100
0000010000000001101100
0000000100000100101001
0000000010000001011100
0000000100001000101001
0000000001001000011100
0000000000100001011100
0000001001000000110010
0000010000010000110001
0000001000000100101100
0000010000000001101001
0000010000001000101100
0000000010000100011100
0000100000100000110010
0000000000011000011010
0000000101000000110001
0000100000000100101100
0000000100100000110010
0000001000001000101001
0000000001000001011010
0000100000000010101001
0000100001000000110001
0000010000100000110001
0000100000000001101100
0000000000010010011100
0000000000101000011010
0000010010000000110010
0000000001000001011100
0000000110000000110001
0000000100001000101100
0000001010000000110010
0000001010000000110001
0000010010000000110001
0000100000000001101001
0000001000000001101100
0000010000001000101001
0000010000000010101001
0000001000001000101100
0000000010000010011100




=== State Orbit 9 =====================
size : 36
repr state: 0000100001000100111001
lex min decimal: 9009579
states:
0000010001000010111100
0000000100010010111100
0000010010000100111010
0000000100011000111100
0000001001000100111001
0000001001000010111010
0000100010000001111100
0000000100010100111100
0000100001000100111001
0000100000010001111001
0000000101000001111010
0000010000100100111010
0000010001000001111100
0000000110001000111001
0000000101000100111001
0000001010000010111010
0000001010001000111001
0000001000100100111100
0000010001001000111100
0000100010000010111100
0000010000010001111001
0000001000100001111100
0000010000010100111010
0000100010000100111100
0000001000010001111001
0000010000100010111001
0000100000011000111010
0000100001001000111010
0000001000101000111100
0000010010001000111001
0000000110000001111010
0000000100100001111010
0000001000010010111010
0000000100100010111001
0000100000100010111001
0000100000101000111010




=== State Orbit 10 =====================
size : 72
repr state: 0000100001000010111001
lex min decimal: 9597867
states:
0000000100100100111100
0000001010000100111100
0000000101000010111010
0000010010000010111001
0000100000100001111100
0000001001001000111100
0000010000011000111010
0000100001000010111010
0000010010000010111100
0000100000100100111001
0000001001000001111100
0000010000010010111001
0000010000011000111100
0000000101001000111001
0000001000011000111010
0000001010000001111001
0000001010000001111010
0000100001000001111010
0000001001001000111010
0000000110000010111010
0000000100100100111010
0000100000010100111010
0000100001000010111100
0000010000100001111001
0000000110000100111001
0000000101001000111100
0000100000100100111100
0000010000101000111001
0000000110000010111001
0000100000010100111100
0000010000010010111100
0000001010000100111010
0000100000010100111001
0000001001000001111001
0000000101000010111100
0000100001000001111001
0000010010000010111010
0000001000010100111010
0000001000011000111100
0000000100101000111010
0000100001000010111001
0000001001001000111001
0000010000011000111001
0000010010000001111010
0000000101001000111010
0000001000010100111100
0000001000011000111001
0000010000101000111010
0000000110000100111100
0000100000100001111001
0000100001000001111100
0000010010000001111100
0000000110000010111100
0000000110000100111010
0000010010000001111001
0000100000100001111010
0000001000010100111001
0000000100100100111001
0000100000100100111010
0000010000010010111010
0000010000101000111100
0000000100101000111100
0000001001000001111010
0000100000010010111100
0000001010000001111100
0000010000100001111100
0000010000100001111010
0000001010000100111001
0000100000010010111001
0000000100101000111001
0000100000010010111010
0000000101000010111001




=== State Orbit 11 =====================
size : 24
repr state: 0000000010000000010001
lex min decimal: 37803
states:
0000000010000000010001
0000010000000000100010
0000000100000000100010
0000000000000001001001
0000001000000000100010
0000000001000000010001
0000000100000000100100
0000010000000000100100
0000001000000000100100
0000000000100000010100
0000100000000000100100
0000000000000100001010
0000000000000010001001
0000000000001000001001
0000000000000010001010
0000100000000000100010
0000000000000100001001
0000000000010000010001
0000000010000000010100
0000000000000001001010
0000000000100000010001
0000000000001000001010
0000000001000000010100
0000000000010000010100




=== State Orbit 12 =====================
size : 12
repr state: 0000000010001000011001
lex min decimal: 570283
states:
0000000010001000011001
0000000100000001101010
0000010001000000110100
0000000001000100011001
0000010000000100101010
0000100000001000101010
0000001000000010101010
0000000000100010011001
0000000000010001011001
0000100010000000110100
0000001000100000110100
0000000100010000110100




=== State Orbit 13 =====================
size : 36
repr state: 0000000010000100011001
lex min decimal: 603051
states:
0000100000100000110100
0000000001000001011001
0000000000101000011001
0000100000000010101010
0000100001000000110100
0000000010000100011001
0000000010000010011001
0000000101000000110100
0000010000100000110100
0000000100000010101010
0000001001000000110100
0000001000000100101010
0000000010000001011001
0000000110000000110100
0000000100001000101010
0000000100100000110100
0000100000000100101010
0000001000010000110100
0000010000000001101010
0000000000010010011001
0000000000100100011001
0000000001000010011001
0000000000100001011001
0000010000000010101010
0000010000001000101010
0000000100000100101010
0000010010000000110100
0000100000000001101010
0000000000011000011001
0000001000000001101010
0000000001001000011001
0000010000010000110100
0000001010000000110100
0000100000010000110100
0000001000001000101010
0000000000010100011001



[QRM NOTE]: Time elapsed since start: 8.032 seconds

[QRM NOTE]: Time elapsed since last: 0.567 seconds

[QRM NOTE]: Peak memory: 1351721 bytes


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=4]

=======================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.693 seconds

[QRM NOTE]: Time elapsed since last: 0.660 seconds

[QRM NOTE]: Peak memory: 422037 bytes


******************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3

******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy -s node=4,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=4,value=3]

=======================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 1.085 seconds

[QRM NOTE]: Time elapsed since last: 1.085 seconds

[QRM NOTE]: Peak memory: 223986 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy -s node=3,value=4 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=4]

=======================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.693 seconds

[QRM NOTE]: Time elapsed since last: 0.693 seconds

[QRM NOTE]: Peak memory: 174493 bytes


******************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3

******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy -s node=5,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=5,value=3]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 33

[FW NOTE]: number of interpreted atoms (e.g. member,le): 50

[FW NOTE]: symmetric group order: 720

[FW NOTE]: number of branching actions: 45

ivy_to_cpp target=qrm toy_consensus_forall.node_5_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_5_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_5_value_3.finite.cpp toy_consensus_forall.node_5_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_5_value_3.finite.o toy_consensus_forall.node_5_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.530 seconds

[QRM NOTE]: Time elapsed since last: 7.530 seconds

[QRM NOTE]: Peak memory: 1265821 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 6

[FW NOTE]: number of total reachable states:        10720

[FW NOTE]: number of dfs representative states:     53

[FW NOTE]: number of dfs non-representative states: 10667


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=5,value=3]

==================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3', 'node4']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node1_node4', 'quorum__node0_node2_node3', 'quorum__node0_node2_node4', 'quorum__node0_node3_node4', 'quorum__node1_node2_node3', 'quorum__node1_node2_node4', 'quorum__node1_node3_node4', 'quorum__node2_node3_node4']
predicate: vote('node', 'value')
predicate: voted('node',)
predicate: decided('value',)
predicate: voting_quorum=('quorum',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node1_node4)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node0_node2_node4)': '1', 'member(node0,quorum__node0_node3_node4)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node0,quorum__node1_node2_node4)': '0', 'member(node0,quorum__node1_node3_node4)': '0', 'member(node0,quorum__node2_node3_node4)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node1_node4)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node0_node2_node4)': '0', 'member(node1,quorum__node0_node3_node4)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node1,quorum__node1_node2_node4)': '1', 'member(node1,quorum__node1_node3_node4)': '1', 'member(node1,quorum__node2_node3_node4)': '0', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node1_node4)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node0_node2_node4)': '1', 'member(node2,quorum__node0_node3_node4)': '0', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node1_node2_node4)': '1', 'member(node2,quorum__node1_node3_node4)': '0', 'member(node2,quorum__node2_node3_node4)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node1_node4)': '0', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node0_node2_node4)': '0', 'member(node3,quorum__node0_node3_node4)': '1', 'member(node3,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node1_node2_node4)': '0', 'member(node3,quorum__node1_node3_node4)': '1', 'member(node3,quorum__node2_node3_node4)': '1', 'member(node4,quorum__node0_node1_node2)': '0', 'member(node4,quorum__node0_node1_node3)': '0', 'member(node4,quorum__node0_node1_node4)': '1', 'member(node4,quorum__node0_node2_node3)': '0', 'member(node4,quorum__node0_node2_node4)': '1', 'member(node4,quorum__node0_node3_node4)': '1', 'member(node4,quorum__node1_node2_node3)': '0', 'member(node4,quorum__node1_node2_node4)': '1', 'member(node4,quorum__node1_node3_node4)': '1', 'member(node4,quorum__node2_node3_node4)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)', 'vote(node4,value0)', 'vote(node4,value1)', 'vote(node4,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)', 'voted(node4)', '(voting_quorum=quorum__node0_node1_node2)', '(voting_quorum=quorum__node0_node1_node3)', '(voting_quorum=quorum__node0_node1_node4)', '(voting_quorum=quorum__node0_node2_node3)', '(voting_quorum=quorum__node0_node2_node4)', '(voting_quorum=quorum__node0_node3_node4)', '(voting_quorum=quorum__node1_node2_node3)', '(voting_quorum=quorum__node1_node2_node4)', '(voting_quorum=quorum__node1_node3_node4)', '(voting_quorum=quorum__node2_node3_node4)']
representative states : 2235185384221879, 38048644837410172087, 335505770725697219767, 2701440309767395699895, 21600003512493264956599, 172734160819897018707127, 1381659980434526193413303, 172771054308044437810359, 1381696881803972960414903, 1230525806238623837023415, 21636897000640684059831, 173066202213223790636215, 1381992597162705361923255, 173139989189518628842679, 1382066384139000200129719, 1230562707608070604025015, 1211627116935108401392823, 2738477913102890658999, 21636951043836212505783, 172771062189343785708727, 173066205590923511164087, 173139992567218349370551, 21932062920218546367671, 175501173556853358292151, 22005849896513384574135, 175501180312252799347895, 2701298446379133529271, 21599986623994662317239, 21636880112142081420471, 2738191934526552632503, 21932028017321434246327, 22005814993616272452791, 372399258873116322999, 2738333797914814803127, 21932044905820036885687, 173066777548076187217079, 175501172430953451449527, 22005831882114875092151, 3107268679389005835447, 22006390328468669033655, 173140564524371025423543, 2738198689925993688247, 21636887993441429318839, 22005818371315992980663, 3107126816000743664823, 335502393025976691895, 2701297320479226686647, 2738190808626645789879, 372395881173395795127, 3107125690100836822199, 38056526136758070455, 336077727878373272759, 372971216025792375991


=== State Orbit 0 =====================
size : 10
repr state: 000000000000000000000000000010000
lex min decimal: 2235185384221879
states:
000000000000000000000000000000010
000000000000000000000000000100000
000000000000000000000000001000000
000000000000000000000000010000000
000000000000000000000000100000000
000000000000000000000001000000000
000000000000000000000000000000100
000000000000000000000000000001000
000000000000000000000000000000001
000000000000000000000000000010000




=== State Orbit 1 =====================
size : 90
repr state: 000100000000000000100000000010000
lex min decimal: 38048644837410172087
states:
000100000000000000100001000000000
000000001000000000010000000000100
000001000000000000100000000100000
000000000001000000001000000001000
000000000010000000001000001000000
000000000000001000000100000001000
000000000010000000001000000000001
000000000000100000000100000000010
000000010000000000010000010000000
000000000000100000000100000010000
000000000000000100000010000100000
000100000000000000100000001000000
000000100000000000010000100000000
000000000000100000000100000001000
000001000000000000100000000010000
000000000100000000001001000000000
000000000001000000001001000000000
000000001000000000010001000000000
000000000000000001000010000010000
000000000000001000000100001000000
000010000000000000100000001000000
000000000000001000000100000000010
000000000000100000000100001000000
000000000000010000000100000001000
000000100000000000010000000001000
000000000100000000001000000000001
000000000000000001000010000000001
000000000000010000000100001000000
000000001000000000010000000001000
000010000000000000100000000100000
000000000000100000000100000000001
000000000010000000001000000001000
000000000000010000000100000010000
000010000000000000100000000010000
000000000000001000000100100000000
000000000000000001000010000000100
000000000000000010000010010000000
000000100000000000010001000000000
000000001000000000010000100000000
000000001000000000010000000000010
000000100000000000010000000000100
000001000000000000100000001000000
000001000000000000100001000000000
000000000000000001000010000000010
000000000000000100000010010000000
000000010000000000010000000000100
000000000000000010000010000000010
000000000010000000001000000100000
000000001000000000010000010000000
000000000010000000001000000000100
000000000001000000001000000000001
000000000000000100000010000000100
000100000000000000100000100000000
000000010000000000010000000000010
000000010000000000010001000000000
000000010000000000010000100000000
000000000000010000000100000000010
000000000000000010000010000000001
000000000000010000000100000000001
000000000000001000000100000000001
000010000000000000100000100000000
000000000001000000001000000100000
000000100000000000010000000000010
000000000010000000001001000000000
000000000100000000001000000100000
000010000000000000100000010000000
000000000000000001000010000100000
000000010000000000010000000001000
000000000000000001000010010000000
000000100000000000010000010000000
000000000100000000001000000000100
000000000001000000001000001000000
000000000000000100000010000000001
000100000000000000100000000010000
000001000000000000100000100000000
000000000100000000001000000001000
000000000000000100000010000010000
000010000000000000100001000000000
000000000000100000000100100000000
000100000000000000100000010000000
000001000000000000100000010000000
000000000000010000000100100000000
000000000000000100000010000000010
000000000000000010000010000010000
000000000001000000001000000000100
000000000000000010000010000000100
000000000000001000000100000010000
000000000000000010000010000100000
000000000100000000001000001000000
000100000000000000100000000100000




=== State Orbit 2 =====================
size : 180
repr state: 000100100000000000110000000010000
lex min decimal: 335505770725697219767
states:
000000100000100000010100000000100
000000100000100000010101000000000
000001000000000001100011000000000
000100000000100000100101000000000
000000000001000001001010000001000
000000000100000100001011000000000
000100000000000100100010000000001
000000010000000010010010000010000
000000010010000000011000000000001
000000010000010000010100000000100
000000000000100100000110000000100
000000100000100000010100001000000
000000000100100000001100000000010
000001000000000001100010100000000
000000000001001000001100000100000
000010000000000010100011000000000
000100000000000100100010000000010
000000000100100000001100000000100
000010010000000000110000000000010
000100000000100000100100000000010
000100100000000000110000001000000
000000100000000100010010000001000
000000001001000000011000010000000
000000100000100000010100000000001
000100000100000000101000000010000
000000000000100100000110100000000
000000010010000000011000001000000
000000000100100000001100000010000
000000001000000001010010000000001
000000100000100000010100010000000
000000001000000001010010000010000
000000000100100000001100100000000
000000001000001000010101000000000
000010000000000010100010000000010
000000001000001000010100000010000
000000001000001000010100000000001
000001000000000001100010000000010
000100100000000000110000000000010
000000000000100100000110010000000
000000100100000000011000000000010
000100100000000000110000000001000
000000000001001000001100000010000
000000000010000010001010000001000
000010000000010000100100000001000
000100000000100000100100000100000
000000000000001001000110001000000
000000000000100100000110000100000
000000010010000000011000010000000
000010010000000000110000000100000
000001001000000000110000000000010
000000000010010000001100000100000
000010000010000000101000100000000
000100000000000100100010000000100
000001000000001000100100000001000
000000000000010010000110010000000
000100000000000100100010001000000
000010010000000000110000000010000
000000000010000010001010000000010
000100000000100000100100000001000
000001001000000000110000001000000
000001000001000000101000000000100
000000010010000000011000100000000
000001000000000001100010000000100
000000000100000100001010000010000
000001000000000001100010000000001
000001000001000000101000100000000
000010000000000010100010000000100
000000000000001001000110000000100
000000010000000010010010100000000
000000000001000001001010000010000
000000001000000001010010000001000
000000000000001001000110010000000
000000000100000100001010000000010
000100100000000000110000000100000
000001000000001000100100010000000
000100000100000000101000000001000
000100000100000000101000010000000
000000000010000010001011000000000
000100000000100000100100010000000
000000000100000100001010001000000
000000001000001000010100001000000
000000000001001000001100100000000
000001000000001000100101000000000
000010010000000000110000000000100
000000001000001000010100000000100
000000000001000001001011000000000
000010000000010000100101000000000
000010010000000000110000001000000
000000000010000010001010010000000
000000000001001000001100000000100
000000000001000001001010000000010
000100100000000000110000000000100
000010000010000000101000000010000
000100000000100000100100000000001
000000000010000010001010001000000
000000001001000000011000100000000
000001000001000000101000000010000
000001000000000001100010001000000
000010000000010000100100000000010
000000100100000000011000000100000
000000000001001000001100000000010
000000010000000010010011000000000
000000000010000010001010000010000
000000001001000000011000000000001
000001000001000000101000000001000
000000000010010000001100100000000
000000000010010000001101000000000
000100100000000000110000000010000
000010000000000010100010000000001
000010010000000000110000000001000
000001001000000000110000000100000
000000000001000001001010010000000
000001001000000000110000000000100
000000010000010000010101000000000
000000100000000100010010100000000
000010000010000000101000000001000
000000000100000100001010000001000
000000000000001001000110100000000
000000000100100000001101000000000
000000001000000001010010000100000
000000000000010010000110100000000
000100000100000000101000000000100
000001001000000000110000000001000
000000100000000100010011000000000
000000000000001001000110000100000
000000010000000010010010000000001
000010000000000010100010001000000
000000100000100000010100000010000
000010000010000000101000000000100
000000010000010000010100000000001
000000100100000000011000001000000
000001000001000000101000000000001
000100000100000000101000100000000
000000000000100100000110001000000
000000000000010010000110000001000
000000000010010000001100000000100
000000100100000000011000000000001
000000010000010000010100000010000
000001000000001000100100000000010
000000000000010010000110001000000
000010000000010000100100010000000
000000010010000000011000000100000
000000100000000100010010000000001
000000010000000010010010000100000
000000000100100000001100000100000
000010000000010000100100000100000
000100000100000000101000000000001
000001000000001000100100000100000
000000001001000000011000000100000
000001001000000000110000000010000
000000000000100100000110000001000
000000010010000000011000000000010
000000010000010000010100010000000
000000100000000100010010000010000
000000000001001000001101000000000
000100000000000100100010100000000
000010000000000010100010100000000
000000001000000001010010100000000
000010000010000000101000000000001
000000010000010000010100001000000
000001000001000000101000010000000
000000100100000000011000100000000
000000000100000100001010010000000
000000000000010010000110000000100
000010000000010000100100000000001
000000000000010010000110000100000
000000001000001000010100010000000
000000000001000001001010001000000
000000000010010000001100000010000
000000000010010000001100000000010
000000000000001001000110000001000
000000001001000000011000000000010
000001000000001000100100000000001
000000001000000001010011000000000
000000001001000000011000001000000
000100000000000100100011000000000
000000010000000010010010000001000
000010000010000000101000010000000
000000100000000100010010000100000
000000100100000000011000010000000




=== State Orbit 3 =====================
size : 90
repr state: 000100100100000000111000000010000
lex min decimal: 2701440309767395699895
states:
000100000000100100100110000001000
000001000000001001100111000000000
000100000000100100100111000000000
000000001001001000011100000100000
000001001000000001110010000001000
000001000001000001101010000000010
000001001001000000111000000000010
000000010010000010011010100000000
000000010000010010010110001000000
000000010000010010010110000100000
000010000000010010100111000000000
000010000010000010101010000001000
000000000010010010001110010000000
000000100000100100010110000100000
000000100000100100010110001000000
000100000100100000101100000000010
000000100100000100011010100000000
000100100000000100110010000000001
000001000001000001101010000001000
000000001001000001011010000010000
000000001001001000011100010000000
000100100100000000111000000000010
000010000010000010101010000000010
000000000100100100001111000000000
000100000000100100100110000000100
000000000010010010001111000000000
000010010010000000111000000000010
000100100000000100110010000001000
000000100100100000011100010000000
000001001001000000111000000010000
000000010010010000011100000010000
000000001000001001010110000100000
000010000010010000101100000000100
000100000100000100101010000000010
000000010010010000011100010000000
000001001000001000110100000000001
000010010000010000110100000000001
000001000000001001100110000001000
000000000001001001001111000000000
000001001000001000110100000000100
000010010000000010110010001000000
000001000001001000101100000000100
000001000001000001101010100000000
000010010010000000111000000010000
000000100100100000011100000100000
000010000010000010101010100000000
000100100000100000110100000000100
000001001001000000111000000000001
000001000000001001100110000000100
000100000100100000101100010000000
000001001000000001110010000000001
000010010000000010110010000000001
000100100000100000110100000000001
000000000100100100001110100000000
000000001001001000011100000010000
000000010000010010010111000000000
000010000000010010100110000001000
000000000001001001001110010000000
000001001000000001110010001000000
000010010000000010110010000001000
000001000001001000101100010000000
000100000100100000101100000000100
000000001000001001010110001000000
000100100100000000111000000010000
000100000100000100101010100000000
000000000100100100001110010000000
000000100100000100011010000010000
000001000001001000101100000000010
000000001001000001011010100000000
000000000010010010001110100000000
000000001001000001011010001000000
000000001000001001010111000000000
000010000000010010100110000000100
000000010010010000011100000100000
000010000010010000101100010000000
000100100100000000111000000000001
000100000100000100101010000001000
000000100100100000011100000010000
000100100000000100110010001000000
000000000001001001001110100000000
000010000010010000101100000000010
000000010010000010011010001000000
000010010000010000110100000100000
000100100000100000110100000100000
000001001000001000110100000100000
000000100000100100010111000000000
000000010010000010011010000010000
000010010000010000110100000000100
000010010010000000111000000000001
000000100100000100011010001000000




=== State Orbit 4 =====================
size : 90
repr state: 000100100100100000111100000010000
lex min decimal: 21600003512493264956599
states:
000001001000001001110110001000000
000100100100100000111100000000001
000010000010010010101110000001000
000010000010010010101110000000010
000100100100000100111010000000001
000001001001001000111100000000100
000100100000100100110110000001000
000010010010000010111010000000001
000000010010010010011110000010000
000000100100100100011110000100000
000010010010010000111100010000000
000001000001001001101110000000010
000010000010010010101110010000000
000001001000001001110111000000000
000100100100000100111010000001000
000010010000010010110110000000001
000100100000100100110110000000100
000100100100000100111010000000010
000000001001001001011110100000000
000001000001001001101110010000000
000100000100100100101110000001000
000000100100100100011110100000000
000010010000010010110110000001000
000100000100100100101110100000000
000100000100100100101110000000010
000010000010010010101111000000000
000010000010010010101110000000100
000010010010010000111100000000001
000001000001001001101110000001000
000010010010000010111010000010000
000000100100100100011110001000000
000000001001001001011110000100000
000000010010010010011111000000000
000000010010010010011110000100000
000100100000100100110110001000000
000010010010000010111010100000000
000010010000010010110110000000100
000100000100100100101110010000000
000100100000100100110110000100000
000100000100100100101110000000100
000001001001000001111010000001000
000100100100000100111010001000000
000000001001001001011110001000000
000010010010000010111010000000010
000000001001001001011110010000000
000001001001000001111010000010000
000010010010000010111010001000000
000010000010010010101110100000000
000001000001001001101110000000100
000100100100100000111100000100000
000001000001001001101111000000000
000001001001001000111100000000010
000001001001001000111100000000001
000001001001001000111100000100000
000010010010010000111100000010000
000100100100100000111100000000100
000000001001001001011110000010000
000010010000010010110111000000000
000001001001000001111010100000000
000100100000100100110110000000001
000001000001001001101110100000000
000100100100000100111010100000000
000100100000100100110111000000000
000000001001001001011111000000000
000001001000001001110110000000001
000000010010010010011110001000000
000010010010010000111100000000100
000100100100100000111100010000000
000100100100000100111010000010000
000001001000001001110110000100000
000001001001000001111010001000000
000010010010010000111100000100000
000001001000001001110110000000100
000100100100100000111100000000010
000000010010010010011110100000000
000001001001001000111100000010000
000010010000010010110110000100000
000001001001001000111100010000000
000100000100100100101111000000000
000010010010010000111100000000010
000100100100100000111100000010000
000001001001000001111010000000001
000010010000010010110110001000000
000000100100100100011111000000000
000010010010000010111010000001000
000000100100100100011110010000000
000000010010010010011110010000000
000001001001000001111010000000010
000001001000001001110110000001000
000000100100100100011110000010000




=== State Orbit 5 =====================
size : 30
repr state: 000100100100100100111110000010000
lex min decimal: 172734160819897018707127
states:
000100100100100100111110000100000
000010010010010010111111000000000
000001001001001001111110000010000
000100100100100100111111000000000
000001001001001001111110000001000
000010010010010010111110001000000
000100100100100100111110100000000
000010010010010010111110000000010
000001001001001001111110000100000
000001001001001001111111000000000
000100100100100100111110001000000
000010010010010010111110000001000
000100100100100100111110010000000
000100100100100100111110000000010
000001001001001001111110000000001
000100100100100100111110000010000
000001001001001001111110010000000
000010010010010010111110000000100
000100100100100100111110000000100
000100100100100100111110000001000
000100100100100100111110000000001
000001001001001001111110000000010
000010010010010010111110100000000
000010010010010010111110000000001
000010010010010010111110010000000
000001001001001001111110100000000
000010010010010010111110000010000
000001001001001001111110001000000
000001001001001001111110000000100
000010010010010010111110000100000




=== State Orbit 6 =====================
size : 30
repr state: 100100100100100100111111000000000
lex min decimal: 1381659980434526193413303
states:
100100100100100100111110000010000
100100100100100100111110001000000
100100100100100100111110000100000
100100100100100100111110000000010
001001001001001001111110000001000
100100100100100100111110100000000
001001001001001001111110000010000
001001001001001001111110001000000
010010010010010010111110000000100
001001001001001001111110100000000
010010010010010010111110000000001
001001001001001001111110000000010
001001001001001001111110000000100
100100100100100100111110010000000
010010010010010010111110000000010
100100100100100100111110000001000
010010010010010010111110100000000
100100100100100100111110000000001
010010010010010010111110000100000
010010010010010010111110000001000
100100100100100100111111000000000
010010010010010010111110000010000
010010010010010010111110001000000
001001001001001001111110000100000
010010010010010010111111000000000
001001001001001001111111000000000
100100100100100100111110000000100
001001001001001001111110000000001
001001001001001001111110010000000
010010010010010010111110010000000




=== State Orbit 7 =====================
size : 180
repr state: 000100100100100010111110000010000
lex min decimal: 172771054308044437810359
states:
000001010001001001111110000001000
000100100010100100111111000000000
000010001010010010111110000000100
000001001100001001111110000000001
000001100001001001111110010000000
000010001010010010111110000000010
000100001001001001111110000010000
000001001001010001111110001000000
000100100001100100111110000100000
000010100010010010111110100000000
000100100010100100111110000100000
000100100100001100111110001000000
000100010010010010111110000010000
000001010001001001111110000000010
000001001010001001111111000000000
000001100001001001111110100000000
000100100100001100111110000010000
000100001100100100111111000000000
000010010010100010111110000000010
000010100010010010111110000000010
000010100010010010111111000000000
000010100010010010111110000001000
000001100100100100111110001000000
000100100100001100111110000000001
000100100100100010111110000100000
000001001001001100111110000100000
000001001001100001111110000001000
000010001001001001111111000000000
000010010010001010111110000000001
000010010010010100111110000000010
000001001100001001111110000001000
000100100010100100111110000001000
000001100100100100111111000000000
000001100100100100111110000010000
000010010001010010111110000001000
000001100001001001111110000000010
000001001001001100111110000000001
000100001001001001111110000100000
000001001001100001111110001000000
000010001010010010111110000001000
000001010010010010111110000100000
000100100100001100111110000000010
000100100010100100111110000000001
000001010010010010111111000000000
000001001001010001111110000010000
000010010100010010111110001000000
000100100100010100111110000000010
000001001001001100111110000000100
000001001001001010111110000000001
000001001001010001111110000000001
000010100100100100111110000010000
000100001001001001111110100000000
000010010010010001111110010000000
000100010100100100111110010000000
000100001001001001111110010000000
000100001100100100111110000001000
000100100001100100111110000001000
000010010010001010111110000000010
000010010100010010111110000000001
000001010001001001111110100000000
000010010100010010111111000000000
000010001010010010111111000000000
000100100100100001111110000000001
000010001001001001111110010000000
000001100100100100111110100000000
000100010100100100111110000000010
000001001010001001111110000001000
000100001100100100111110010000000
000100010100100100111111000000000
000010001001001001111110000010000
000100100100010100111110001000000
000100100100100001111110000000010
000001100100100100111110000100000
000100100100100010111110000000010
000001010001001001111110010000000
000100100001100100111110001000000
000010010001010010111110000000001
000100100100100001111110000010000
000100100100001100111110000001000
000010010010010100111110000100000
000100100100010100111110100000000
000100100100010100111110000001000
000100001100100100111110000000100
000001001010001001111110001000000
000010100100100100111110000100000
000010010010100010111110000001000
000010010001010010111111000000000
000001001001100001111110000000001
000010010010001010111110000001000
000010010010010001111110000010000
000001001100001001111110000000100
000100100001100100111111000000000
000100100010100100111110000000100
000001001001010001111110100000000
000010010010100010111110100000000
000100100001100100111110000000001
000001001001010001111110000000010
000010010100010010111110000100000
000001001001100001111110000000010
000001100001001001111110000001000
000010100010010010111110010000000
000010010010100010111110000000001
000001001001001100111110010000000
000100100010100100111110001000000
000100100100001100111110100000000
000100010010010010111111000000000
000100010100100100111110000001000
000010010100010010111110000000100
000001100100100100111110010000000
000010010010010100111110010000000
000001010010010010111110000010000
000001001001001010111110000000100
000001001100001001111110000100000
000100100100100010111110010000000
000001001001001100111110000000010
000010010010001010111110100000000
000100010010010010111110010000000
000001001001001010111110000100000
000010100100100100111110010000000
000010001001001001111110100000000
000010001010010010111110010000000
000100001001001001111111000000000
000001100001001001111111000000000
000010010010100010111110001000000
000010010010010001111110000000001
000001010010010010111110010000000
000001001100001001111110001000000
000001001001001010111110010000000
000010010001010010111110000100000
000010010010100010111110000010000
000010100100100100111110100000000
000010001001001001111110000100000
000100010010010010111110001000000
000100010100100100111110100000000
000100100100100010111110000000100
000010010001010010111110001000000
000001001001001010111110000000010
000100100100100001111110000000100
000010010010010100111110000000001
000010100100100100111111000000000
000001001001100001111110100000000
000100100100100010111110000000001
000001010001001001111110000000100
000001001010001001111110000100000
000010001001001001111110001000000
000001100001001001111110000000100
000100001001001001111110001000000
000100100001100100111110000000100
000010100010010010111110000000100
000001010001001001111111000000000
000100010010010010111110000100000
000100100100100001111110000100000
000001001100001001111111000000000
000010010010010001111110000000100
000001010010010010111110001000000
000100010010010010111110100000000
000100100100100001111110010000000
000100100100100010111110000010000
000001001010001001111110000000100
000001010010010010111110100000000
000100001100100100111110000000010
000010010010010100111110000010000
000001001001001010111110000010000
000010010010001010111110001000000
000100010100100100111110000000100
000010010010010100111110000000100
000001001001001100111110000010000
000010100100100100111110001000000
000001001001100001111110000010000
000010010010001010111110000010000
000001001010001001111110000000001
000010010010010001111110000000010
000100001100100100111110100000000
000100100100010100111110000010000
000010010001010010111110000000100
000001001001010001111110000001000
000010010100010010111110000001000
000010001010010010111110100000000
000010010010010001111110000100000
000100100100010100111110000000001




=== State Orbit 8 =====================
size : 120
repr state: 100100100100100010111111000000000
lex min decimal: 1381696881803972960414903
states:
010010010010010100111110100000000
001001001001001010111110100000000
001010001001001001111110000000010
010001010010010010111110000001000
001001001100001001111110100000000
100001100100100100111110000000001
100100100100010100111110000000100
100100100100100001111110001000000
010010010100010010111110000010000
001001100001001001111110001000000
001001001100001001111110000010000
100100100100100010111110100000000
001100001001001001111110000001000
100100100010100100111110000000010
010010010001010010111110000010000
010010010010010100111110000001000
010010010010100010111111000000000
010010010010010001111110000001000
100010100100100100111110000000100
010001010010010010111110000000010
100010100100100100111110000000010
001001001010001001111110100000000
001001001001001100111111000000000
100100001100100100111110000010000
001001001001001010111110000001000
001001001001010001111111000000000
100001100100100100111110000000100
001001001001010001111110000000100
010010010010010001111111000000000
001001001010001001111110000010000
010010010010100010111110000100000
100100100100001100111110010000000
010010010010001010111110000000100
001001001001010001111110010000000
010100010010010010111110000000001
010010010001010010111110010000000
010010100010010010111110001000000
010010001010010010111110000100000
010010010010100010111110010000000
100100001100100100111110000100000
001100001001001001111110000000010
100100010100100100111110000010000
010010100010010010111110000000001
100100010100100100111110001000000
100100100100001100111111000000000
001100001001001001111110000000001
100100100010100100111110010000000
001010001001001001111110000001000
010010010100010010111110100000000
001001010001001001111110000000001
100100100001100100111110000010000
100100010100100100111110000000001
010010010010001010111110010000000
010010001010010010111110001000000
100010100100100100111110000001000
100001100100100100111110000000010
100100100100001100111110000100000
001001010001001001111110001000000
010010010010001010111111000000000
100010100100100100111110000000001
001001001100001001111110000000010
100100100100100001111110100000000
100100100100100001111111000000000
010010010001010010111110000000010
001001001001001010111111000000000
010100010010010010111110000001000
001001001010001001111110000000010
010010010010010001111110100000000
010010001010010010111110000010000
001001001001010001111110000100000
010001010010010010111110000000100
100100100010100100111110100000000
001001100001001001111110000000001
001001001001001100111110001000000
010010010001010010111110100000000
001010001001001001111110000000100
100100100100100010111110001000000
010010010010100010111110000000100
010010010010010100111111000000000
100100100001100100111110010000000
001001100001001001111110000010000
100001100100100100111110000001000
100100100100010100111110010000000
010010010010010100111110001000000
010010010100010010111110000000010
001001001001100001111110000000100
100100001100100100111110000000001
010010010010010001111110001000000
010010010010001010111110000100000
001001001010001001111110010000000
010100010010010010111110000000010
001001001001001100111110100000000
010100010010010010111110000000100
001001001001001100111110000001000
001001001001100001111110010000000
010010001010010010111110000000001
100100100100100010111111000000000
001001001100001001111110010000000
001001010001001001111110000100000
100100010100100100111110000100000
010001010010010010111110000000001
100100100001100100111110100000000
001001010001001001111110000010000
001010001001001001111110000000001
010010100010010010111110000100000
100100100100010100111110000100000
100100100100010100111111000000000
010010010100010010111110010000000
100100001100100100111110001000000
001001001001001010111110001000000
001001001001100001111111000000000
100100100010100100111110000010000
100100100100100010111110000001000
010010100010010010111110000010000
001100001001001001111110000000100
100100100100100001111110000001000
001001001001100001111110000100000
001001100001001001111110000100000
100100100100001100111110000000100
100100100001100100111110000000010




=== State Orbit 9 =====================
size : 60
repr state: 100100100100100000111101000000000
lex min decimal: 1230525806238623837023415
states:
001001001001001000111100001000000
100100100100000100111010000100000
010010010010000010111010010000000
001001001000001001110110000010000
001001001000001001110110100000000
100100100000100100110110100000000
010010000010010010101110000100000
001001001001000001111010000000100
010000010010010010011110000000100
100100100100000100111011000000000
001001001001001000111100000001000
001001001001000001111010010000000
010010010010010000111100000001000
100100100100000100111010000000100
100000100100100100011110000000001
001001000001001001101110000100000
010010000010010010101110000010000
010010000010010010101110000000001
010010010010000010111010000000100
100100100100100000111100000001000
010010000010010010101110001000000
001000001001001001011110000000100
001000001001001001011110000001000
010010010010010000111101000000000
001001000001001001101110001000000
001001000001001001101110000000001
100100000100100100101110001000000
010010010010000010111010000100000
001001001001001000111101000000000
100000100100100100011110000001000
100000100100100100011110000000010
010000010010010010011110000000010
010010010000010010110110000000010
100100100100100000111101000000000
100100100000100100110110010000000
001001001001000001111010000100000
010000010010010010011110000000001
001000001001001001011110000000001
010010010010010000111100100000000
100100000100100100101110000100000
010010010010010000111100001000000
100100100100100000111100100000000
100100100100100000111100001000000
001001001001000001111011000000000
010010010010000010111011000000000
100100100000100100110110000000010
001001000001001001101110000010000
010010010000010010110110100000000
100100000100100100101110000000001
001001001000001001110110010000000
010010010000010010110110010000000
100100000100100100101110000010000
001001001000001001110110000000010
100100100100000100111010010000000
001001001001001000111100100000000
100000100100100100011110000000100
010000010010010010011110000001000
100100100000100100110110000010000
001000001001001001011110000000010
010010010000010010110110000010000




=== State Orbit 10 =====================
size : 360
repr state: 000100100100010000111100000010000
lex min decimal: 21636897000640684059831
states:
000000010001001001011110100000000
000010000010010100101110010000000
000010010010000100111010000010000
000100100000001100110110000001000
000000100010100100011111000000000
000100001100100000111100010000000
000001001010001000111100000100000
000001001001100000111100000010000
000000100001001001011110010000000
000010100010010000111100000000010
000001001010000001111010001000000
000000001100001001011110001000000
000100001000001001110110001000000
000001001001010000111100000000001
000010100000010010110110000000100
000000010010100010011110100000000
000010010100000010111010000000001
000010010010000001111010000000010
000100001000001001110111000000000
000001001001000100111010000000010
000010001010000010111010100000000
000010010000100010110110000001000
000010010010000001111010000010000
000000010100010010011111000000000
000100100000100001110110000100000
000001001000010001110110000000001
000010001010010000111100000000100
000001000010001001101110000001000
000100010000010010110111000000000
000000100100001100011110001000000
000100100000010100110110000001000
000100000100100001101110000000010
000010001010010000111100010000000
000000001001100001011110000010000
000010010100000010111010001000000
000100100001100000111100000000001
000001100100000100111010100000000
000010000001001001101110010000000
000000010001010010011110000100000
000000010010010100011110010000000
000010000010010001101110010000000
000000001100001001011111000000000
000010001000001001110110001000000
000100100100010000111100000000010
000010010000010100110110000000100
000001000001010001101110100000000
000010100100100000111100000100000
000010100000100100110110000100000
000010000100100100101110010000000
000001100001000001111010000001000
000001010000001001110111000000000
000000100001100100011110001000000
000010010000001010110110000001000
000100010000100100110111000000000
000100001000001001110110000100000
000100100100000001111010000000010
000001001100001000111100000000001
000010010000001010110110000000001
000100100000001100110110001000000
000100000100010100101110000001000
000001010010000010111010001000000
000100010000010010110110000100000
000000010100100100011110010000000
000001100001000001111010100000000
000010010010001000111100000000010
000001000100100100101110100000000
000001000100001001101110000000100
000000100100010100011110000010000
000100010010010000111100000100000
000001100001001000111100010000000
000001010000010010110110000100000
000100100100000001111010000010000
000100000100010100101110000000010
000100010000100100110110000000100
000010001001000001111010000010000
000000100001001001011110100000000
000000100001001001011111000000000
000100000100100001101110010000000
000100100000100010110110000000100
000100001001001000111100000100000
000100100100000010111010000000001
000000100010100100011110001000000
000001100001001000111100000000100
000000010001010010011110001000000
000100000100100001101110000000100
000100000100001100101110000001000
000010010000010001110110000000001
000010010010001000111100000010000
000001100001000001111010000000010
000010000010001010101110000000010
000000001001010001011110000010000
000100000010010010101111000000000
000010100100100000111100010000000
000100000100100010101110000000010
000001010001000001111010000000010
000000001010001001011110000100000
000010001001001000111100010000000
000000001001001010011110010000000
000000100001100100011110000100000
000000010001001001011111000000000
000001100000100100110110001000000
000001001001100000111100000000010
000001001100000001111010000001000
000001001000010001110110000001000
000010000010001010101110000001000
000000100100010100011110001000000
000001010001001000111100000000100
000100001001001000111100010000000
000100100010000100111010000000001
000010000100010010101111000000000
000100000100100010101110010000000
000000001010001001011111000000000
000010000010010100101110000000010
000100100100001000111100000000010
000000010010010100011110000100000
000000010010100010011110001000000
000001001001000010111010000010000
000001010000001001110110000000100
000100100010000100111010000001000
000100100100000010111010000010000
000000010001010010011111000000000
000010000010100010101110000001000
000001000001010001101110000000010
000010010001010000111100000000001
000000010010010100011110000010000
000000100100001100011110000010000
000000001100100100011110010000000
000100001100100000111100000000010
000010010000010001110110000000100
000100010010000010111010100000000
000100000010100100101111000000000
000010000001001001101111000000000
000010100000010010110110000001000
000001010010000010111010100000000
000001000010001001101110000000100
000000010010100010011110000010000
000000010001001001011110010000000
000100100001000100111010001000000
000001001001100000111100000000001
000010000010100010101110000000010
000100010010010000111100000010000
000001000001001010101110000000100
000001000001100001101110100000000
000010100000100100110111000000000
000100010010000010111010001000000
000000001001010001011110001000000
000100010100100000111100010000000
000100000001100100101110000001000
000100100010100000111100000000001
000100001001000001111010001000000
000000100100010100011110100000000
000000010010010001011110000010000
000001010010000010111010000010000
000000001001001010011110000100000
000010001001000001111010001000000
000000001001010001011110100000000
000001010001000001111010100000000
000010001010010000111100000000010
000000001010001001011110001000000
000100100001100000111100000100000
000010010000010100110110000000001
000000010100010010011110000100000
000010001000001001110111000000000
000100000010100100101110000000100
000100000001001001101110010000000
000100010100000100111010000000010
000100100000010100110110000000001
000010100000010010110111000000000
000001000001010001101110000001000
000000001100100100011110100000000
000100001100000100111010000000010
000010001001001000111100000100000
000010010001010000111100000100000
000001001000001010110110000000001
000001100000100100110110000100000
000001001000010001110110001000000
000010010000100010110110000000001
000001000100001001101111000000000
000010100100100000111100000010000
000001001001000010111010000000010
000001100100100000111100000010000
000010001000010010110111000000000
000001100100100000111100010000000
000001001000001100110110000000100
000100100100000010111010000000010
000000001001001100011110000010000
000100000010100100101110000001000
000000010010001010011110001000000
000001001000001010110110000100000
000100100100001000111100000000001
000001100001001000111100000000010
000001000100100100101110010000000
000001001001000010111010000000001
000100001100100000111100000000100
000000100100100010011110000010000
000010100010000010111010100000000
000000010100100100011111000000000
000010010010000100111010000000001
000010100100000100111010000010000
000100010000100100110110000001000
000100000100010100101110100000000
000001001100001000111100000100000
000000100100100001011110000010000
000000001100100100011111000000000
000100010010000010111010000010000
000001000010010010101110100000000
000100000001001001101110100000000
000000100100001100011110100000000
000010010010000100111010000000010
000001001001010000111100000000010
000001010010010000111100000010000
000000100100100010011110000100000
000100100100010000111100000000001
000000100010010010011110100000000
000000001010010010011111000000000
000010001000010010110110000001000
000001001001000100111010000000001
000001001000100001110110001000000
000001010001000001111010000001000
000000100010010010011110010000000
000010001010000010111010000000010
000001000001001100101110010000000
000100100000001100110110000000001
000010010010000001111010000000001
000010000001001001101110100000000
000001000001100001101110000001000
000000001001001100011110010000000
000000001010010010011110010000000
000001001000100001110110000001000
000010010001000010111010000001000
000010000001010010101110000000100
000000001010010010011110100000000
000010000100100100101111000000000
000100000100001100101110100000000
000001100100000100111010001000000
000100010100000100111010100000000
000100001000100100110110000001000
000010001001000001111010100000000
000001010000010010110111000000000
000100100000100010110110000000001
000001000001001010101110000000010
000010010100010000111100000000100
000010000100010010101110000001000
000001001100001000111100000000100
000010010010100000111100000010000
000000010100010010011110001000000
000001100000001001110111000000000
000001001100000001111010000000001
000000100001100100011111000000000
000010000001010010101111000000000
000010000100100100101110100000000
000001010010010000111100000100000
000001100000001001110110000000100
000010010001010000111100000000100
000001000010010010101111000000000
000010100010010000111100000000100
000100001001000001111010100000000
000010100000100100110110001000000
000100100000100001110110000000100
000010100100000100111010100000000
000000010010001010011110100000000
000001000001001100101110000000100
000001010000010010110110001000000
000010010010100000111100000000010
000000001001001100011110000100000
000001001010001000111100000000001
000100100010100000111100000100000
000100100010100000111100000000100
000000001001100001011110001000000
000010100010000010111010000000010
000001100100000100111010000010000
000100100100010000111100000010000
000010000010001010101110100000000
000100001001001000111100000010000
000000100100100010011110010000000
000000001001001010011110000010000
000000010010010001011110000100000
000001000010001001101111000000000
000100000001100100101110000000100
000100010000010010110110001000000
000100010100100000111100000000100
000100001100000100111010100000000
000100010100000100111010000001000
000001000100001001101110000001000
000100000100001100101110000000010
000010010000001010110110001000000
000010000010010100101110000000100
000100001100000100111010000001000
000100010100100000111100000000010
000100100001100000111100000000100
000001001000001100110110000100000
000010010000100010110110001000000
000000001100001001011110000100000
000010001001001000111100000010000
000010010000010001110110000100000
000000001001100001011110100000000
000001000001100001101110000000010
000010000010010001101110000000100
000001001010000001111010000000001
000100001000100100110110000000100
000001000001001010101110010000000
000000010010010001011110010000000
000010000010010001101110000000010
000100100000100010110110000100000
000010010100010000111100000100000
000100000100100010101110000000100
000100000001001001101111000000000
000010000001010010101110000001000
000100100001000100111010000001000
000010010100010000111100000000001
000001010001001000111100010000000
000000100010100100011110000100000
000001001100000001111010001000000
000010010010100000111100000000001
000001001000100001110110000000001
000001001010001000111100000000100
000001001000001100110110000000001
000001010000001001110110000001000
000100100000100001110110000000001
000100100100000001111010000000001
000001000010010010101110010000000
000010001010000010111010000001000
000010100100000100111010001000000
000000010100100100011110100000000
000001001001000100111010000010000
000000010010001010011110000010000
000001100100100000111100000100000
000010010010001000111100000000001
000000100100100001011110000100000
000010000100010010101110000000100
000001100000001001110110000001000
000001100000100100110111000000000
000001010010010000111100010000000
000001001010000001111010000001000
000001001000001010110110000000100
000100000001100100101111000000000
000001001001010000111100000010000
000100100001000100111010000000001
000010010001000010111010001000000
000000100010010010011111000000000
000100000010010010101110100000000
000001000001001100101110000000010
000100100100001000111100000010000
000100100010000100111010001000000
000010010100000010111010000001000
000100001000100100110111000000000
000010010000010100110110000100000
000010000010100010101110100000000
000100001001000001111010000010000
000000100100100001011110010000000
000001010001001000111100000000010
000100100000010100110110001000000
000010001000010010110110000000100
000100000010010010101110010000000
000010010001000010111010000000001
000100010010010000111100010000000
000001000100100100101111000000000
000010100010010000111100010000000
000010100010000010111010000001000
000010001000001001110110000100000




=== State Orbit 11 =====================
size : 180
repr state: 000100100100010010111110000010000
lex min decimal: 173066202213223790636215
states:
000010010001001001111110100000000
000100100010010010111110010000000
000100001001100100111110000001000
000010010001001001111111000000000
000010001001001010111110000100000
000010010010001001111110000000001
000100001001001100111110000100000
000001100100001100111110001000000
000001010010010001111110000100000
000100100100001001111110000000001
000001010001010010111110001000000
000001001100100100111111000000000
000010001001001010111110010000000
000010010100010100111110000000001
000100001100001001111111000000000
000001100001100001111110000000010
000010001001010010111110000000100
000001010001001010111110000000010
000001100100001100111110000010000
000010001001010001111110100000000
000001010001001010111110000000100
000010010100100010111110000001000
000001001001010010111110000010000
000010100010010100111110000000100
000100010010100010111110000010000
000100001001100001111110000010000
000001001001100100111110000010000
000100100001001100111110000000001
000010010001001010111110000000001
000010100100010010111110000000100
000001001010010010111111000000000
000100100100001001111110000010000
000010100010100100111110001000000
000010010010001001111110000000010
000001001100100001111110000001000
000100010010010100111110000010000
000001001010010001111110001000000
000001010001010010111111000000000
000010001010010001111110010000000
000010001010010001111110000000010
000001001100100001111110001000000
000010001001010010111111000000000
000100100010010100111110001000000
000001001001100100111110000000010
000001100001001100111110000000010
000100001100100001111110000000010
000010001001010010111110000001000
000001001010010001111110000001000
000001100100001001111110000001000
000100010010010100111110000100000
000100010100010100111110000000010
000100001001001100111110010000000
000001010010001001111110000000100
000001001010001010111110000000100
000001100100001001111110000000100
000001001100100001111110000000001
000100001100001001111110000100000
000010100010100010111110100000000
000100010100010010111110001000000
000010010010001001111110000010000
000001010010001010111110000010000
000001010001010001111110000000010
000001100001100100111111000000000
000001001100001100111110000000100
000100010100010010111110000100000
000100100001001001111110100000000
000100001100001100111110100000000
000100010100010100111110000001000
000001010010001001111110000001000
000100010100100010111110010000000
000010100100010100111110000010000
000100100100010010111110000010000
000010010100100010111110001000000
000010100010010100111110010000000
000001010001010010111110000100000
000001100001100001111110100000000
000100100001001100111110000001000
000010010001010001111110000100000
000001010001010001111110100000000
000010010001010001111110000000001
000010010001001001111110010000000
000010100010100100111111000000000
000001010001010001111110000001000
000001010010001001111111000000000
000010100010010100111110000000010
000010001001010001111110000010000
000100001100001100111110000001000
000010100100100010111110000100000
000001001001010010111110000000001
000001100100100001111110010000000
000100100010010010111111000000000
000100100001100001111110000100000
000100100010010100111110000001000
000100100010100010111110000100000
000010100100010100111110100000000
000010010100100100111111000000000
000100010010100010111110100000000
000001100001001100111110000000100
000001100001100001111110000001000
000010100010100010111110000000010
000010001010001001111111000000000
000010100100010010111110000001000
000100010100010100111110100000000
000100010100010010111111000000000
000001001010001010111110000100000
000100100001100001111110000000100
000010100100100010111110010000000
000010001001001010111110000010000
000100100001001001111110010000000
000001010001001010111110010000000
000010001010001001111110000100000
000001100100001100111110100000000
000001100100100001111110000010000
000100100001001100111110001000000
000100100010100010111110000000001
000100001100100001111110000000100
000100100010100010111110000000100
000001001100001100111110000000001
000010010001001010111110001000000
000010010100100010111110000000001
000001001010010001111110000000001
000100001001100001111110100000000
000010001010010001111110000000100
000100001100100001111110010000000
000010100100010100111110001000000
000010010010100100111110000000010
000010100010100010111110000001000
000100001100001100111110000000010
000010100010100100111110000100000
000010010100100100111110100000000
000001001100100100111110010000000
000001100001001100111110010000000
000010001001010001111110001000000
000010010010100100111110000010000
000100100100010010111110000000001
000100100010010010111110100000000
000100010010100100111110000001000
000100100100010010111110000000010
000010001010001010111110000001000
000001100100001001111111000000000
000001001001100100111110000000001
000100001001001100111110000010000
000010001010001010111110000000010
000100010010100100111111000000000
000010010100010100111110000100000
000001100001100100111110000100000
000100010010100100111110000000100
000001001010001010111110000000001
000100100001100001111110000000001
000100001001100100111111000000000
000010100100100010111110000010000
000100010100100010111110000000010
000001001100100100111110100000000
000001010010001010111110001000000
000001010010010001111110010000000
000010100100010010111111000000000
000001010010001010111110100000000
000010001010001001111110001000000
000100100100001001111110000000010
000001001001010010111110000000010
000100100001001001111111000000000
000010010100010100111110000000100
000001001100001100111110000100000
000100001001100100111110000000100
000001001010010010111110100000000
000100010010010100111110010000000
000100001100001001111110001000000
000010010001010001111110000000100
000010001010001010111110100000000
000100010100100010111110000000100
000001100100100001111110000100000
000010010010100100111110000000001
000001010010010001111110000010000
000010010001001010111110000001000
000001100001100100111110001000000
000100001001100001111110001000000
000100100010010100111110000000001
000001001010010010111110010000000
000010010100100100111110010000000
000100010010100010111110001000000




=== State Orbit 12 =====================
size : 60
repr state: 100100100100010010111111000000000
lex min decimal: 1381992597162705361923255
states:
001001100001001100111110001000000
100001001100100100111110000000001
010001010010001010111110000000100
100010100010100100111110000000010
001001100100001001111110000010000
001010001001001010111110000001000
010010001010001010111110000100000
010100010100010010111110000000010
010001010010010001111110000001000
100010010100100100111110000000001
001001001010010001111110010000000
100001100001100100111110000000010
001010010001001001111110000000001
100100100001100001111110100000000
100100100100010010111111000000000
100100001001100100111110000010000
001001001001010010111111000000000
001001001010001010111110100000000
100001100100001100111110000000100
010010100100010010111110000010000
100100010010100100111110000010000
001100001100001001111110000000010
010010010100100010111110010000000
010001001010010010111110000000001
100100010100010100111110000100000
100100100001001100111110010000000
010001010001010010111110000000010
100001100100100001111110000001000
010100010010010100111110000001000
100100001100001100111110000100000
100100100010100010111110100000000
100100010100100010111110001000000
001001100001100001111110000100000
001100001001001100111110000001000
001001010010001001111110000010000
010010001010010001111110001000000
010010100010100010111110000100000
001001010001001010111110001000000
001100001001100001111110000000100
001010001001010001111110000000100
001001001100001100111110100000000
010010010010100100111111000000000
100100001100100001111110001000000
010010010001010001111110100000000
001010001010001001111110000000010
010100010010100010111110000000100
010010010100010100111110100000000
010010010001001010111110010000000
001001001100100001111110010000000
001100100001001001111110000000001
100010100100010100111110000000100
010100100010010010111110000000001
100100100100001001111111000000000
100100100010010100111110010000000
001001001001100100111111000000000
010010100010010100111110001000000
100010100100100010111110000001000
010010001001010010111110000010000
001001010001010001111110000100000
010010010010001001111111000000000




=== State Orbit 13 =====================
size : 180
repr state: 000100100100010001111110000010000
lex min decimal: 173139989189518628842679
states:
000001001100010001111110001000000
000010001010010100111110000000100
000100001100100010111110010000000
000010010010100001111110000000001
000010001100010010111111000000000
000100001100100010111110000000010
000001100100010100111110100000000
000010001100001001111110000100000
000100010001001001111110010000000
000010100001001001111110010000000
000001010100100100111110010000000
000100010001100100111110000000100
000010100010001010111110000000010
000100100010001100111110000000001
000100100010001100111110000001000
000010100001001001111110100000000
000010010010001100111110000000010
000010010001100010111110000000001
000100100010100001111110000000001
000010100010010001111110000000010
000010100100001100111110001000000
000001001010100001111110000001000
000100100001010100111110000000001
000001010010010100111110000100000
000100001010001001111110000100000
000010010100001010111110000001000
000100010001010010111110000100000
000001001010001100111110000000001
000010001100100100111110100000000
000010100001100100111110001000000
000001001001010100111110000000001
000100001010010010111110010000000
000010001001100001111110100000000
000001010100001001111110000000100
000100010100100001111110010000000
000010100001100100111111000000000
000001100001010001111110000000010
000100010001010010111111000000000
000010010010100001111110000000010
000100100010100001111110000100000
000100001001010001111110100000000
000100100001100010111110000100000
000010010010001100111110000000001
000010001100100100111111000000000
000100001010010010111110100000000
000001001100010001111110000000001
000001010010010100111110000010000
000010100010001010111110000001000
000001100010100100111110001000000
000100001001010001111110001000000
000010001010100010111110100000000
000100001100010100111110100000000
000010001001001100111110000010000
000010001001001100111110000100000
000001001100001010111110000000001
000010100010010001111110010000000
000001001100001010111110000100000
000010010001010100111110000000100
000001001100010001111110000001000
000010100100100001111110010000000
000100001010100100111111000000000
000010100001010010111110000000100
000001100010100100111110000100000
000001010100001001111111000000000
000100010100001100111110000000010
000010001010010100111110000000010
000001010010100010111110001000000
000010100001010010111110000001000
000001001100001010111110000000100
000001001010100001111110000000001
000001010010010100111110010000000
000010100100100001111110000100000
000100010001001001111111000000000
000001100001010001111110000001000
000001001001100010111110000010000
000001010001100001111110100000000
000100100001010100111110001000000
000010001100001001111110001000000
000100010001100100111111000000000
000001100001001010111110010000000
000001010001100001111110000001000
000010001001001100111110010000000
000100100100001010111110000000001
000001001001010100111110000000010
000001010001001100111110000000100
000010010100001010111110000000001
000010001100010010111110000000100
000010001010100010111110000001000
000100010010001010111110000010000
000100010100100001111110000000100
000010001001100001111110001000000
000100100100001010111110000010000
000001001001010100111110000010000
000010010100010001111110000000001
000100100001100010111110000000001
000001010100010010111110001000000
000100010010010001111110000010000
000001100001001010111110000000010
000010010100001010111110001000000
000100100100001010111110000000010
000100010100001100111110100000000
000100010001010010111110001000000
000100100100010001111110000000010
000100001010100100111110000000100
000001100100100010111110000010000
000100001001001010111110000010000
000100010010001010111110100000000
000010100100001100111110000010000
000001100001010001111110100000000
000010001100001001111111000000000
000100001100010100111110000001000
000010001100100100111110010000000
000100100010100001111110000000100
000001010100010010111110000100000
000001010100010010111111000000000
000001010100100100111111000000000
000001010010100010111110100000000
000010010010100001111110000010000
000100001001001010111110000100000
000010100010001010111110100000000
000001100010010010111110010000000
000100010010010001111110010000000
000001001010001100111110000100000
000001001010001100111110000000100
000100100010001100111110001000000
000001100010001001111111000000000
000100010001100100111110000001000
000100001100010100111110000000010
000010001001100001111110000010000
000001010001100001111110000000010
000100010100100001111110000000010
000010001010010100111110010000000
000001010001001100111110000000010
000001010001001100111110010000000
000001001010100001111110001000000
000001001001100010111110000000001
000100010010010001111110000100000
000001100100100010111110010000000
000001100100010100111110000010000
000100010010001010111110001000000
000100001001010001111110000010000
000001010100001001111110000001000
000010100010010001111110000000100
000100001001001010111110010000000
000010010001010100111110000000001
000001100100100010111110000100000
000100100100010001111110000010000
000010001010100010111110000000010
000001001001100010111110000000010
000001100010010010111110100000000
000010100001100100111110000100000
000100100001010100111110000001000
000001010100100100111110100000000
000100001010010010111111000000000
000001100010010010111111000000000
000100001100100010111110000000100
000010100001001001111111000000000
000010100100100001111110000010000
000100100100010001111110000000001
000100001010100100111110000001000
000010010100010001111110000100000
000010010001100010111110000001000
000001100010100100111111000000000
000001100100010100111110001000000
000010010001010100111110000100000
000100010100001100111110000001000
000100010001001001111110100000000
000010001100010010111110000001000
000001010010100010111110000010000
000010010010001100111110000010000
000010100001010010111111000000000
000100001010001001111111000000000
000001100010001001111110000001000
000001100001001010111110000000100
000001100010001001111110000000100
000100001010001001111110001000000
000100100001100010111110000000100
000010010100010001111110000000100
000010010001100010111110001000000
000010100100001100111110100000000




=== State Orbit 14 =====================
size : 60
repr state: 100100100100010001111111000000000
lex min decimal: 1382066384139000200129719
states:
001010001001001100111110000001000
001001001100001010111110100000000
010100001010010010111110000000001
001010100001001001111110000000001
001100001010001001111110000000010
100001100100100010111110000001000
010010010100010001111110100000000
100010100100100001111110000001000
100100100010100001111110100000000
001100001001001010111110000001000
100010001100100100111110000000001
010001010010010100111110000001000
100100100100001010111111000000000
100100100100010001111111000000000
100100100001010100111110010000000
001010001001100001111110000000100
001001100001001010111110001000000
010100010010010001111110000001000
001100010001001001111110000000001
100100010100100001111110001000000
100001100010100100111110000000010
001001001010100001111110010000000
010010100010001010111110000100000
010010010010100001111111000000000
001100001001010001111110000000100
010010100001010010111110000010000
001001001100010001111110010000000
001001001010001100111110100000000
100100001100010100111110000100000
001001100001010001111110000100000
010010010010001100111111000000000
010010010001010100111110100000000
010010001010010100111110001000000
010100010001010010111110000000010
100001100100010100111110000000100
100100010100001100111110000100000
010010010100001010111110010000000
100100100010001100111110010000000
001001010001100001111110000100000
100010100100001100111110000000100
010001010010100010111110000000100
010010010001100010111110010000000
100010100001100100111110000000010
001001010100001001111110000010000
010010100010010001111110001000000
010010001010100010111110000100000
001001100010001001111110000010000
001001010001001100111110001000000
001001001001100010111111000000000
100100001100100010111110001000000
010100010010001010111110000000100
100001010100100100111110000000001
010001100010010010111110000000001
010010001100010010111110000010000
001010001100001001111110000000010
010001010100010010111110000000010
001001001001010100111111000000000
100100100001100010111110100000000
100100001010100100111110000010000
100100010001100100111110000010000




=== State Orbit 15 =====================
size : 120
repr state: 100100100100010000111101000000000
lex min decimal: 1230562707608070604025015
states:
100100100000010100110110010000000
001001000001001100101110001000000
100000100100010100011110000000100
010010100010010000111100001000000
100010100000100100110110000000010
010010100000010010110110000010000
010010010100000010111010010000000
100100100001100000111100100000000
100100100100000001111011000000000
100100100000001100110110010000000
001100001001000001111010000000100
010000010001010010011110000000010
001001001100001000111100100000000
100100000100001100101110000100000
100100001100100000111100001000000
100100001000100100110110000010000
100100010000100100110110000010000
001010000001001001101110000000001
001000100001001001011110000000001
001000001001100001011110000000100
100010100100100000111100000001000
100010100100000100111010000000100
100100100001000100111010010000000
001000001001001100011110000001000
010010000010010001101110001000000
001100000001001001101110000000001
100001100100100000111100000001000
001001001001010000111101000000000
010001010010000010111010000000100
010010000010001010101110000100000
010010010010100000111101000000000
001000001100001001011110000000010
001001001100000001111010010000000
001010001000001001110110000000010
010000001010010010011110000000001
010010010000100010110110010000000
100001100100000100111010000000100
001001001000100001110110010000000
001001001000001010110110100000000
001001001010001000111100100000000
010001000010010010101110000000001
001001000100001001101110000010000
010000010010001010011110000000100
010100010000010010110110000000010
100100000010100100101110000010000
100100100010100000111100100000000
010010000010010100101110001000000
001001000001100001101110000100000
001100001000001001110110000000010
010010010010000001111011000000000
100100100010000100111010010000000
010010010000010100110110100000000
100100000100010100101110000100000
100100100100010000111101000000000
001000001010001001011110000000010
001001010000001001110110000010000
010000010100010010011110000000010
010000100010010010011110000000001
100100000001100100101110000010000
001001001000010001110110010000000
010000010010100010011110000000100
010010010010001000111101000000000
010010010001010000111100100000000
100100000100100010101110001000000
010010100010000010111010000100000
100100100100000010111011000000000
100010000100100100101110000000001
001001001001100000111101000000000
001010001001000001111010000000100
001000001001010001011110000000100
010100010010000010111010000000100
100000100100001100011110000000100
010010010001000010111010010000000
010100010010010000111100000001000
100000100001100100011110000000010
001001001010000001111010010000000
001001100000001001110110000010000
001001010001000001111010000100000
001001100001000001111010000100000
100001000100100100101110000000001
010010010010000100111011000000000
001001000001010001101110000100000
010010010000010001110110100000000
100000010100100100011110000000001
010010001010000010111010000100000
100000100100100001011110000001000
100100100100001000111101000000000
001001100001001000111100001000000
010000010010010100011110000001000
100100001100000100111010000100000
001001001001000010111011000000000
001100001001001000111100000001000
010100000010010010101110000000001
001001000010001001101110000010000
001010001001001000111100000001000
100001100000100100110110000000010
001001001001000100111011000000000
100000001100100100011110000000001
010010001010010000111100001000000
100100000100100001101110001000000
010010000001010010101110000010000
100100100000100010110110100000000
010000010010010001011110000001000
001000001001001010011110000001000
100100010100000100111010000100000
001001010001001000111100001000000
100000100010100100011110000000010
010010000100010010101110000010000
100100010100100000111100001000000
001001000001001010101110001000000
010010001000010010110110000010000
010010010000001010110110010000000
100000100100100010011110000001000
010001010010010000111100000001000
010001010000010010110110000000010
001000010001001001011110000000001
100100100000100001110110100000000
010010000010100010101110000100000
001001001000001100110110100000000
010010010100010000111100100000000




=== State Orbit 16 =====================
size : 30
repr state: 100100100100000000111001000000000
lex min decimal: 1211627116935108401392823
states:
010000010000010010010110000000010
100100000100100000101100001000000
001000001000001001010110000000010
100000000100100100001110000000001
010010010010000000111001000000000
010000010010010000011100000001000
010010010000010000110100100000000
100100000100000100101010000100000
001000000001001001001110000000001
100000100100000100011010000000100
001001000001000001101010000100000
001001001000001000110100100000000
001000001001001000011100000001000
100100100000000100110010010000000
100000100000100100010110000000010
010010010000000010110010010000000
100100100100000000111001000000000
100000100100100000011100000001000
001001001000000001110010010000000
010010000010010000101100001000000
010010000010000010101010000100000
100100100000100000110100100000000
010000010010000010011010000000100
001001000000001001100110000010000
010010000000010010100110000010000
001000001001000001011010000000100
001001001001000000111001000000000
001001000001001000101100001000000
100100000000100100100110000010000
010000000010010010001110000000001




=== State Orbit 17 =====================
size : 360
repr state: 000100100010000000111000000010000
lex min decimal: 2738477913102890658999
states:
000001010001000000111000000000001
000010010100000000111000000010000
000000100010000100011010100000000
000000010000100010010111000000000
000000100010000100011010000010000
000000100100000010011010100000000
000100000010100000101100000000010
000100010100000000111000000000001
000100010010000000111000000000001
000001000000010010100110000001000
000000000001010001001110010000000
000010100000100000110100000000100
000001010000000010110010000000001
000000010001010000011100010000000
000001010010000000111000000000010
000010010000000100110010000001000
000001010000010000110100000000100
000000100100001000011100010000000
000000001000100001010110000100000
000000100001001000011100000100000
000000010001000001011010000010000
000000000001001010001110100000000
000000000001100100001110010000000
000010000100000100101010000001000
000000000010001010001110010000000
000000100000001100010111000000000
000000001000001010010110001000000
000000000100010100001111000000000
000000000010100010001111000000000
000001000001000100101010000001000
000001001100000000111000000000010
000010000001000001101010000000010
000000010010100000011100000100000
000001001000000100110010001000000
000001001000000100110010000001000
000010000000010100100111000000000
000000001100000100011010000010000
000000100000010100010111000000000
000001100000000100110010000000001
000000001000001010010111000000000
000010000010000100101010100000000
000010000001010000101100000000010
000000100100000001011010001000000
000100000001000100101010100000000
000000100000100010010111000000000
000100000010000100101010000000010
000000001000001100010111000000000
000000000010001001001110100000000
000001000001010000101100010000000
000000010100000010011010100000000
000000010000001010010110000100000
000000001010010000011100000100000
000100000100010000101100010000000
000001001100000000111000000010000
000000000100100010001111000000000
000010000100100000101100000000100
000000000010010100001110100000000
000001000000010001100110000000100
000000010000100100010110001000000
000000100000010100010110000100000
000000001001100000011100000100000
000010000000100100100110000001000
000001100100000000111000000000010
000000010100000010011010000010000
000100010000010000110100000000001
000000001001010000011100010000000
000001100000000001110010000000001
000001000100001000101100010000000
000010100000000010110010001000000
000000000001010010001110010000000
000010100010000000111000000010000
000000001010000010011010001000000
000000001000010010010110000100000
000010000010001000101100000000100
000010000100000010101010100000000
000100100001000000111000000010000
000000010001000010011010000010000
000010100000000100110010000001000
000000010001000001011010001000000
000000000010100100001110100000000
000001000000001010100111000000000
000001001000000010110010001000000
000000000100001001001110100000000
000001100000001000110100000100000
000001000000100100100110000000100
000010100000010000110100000100000
000000001001000010011010100000000
000100100000010000110100000000100
000001100001000000111000000010000
000100010000100000110100000100000
000010000100100000101100000000010
000000001000100100010110001000000
000001100000000100110010000001000
000000100001100000011100000010000
000000100000001001010110000100000
000000001000100001010111000000000
000000001001000100011010001000000
000000100010000010011010001000000
000000001001000100011010100000000
000100100000001000110100000000100
000001000010001000101100000000010
000010010000001000110100000100000
000000001100001000011100010000000
000010000001010000101100010000000
000100000001000100101010000000010
000010001000000001110010000001000
000100000001000001101010000001000
000100001000100000110100000100000
000010010001000000111000000010000
000100000000100010100110000001000
000100100000000010110010001000000
000100000001001000101100000000100
000000000010001010001111000000000
000010001000000010110010001000000
000100000100001000101100010000000
000010000001000010101010000000010
000100010100000000111000000010000
000000010010000100011010001000000
000000000100001100001111000000000
000000000001001100001110100000000
000010000001000010101010100000000
000001000001010000101100000000100
000001001000000010110010000001000
000100001000000100110010000000001
000000010100000100011010000010000
000000010000010001010110001000000
000010010000000001110010000001000
000001001000100000110100000100000
000000001100000001011010100000000
000001000001000100101010100000000
000000100010100000011100000010000
000010000000001010100111000000000
000000001010000001011010100000000
000001000001000010101010100000000
000100000100000001101010000001000
000001000010000010101010000001000
000100000000010100100110000000100
000010000000010100100110000001000
000000000010100100001110010000000
000100000010010000101100000000100
000001010001000000111000000010000
000000100100010000011100000100000
000010000001000001101010000001000
000001000001000010101010000001000
000001000001100000101100000000100
000000100001000001011010001000000
000010001000001000110100000000001
000010001001000000111000000000010
000000000010010001001111000000000
000010000001001000101100000000010
000001001000100000110100000000100
000010010001000000111000000000010
000000000100100010001110100000000
000010000000100010100111000000000
000100001000001000110100000000100
000001000000001100100111000000000
000000010010001000011100010000000
000000010010000001011010001000000
000010000010100000101100010000000
000000100100001000011100000100000
000001000100000100101010000001000
000100001100000000111000000010000
000000000100001100001110010000000
000100000100000010101010000001000
000000100000010010010110001000000
000001010000000010110010000001000
000001010000010000110100000000001
000000000100100001001111000000000
000100000000010100100111000000000
000100000100000001101010100000000
000010000000100100100110000000100
000010010100000000111000000000010
000001000000010001100111000000000
000100000010000010101010000001000
000100000000001100100111000000000
000000001000010010010110001000000
000010010000100000110100000000100
000000010010100000011100010000000
000000010000010100010111000000000
000010000100010000101100010000000
000001000000001010100110000001000
000000001010000010011010000010000
000010100000100000110100000000001
000100100010000000111000000010000
000001000100000001101010100000000
000000010100010000011100000010000
000010010000000001110010001000000
000100000000001001100110000000100
000010000000001001100110000001000
000010100100000000111000000000001
000000000001001010001111000000000
000000100001001000011100000010000
000100010010000000111000000000010
000000100001100000011100010000000
000000100000100010010110001000000
000010001000000010110010000000001
000001000010010000101100000000010
000000010100000100011010001000000
000100000000001001100110000001000
000000100010100000011100010000000
000100001000000001110010000001000
000000001010010000011100000010000
000010000010001000101100010000000
000001000000010010100110000000100
000010100100000000111000000000010
000010010000001000110100000000100
000010000010100000101100000000100
000010000000100010100110000000100
000000010000001001010110000100000
000100100000001000110100000100000
000000010000100010010110000100000
000010100010000000111000000000001
000100001000000001110010000000001
000100000100001000101100000000100
000010001000001000110100000000100
000100000100000010101010100000000
000010001010000000111000000010000
000000001001000010011010001000000
000001001000010000110100000000100
000000100010000010011010000010000
000000010100100000011100000100000
000100000010000010101010000000010
000001000010010000101100000000100
000100010000100000110100000000001
000010000000001010100110000000100
000001100001000000111000000000001
000100100000010000110100000100000
000000100000100001010111000000000
000001100000000001110010001000000
000100000000100001100111000000000
000000100001000100011010100000000
000000001001100000011100010000000
000000000001001100001111000000000
000001010000001000110100000100000
000010000100000100101010000000010
000000100001000001011010000010000
000000001000010001010111000000000
000010000100010000101100000000010
000100001001000000111000000000010
000000001010001000011100010000000
000000100100000010011010001000000
000001000100100000101100000000010
000100000001001000101100000000010
000000100100010000011100010000000
000001000000001100100110000001000
000001000100100000101100000000100
000000000010010100001111000000000
000000010100100000011100000010000
000010000000001001100110000000100
000001000000100001100110000000100
000100000001100000101100000000010
000100000000010010100110000001000
000001000000100100100110000001000
000001000000100001100111000000000
000000100000100001010110001000000
000000010010001000011100000100000
000010100000000100110010000000001
000000000001010001001111000000000
000010000010000001101010000001000
000000001100000001011010000010000
000000001100001000011100000010000
000010000001001000101100000000100
000010000000010001100110000001000
000001100000100000110100000000100
000001000010000010101010000000010
000001010000001000110100000000001
000100010000000010110010000001000
000000010010000001011010100000000
000100000000010010100110000000100
000010001000010000110100000000001
000000100000001001010110001000000
000000010001000010011010100000000
000000000100010100001110010000000
000000000100001001001110010000000
000001000001100000101100010000000
000000000010010001001110100000000
000000010000001010010111000000000
000100000010010000101100000000010
000100100010000000111000000000010
000001010010000000111000000000001
000000001000100100010110000100000
000010001000010000110100000100000
000000010000100100010110000100000
000001001000010000110100000100000
000100001000001000110100000000001
000001000010000001101010000000010
000000001000010001010110000100000
000000100010010000011100000010000
000001000010001000101100010000000
000000010000010100010110001000000
000100000010100000101100010000000
000000001010001000011100000010000
000000001100100000011100000010000
000010001001000000111000000000001
000010010000000100110010001000000
000000100000001100010110000100000
000010100000000010110010000000001
000000000001010010001110100000000
000010100000010000110100000000001
000100000000001100100110000000100
000000001001010000011100000100000
000000100010010000011100000100000
000000100000010010010110000100000
000010000100000010101010000000010
000010000010000001101010100000000
000001000100001000101100000000010
000010001000000001110010000000001
000010001010000000111000000000001
000001010000000001110010001000000
000001100100000000111000000000001
000001001010000000111000000000010
000000010001001000011100000100000
000100100001000000111000000000010
000000000100010010001110100000000
000010010000100000110100000100000
000000000001100100001110100000000
000000000010001001001110010000000
000100001000100000110100000000001
000000001000001100010110001000000
000100000000100010100111000000000
000001000100000100101010000000010
000001010000000001110010000000001
000001100000001000110100000000001
000000010100010000011100010000000
000100010000000100110010001000000
000000010001001000011100000010000
000000010000010001010111000000000
000000001100000100011010001000000
000100001100000000111000000000001
000001000100000001101010000000010
000000000001100001001110010000000
000000001100100000011100000100000
000010000000010001100111000000000
000100001001000000111000000000001
000100000001000001101010000000010
000100100000000001110010000001000
000100000000100001100110000001000
000100010000010000110100000000100
000001100000100000110100000000001
000000010000001001010110001000000
000000100001000100011010000010000
000100100000000001110010001000000
000000000010100010001110010000000
000000001010000001011010000010000
000100100000000010110010000001000
000100010000000010110010000000001
000100000010000100101010100000000
000100000100010000101100000000100
000010000010000100101010000001000
000000000100100001001110100000000
000000000001100001001111000000000
000001001010000000111000000010000
000001000010000001101010100000000
000100001000000100110010001000000
000000100100000001011010100000000
000000010001010000011100000010000
000000000100010010001110010000000
000100010000000100110010000000001
000000010010000100011010100000000
000100000001100000101100010000000




=== State Orbit 18 =====================
size : 360
repr state: 000100100010100000111100000010000
lex min decimal: 21636951043836212505783
states:
000100010100100000111100000010000
000100001100000100111010001000000
000100000100010100101111000000000
000100100001100000111100000000010
000000010001001001011110000100000
000000100100010100011110010000000
000000100100100001011111000000000
000000010001010010011110010000000
000000100001100100011110010000000
000001010000010010110110000001000
000010000001001001101110000000010
000001001001000100111010001000000
000000001010001001011110100000000
000100001000001001110110000001000
000000010010100010011110000100000
000100010010010000111100000000100
000100100100001000111100010000000
000000100100100001011110001000000
000100001000100100110110001000000
000001001001100000111100000000100
000000001001100001011110000100000
000000001001001100011110001000000
000100100000001100110111000000000
000100000100100010101111000000000
000000100100100010011110100000000
000000010010010100011110001000000
000010000010010100101111000000000
000000001100100100011110001000000
000001000010010010101110000000010
000100000100100001101111000000000
000010000010100010101110000000100
000000010010001010011110010000000
000010010000010100110110001000000
000010010010001000111100000000100
000010000001010010101110000000010
000100100000100010110110001000000
000010100010010000111100000000001
000010000010010001101111000000000
000010010000100010110110000000100
000100010000010010110110000001000
000001001100001000111100000000010
000000010100010010011110010000000
000100001001001000111100000000001
000100100001000100111010000000010
000100100000010100110111000000000
000100000010010010101110000000100
000100000100100001101110100000000
000010000010010001101110000001000
000010100000010010110110001000000
000010010010000100111010000001000
000000010001010010011110000010000
000001100100100000111100000000100
000010100010000010111010001000000
000100100010000100111010000000010
000100000010100100101110100000000
000000001100001001011110010000000
000010010100000010111010100000000
000000100001001001011110001000000
000100001001000001111010000001000
000001000100001001101110100000000
000001001001000010111010001000000
000010100100000100111010000000010
000100100100010000111100000100000
000001001000001010110111000000000
000010010010001000111100000100000
000000001001010001011111000000000
000000001010001001011110000010000
000100000001100100101110010000000
000000010001001001011110000010000
000100100010000100111010100000000
000100100100010000111100000000100
000100001000001001110110000000001
000100010010010000111100000000001
000001001000001100110110000001000
000010000010100010101111000000000
000001001010000001111010000010000
000000100100100010011111000000000
000000010100100100011110001000000
000100100100000001111010001000000
000000001001001010011111000000000
000100100000010100110110000000100
000100100100001000111100000100000
000100100000001100110110000100000
000000010100100100011110000100000
000100100010000100111010000010000
000001010010000010111010000000010
000100001001001000111100000000010
000000001010010010011110000100000
000001100100100000111100000000010
000001100000001001110110000000001
000000100100001100011110010000000
000000100010010010011110000010000
000001001001100000111100010000000
000000001010010010011110000010000
000100001100000100111010000000001
000010010010100000111100000000100
000001001010000001111010000000010
000010010000100010110111000000000
000000100100100001011110100000000
000001001000010001110111000000000
000100000100010100101110010000000
000001001000010001110110000000100
000100001100000100111010000010000
000001001001000100111010000001000
000010100000010010110110000100000
000001010001000001111010001000000
000001001001000100111010100000000
000100000100100010101110100000000
000010001000010010110110000100000
000100010010000010111010000001000
000010010010000001111010001000000
000000100001100100011110000010000
000010000010100010101110010000000
000010001000001001110110000000100
000010010001010000111100010000000
000001001100001000111100010000000
000000100010010010011110000100000
000001100001000001111010000000001
000010000100100100101110000000010
000001000001100001101111000000000
000001010010000010111010000001000
000001100000001001110110001000000
000000010010010001011111000000000
000001000010001001101110100000000
000000100100001100011111000000000
000001001100000001111010000010000
000100010000010010110110000000100
000001000001010001101110010000000
000000100001100100011110100000000
000100100000100001110110000001000
000010001001000001111010000000010
000100010010000010111010000000010
000000100010010010011110001000000
000010010000010001110110000001000
000100100100000001111010000001000
000100001000100100110110000000001
000001001010000001111010100000000
000010010000100010110110000100000
000000001100100100011110000010000
000100100100010000111100010000000
000001010001000001111010000000001
000010001001001000111100000000010
000001001000100001110111000000000
000010000010001010101111000000000
000100100000100001110111000000000
000001010000010010110110000000001
000010000010010100101110100000000
000010010100010000111100000010000
000001010001001000111100000000001
000001010010010000111100000000001
000001000001001010101110100000000
000001001000001010110110001000000
000010100100100000111100000000100
000010010010100000111100000100000
000100001001000001111010000000001
000001010001001000111100000010000
000100000100001100101110010000000
000100001000100100110110000100000
000010001001000001111010000000001
000001000100100100101110000001000
000000010010100010011110010000000
000010100100100000111100000000001
000000010010001010011111000000000
000000001001001100011110100000000
000100010000100100110110000100000
000010100010000010111010000000001
000000010010010100011110100000000
000100100001100000111100010000000
000000001010001001011110010000000
000000010010010100011111000000000
000010010001000010111010100000000
000001100001000001111010001000000
000100010100000100111010000010000
000010001000010010110110001000000
000100100100000001111010100000000
000001100100100000111100000000001
000100000100001100101110000000100
000001100000100100110110000001000
000001001000001100110111000000000
000001010010010000111100000000100
000010000001010010101110010000000
000100100000001100110110000000100
000100001001001000111100000000100
000000100001001001011110000100000
000000010100010010011110100000000
000100010000100100110110000000001
000010000010001010101110000000100
000001000001001010101110000001000
000010010000001010110110000100000
000001000001100001101110010000000
000001001001010000111100010000000
000001001001010000111100000000100
000100000010100100101110010000000
000100100000100010110111000000000
000010001010000010111010001000000
000000100100010100011110000100000
000100100100000010111010001000000
000100000010100100101110000000010
000100000100001100101111000000000
000010010010000100111010001000000
000001000010010010101110000001000
000100001001000001111010000000010
000001010010010000111100000000010
000001100001001000111100000100000
000001010000010010110110000000100
000100001100100000111100000010000
000001100000100100110110000000001
000010010001010000111100000000010
000001100001001000111100000010000
000001000001010001101110000000100
000100100100001000111100000000100
000001000001001100101111000000000
000010100100000100111010000000001
000100000010010010101110000001000
000010010100000010111010000010000
000010001001000001111010000001000
000001000010001001101110000000010
000100100010100000111100000000010
000010001010010000111100000000001
000001001001100000111100000100000
000010001001001000111100000000100
000001010000001001110110000000001
000100100000010100110110000100000
000010001001001000111100000000001
000001000001001010101111000000000
000010001000001001110110000001000
000001100001001000111100000000001
000000010010001010011110000100000
000010000100100100101110000001000
000100000010010010101110000000010
000010010010000001111010100000000
000100100100000010111010000001000
000001001010001000111100010000000
000001000100001001101110010000000
000010000100010010101110100000000
000000100010100100011110100000000
000010010000010100110111000000000
000100010100000100111010000000001
000100010000100100110110001000000
000010001010010000111100000010000
000000100010100100011110010000000
000100010100100000111100000000001
000000100001001001011110000010000
000001000010010010101110000000100
000010010100010000111100010000000
000001001001010000111100000100000
000000010010010001011110100000000
000001001010001000111100000000010
000100000001100100101110000000010
000001001000001100110110001000000
000000001001010001011110010000000
000010010000010001110111000000000
000001001100000001111010100000000
000001001001000010111010000001000
000010001010000010111010000010000
000001000100100100101110000000010
000010100010010000111100000100000
000000001100100100011110000100000
000000010100010010011110000010000
000001000010001001101110010000000
000010100100100000111100000000010
000000100010100100011110000010000
000100000001001001101110000001000
000010000001010010101110100000000
000010010000001010110111000000000
000010010010001000111100010000000
000000100100100010011110001000000
000001000001100001101110000000100
000001001001000010111010100000000
000010001000001001110110000000001
000010100000010010110110000000001
000001100001000001111010000010000
000010010010000100111010100000000
000000100100010100011111000000000
000100100000100010110110000001000
000001100000001001110110000100000
000000001001001010011110100000000
000010100000100100110110000000100
000010010001000010111010000000010
000001010010000010111010000000001
000000100100001100011110000100000
000100010100100000111100000100000
000010000100100100101110000000100
000100000001100100101110100000000
000001001000010001110110000100000
000000001001100001011111000000000
000100000100010100101110000000100
000100010010010000111100000000010
000010100010010000111100000010000
000010000001001001101110000000100
000001010000001001110110001000000
000010010000010001110110001000000
000100100001000100111010100000000
000000001001001010011110001000000
000001000100100100101110000000100
000001001000100001110110000000100
000001000001010001101111000000000
000010000010001010101110010000000
000000010010010001011110001000000
000000001100001001011110000010000
000010001010010000111100000100000
000001001000100001110110000100000
000001010000001001110110000100000
000100000001001001101110000000010
000001100100000100111010000000001
000010100000100100110110000001000
000010100100000100111010000001000
000010000100010010101110000000010
000010100000100100110110000000001
000010010100000010111010000000010
000000010010100010011111000000000
000001100100000100111010000000010
000000010100100100011110000010000
000001001100001000111100000010000
000100100001100000111100000010000
000100010100000100111010001000000
000010001010000010111010000000001
000010000001001001101110000001000
000100001100100000111100000100000
000000001010010010011110001000000
000010000010010100101110000001000
000000010001010010011110100000000
000000010001001001011110001000000
000010010001000010111010000010000
000000001001100001011110010000000
000001100100000100111010000001000
000000001001001100011111000000000
000000001100001001011110100000000
000100100001000100111010000010000
000010000010010001101110100000000
000100001000001001110110000000100
000001000100001001101110000000010
000010010000001010110110000000100
000010010001010000111100000010000
000001000001001100101110000001000
000010000100010010101110010000000
000001001100000001111010000000010
000000001001010001011110000100000
000100100100000010111010100000000
000001001010001000111100000010000
000100100010100000111100010000000
000100010010000010111010000000001
000001010001000001111010000010000
000010001000010010110110000000001
000001000001001100101110100000000
000001010001001000111100000100000
000001100000100100110110000000100
000010010000010100110110000001000
000100010000010010110110000000001
000100100010100000111100000010000
000010010010000001111010000001000
000010010100010000111100000000010
000100000100100010101110000001000
000001001000001010110110000001000
000100100000100001110110001000000
000100000100100001101110000001000
000010100010000010111010000010000
000100000001001001101110000000100
000010010010100000111100010000000
000100001100100000111100000000001




=== State Orbit 19 =====================
size : 120
repr state: 000100100010100100111110000010000
lex min decimal: 172771062189343785708727
states:
000010001010010010111110000010000
000100100100100010111111000000000
000010100010010010111110000010000
000100100010100100111110000000010
000001001001001100111110001000000
000010010010001010111110000000100
000010100010010010111110001000000
000001100100100100111110000000001
000100100100100001111111000000000
000010010001010010111110100000000
000001001001100001111110000100000
000010100010010010111110000000001
000100001100100100111110000010000
000100001100100100111110001000000
000010010001010010111110010000000
000100010100100100111110000010000
000100001100100100111110000100000
000001100001001001111110000000001
000100001100100100111110000000001
000010010010010100111110100000000
000010010010100010111110000000100
000001010001001001111110000000001
000001001010001001111110010000000
000001001001001010111110000001000
000010001001001001111110000000001
000010010010010001111110001000000
000001001010001001111110000000010
000010100100100100111110000001000
000001001010001001111110000010000
000100010010010010111110000001000
000001001100001001111110100000000
000001001001001100111111000000000
000010010100010010111110010000000
000001001001100001111110000000100
000100100001100100111110010000000
000010001001001001111110000001000
000100100100001100111110000000100
000100100100100010111110000001000
000001001100001001111110000000010
000001001001010001111110000100000
000001010001001001111110000100000
000001001001100001111110010000000
000100001001001001111110000000010
000100010100100100111110000000001
000001001001001100111110000001000
000001100100100100111110000001000
000100100100010100111110010000000
000001001100001001111110000010000
000001001100001001111110010000000
000001001001001010111111000000000
000010100100100100111110000000100
000100100100100001111110001000000
000010010001010010111110000000010
000001001001001010111110001000000
000010010010001010111110010000000
000010001001001001111110000000100
000010100010010010111110000100000
000100100100100001111110100000000
000001001001010001111110010000000
000010010010010001111111000000000
000001001010001001111110100000000
000001100100100100111110000000100
000100100010100100111110000010000
000010010010001010111110000100000
000010010010010001111110000001000
000010010010001010111111000000000
000100001001001001111110000000100
000010010010010100111111000000000
000100100100010100111111000000000
000001010010010010111110000000001
000100100100001100111110010000000
000010010010100010111110000100000
000010010010010100111110001000000
000100100100100010111110001000000
000010010010100010111110010000000
000001010010010010111110000000010
000001001001001100111110100000000
000100100001100100111110000000010
000001001001001010111110100000000
000100100001100100111110000010000
000010001001001001111110000000010
000010001010010010111110000000001
000010100100100100111110000000001
000010100100100100111110000000010
000001010010010010111110000000100
000001100100100100111110000000010
000100010010010010111110000000001
000100100010100100111110100000000
000001010001001001111110000010000
000100001001001001111110000000001
000100010100100100111110001000000
000001010001001001111110001000000
000100010010010010111110000000010
000001100001001001111110000010000
000010010001010010111110000010000
000100100100001100111110000100000
000001001001010001111111000000000
000010001010010010111110001000000
000010001010010010111110000100000
000100100100010100111110000100000
000001001001100001111111000000000
000100010010010010111110000000100
000010010010010100111110000001000
000100100100010100111110000000100
000010010100010010111110100000000
000100100001100100111110100000000
000010010100010010111110000010000
000100001001001001111110000001000
000100010100100100111110000100000
000001010010010010111110000001000
000100100100100001111110000001000
000001001001010001111110000000100
000001100001001001111110001000000
000001100001001001111110000100000
000010010100010010111110000000010
000010010010010001111110100000000
000100100100100010111110100000000
000100100010100100111110010000000
000010010010100010111111000000000
000100100100001100111111000000000




=== State Orbit 20 =====================
size : 360
repr state: 000100100010100010111110000010000
lex min decimal: 173066205590923511164087
states:
000010001010010001111110100000000
000001001001010010111110000100000
000010010001001001111110001000000
000010010001010001111110000000010
000010010100100100111110000000100
000001001010010010111110000001000
000001010010001010111110010000000
000100100100001001111110000000100
000001100100001001111110001000000
000100100001001001111110000100000
000010010100100100111110000000010
000010010100010100111110000010000
000001001010010010111110000100000
000100100010010100111110100000000
000001001010010001111110000000010
000010001001010001111111000000000
000001001100100100111110000100000
000100100001100001111110010000000
000100100100010010111110100000000
000001100100001100111110000001000
000010010100100010111110000010000
000100100001001100111110100000000
000100001001100100111110000000001
000100001100001001111110100000000
000100010100010100111110010000000
000001010010010001111110000000100
000010100100100010111110000000010
000001001010010010111110001000000
000010010001001010111110000100000
000001100100001100111111000000000
000001001001010010111110100000000
000001010001010010111110100000000
000001001010010001111111000000000
000001001001010010111110000000100
000010001010001001111110100000000
000010100010100010111110000000100
000100100001100001111110000000010
000100100100001001111110001000000
000001010001001010111110000001000
000010001010001010111110010000000
000001001010001010111110001000000
000001010001001010111110000000001
000100100100010010111110000100000
000010010100010100111110000000010
000001001100001100111110010000000
000010010001001001111110000001000
000001001100100100111110000001000
000001010010001010111111000000000
000001001010010001111110000010000
000100100010010010111110000000100
000100001001001100111110000000100
000001100100100001111110000000001
000010001010001001111110000000001
000100001001100001111111000000000
000100100100010010111110001000000
000010001010010001111110000100000
000100001001100001111110000000010
000010010001001010111110000010000
000010001010001001111110010000000
000100010100010010111110000000001
000100010100100010111110100000000
000010010001001001111110000100000
000001001100100100111110000000100
000100001001001100111110100000000
000100010010100010111110010000000
000100001001100100111110000100000
000010100010100100111110000000100
000001100001100100111110000000100
000010010010001001111110000100000
000010010001010001111111000000000
000100001100001001111110010000000
000001100001001100111110000000001
000010100100010100111110000000001
000010010100010100111111000000000
000010100010010100111110100000000
000100001001100100111110100000000
000001010001010010111110000000001
000001100100100001111110000000100
000100001001100100111110001000000
000100100001001100111111000000000
000100100010010100111110000000010
000100001100001100111110000010000
000100100010010100111110000010000
000001100100001100111110000000010
000010010001001010111110000000100
000100100001001001111110000010000
000001100100001001111110000100000
000100100001100001111110000010000
000010001001001010111110100000000
000010001001010001111110000001000
000100010010100010111110000001000
000100010100010100111110000000100
000010001001010001111110000000001
000010001001010010111110000000001
000100100010100010111110001000000
000010010100010100111110000001000
000010100010010100111110000001000
000100100100001001111110000100000
000010100010100010111110001000000
000100100100001001111110000001000
000100100001001100111110000000010
000001100001100100111110000001000
000001001100100001111110100000000
000100100010010100111110000000100
000001001100001100111110001000000
000010100010100100111110000000001
000001010001010010111110000001000
000010001001001010111110000000100
000001010010010001111110000000001
000100010010100010111110000100000
000100001100001100111110000000001
000001001001100100111110000001000
000100001100001100111110001000000
000001100001100001111110000010000
000100100001001001111110000000100
000001010010001010111110000000001
000001010010001001111110010000000
000010001001001010111110001000000
000100001001100001111110000100000
000010010010001001111110000001000
000010010100100010111110000000010
000001001001010010111110010000000
000010010100100010111111000000000
000001010001010001111111000000000
000100010100100010111110000001000
000100010010010100111110000000001
000001001100100001111110000000010
000001001100100100111110000010000
000001001100001100111110000000010
000001010001010010111110000000100
000001001001010010111110001000000
000010010010100100111110000100000
000001010010001010111110000001000
000010100010100010111110000000001
000001010001010001111110000000001
000010100100010010111110010000000
000010001010001001111110000010000
000100100001001001111110001000000
000001100001001100111111000000000
000010010001001010111110100000000
000100001001100001111110010000000
000010010001001001111110000010000
000010010100100100111110001000000
000010100100100010111111000000000
000010100100010010111110100000000
000010001001001010111110000000001
000001100100100001111110001000000
000010001010010001111110000000001
000001100001001100111110100000000
000100100001100001111111000000000
000100100100001001111110010000000
000010100010100010111110010000000
000001100001100001111111000000000
000100001001100001111110000000001
000100100010100010111110010000000
000100001100001100111110010000000
000100100010010010111110000001000
000010001001010001111110000000010
000001001100100100111110000000010
000001001001100100111110100000000
000100001001100001111110000001000
000001001100001100111110000010000
000010010010100100111110000001000
000100010010100100111110010000000
000100100100001001111110100000000
000100100010100010111110000010000
000010100100010100111111000000000
000001010001010001111110001000000
000100001100100001111110000010000
000100010100100010111110000100000
000100100001001001111110000000010
000001010010010001111110100000000
000100010010010100111110001000000
000001001010001010111111000000000
000100001100100001111110000100000
000010100100100010111110001000000
000010010001001010111110000000010
000010100010010100111110000000001
000010001001001010111111000000000
000100100010100010111110000000010
000001100001100100111110000010000
000001001010001010111110000000010
000100100001100001111110000001000
000010010100100100111110000001000
000010100010100100111110010000000
000010010010001001111110100000000
000100100010010100111111000000000
000100100001001100111110000010000
000010010010001001111110000000100
000010010010001001111110001000000
000100001001001100111110000000010
000001010010010001111111000000000
000010010001001001111110000000100
000100001100001100111111000000000
000010010100100010111110000100000
000010100100100010111110100000000
000100010010100100111110100000000
000100010010100010111111000000000
000010001010001010111110000000001
000001001100001100111110000001000
000001010001010001111110000010000
000100100010010010111110000000010
000010010001001001111110000000010
000010010001010001111110001000000
000001001100100001111110000100000
000001001010001010111110000010000
000100010010100100111110001000000
000100100001100001111110001000000
000100010100100010111111000000000
000100001100001001111110000000100
000010010001010001111110010000000
000001001010001010111110010000000
000100010010010100111110000000100
000100001100001001111110000000001
000010010100010100111110010000000
000001100100001001111110010000000
000100100010010010111110000100000
000010001010001010111110000010000
000010100100010100111110010000000
000100100100010010111110010000000
000100100010100010111110000001000
000010100010010100111110000010000
000100010010010100111110100000000
000010010010001001111110010000000
000001001100100001111111000000000
000100010100010100111110000000001
000010001001010010111110000100000
000100010100010100111110001000000
000001010001001010111110000100000
000100001001001100111110000000001
000010001001010010111110001000000
000010001001010001111110010000000
000100010100010010111110100000000
000100001100001001111110000001000
000001001001010010111110000001000
000010001010001010111111000000000
000010100010010100111110000100000
000001100001001100111110000001000
000010001010001001111110000000100
000100100001001100111110000100000
000010001010001010111110001000000
000010100100010100111110000000010
000001100100001100111110010000000
000001100100100001111111000000000
000010001010010001111111000000000
000010001010001010111110000000100
000001001010010010111110000010000
000100100100010010111110000001000
000001001001100100111110000000100
000010010010100100111110010000000
000001001010001010111110000001000
000001100001100100111110010000000
000010010100100010111110000000100
000001100001100001111110000000001
000100100100010010111110000000100
000001001010010001111110100000000
000010100100010010111110000000010
000001100100001100111110000000001
000100010100100010111110000010000
000001001001100100111110001000000
000001100100001100111110000100000
000010100100100010111110000000100
000100010100010010111110000001000
000001010010001001111110001000000
000010010001010001111110000001000
000010100100010100111110000001000
000010001010001001111110000001000
000001010001010001111110010000000
000100001100001001111110000010000
000100010010010100111110000000010
000001100100001001111110000000001
000100001100100001111111000000000
000100100010010100111110000100000
000001010001010010111110000010000
000100010010100100111110000000001
000010010001010001111110000010000
000100001001100100111110000000010
000001001100100100111110001000000
000100001001100100111110010000000
000010001001010001111110000100000
000001100100100001111110000000010
000010100100010100111110000100000
000010001001010010111110100000000
000100100001001001111110000001000
000010001010010001111110000001000
000001001001100100111110010000000
000001100001100100111110100000000
000001100001100100111110000000001
000010010010100100111110000000100
000001001010010001111110000100000
000100001100100001111110000001000
000001100100001001111110100000000
000100001100001100111110000000100
000010010001001010111111000000000
000100100010100010111111000000000
000001001010010001111110000000100
000010010010100100111110100000000
000001010001001010111111000000000
000100001100100001111110000000001
000001010010010001111110000000010
000001001010010010111110000000010
000010010100010100111110001000000
000010010010100100111110001000000
000001010010001010111110000000010
000001010001001010111110100000000
000010100010010100111111000000000
000100010100010010111110000010000
000100010010100100111110000100000
000001010001010010111110010000000
000001010010010001111110001000000
000001001010010010111110000000100
000010100010100100111110100000000
000010100100010010111110000000001
000010010100100100111110000010000
000100010100100010111110000000001
000010100010100010111111000000000
000001001100100001111110000000100
000001100100001001111110000000010
000010001010010001111110000010000
000001100001100001111110001000000
000010100100010010111110001000000
000001010001010001111110000000100
000010001001010010111110010000000
000100010010100010111110000000001
000001010010001001111110000000010
000001001100001100111111000000000
000100010100010100111111000000000
000100001001001100111110001000000
000010100010100010111110000010000
000001010010001010111110000100000
000010010100100010111110100000000
000001001001100100111110000100000
000100010010100100111110000000010
000010100010100100111110000001000
000100010100010100111110000010000
000100100010010010111110000010000
000100001100100001111110100000000
000001100001001100111110000010000
000001100001001100111110000100000
000100010100010010111110000000100
000001010010001001111110100000000
000100001001001100111111000000000
000010100010100100111110000010000
000001010010001001111110000100000
000001100100100001111110100000000
000010100100100010111110000000001
000100010010010100111111000000000
000001001100100001111110000010000
000010001001001010111110000000010
000010100100010010111110000100000
000100100001001100111110000000100
000001010001001010111110000010000
000001100001100001111110010000000
000100100010010010111110001000000
000010010100100100111110000100000
000100010010100010111110000000010
000010001001010010111110000000010
000001100001100001111110000000100
000100010100010010111110010000000
000001010010001001111110000000001




=== State Orbit 21 =====================
size : 360
repr state: 000100100010100001111110000010000
lex min decimal: 173139992567218349370551
states:
000100001100100010111110000100000
000010010100001010111111000000000
000100001010100100111110000000010
000001100001001010111110000001000
000010001100010010111110010000000
000100001100010100111110000010000
000100100100010001111110100000000
000100010100100001111110000100000
000001001100001010111110010000000
000010100001001001111110000000100
000001010100001001111110010000000
000001010001001100111110000010000
000010100001001001111110001000000
000100010010010001111110000000010
000001100010001001111110000000001
000010100100001100111110000001000
000100010010001010111110000001000
000100001001001010111111000000000
000001010010010100111110000000001
000001001001100010111110000000100
000010100001010010111110000000001
000010010010100001111110001000000
000010100100100001111111000000000
000001100010010010111110000100000
000001001100001010111110001000000
000001001010001100111110010000000
000010001001100001111110010000000
000001100010001001111110000000010
000001010001100001111110001000000
000100010010010001111110000000100
000100001010001001111110100000000
000100001100100010111110100000000
000100100001100010111110000010000
000010100001010010111110000000010
000001010001001100111111000000000
000010001100001001111110100000000
000001100001010001111110000010000
000001100010100100111110000001000
000001001010100001111110000100000
000001100001010001111110000000001
000010001100001001111110010000000
000010100001010010111110000100000
000001100010010010111110000000100
000001100100010100111111000000000
000010010100010001111110000001000
000010001100010010111110001000000
000010100001100100111110000001000
000100010001100100111110001000000
000010100100100001111110100000000
000100100001100010111110000000010
000001100010010010111110001000000
000001010010100010111111000000000
000010100010010001111110100000000
000001100001010001111111000000000
000001010010100010111110000000010
000010010001010100111110000010000
000010010100001010111110000000010
000010100100100001111110000000100
000001010100010010111110000000001
000010010001100010111110000010000
000010001010100010111110001000000
000100100010100001111110000001000
000010001010010100111110000001000
000001100100010100111110000001000
000100001100100010111111000000000
000100100010001100111110000010000
000001001001010100111110000000100
000001001010001100111110000001000
000010010001010100111110000001000
000010001010010100111111000000000
000001010010010100111110000000100
000100100001010100111110100000000
000001010010100010111110010000000
000100001010001001111110000000001
000100010100001100111110000000001
000100010001010010111110100000000
000001010100001001111110000100000
000001010100001001111110100000000
000100001001010001111111000000000
000100010001001001111110000100000
000010010001010100111110001000000
000010100001100100111110000010000
000001001001100010111110001000000
000001100001001010111110100000000
000010001001100001111111000000000
000100010001010010111110000000100
000001100100100010111110100000000
000010001010010100111110000100000
000100010001001001111110000000010
000001001100001010111111000000000
000010010001100010111110000000100
000010100010001010111110001000000
000100001001001010111110000000010
000100010100001100111110010000000
000100001100100010111110000010000
000010100100001100111110010000000
000100010010010001111111000000000
000010100001001001111110000000010
000010001100010010111110100000000
000001100010100100111110000000100
000100010001001001111110000010000
000100001010001001111110000010000
000100100001010100111110000000100
000001001010100001111111000000000
000001001010001100111110000000010
000010001100100100111110001000000
000001010001001100111110000100000
000100001001001010111110100000000
000001100010010010111110000000010
000001001100010001111110000010000
000100001001010001111110000000010
000001010100001001111110001000000
000100010001100100111110000100000
000100100010100001111110001000000
000100010100100001111111000000000
000010001001001100111110100000000
000001001100010001111110100000000
000001001100001010111110000001000
000010010010100001111110010000000
000001001001100010111110000100000
000100001010010010111110000100000
000001100010100100111110000010000
000100010100100001111110000001000
000010001010100010111110000010000
000100100100001010111110100000000
000010100010001010111110000000001
000100001010010010111110001000000
000001100001010001111110010000000
000001100010010010111110000001000
000010010010100001111110000000100
000010001100100100111110000001000
000100001010001001111110000000100
000100001010100100111110001000000
000001001001010100111110000001000
000001001001010100111110000100000
000100001010010010111110000000010
000010001100100100111110000000100
000100100001010100111110000100000
000100010100100001111110000010000
000100001010100100111110010000000
000010010010001100111110000000100
000100010100001100111110001000000
000001100001010001111110000000100
000100001001010001111110000100000
000001010001001100111110000000001
000001001010100001111110000010000
000010100010010001111110000010000
000010001010100010111111000000000
000010010010100001111110000100000
000010100001100100111110000000001
000010010100001010111110000100000
000010001100100100111110000000010
000001010100100100111110000000010
000100010100001100111110000010000
000100001001010001111110000000001
000001100100100010111110001000000
000010010010100001111110000001000
000100001010001001111110000001000
000010010100010001111111000000000
000001010010010100111111000000000
000100100100001010111110000001000
000100100100001010111110000100000
000100001010010010111110000010000
000001010010100010111110000001000
000100100100010001111110000000100
000100001010001001111110010000000
000010001100001001111110000000001
000001010010100010111110000100000
000100100100010001111110010000000
000010010100010001111110010000000
000100001010010010111110000000100
000010100001001001111110000100000
000001010100001001111110000000001
000001010010010100111110100000000
000100010001001001111110000000100
000100010001010010111110010000000
000100010001100100111110100000000
000001001010100001111110000000010
000010001001001100111111000000000
000010100001001001111110000010000
000010001100001001111110000001000
000001100100010100111110000000001
000100010010001010111110000000001
000100001010010010111110000001000
000001010100001001111110000000010
000010100001100100111110100000000
000100100010100001111110010000000
000010100001010010111110001000000
000001001100010001111111000000000
000010001010010100111110100000000
000010010001100010111111000000000
000100100010001100111110000000010
000001100001001010111110000100000
000010001100100100111110000010000
000001100010001001111110001000000
000010100100001100111110000000010
000100100001100010111110010000000
000100100010100001111111000000000
000010100010010001111110000001000
000010001001001100111110001000000
000100100010001100111110000100000
000010001001001100111110000000001
000100100100010001111110000100000
000100100010001100111111000000000
000010010100001010111110000010000
000010001010100010111110000000001
000010100010010001111111000000000
000100010100001100111110000000100
000100001100010100111110010000000
000100001100010100111111000000000
000010010001010100111110000000010
000010001100001001111110000000100
000100010010010001111110100000000
000001001010001100111110000010000
000001100010100100111110100000000
000100010100100001111110100000000
000100001100010100111110001000000
000001010100010010111110000000100
000010010001100010111110000000010
000010010100001010111110000000100
000001001100010001111110000100000
000010100001010010111110010000000
000010100001010010111110100000000
000001010010100010111110000000001
000010010010001100111110001000000
000100010010010001111110001000000
000001100100100010111110000000100
000001010001100001111110000000001
000010010010001100111110100000000
000010100100001100111111000000000
000100010001010010111110000000001
000001100100100010111110000000001
000010001001001100111110000000100
000010010010001100111110010000000
000100001001010001111110010000000
000100001001001010111110000000100
000100100001100010111111000000000
000100100001010100111110000000010
000001010001100001111110010000000
000100001001001010111110001000000
000001001010100001111110000000100
000100100100001010111110010000000
000010010010001100111110000100000
000010010001100010111110100000000
000001010010010100111110000000010
000001001001100010111110010000000
000001001100010001111110000000100
000001100010001001111110010000000
000010001001100001111110000001000
000010010100010001111110000000010
000100010010001010111110000000010
000100010010010001111110000000001
000100001100100010111110000000001
000001100100010100111110000100000
000100010001010010111110000010000
000001010100100100111110000010000
000001001010001100111110001000000
000100010001100100111110000000010
000100100001100010111110000001000
000001010001100001111111000000000
000001100100100010111111000000000
000100001001001010111110000000001
000100010001010010111110000001000
000001001100001010111110000000010
000010100100100001111110000000001
000001010010010100111110001000000
000001100100100010111110000000010
000100100001010100111110000010000
000010010100001010111110100000000
000010100010001010111110010000000
000010010001010100111111000000000
000001100010100100111110000000001
000001001001010100111110010000000
000010001010010100111110000010000
000010001100010010111110000100000
000100100010001100111110000000100
000010100010001010111110000000100
000100010010001010111110000100000
000100010001001001111110000001000
000100001010100100111110000100000
000001001100010001111110000000010
000001001010100001111110100000000
000100001100100010111110000001000
000010001001001100111110000000010
000001010001001100111110000001000
000010001010100010111110010000000
000100100001100010111110001000000
000010001001100001111110000000010
000100001100010100111110000000100
000100100010100001111110000010000
000100100100001010111110001000000
000001010001100001111110000000100
000001010100010010111110000010000
000100100100010001111110001000000
000010010010100001111110100000000
000010001100010010111110000000010
000001010100010010111110100000000
000001010100100100111110000000100
000001100100010100111110000000010
000001010100010010111110010000000
000100001010100100111110000000001
000001100010100100111110010000000
000100001010100100111110100000000
000010100100100001111110001000000
000100010010001010111111000000000
000010001100001001111110000010000
000010010100010001111110001000000
000100100010100001111110000000010
000001010100100100111110000100000
000001010100100100111110000001000
000001001001100010111110000001000
000100100100010001111110000001000
000010100100001100111110000100000
000100001001010001111110000001000
000100010001100100111110000000001
000010100010001010111110000010000
000001100010010010111110000010000
000010010010001100111110000001000
000001001001010100111110100000000
000001001001010100111110001000000
000100100100001010111110000000100
000100010001100100111110010000000
000010100001100100111110010000000
000001001100001010111110000010000
000010001001100001111110000000001
000010100100100001111110000000010
000010100010010001111110000000001
000001010100010010111110000001000
000100010001001001111110001000000
000100010100100001111110000000001
000001001001100010111110100000000
000100010010001010111110010000000
000010001010010100111110000000001
000001100010001001111110100000000
000010001001100001111110000100000
000001001010001100111111000000000
000010100010001010111111000000000
000001100001010001111110001000000
000010100010010001111110000100000
000010010001010100111110010000000
000100100010001100111110100000000
000001010100100100111110001000000
000100001100010100111110000000001
000001010001100001111110000010000
000100100001010100111111000000000
000001100001001010111110000000001
000010001010100010111110000000100
000001100001001010111110000010000
000100010100001100111111000000000
000010001100100100111110000100000
000010001100010010111110000000001
000010010100010001111110000010000
000001100100010100111110010000000
000010100100001100111110000000001
000001100001001010111111000000000
000001010001001100111110100000000
000010010001100010111110000100000
000010100001100100111110000000100
000010100001001001111110000001000
000001100010001001111110000100000




=== State Orbit 22 =====================
size : 360
repr state: 000100100010010000111100000010000
lex min decimal: 21932062920218546367671
states:
000010001000001010110111000000000
000100000100010010101110100000000
000000001010001010011110001000000
000100010100010000111100010000000
000100000001100001101110000001000
000100010010000100111010000000010
000000010100010100011110000010000
000001100001000100111010000010000
000100000010010100101110000000010
000010001010000001111010100000000
000010001001010000111100010000000
000100100010000010111010000001000
000010001001000010111010001000000
000000100100001001011110100000000
000001100000100001110110000000100
000100010010000100111010100000000
000010001001000010111010000000010
000001100001100000111100000010000
000100010100010000111100000010000
000010001010000001111010000000001
000000001100001100011110001000000
000001010000010001110111000000000
000000010001001010011110000100000
000100010010000100111010001000000
000100000010010100101110000000100
000010010000001001110110000001000
000100010100000010111010000000001
000000010001010001011110001000000
000100100010000010111010000010000
000100000001100001101111000000000
000000100010100010011111000000000
000010100000010100110111000000000
000000100001001100011110000010000
000001010001000010111010000000001
000100001000100001110111000000000
000010000010001001101110000000100
000001001010000010111010000010000
000001001010000010111010001000000
000000100010010100011110000010000
000010000001001010101110000000010
000100001000100001110110000001000
000100001001000100111010000000001
000100000100001001101110000000100
000010100100010000111100010000000
000100001000001100110110001000000
000010000100010100101110000000010
000000001001100100011110010000000
000010001000010001110110000100000
000010100100010000111100000000001
000010001010000001111010000001000
000001000001100100101110000000100
000100001001100000111100000000010
000010010001001000111100000100000
000100100001001000111100000010000
000100010010100000111100000100000
000001001000100100110110000000100
000010100010100000111100000000001
000100001001000100111010001000000
000010010100100000111100000000010
000001001010010000111100000000010
000001010010001000111100000000001
000000100010100010011110010000000
000100001001100000111100010000000
000010001001010000111100000000010
000010100010100000111100000010000
000000001100001100011110010000000
000000100100010010011110100000000
000001100100000001111010001000000
000000100100010010011110000100000
000010000001010001101111000000000
000000001100100001011110000010000
000001001010010000111100000100000
000010001001000010111010100000000
000000001100100001011110000100000
000000010100100010011110100000000
000100001100000001111010000000001
000100000100001001101110000001000
000100100001000001111010000000010
000000100001001100011110100000000
000010001010001000111100000010000
000010000001001010101111000000000
000010010000001001110110000000100
000100000100010010101110000000100
000010010001000001111010000000010
000001010001000010111010100000000
000100100001000001111010000010000
000100000010010100101111000000000
000010000100100010101110000000100
000001010001010000111100000000001
000000100010010100011111000000000
000010010001001000111100000000010
000000100010100010011110001000000
000100010100000010111010100000000
000000001010001010011110000010000
000010100100010000111100000100000
000100100000010010110110001000000
000001010001010000111100010000000
000100100010000010111010001000000
000100000100010010101110010000000
000100001000100001110110000000001
000010001000001010110110000000100
000000001001100100011110000100000
000000010001010001011110000010000
000010010000100100110110000100000
000100100001001000111100000000100
000001100001000100111010000000001
000000001001100100011110001000000
000000001001010010011110000100000
000100100001001000111100000100000
000001100000100001110111000000000
000010100000100010110110001000000
000000100100010010011110010000000
000100100000001001110110000001000
000100010010000100111010000000001
000010100010000100111010000001000
000100001100001000111100010000000
000001000001100100101110100000000
000000100001100001011111000000000
000001010001010000111100000010000
000010010100000100111010000010000
000100001100000001111010000010000
000000001010010001011110000010000
000001100100001000111100000000010
000001001100100000111100000010000
000100100001000001111010001000000
000010010100000100111010000001000
000000001001010010011110010000000
000100100000001001110110001000000
000001010001010000111100000000100
000010000100010100101110000001000
000001001010010000111100000000100
000100001000001100110111000000000
000001000001100100101110000001000
000001000100100001101110100000000
000100010000100010110110000001000
000000001001010010011110001000000
000100100001001000111100000000010
000000100100001001011110001000000
000001010000001010110110000000001
000001010000001010110110000100000
000000100100010010011110001000000
000010100010000100111010000000001
000010010001000001111010001000000
000000010100010100011111000000000
000100000001001100101110000000100
000010100100000010111010000000010
000100010010100000111100000000001
000010010001001000111100000010000
000100000100001001101110100000000
000001000001010010101110100000000
000100100010000010111010000000010
000010001001010000111100000100000
000001010010001000111100000000010
000100001001100000111100000000001
000010010100100000111100000010000
000100100010010000111100000000100
000100100010010000111100000000010
000100000010100010101110000001000
000100000010010100101110100000000
000010000100010100101110010000000
000001100000001100110110000100000
000001000010010001101110000000100
000000010001001010011110100000000
000001000100001100101111000000000
000001001000010010110110001000000
000001001000100100110110000100000
000010001000001010110110001000000
000010000001001010101110100000000
000001010010000001111010001000000
000001000010010001101110100000000
000000010001001010011110000010000
000000010010100100011110001000000
000010000010001001101110000001000
000001100100000001111010000000010
000010100000010100110110000000001
000010001000001010110110000000001
000001010010001000111100010000000
000001000100001100101110010000000
000001100001100000111100000000100
000001001100100000111100000000100
000010100010000100111010000010000
000000100010100010011110000010000
000100000001001100101111000000000
000001100000001100110111000000000
000000001010010001011110100000000
000001000001010010101110000000100
000100010000010100110110000000001
000010001000010001110110000000001
000100001001000100111010000000010
000100010010100000111100000000010
000001001010010000111100000010000
000010100010000100111010100000000
000010001010001000111100000000001
000100010000010100110110000000100
000100001100001000111100000010000
000010000010100100101110000001000
000000100010010100011110000100000
000010010001001000111100000000100
000001000001100100101110010000000
000001100000100001110110001000000
000010000001001010101110000000100
000001001010000010111010000000010
000001010001000010111010000010000
000001010010000001111010100000000
000010000010001001101110010000000
000100001100000001111010100000000
000000010010100100011110100000000
000000010100010100011110010000000
000001001100000100111010000001000
000000001100100001011110100000000
000010001001000010111010000000001
000100001000100001110110000100000
000010100000100010110110000000100
000001100001100000111100010000000
000100100000010010110110000000100
000100100000001001110110000000100
000000001010001010011111000000000
000001000010001010101110000000010
000001000010010001101111000000000
000001100000001100110110000001000
000010000010100100101110000000100
000000010100100010011110000100000
000000010100100010011111000000000
000100001100000001111010000001000
000100000100001001101110010000000
000001100000001100110110000000001
000010010100100000111100000100000
000000100001100001011110000010000
000100010100010000111100000000001
000001000100100001101110000000100
000001010000010001110110000000100
000000010010001001011110001000000
000001010010000001111010000000001
000001000100100001101111000000000
000001100100000001111010000000001
000000100100001001011110010000000
000010000100100010101110000000010
000000001100001100011111000000000
000000010010001001011110000100000
000000001010010001011111000000000
000000001100001100011110000010000
000100100000001001110110000100000
000100010000010100110111000000000
000001001100000100111010000010000
000010100000010100110110000001000
000000100001100001011110001000000
000100001100001000111100000000100
000010001010001000111100000000100
000001000001010010101110010000000
000100000010100010101111000000000
000100010100010000111100000000100
000010000010001001101110100000000
000100000001100001101110000000010
000001000010001010101111000000000
000010001001010000111100000000001
000001100001000100111010000001000
000010010100000100111010001000000
000010100000010100110110000100000
000100010000100010110110000000001
000001001010000010111010000001000
000100010010100000111100010000000
000100010000100010110111000000000
000000010100100010011110000010000
000001100100001000111100000000001
000010010001000001111010000001000
000100000001001100101110100000000
000010010000001001110110000100000
000001010000010001110110000000001
000000010010100100011110010000000
000100000100010010101110000001000
000001010001000010111010000001000
000001000010001010101110010000000
000000010010001001011110100000000
000010010000001001110110001000000
000010000010100100101110010000000
000010010000100100110110001000000
000000100001001100011111000000000
000010010100000100111010000000010
000010010100100000111100000000100
000001100000100001110110000000001
000001100001100000111100000000001
000000100001100001011110010000000
000010010001000001111010000010000
000010100100000010111010000000001
000010010000100100110110000000100
000100010100000010111010000010000
000001001000010010110110000001000
000100100000010010110110000001000
000001000010001010101110000001000
000001001100100000111100000100000
000010001000010001110110000001000
000000001010001010011110010000000
000010100100010000111100000000010
000001010000010001110110001000000
000010001010001000111100010000000
000000100001001100011110000100000
000000010001010001011111000000000
000001100100001000111100010000000
000001001000100100110110001000000
000010100100000010111010100000000
000010000001010001101110000001000
000001001000010010110110000000100
000010001000010001110111000000000
000000010001001010011111000000000
000001010010001000111100000100000
000100001100001000111100000000001
000000010010001001011110010000000
000010001010000001111010000010000
000010100010100000111100000000100
000001001100000100111010000000010
000100000010100010101110010000000
000000001001010010011110100000000
000001000100001100101110000000010
000010100000100010110111000000000
000001001100100000111100000000010
000010000010100100101110100000000
000001000100001100101110000001000
000100001000001100110110000000100
000100100010010000111100000100000
000010000100010100101111000000000
000010100000100010110110000000001
000010000001010001101110000000010
000010010000100100110110000001000
000000100010010100011110100000000
000100010000100010110110000100000
000001100100000001111010100000000
000000001100100001011111000000000
000001100100001000111100000100000
000000001001100100011110100000000
000100100000010010110110000100000
000000010100010100011110001000000
000100001001100000111100000100000
000001010000001010110110000001000
000001000010010001101110000000010
000100000001001100101110000000010
000001001100000100111010001000000
000100001000001100110110000000001
000100000010100010101110000000010
000001000001010010101110000001000
000100001001000100111010100000000
000001100001000100111010100000000
000100010000010100110110001000000
000100100001000001111010000001000
000001000100100001101110000000010
000100100010010000111100000010000
000100000001100001101110010000000
000010100100000010111010001000000
000010100010100000111100010000000
000000100100001001011110000100000
000000010010100100011110000100000
000000001010010001011110000100000
000001010000001010110111000000000
000001010010000001111010000000010
000001001000100100110110000001000
000000010001010001011110010000000
000010000001010001101110010000000
000010000100100010101111000000000
000100010100000010111010000001000
000010000100100010101110100000000
000001001000010010110110000100000




=== State Orbit 23 =====================
size : 360
repr state: 000100100010010001111110000010000
lex min decimal: 175501173556853358292151
states:
000010001100100001111111000000000
000001010100100001111111000000000
000001100010100010111111000000000
000100010001001100111110100000000
000010100100001010111110000000010
000001001010100100111110000100000
000010001010100100111110010000000
000001010100010100111110010000000
000010010100001100111110000010000
000100001100010010111110100000000
000010100001010100111111000000000
000100001001100010111110000100000
000010001010100001111110000001000
000100100001001010111110000010000
000100100001001010111110000000100
000100010001100010111110000000001
000100010010001001111110010000000
000100001001100010111110010000000
000001010100001010111110000001000
000100001100001010111110000000001
000100001010010001111110000100000
000100010010001001111110100000000
000010001001010100111110000000010
000001001010100100111110000001000
000100010001001010111110100000000
000100001010100010111110000000010
000100100001010010111110001000000
000010100001001010111110000000100
000100001010001010111110010000000
000001010001100100111110010000000
000001010010100100111110000100000
000010100100001001111110010000000
000001001100100010111110000010000
000010010001001100111110000100000
000001100100010001111110000000010
000001001100010100111110000010000
000010100010001100111110000000001
000010100001100010111110000000100
000010100001100001111111000000000
000010100010001001111110100000000
000100100010001001111110000000100
000100100010001010111110001000000
000100010001001010111110000100000
000001100010001010111111000000000
000100010001001100111111000000000
000010100100010001111110000100000
000001100010100001111110001000000
000001100100010010111110000100000
000010001100100010111110000000010
000001010010001100111110000000001
000001010010100100111110100000000
000100100001010010111110000000100
000100001001010010111110100000000
000100100001010001111110000000010
000010100010100001111110000000001
000100010001100010111111000000000
000100001001010010111110010000000
000001010100010100111110000010000
000010010100100001111110000100000
000010001010100001111110100000000
000010100001010001111110000000010
000001010010100100111110010000000
000001010100001100111110000001000
000010010100001100111110000000010
000100001001010100111110100000000
000001100001100010111110000010000
000010001010001100111110000010000
000100010100010001111110000000001
000010100001010001111110000001000
000001010100010001111110000000100
000100010010001001111110001000000
000001100100010010111110100000000
000001010001100010111110000001000
000100001010100001111110000001000
000010100010001100111110100000000
000001001010010100111110000000100
000010001100100010111110100000000
000001001010100010111110000001000
000001001100010100111110001000000
000001100010010001111110000000100
000100001001010010111110001000000
000100010001100001111111000000000
000001010100100010111110100000000
000010100100001001111110001000000
000001001100010010111110000100000
000010100001001010111110000000010
000001100001100010111110010000000
000010010100100001111110000010000
000001100001010010111110000001000
000100001100010010111110010000000
000001100100001010111110010000000
000001001100100010111110000000100
000100010001100001111110010000000
000100001100001010111110000010000
000100001001010100111110001000000
000010100001001010111110100000000
000100001100010001111110000001000
000010100010001100111110000010000
000010010100001001111110000001000
000100001010010001111111000000000
000100001010100010111110000001000
000001001010010100111110000010000
000100100010010001111110000000010
000100010001001100111110000000100
000001100010100001111111000000000
000001010010100001111110000000010
000001100001010100111110000001000
000001010001010100111110000000100
000010100100010001111110000000010
000001010001100100111110000001000
000010010001100100111110000100000
000100001001010010111110000100000
000010100001100010111111000000000
000010001010001100111110000000100
000001010100010001111110000000001
000001100010100001111110000000001
000001100010001100111110000000001
000100001100010001111110000010000
000010010100001100111110001000000
000100010001100001111110000001000
000100001010001100111110001000000
000100010100001001111110100000000
000010010001100001111110001000000
000100001010010001111110100000000
000001001100010100111110000001000
000001010001010100111110010000000
000001001010100100111110001000000
000001010010001100111110010000000
000001100010010100111110000100000
000001100100010010111110010000000
000001001100010010111110001000000
000010001001010100111110010000000
000001001100100010111110000100000
000001001100100010111110000000010
000010010001100100111110000001000
000001010001100010111110000000001
000001010100100010111111000000000
000010001010100100111110100000000
000100100010001010111110000000010
000010100010100001111110000010000
000010001001100010111110100000000
000100010010100001111110010000000
000010010001100001111110000001000
000001100010100010111110001000000
000010100100001001111110100000000
000010100010001100111110000001000
000100010010001100111110001000000
000010001100001100111110001000000
000001100010001010111110000000010
000100010001100010111110000001000
000100010100001010111110000001000
000010010001100100111110001000000
000100010100010001111110010000000
000100001100010001111110000000001
000100001010010100111110100000000
000010100001001100111111000000000
000001010100100010111110000100000
000100100010001001111110001000000
000010100001100010111110000000001
000001010100001100111110000000010
000010100001100001111110000010000
000010100100001001111110000100000
000001100010010100111110000010000
000001100010010001111110100000000
000010010100100001111110000000100
000100001100010001111110100000000
000001010100010001111110001000000
000010001100010001111110000001000
000010001010100001111110000010000
000100001010100001111110000000001
000010100001010100111110000000001
000001010100001010111110000000001
000010100001100001111110001000000
000001100100010001111110000000001
000010001100010100111111000000000
000100010001100010111110000100000
000010100001010100111110000100000
000010001100010001111110000000001
000010001001100100111110001000000
000001100010100010111110010000000
000001100010001010111110010000000
000100001010001100111111000000000
000100010001001010111111000000000
000001001100010010111110000000100
000010010100001001111110001000000
000010100001100010111110001000000
000100100010010001111110000000100
000001001100010010111110000001000
000001100001010010111110100000000
000001100010010001111110000000010
000100001010001100111110000000001
000100010001100001111110000000010
000100010100001010111110100000000
000100100010001010111110000010000
000001100001100010111110000000100
000010010100001100111110000001000
000100010001010100111110000000001
000100010001010001111110000010000
000100010100001001111110000000100
000100100001010010111110000100000
000100001010100001111111000000000
000010100010001001111110010000000
000010001001100100111110010000000
000010010100001001111110000000100
000100001010001010111110000010000
000001100001010100111110000000001
000010010001001100111110000000100
000001100010010100111110100000000
000010100001010001111110010000000
000010001100001100111110010000000
000100010001010001111110001000000
000100010010001100111110000000001
000001010010001100111110000000010
000010001100100001111110000010000
000010001100100010111111000000000
000010100001001100111110100000000
000010001100001100111110000010000
000001001010100100111110000000100
000010001100010100111110000000010
000001010010100001111110001000000
000100100010001010111110000001000
000001100001010010111110010000000
000010100010001001111110000000100
000001001010100010111110000010000
000010001100100001111110000100000
000010001100001010111110000000001
000010001001100010111110001000000
000010010001001100111110000010000
000010010001100100111110000000100
000001010010001100111110000100000
000001001010010100111110000000010
000010001100010100111110010000000
000001001010100010111110001000000
000100100001010001111110001000000
000100001100010010111110000000100
000010001100010100111110000001000
000001100010100001111110000000100
000100010010001001111110000100000
000100001100001010111110010000000
000001010100010100111111000000000
000010001001100100111110100000000
000100100001010010111110000001000
000100010001010100111110001000000
000010001100010001111110000100000
000001001100010100111110000000010
000010001100001100111111000000000
000100010100010001111110000010000
000001010100001100111110010000000
000100001010001100111110000000100
000100010001010001111110010000000
000100010001010100111111000000000
000100001100001010111110000000100
000010001001010100111110000100000
000001100010001100111110000001000
000001001010010100111110000100000
000010001100010001111111000000000
000010001001100100111110000100000
000001100100001010111110000000001
000100010100001001111110010000000
000001100010001100111110000100000
000100010001010100111110000000100
000001010001100100111110000000100
000001010010100100111110001000000
000001010100010100111110001000000
000001010100001100111111000000000
000010001001010100111110000000001
000001010010100001111110000000001
000100100001001010111110000000010
000010100100010001111110000000001
000001010100001010111111000000000
000001010100010001111111000000000
000100010010100001111110000100000
000100001001100010111110000000001
000100001100010010111110000001000
000100001010010100111111000000000
000100010100001010111110000010000
000010100010100001111110000000100
000010100100001010111110001000000
000100010010100001111110000000001
000010100010100001111110010000000
000010001001100010111110000000010
000100010001001010111110000010000
000001100001010010111110000000100
000100010100001010111110000000001
000100100010010001111110000100000
000010010100100001111110000000010
000001100010100010111110000010000
000001010100100010111110000010000
000001001010100010111110000000010
000001100010010001111111000000000
000100100010001001111110000001000
000100100001010001111110000010000
000010001010100100111110000000100
000100001010001010111111000000000
000010001010001100111110000000001
000001100001010100111110100000000
000100100001001010111110000100000
000001010100001010111110000100000
000010001001100010111110000000001
000010100001001010111111000000000
000001010100100001111110000000100
000100010100010001111110000000100
000010001010100001111110000000001
000001100010001010111110000001000
000100010010001100111110100000000
000001010100100001111110000000010
000001100010010100111111000000000
000001100100010010111110001000000
000100100010010001111110000010000
000010001100001010111110000000100
000100001010010100111110000000100
000001010001100100111110100000000
000100001010010100111110000000010
000010100001010001111111000000000
000100010100001001111110000001000
000001010001010100111110000010000
000100010001010001111111000000000
000100010010100001111110000000010
000001010010100001111110100000000
000010100010001001111110000001000
000001100100001010111110000000010
000010100001100001111110010000000
000010100100001010111110100000000
000100001010001010111110001000000
000010100001001100111110000010000
000100001010100010111111000000000
000010010001001100111110000000010
000010001010100100111110000001000
000100001001010100111110000000010
000010001100100001111110100000000
000010100001001100111110000100000
000100001010100010111110010000000
000010100100010001111110010000000
000100001010100001111110000100000
000010001100100010111110000000100
000010010001100001111110000000010
000100001010010001111110000010000
000001100001010100111110000010000
000100001001010100111110000000001
000001010001100010111110000010000
000010001100001010111110001000000
000001010001010100111110000000001
000001100001100010111110000000001
000010001010001100111110010000000
000001100100001010111110000100000
000010010001100001111110000010000
000001010100100001111110100000000
000010001100001010111111000000000
000100100001010001111110000001000
000100001001100010111110000000010
000001010001100010111110100000000
000010100100001010111110000000001
000100010001001100111110000000010
000100010010001100111110000000010
000010100001010100111110000001000
000001100100010001111110100000000
000100100010001001111110000100000
000001100100010001111110001000000
000010010100001001111110000100000
000001100010001100111111000000000




=== State Orbit 24 =====================
size : 720
repr state: 000100100010001000111100000010000
lex min decimal: 22005849896513384574135
states:
000010010100001000111100000100000
000100010001000100111010001000000
000010001000010100110110000001000
000010000100001100101110000000010
000100010001001000111100000000010
000001100010000100111010000000001
000010001000100100110110000100000
000100001010000010111010001000000
000010100000001100110110000001000
000010001000100001110110000001000
000010100010001000111100010000000
000001010000001100110110000100000
000000010100010001011110010000000
000000001010100100011110000100000
000000100010001001011110010000000
000000010100001100011110000010000
000010001000100010110111000000000
000010000001001100101110000000100
000000001100010100011110010000000
000001100000100010110110001000000
000010001100000010111010001000000
000001010100100000111100000100000
000100010010000001111010000000010
000000010010001100011110001000000
000000100010100001011111000000000
000000100010100001011110001000000
000010100001100000111100010000000
000000100001100010011111000000000
000000100001100010011110001000000
000010000001100010101110000000010
000000100010001100011110000010000
000001010100100000111100000000100
000100010001100000111100000100000
000000001100010100011111000000000
000100000010001001101110100000000
000100100000001010110110000000100
000010000001100001101110000001000
000001100000001010110111000000000
000010100001100000111100000000001
000010100001000100111010100000000
000010010000100001110110000100000
000000100001010001011110010000000
000000010100001010011111000000000
000000010001100100011110000100000
000000100001100010011110010000000
000010000100001010101110100000000
000001000001010100101110000001000
000100001001000010111010000000010
000010001010100000111100000010000
000010001100000010111010000000001
000100001010001000111100010000000
000001100010000001111010100000000
000000100001010010011110000100000
000100100000010001110110001000000
000010000010001100101110000001000
000001001100000010111010001000000
000010001100100000111100000000010
000100010000001010110110000000001
000010001001100000111100000000001
000010001100000001111010000000001
000100010001000100111010000000010
000100001000010001110110000000001
000010000001100100101110000000100
000100001010000001111010000001000
000000100001010001011111000000000
000001010010000100111010000000010
000010000100001010101110000000010
000100100001000010111010001000000
000000100010010001011110100000000
000100010100001000111100000000100
000010001000100001110110000000001
000001001100000010111010000010000
000010001100000001111010000001000
000100000010001100101110000000100
000000100001010100011110000100000
000010010100000001111010000000010
000001010100001000111100000000001
000010001000100100110110000000100
000100010000010001110110000000100
000100001010000010111010000010000
000100010001010000111100010000000
000100000100010001101110100000000
000010100000001010110110000000100
000010010001100000111100000000010
000010000100001001101110010000000
000000001010010100011110100000000
000001000010010100101110100000000
000010010100001000111100000000010
000001010010000100111010100000000
000001001010000100111010001000000
000010001001100000111100000100000
000000010100100001011110000100000
000000100100001010011110010000000
000000010001100010011110100000000
000001001000100010110110000000100
000001000100010001101111000000000
000010000100001001101110000001000
000010001010100000111100010000000
000000010010100001011110001000000
000000001010001100011110001000000
000001001000100010110110000100000
000010100010000001111010000000001
000001001000010100110110001000000
000001010100010000111100000010000
000100001010100000111100000000010
000100001100000010111010100000000
000100000010100001101110000000010
000000001010100010011110010000000
000000001010100010011110001000000
000010100000010001110110000001000
000010001001100000111100010000000
000010000010100001101110100000000
000001000010100010101111000000000
000000010001100100011110100000000
000001100100000010111010000000010
000000001001010100011110010000000
000001100100000010111010000000001
000000100001010001011110001000000
000100010000100001110110000001000
000001000010001100101110000000010
000001000010010100101110000000010
000100000001100010101111000000000
000100010001100000111100010000000
000001010100001000111100010000000
000001100010001000111100000100000
000000010001001100011110000010000
000010100000010001110111000000000
000000001010100001011111000000000
000000100010001100011111000000000
000001000001100010101110010000000
000010100001000001111010000010000
000001100001000010111010000010000
000001100010010000111100000000100
000001010000100100110110000001000
000000001010100100011110010000000
000000001100001010011110000010000
000000010001100001011111000000000
000010001100100000111100000000100
000010001000100010110110001000000
000100001001010000111100000000001
000100010001000100111010000000001
000010000100100001101110000000100
000100010001100000111100000000001
000100010100000001111010000010000
000001100000010100110110000000001
000001000100010001101110000000100
000100000001100010101110000000010
000001100100010000111100000000010
000100000010001010101110000001000
000010010100001000111100000000100
000100000100001010101110100000000
000010000100100001101111000000000
000001100100010000111100010000000
000001001010100000111100000100000
000001001000010100110110000000100
000000001010100001011110000100000
000010001100010000111100000000010
000000010010001100011110100000000
000010010000001100110110000001000
000100100000010001110110000000100
000001010100100000111100000010000
000100010001000001111010000000010
000001000010001100101111000000000
000010100001001000111100000100000
000000100010001001011110100000000
000010100001000001111010001000000
000100001000010100110111000000000
000100001010000100111010001000000
000001100010000001111010000000010
000001000100010100101110000000010
000100100001000010111010000000010
000001010000010100110110000000100
000010001010100000111100000000100
000100000001010100101110000000010
000001010010100000111100010000000
000000010100001010011110000100000
000001100010100000111100000000100
000001000100001010101110000000010
000001100000010001110110000000100
000001010100010000111100000000100
000100001100010000111100000000100
000000100001001010011111000000000
000100000010001010101110000000010
000000100010001001011110001000000
000100001000001010110111000000000
000100000010100001101110010000000
000100010001000010111010000001000
000000001100010100011110000010000
000001100000010001110111000000000
000001010000100100110110000000100
000001100010000010111010001000000
000010001000010100110110000000001
000001100010000100111010000010000
000100010100001000111100010000000
000001100010010000111100000000010
000010100000001010110110000000001
000010000010100001101110000000100
000010000010001100101110000000100
000001000001010100101110010000000
000010100100000001111010100000000
000100001001010000111100000100000
000100000010001100101111000000000
000010001000001100110110000000100
000001000010100100101110010000000
000100010001010000111100000000100
000100010100000001111010000001000
000010001010000100111010000010000
000000001100001010011110010000000
000000010001100001011110000010000
000000001010001100011111000000000
000000010001001100011111000000000
000001010000100010110111000000000
000000001010001100011110010000000
000100010000001001110110001000000
000001000100010001101110100000000
000100000001010100101111000000000
000001010100000100111010000001000
000000010100001001011110001000000
000010001000010100110111000000000
000000100010001100011110000100000
000010000010001100101110010000000
000010100010000001111010000010000
000001010100000100111010000000010
000100000010001010101110010000000
000001000010100001101110100000000
000100010010001000111100000100000
000000010100001100011111000000000
000010001000100010110110000000100
000010100100000001111010001000000
000001100000100010110110000000001
000000010001100010011111000000000
000000100010001010011111000000000
000000100010010001011111000000000
000100000100001010101110000001000
000010000001010100101110000000010
000100001000010100110110000000001
000001100010000010111010000000010
000100010010000001111010100000000
000100100001010000111100000000010
000001100010001000111100000000010
000000100100010001011110100000000
000100000010100001101110000001000
000010100000010001110110000100000
000100010001010000111100000000001
000001001010100000111100000010000
000100010000001001110110000001000
000100010010001000111100000000001
000010001100001000111100000000001
000100000001010010101110000000100
000000100010001010011110000010000
000010001000100100110110001000000
000010010001100000111100000100000
000001100001000010111010100000000
000010010001000100111010000001000
000010100000001100110110000000001
000000010001100001011110010000000
000100000001010001101111000000000
000001010000010100110110000000001
000010000001100001101110010000000
000010001100010000111100000000001
000100000100001010101110000000100
000000001100001010011110001000000
000010000100001001101110100000000
000100000010010001101110000000010
000010000100001010101110000000100
000001001010000100111010000000010
000010001100000010111010000000010
000100000001100010101110000001000
000100001000010010110110000000100
000100010010000001111010000000001
000010100100000001111010000000001
000010000100001100101111000000000
000000001010001100011110000010000
000010000100010001101111000000000
000010001001000100111010100000000
000000001100010010011110001000000
000010100001000010111010000000001
000001000001010100101110100000000
000100001000100010110111000000000
000001100001010000111100010000000
000001000100001010101110000001000
000001000010001100101110010000000
000001000100010010101110000001000
000001000010100010101110000001000
000000001100010100011110001000000
000100000001001010101110100000000
000010100000001001110110000000100
000100010100001000111100000010000
000010010001000100111010001000000
000001010100000010111010000010000
000000001100010001011110000010000
000000010100001100011110010000000
000010100001100000111100000000100
000001001010000100111010000001000
000001010010100000111100000000001
000100001001010000111100010000000
000010000010001100101110100000000
000010010100000001111010001000000
000100001010100000111100000100000
000001000010100001101111000000000
000010001100000010111010100000000
000000010010001100011110010000000
000100010001001000111100000100000
000010000100010001101110000000010
000010010000100001110110000001000
000000001001100010011110100000000
000000001010100100011110100000000
000000100010001010011110001000000
000000010010100001011110010000000
000001001010000100111010000010000
000010001100001000111100010000000
000100001100000010111010000001000
000001100100000010111010100000000
000010100001001000111100000010000
000001000010100010101110000000010
000001001000010100110110000100000
000010100001010000111100000100000
000100001001000010111010001000000
000010100001000001111010000001000
000010001100001000111100000010000
000001100000001010110110000000001
000100001000001010110110000000001
000001100010000100111010000001000
000001000010010100101111000000000
000010100100001000111100000100000
000001001000100010110110001000000
000100001000010001110110000001000
000010100001000100111010000000001
000000001010010100011110000010000
000100100001010000111100000000100
000001010100000100111010001000000
000100010000100001110111000000000
000010010001100000111100000000100
000010000001100010101110000000100
000010100000001001110110001000000
000001000001100010101110000001000
000010000100001100101110000001000
000001000100100010101110100000000
000010010000100001110110000000100
000100010100000001111010100000000
000000010010100001011110100000000
000100001000010001110111000000000
000001010001100000111100000000001
000001010010000100111010001000000
000010100000100001110110000000100
000010001100001000111100000000100
000010000100001100101110010000000
000000010100001010011110000010000
000100010000010001110110000000001
000000001100100010011111000000000
000001100000001010110110000100000
000100000010001001101110010000000
000010100000100001110110001000000
000010000001100010101111000000000
000000100001001010011110000100000
000010100000001100110110000100000
000000010001010100011110010000000
000100010001000010111010000010000
000000001010100010011111000000000
000001100010010000111100000010000
000000010001100100011110001000000
000001000010100010101110010000000
000001010100000001111010001000000
000001010000100001110110001000000
000001010001000100111010000010000
000010001001000100111010001000000
000100010000100001110110000000001
000001100000010010110110000000100
000010001100000100111010000010000
000000010100100001011110000010000
000001000100010010101110100000000
000001100000010100110110000001000
000010100001000001111010000000010
000000001001100010011110000100000
000100010000001010110111000000000
000001010000100010110110000000001
000100000010010001101110100000000
000000100001010010011110001000000
000100001010000001111010100000000
000001100001010000111100000000100
000001010000100100110110000100000
000001010001100000111100000010000
000100000100010001101110000001000
000001100000010010110110001000000
000100001100010000111100000010000
000010100000001001110110000100000
000100100001000010111010000010000
000100010001001000111100000000100
000010001100000100111010001000000
000100000001010100101110100000000
000000001001010100011110001000000
000010000100001001101110000000100
000001000100001010101111000000000
000100001010100000111100000000001
000010100001000100111010000001000
000100010001001000111100000010000
000100010001000100111010100000000
000010001010100000111100000000001
000001000100010100101111000000000
000000001100010010011110010000000
000001010001100000111100000000100
000010001001000100111010000000001
000000001010100100011110001000000
000001000010100100101110100000000
000001100010001000111100000000001
000010010000100001110110001000000
000010000001100001101110000000010
000100001000010100110110000000100
000001001100010000111100000100000
000010001000001100110110000000001
000010100000001010110111000000000
000010001000001100110110001000000
000001010000100001110110000000100
000100000001010010101110100000000
000100010001100000111100000000010
000000100001010100011111000000000
000001010000100100110110001000000
000001010010000100111010000000001
000001000001100010101110000000100
000010100100001000111100000000001
000010010000001100110110000000100
000001010100000001111010000000001
000010001100010000111100000100000
000010100100000001111010000000010
000001100010000010111010000001000
000100010010001000111100010000000
000000010001100100011110010000000
000100001010100000111100010000000
000010100001000010111010001000000
000001001100010000111100000000100
000100010010000001111010001000000
000010000010100001101110010000000
000100001000010010110110000001000
000100001010000010111010000000010
000001100001010000111100000010000
000000001010100001011110000010000
000001000001010100101110000000100
000001010001000100111010000001000
000000001100001010011111000000000
000000100001001010011110100000000
000010000100100001101110100000000
000010010001100000111100000010000
000010000001100100101110000001000
000100000001010001101110000000010
000010010100001000111100000010000
000100010100000001111010000000001
000001010100000100111010000010000
000010100000001001110110000001000
000001100001010000111100000000001
000100000010010001101110000000100
000000001100100010011110000100000
000001100000010100110111000000000
000001100000010010110110000100000
000100000001001010101110000000010
000010001001000100111010000000010
000001000100010010101110000000100
000100010000001010110110000100000
000100100000010001110110000001000
000100001100010000111100000000001
000100010000010001110110001000000
000100001010010000111100000010000
000000001001100010011110001000000
000000100100001010011110100000000
000100100000001010110110001000000
000100001001010000111100000000010
000000010100001001011110000100000
000000010001100001011110001000000
000000001100010010011110100000000
000100000100010001101110000000100
000010010100000001111010000001000
000010000010100001101110000001000
000010100100001000111100010000000
000010001000100001110111000000000
000000010010100001011110000100000
000001000100010001101110000000010
000100001000010100110110001000000
000010100001000100111010000010000
000010100001001000111100000000100
000001000010100001101110000000010
000000100010100001011110010000000
000001001100010000111100000010000
000001001010100000111100000000010
000100100001000010111010000001000
000010100010001000111100000000001
000010100001010000111100000000001
000100001001000010111010000000001
000000010001001100011110100000000
000001100010100000111100000000001
000000010100010001011111000000000
000100001100000010111010000010000
000001100010001000111100010000000
000100001000010010110110001000000
000001100010000100111010100000000
000001000001100010101110100000000
000000010001010100011110000010000
000100010000001100110110000000100
000000010001100010011110000100000
000001010100000010111010100000000
000001010000001100110111000000000
000010100000010001110110000000001
000001100010000010111010000010000
000100010000001001110110000100000
000100001010010000111100000000100
000000010001010100011110001000000
000100100010000001111010000000010
000010001000100100110110000001000
000010100001001000111100000000010
000010000001100010101110100000000
000100100010001000111100000100000
000000100100010001011110000100000
000001100000100010110111000000000
000001000010010100101110000000100
000000100010001010011110010000000
000100000010010001101111000000000
000000010001001100011110000100000
000010001100000100111010000000010
000000100010010001011110000100000
000100001000100010110110000000001
000100001010000010111010000001000
000001001010100000111100000000100
000000100001010100011110100000000
000001100100010000111100000000001
000001100100010000111100000100000
000010100001010000111100000000010
000000100010100001011110000010000
000001100000001010110110000001000
000010001100000001111010100000000
000001000100100010101110000000100
000100010000001100110110000000001
000010000001100100101110010000000
000001010010100000111100000000010
000001000100010100101110010000000
000000010100001001011110100000000
000100010000001100110110001000000
000001010100010000111100010000000
000001100000010010110110000001000
000010000001001100101110000000010
000001001100010000111100000000010
000000100001010100011110000010000
000010100010000001111010000001000
000001100100000010111010001000000
000010001100000100111010000001000
000001100000100010110110000000100
000100001010001000111100000000100
000100000001001010101111000000000
000100010001000001111010000001000
000100001010000100111010000000010
000010001010000100111010100000000
000010000001010100101111000000000
000100100001010000111100000010000
000001001000100010110110000001000
000001100000010001110110000000001
000001000010100001101110000000100
000010000001010100101110000001000
000100001010010000111100000100000
000001010010100000111100000100000
000010010001000100111010000000010
000000010100010001011110001000000
000001010001100000111100010000000
000100001000010010110110000100000
000000100100010001011110010000000
000100100010000001111010001000000
000001000010100100101110000000100
000100000001001010101110000000100
000100010100001000111100000000001
000010001100100000111100000100000
000100000010001001101110000001000
000100001010000001111010000010000
000100001010000100111010100000000
000001000100001010101110010000000
000000100001010010011110100000000
000010100010001000111100000010000
000001010000100001110111000000000
000100010010001000111100000000010
000010100000001010110110001000000
000001100001000010111010000001000
000001010000010100110111000000000
000001010100001000111100000000010
000000010100010001011110000010000
000000010100001001011110010000000
000000100100001010011110001000000
000000001100010010011110000100000
000000100001001010011110000010000
000010000001001100101110100000000
000000010100001010011110100000000
000001100000010100110110000100000
000010100000100001110110000000001
000100000001010100101110000000100
000100100000010001110110000100000
000001010001000100111010100000000
000010100001000010111010100000000
000001010100001000111100000100000
000001010100000010111010000001000
000100000010001001101110000000100
000000100010010001011110000010000
000100001000010001110110000100000
000010100010000001111010100000000
000000001010010100011111000000000
000100010000001010110110000001000
000100000100010001101110010000000
000100100010000001111010000010000
000000100001100010011110000010000
000010000100010001101110000001000
000010100001100000111100000010000
000000001001100010011110010000000
000000100001010010011110010000000
000100001001000010111010100000000
000001010000100001110110000000001
000100100000001010110110000100000
000100010001000010111010000000001
000100100000001010110110000001000
000100100010001000111100000010000
000010100010001000111100000000100
000010001010000100111010000001000
000000001001010100011110000100000
000010000001100001101111000000000
000000001100100010011110000010000
000000001100100010011110100000000
000000100010001001011110000100000
000100010001000010111010100000000
000100010001000001111010001000000
000001100010000001111010000000001
000100100010001000111100000000010
000100000010001100101110000000010
000001100000010001110110001000000
000001010000010100110110001000000
000100010001000001111010000010000
000100000001010010101110010000000
000010010000001100110110000100000
000010000100001010101111000000000
000100000100001010101110010000000
000100010000010001110111000000000
000010001000100001110110000100000
000000001100010001011110100000000
000001010001000100111010000000001
000001001000010100110110000001000
000010100000001100110111000000000
000100001010000100111010000000001
000010100001010000111100010000000
000001100001000010111010000000001
000100000001100010101110010000000
000001010100000010111010000000001
000010000100010001101110010000000
000100001000100010110110000100000
000001010100000001111010000000010
000100001100000010111010000000001
000010010100000001111010000010000
000001100010100000111100000010000
000010010001000100111010000010000
000001001100000010111010000000010
000001000100010100101110000001000
000001000010001100101110000001000
000100000010001010101111000000000
000000001010010100011110000100000
000010001000100010110110000000001
000100000001010010101110000001000
000000100100001010011110000100000
000100100010001000111100000000100
000001100010010000111100000100000
000100100010000001111010000001000
000000010010001100011110000100000
000010000001001100101111000000000
000001010000001100110110000000001
000010000001100100101110100000000
000001001100000010111010000001000
000000010100001100011110001000000
000010001001100000111100000000010
000100001100010000111100010000000
000000100010001100011110100000000
000100001000001010110110001000000
000001010100100000111100000000010
000100010000001001110110000000100
000010010000001100110110001000000
000010001100010000111100010000000
000001010100010000111100000000001
000000010001100010011110000010000
000001000100100010101111000000000
000010100000100001110111000000000
000000010100100001011111000000000
000100100001010000111100000100000
000010001000001100110111000000000
000001010000001100110110000001000
000100010000100001110110000100000
000100001010010000111100000000010
000010001100000001111010000010000
000000100100010001011110001000000
000010100001000010111010000000010
000100001010001000111100000000001
000000001001010100011110100000000
000100001000001010110110000000100
000000001010100010011110000010000
000001010000100010110110000100000
000100000001010001101110000001000
000000010100100001011110100000000
000001010100000001111010100000000
000010001000010100110110000100000
000100010001010000111100000010000
000010001010000100111010000000001
000100000010001100101110100000000
000001000010100100101110000001000
000001100010100000111100010000000
000000100001010001011110000010000
000001000100010010101110010000000
000000001100010001011111000000000
000010000100100001101110000000010
000100000010100001101111000000000
000100001010001000111100000010000
000000010001010100011111000000000
000100010000001100110111000000000
000100001010000001111010000000001
000010100100001000111100000000010
000001000100100010101110000000010
000010000001010100101110010000000
000000001010100001011110100000000
000000001100010001011110000100000
000001010000100010110110000001000
000100000001010001101110010000000
000100001000100010110110000001000
000001100010000001111010001000000
000010001100100000111100000010000




=== State Orbit 25 =====================
size : 360
repr state: 000100100010001001111110000010000
lex min decimal: 175501180312252799347895
states:
000100010010100001111111000000000
000100100001010001111111000000000
000001100001100010111110001000000
000001010100001010111110100000000
000100001010100010111110000010000
000001001100100010111111000000000
000010001100001010111110100000000
000010010100100001111111000000000
000001010001010100111111000000000
000001001100100010111110100000000
000010001100010001111110000010000
000001001100010100111110000100000
000010100001100001111110000000001
000001100100001010111111000000000
000010100010001001111110000000001
000001010100001100111110000100000
000001100100010001111110010000000
000100001010001100111110010000000
000010001100001010111110010000000
000100010100010001111111000000000
000001010001100100111110000010000
000010100010100001111110000001000
000001100010010100111110000001000
000010010100001100111110000000100
000001100010001100111110000000010
000100001010010100111110000000001
000100001010100001111110010000000
000100010100001010111110010000000
000001010001010100111110001000000
000010001100010001111110000000010
000100001001010010111110000000010
000010010001100100111110000010000
000100001010001010111110000000010
000010001100100010111110000010000
000100100001010001111110010000000
000010001001010100111110001000000
000010010001100100111110100000000
000100100010001001111110010000000
000010010100001001111110000000010
000010100100001010111110010000000
000100010010001001111110000000001
000010010100001001111110010000000
000001010100100010111110000001000
000010001100001100111110000001000
000100001001010010111110000001000
000001010100100001111110001000000
000100010100010001111110001000000
000001001010100010111110000000100
000100001100001010111110000001000
000010100001001010111110000100000
000001100010010100111110000000001
000010001100010100111110001000000
000001010100010100111110000001000
000100010001010001111110000000010
000010001010100001111110010000000
000100001010001010111110000001000
000010100001100010111110000000010
000100010001010001111110000001000
000001100100010001111110000100000
000100010100001001111110001000000
000001100010010001111110000010000
000001001010100010111110010000000
000100001010010100111110001000000
000100010010001001111110000000010
000100001010001100111110100000000
000001100001010010111110001000000
000001010010100001111110010000000
000010001001100010111110000000100
000001010010001100111110001000000
000100100010001001111110000000010
000100001001100010111110000001000
000100001100010001111110010000000
000010010100001001111110100000000
000001010100100010111110000000100
000001001100010100111110000000100
000100010001010001111110000000001
000001010100010001111110000000010
000010001100001100111110000000100
000100001010001100111110000010000
000010001100100010111110000000001
000100001001010010111110000000001
000010001001010100111110000001000
000100001100010010111110000010000
000001010100001100111110000000001
000100001100010001111110000000100
000100010001001100111110000100000
000010001001100010111110000100000
000100001010010100111110000010000
000010001100010100111110000000001
000001001010010100111111000000000
000010001010100100111110000100000
000001010100010001111110100000000
000010001100001010111110000010000
000010100001100001111110000000010
000100001100010010111110001000000
000100001010010001111110000001000
000001100100001010111110000001000
000001010010100001111111000000000
000100100001010010111110000010000
000100001001010100111110010000000
000100010010100001111110000001000
000100100010001010111110010000000
000001100001010010111110000000001
000100010010001001111110000000100
000100001001100010111110001000000
000100010010001100111110000000100
000010100100010001111110000001000
000100100001010001111110000100000
000100100010010001111110000001000
000001100010100010111110000000001
000100010001001010111110000000100
000010010001100001111110000000100
000001010010100001111110000000100
000001010100100001111110000000001
000001001010100100111110000010000
000100010010100001111110100000000
000100010001001010111110000001000
000010001001100100111110000001000
000001100010100001111110100000000
000100010001100010111110010000000
000010100001100010111110000010000
000001010010100100111110000000100
000001100100010010111110000001000
000100001100001010111111000000000
000001001100010100111111000000000
000100010001100001111110000010000
000100010001010100111110010000000
000001010100010001111110010000000
000010100010100001111110001000000
000010100100010001111110100000000
000010010001100001111111000000000
000100010001010100111110100000000
000001010001010100111110000001000
000010010001100100111110000000010
000001010100001100111110001000000
000100010100010001111110100000000
000100001100010010111110000100000
000001010100010100111110000000010
000100010001001100111110000010000
000100100001001010111111000000000
000100001010001100111110000000010
000010010001100001111110010000000
000010001010100001111110000000100
000001100001010010111110000010000
000001100010001010111110000010000
000100100001010001111110000000100
000100100001001010111110000001000
000010100010001100111110000100000
000100100010001010111110000000100
000100010001100010111110100000000
000010100001001100111110000001000
000010001010001100111110100000000
000100001100010001111110000100000
000010001001100010111111000000000
000001010001100010111110000000100
000001010010001100111110000001000
000100010100001001111110000100000
000001001100100010111110001000000
000100100001001010111110100000000
000010100100001001111110000000010
000100010100010001111110000001000
000100001010010100111110000100000
000100010100001010111110000100000
000100010001010100111110000010000
000010001100010100111110000010000
000001001100100010111110000001000
000010100001001010111110000010000
000010100001001010111110000000001
000001010100001010111110000000010
000001010100001010111110000010000
000010001100010100111110000100000
000100001001010100111110000000100
000010001001100010111110010000000
000001100100010001111111000000000
000100001010100001111110000010000
000100100001010010111110010000000
000010100001100010111110100000000
000010100010100001111110100000000
000001100010001100111110000010000
000100001001010010111110000000100
000100001001100010111110100000000
000010100001010100111110010000000
000100010010001001111110000001000
000001001100010100111110010000000
000001100010001100111110100000000
000010001001100100111110000000001
000010100010001100111111000000000
000010010001100001111110000100000
000100010010001100111110010000000
000100010001100010111110000010000
000001010100100001111110000010000
000010001100100001111110000000100
000010010100100001111110001000000
000010001010100100111110001000000
000010010100001100111110000100000
000010010001001100111110000001000
000100001010100010111110000000001
000001001010100100111110010000000
000010100001100001111110000000100
000010010100100001111110100000000
000001001100010010111110100000000
000001100010010100111110000000010
000100010010100001111110001000000
000100100001010010111110100000000
000001001010010100111110100000000
000010001100010001111110100000000
000100100010010001111110100000000
000010010001001100111110100000000
000010001010100001111110000100000
000001100001010100111110010000000
000001100010100001111110010000000
000100010001001010111110000000010
000001100001010100111110000100000
000001010001100100111110000000001
000010001100001010111110000000010
000001010100010001111110000010000
000001010100100010111110000000001
000100100001010010111110000000010
000001010001100010111111000000000
000001001010100100111110100000000
000010100010100001111111000000000
000010100001001100111110000000001
000010100001010001111110000000001
000100010010001100111111000000000
000100100010001010111111000000000
000100100010001010111110000100000
000001100001100010111110000001000
000100100010001001111110000010000
000010001100100001111110000001000
000001100010001010111110000100000
000001010010001100111110100000000
000010100010001001111110001000000
000001010010001100111111000000000
000010100001010001111110000010000
000010100001010001111110000100000
000100001001010100111110000100000
000001100010010001111110000100000
000010100100001010111110000100000
000001010100010100111110000000001
000001100001100010111110100000000
000010100010001100111110010000000
000001100100001010111110001000000
000010100100001001111110000000001
000010001001010100111110100000000
000100100001001010111110001000000
000001100010001010111110000000001
000100010100001010111110000000100
000010001010001100111110000001000
000001010001100010111110010000000
000001010100100010111110000000010
000100010001001100111110000000001
000100001010010001111110000000001
000001001100010010111110000010000
000010010001001100111110001000000
000010001010001100111110001000000
000100010001001100111110001000000
000010100010001001111110000010000
000010100001001010111110001000000
000100001010001010111110000000001
000001100010100010111110000001000
000100100010010001111110001000000
000001100010001100111110010000000
000001100010100001111110000000010
000001100010100001111110000010000
000001010100010100111110000000100
000010010001100100111110010000000
000001100001010010111110000100000
000100001010100001111110100000000
000010100100010001111110001000000
000001100010010001111110000000001
000010010100001001111110000010000
000100001001100010111111000000000
000100001100010001111111000000000
000001100100010010111110000000100
000001001010010100111110000001000
000100001010010001111110000000010
000100010001010001111110000000100
000100010100001001111110000000001
000001010010100100111110000000010
000001100100010010111110000000001
000001001010010100111110001000000
000010100010001001111110000100000
000010100100001010111111000000000
000001100001100010111111000000000
000100001010100010111110000100000
000100010001100010111110000000010
000100100010001001111110100000000
000100010001010100111110000000010
000100010100001010111111000000000
000010010100100001111110000001000
000001100010010001111110001000000
000010100001010100111110100000000
000001100100010010111110000000010
000001100100010001111110000000100
000100001010100010111110001000000
000010001001100100111110000000100
000010001001010100111111000000000
000100010001100001111110001000000
000010100100001010111110000000100
000100010001001010111110000000001
000010001100100001111110000000010
000100010100001001111110000010000
000001010001100010111110000100000
000010100001010001111110001000000
000010001001100100111110000000010
000010100100001001111110000000100
000010001010100001111111000000000
000001010100001010111110010000000
000010001100100001111110000000001
000100010001100001111110000000001
000010001100001100111110000000010
000010100001100001111110000001000
000010001100100010111110001000000
000001001010100010111110000100000
000010100001010100111110000000010
000001100100001010111110100000000
000010100010001100111110000000100
000001010001010100111110100000000
000100100010010001111111000000000
000010100100001001111110000001000
000100001001010100111111000000000
000010100100010001111111000000000
000010001010100100111110000010000
000100001100010010111110000000001
000010010100001100111111000000000
000001100001010100111111000000000
000001010100001100111110000010000
000100001100001010111110100000000
000001010001100100111110000100000
000010001010001100111111000000000
000010001100100010111110000100000
000001001100010010111110000000010
000010100001100010111110010000000
000100001010100001111110000000010
000001100001010100111110000000100
000010001010100100111110000000001
000100001100001010111110001000000
000010100001010100111110000010000
000001010001100100111110001000000
000001100010010100111110000000100
000100010010001100111110000100000
000001100010100010111110000000100
000100001010010001111110000000100
000010010001001100111111000000000
000001010010100100111110000001000
000001010010100100111110000000001
000010001100010001111110010000000
000001001010100100111110000000010
000010100001001100111110000000010
000001100010100010111110000000010
000001001010100010111111000000000
000010100001001100111110000000100
000100010001100001111110000100000
000001001100010010111110010000000
000010001100001100111110000000001
000010010100001100111110010000000
000001010010100001111110000100000
000100001010001010111110000000100
000001100010001010111110001000000
000001010100100001111110000100000




=== State Orbit 26 =====================
size : 180
repr state: 000100100000100000110100000010000
lex min decimal: 2701298446379133529271
states:
000001000001001000101100000000001
000001000001000001101010000000100
000100100100000000111000000001000
000001001000001000110100000010000
000000100000100100010110000001000
000000000010010010001110000010000
000010000000010010100110000100000
000000001001000001011010010000000
000000000010010010001110000000010
000001001000001000110100000000010
000010010000010000110100001000000
000010000000010010100110000000001
000000010010010000011100000000001
000000100000100100010110000000001
000100100000000100110010000100000
000001000001001000101100000100000
000010000010010000101100100000000
000100000100000100101010010000000
000000100100100000011100000000010
000100000000100100100110001000000
000001001001000000111000000001000
000001001001000000111000010000000
000010010010000000111000100000000
000100100000100000110100000010000
000001000000001001100110010000000
000001001000000001110010000000010
000000100100000100011010000000001
000100100000000100110010100000000
000100100000100000110100000001000
000010000010000010101010000000100
000000001001000001011011000000000
000010010000010000110100010000000
000001000001001000101100000010000
000100000100000100101010000010000
000010000000010010100110010000000
000100000100100000101100000000001
000010010010000000111000000001000
000000001001001000011100100000000
000000001001001000011100000000001
000001000001001000101101000000000
000001001000000001110010000000100
000000001000001001010110010000000
000000010010010000011100000000010
000100000000100100100110010000000
000001001000000001110010100000000
000010010000010000110100000010000
000000001000001001010110000010000
000000001001001000011101000000000
000010000010000010101010001000000
000010010000000010110010000000100
000001000001001000101100100000000
000010000010000010101010000000001
000001001000000001110010000010000
000010000000010010100110000000010
000100100100000000111000000000100
000000001001000001011010000001000
000100000000100100100110000000010
000000000100100100001110000100000
000000100000100100010110010000000
000000100100000100011010000000010
000010000010010000101101000000000
000010010000010000110100000001000
000010000010010000101100000001000
000000000100100100001110000000010
000010010010000000111000001000000
000010010000000010110011000000000
000000010010010000011100100000000
000000100000100100010110000010000
000000000001001001001110000000100
000000000100100100001110000001000
000010010000000010110010000000010
000000010010010000011100000000100
000100000100000100101010000000001
000000000001001001001110000100000
000000010010000010011011000000000
000000000010010010001110000000100
000001000001000001101010000010000
000010000010010000101100000100000
000100000100000100101010001000000
000000000001001001001110000010000
000100100000100000110100001000000
000010010000010000110101000000000
000000010010000010011010000001000
000000000010010010001110000100000
000000000100100100001110001000000
000010010000000010110010000010000
000100100100000000111000001000000
000010000010000010101011000000000
000000001000001001010110100000000
000100000100100000101100000010000
000010010010000000111000000000100
000001000000001001100110100000000
000000100100100000011100100000000
000100100000000100110011000000000
000001000001000001101010001000000
000010000010010000101100000010000
000000100000100100010110100000000
000001001001000000111000000100000
000000001001000001011010000000010
000001000000001001100110000100000
000001000000001001100110001000000
000000010000010010010110000001000
000100000100000100101010000000100
000000000001001001001110001000000
000001000001000001101010010000000
000010000000010010100110001000000
000100100000000100110010000000010
000000010010010000011101000000000
000000000100100100001110000000100
000000100100000100011010000001000
000001001000001000110101000000000
000100100100000000111000010000000
000000001001001000011100001000000
000000100100100000011100000000100
000000001000001001010110000001000
000001001000000001110011000000000
000000001001000001011010000100000
000100000000100100100110000000001
000100100100000000111000100000000
000001001001000000111000000000100
000000000001001001001110000000010
000001001001000000111000100000000
000100000100100000101100000100000
000000010000010010010110000000100
000100000100100000101101000000000
000010010000000010110010100000000
000000010000010010010110010000000
000100100000100000110100000000010
000001001000001000110100000001000
000001000000001001100110000000010
000100000100000100101011000000000
000010010010000000111000000100000
000000001000001001010110000000100
000001001001000000111000001000000
000000010000010010010110000000001
000010010010000000111000010000000
000010000010000010101010000010000
000100100000000100110010000010000
000000010010000010011010010000000
000000100000100100010110000000100
000010000010000010101010010000000
000000010010000010011010000000001
000100100000000100110010000000100
000000001001001000011100000000010
000010000010010000101100000000001
000000100100000100011010010000000
000000000001001001001110000001000
000000010000010010010110000010000
000001001000001000110100010000000
000000010010010000011100001000000
000001000001000001101011000000000
000100000000100100100110000100000
000100100000100000110101000000000
000000100100100000011101000000000
000010010000000010110010000100000
000100000100100000101100000001000
000000000100100100001110000010000
000000001000001001010110000000001
000000100100000100011011000000000
000010000000010010100110100000000
000000100100000100011010000100000
000000000010010010001110001000000
000100100100000000111000000100000
000001001000000001110010000100000
000100000100100000101100100000000
000100000000100100100110100000000
000000001001001000011100000000100
000000010000010010010110100000000
000001001000001000110100001000000
000001000001001000101100000001000
000000010010000010011010000100000
000000001001000001011010000000001
000000100100100000011100001000000
000001000001000001101010000000001
000000000010010010001110000001000
000100100000100000110100010000000
000010010000010000110100000000010
000000100100100000011100000000001
000001000000001001100110000000001
000000010010000010011010000000010




=== State Orbit 27 =====================
size : 60
repr state: 000100100000100100110110000010000
lex min decimal: 21599986623994662317239
states:
000001001001001000111100100000000
000000010010010010011110000000001
000100100000100100110110010000000
000001001001000001111010010000000
000001001001000001111011000000000
000100100100000100111010010000000
000000001001001001011110000001000
000100100100000100111011000000000
000100100100000100111010000100000
000001001001001000111100001000000
000100100000100100110110000000010
000010010000010010110110000010000
000010010010000010111010000000100
000100100100100000111100000001000
000000100100100100011110000000010
000010010010000010111011000000000
000000100100100100011110000001000
000010000010010010101110000000001
000100000100100100101110000010000
000100100000100100110110100000000
000000001001001001011110000000100
000010000010010010101110001000000
000001000001001001101110001000000
000100100100100000111100100000000
000010010010000010111010010000000
000100100100100000111101000000000
000100100100100000111100001000000
000001001000001001110110000000010
000001001001001000111101000000000
000001000001001001101110000000001
000001000001001001101110000010000
000010010000010010110110010000000
000100000100100100101110000000001
000010010010010000111101000000000
000100000100100100101110000100000
000010010010010000111100100000000
000000001001001001011110000000001
000001001000001001110110000010000
000010000010010010101110000100000
000100100100000100111010000000100
000001001001000001111010000000100
000001001001001000111100000001000
000000010010010010011110000000100
000001001000001001110110010000000
000100100000100100110110000010000
000010010010010000111100000001000
000000100100100100011110000000001
000000010010010010011110000000010
000000010010010010011110000001000
000001000001001001101110000100000
000000100100100100011110000000100
000010010010000010111010000100000
000001001000001001110110100000000
000000001001001001011110000000010
000010010000010010110110100000000
000001001001000001111010000100000
000010000010010010101110000010000
000100000100100100101110001000000
000010010000010010110110000000010
000010010010010000111100001000000




=== State Orbit 28 =====================
size : 360
repr state: 000100100000100010110110000010000
lex min decimal: 21636880112142081420471
states:
000001100001001000111100100000000
000001001000001100110110000000010
000000010100100100011110000001000
000010010000100010110110000010000
000010001010000010111010010000000
000100001100100000111101000000000
000001000001100001101110000010000
000001010001001000111100100000000
000010010000010100110110010000000
000100000010010010101110001000000
000010010000001010110110000010000
000001100000001001110110100000000
000010010010001000111100100000000
000010000010010001101110000010000
000010100000100100110110000010000
000000100100010100011110000000010
000010010001000010111010000100000
000001001000001010110110010000000
000000010010010001011110000000001
000010100100100000111101000000000
000100001000001001110110000010000
000010001000001001110110000010000
000000001001010001011110000000010
000010100000100100110110010000000
000010010100000010111011000000000
000100100100000010111010000000100
000010010010100000111100001000000
000100100100010000111100000001000
000100000100100001101110000100000
000010010010001000111100001000000
000010010010000100111010000000100
000010000010001010101110000000001
000100100001000100111010000000100
000001001100001000111100001000000
000001000010001001101110000100000
000100100001000100111010000100000
000100000100100010101110000000001
000100001100100000111100100000000
000010001001000001111010000100000
000000100001001001011110000001000
000100000001100100101110000000001
000001010001000001111011000000000
000000001001001100011110000000001
000010000010001010101110000010000
000001010010010000111100001000000
000010010000010001110110000000010
000100100010000100111010000100000
000010100000010010110110100000000
000010100000010010110110000000010
000000100100100001011110000000100
000001010010000010111011000000000
000100000100010100101110000000001
000001010010000010111010010000000
000010000010010001101110000100000
000001010010000010111010000100000
000010010001010000111101000000000
000001100000001001110110000000010
000001001100001000111101000000000
000100000010010010101110000100000
000001000100001001101110000000001
000001001100000001111010000000100
000010001010000010111011000000000
000010100100100000111100001000000
000100000100010100101110000010000
000000100100100010011110000000100
000001001000010001110110000010000
000001001010001000111100001000000
000010010000010100110110000010000
000001010010010000111101000000000
000001010000001001110110100000000
000100010010010000111101000000000
000100100100000010111010010000000
000010100100100000111100100000000
000010001001001000111100100000000
000000001001100001011110000000001
000100000100010100101110001000000
000001001001010000111100100000000
000001100000100100110110010000000
000001001100000001111010000100000
000001001001000010111010010000000
000100100100000010111010000100000
000100001001000001111010010000000
000100100001100000111100001000000
000001001000001100110110010000000
000001000010010010101110000010000
000001000001010001101110000000001
000100100010000100111011000000000
000001001010000001111011000000000
000000010001001001011110000001000
000100100000100010110110010000000
000010001000010010110110010000000
000010000001001001101110001000000
000100010000010010110110100000000
000100100000001100110110100000000
000010010001000010111011000000000
000001100100100000111101000000000
000001100100100000111100001000000
000010100100000100111011000000000
000000010010100010011110000001000
000001001001000100111010010000000
000000100100001100011110000000001
000001010000010010110110010000000
000001000001010001101110001000000
000100001001001000111101000000000
000000010010001010011110000001000
000010000010010100101110000010000
000100010010010000111100001000000
000001000100001001101110001000000
000001001000100001110110000000010
000100000010100100101110001000000
000010010000010100110110000000010
000001001000100001110110000010000
000010010100010000111100001000000
000100010010000010111010010000000
000100100010100000111101000000000
000100000001001001101110000100000
000001001010001000111101000000000
000010001000001001110110100000000
000100000001100100101110000100000
000001100000001001110110010000000
000010000010010100101110000000001
000000100001100100011110000000001
000100001000001001110110010000000
000001100000100100110110100000000
000100100000010100110110000010000
000100001100000100111010010000000
000000001100001001011110000001000
000000100100010100011110000001000
000100001000100100110110010000000
000100100000001100110110000000010
000000010100010010011110000001000
000000010001010010011110000000001
000001000001001100101110000010000
000000010001010010011110000001000
000010010010000001111010000000100
000100001001000001111011000000000
000010000010100010101110000000001
000001010001000001111010010000000
000000100100010100011110000000001
000000001001100001011110000000010
000001001000001010110110000010000
000010010100000010111010000100000
000000100010100100011110000000001
000000100010100100011110000000100
000000001001001100011110000000010
000000001010001001011110000001000
000000001100100100011110000000010
000000001001010001011110000001000
000000001001001010011110000000100
000100000100001100101110000010000
000000010100100100011110000000100
000010010010000100111010000100000
000010000100100100101110000100000
000000010001001001011110000000010
000000001010010010011110000000100
000100010000100100110110000000010
000100000100100010101110000100000
000010010010000100111010010000000
000100001100000100111010000000100
000001010000010010110110100000000
000010010000100010110110100000000
000000010100100100011110000000010
000010100010010000111100000001000
000010000001001001101110000010000
000010000001001001101110000100000
000010001001001000111101000000000
000001000010001001101110001000000
000100100000100010110110000000010
000000001010001001011110000000001
000001100001000001111011000000000
000000010010010100011110000000010
000001010001001000111101000000000
000001000010010010101110001000000
000001100100100000111100100000000
000000100100001100011110000000010
000001100100000100111010000100000
000001000100100100101110000100000
000000001001100001011110000001000
000100010100000100111010010000000
000001010001001000111100000001000
000010010010000001111010000100000
000010100000100100110110100000000
000010100100000100111010010000000
000100100100001000111100000001000
000100100100000001111010010000000
000010001010000010111010000000100
000000010100010010011110000000001
000000010010010001011110000000010
000010000001010010101110000100000
000100000010100100101110000100000
000000001001001010011110000000001
000001000001100001101110000000001
000100000010100100101110000000001
000100010010000010111010000100000
000001100100000100111010010000000
000100100100010000111100001000000
000100001100000100111011000000000
000001001001100000111100001000000
000001000001001010101110000000001
000001000001001100101110000000001
000010010001010000111100000001000
000100100100000001111010000100000
000010001010010000111101000000000
000010001000010010110110100000000
000100100100001000111100001000000
000000001010010010011110000000010
000100001001001000111100100000000
000001001000010001110110000000010
000000100100100001011110000000010
000001100000100100110110000010000
000100010000010010110110000010000
000100010100100000111100000001000
000100010010000010111011000000000
000001100001000001111010000000100
000100100010100000111100001000000
000100001000001001110110100000000
000000010001001001011110000000100
000100010100100000111101000000000
000100100010000100111010000000100
000100000100001100101110001000000
000000100001001001011110000000100
000010010000001010110110100000000
000001010000001001110110010000000
000010010010100000111100000001000
000001001010001000111100000001000
000001001010000001111010000100000
000100000100100001101110000000001
000010010010001000111100000001000
000010010000001010110110000000010
000010001001000001111011000000000
000000100010010010011110000000010
000001001000001010110110000000010
000000010010010100011110000000001
000000100001100100011110000000100
000100000100100010101110000010000
000001000010010010101110000100000
000010100010010000111100100000000
000100010000010010110110010000000
000010010000100010110110000000010
000001000010001001101110000000001
000010010100010000111101000000000
000010000100010010101110000000001
000001000001010001101110000010000
000000010001010010011110000000100
000000010010010001011110000000100
000010001001000001111010010000000
000000010100010010011110000000100
000100010000100100110110100000000
000100001001001000111100001000000
000000001100100100011110000001000
000000001100001001011110000000001
000001000001001010101110000010000
000001001001000100111010000000100
000010010001000010111010000000100
000100010000100100110110010000000
000010000100100100101110001000000
000100100000100001110110000000010
000010000010001010101110001000000
000001001000001100110110000010000
000000001010010010011110000001000
000001001100001000111100000001000
000001000100100100101110000010000
000000100010010010011110000000100
000001000100100100101110001000000
000010100010000010111010010000000
000000010010001010011110000000001
000001001001100000111100000001000
000001001001010000111100000001000
000100100001100000111101000000000
000100000100001100101110000000001
000100010100000100111011000000000
000010001000001001110110010000000
000000100100100010011110000000010
000000001100100100011110000000100
000001010000010010110110000010000
000000001001001010011110000000010
000000010010100010011110000000010
000100100000010100110110000000010
000010001001001000111100001000000
000100100000001100110110000010000
000000010010001010011110000000010
000000100010010010011110000001000
000100001100100000111100000001000
000010001010010000111100100000000
000001000001100001101110001000000
000001001000100001110110100000000
000100100000100010110110000010000
000010010010100000111100100000000
000010100000010010110110010000000
000001001010000001111010000000100
000100100000010100110110100000000
000100010100100000111100100000000
000010001010010000111100000001000
000100001001000001111010000100000
000010000100010010101110001000000
000010000100100100101110000010000
000010010000010001110110000010000
000010000100010010101110000100000
000010100010000010111011000000000
000010100100000100111010000100000
000010100010000010111010000000100
000010001000010010110110000000010
000010010000010001110110010000000
000010100010010000111101000000000
000010010100010000111100000001000
000000100001100100011110000001000
000001001001010000111100001000000
000001001001000010111010000100000
000100100000100001110110000010000
000100000100100001101110000010000
000100100100000001111010000000100
000000100100001100011110000001000
000001100001000001111010010000000
000001000001001100101110000100000
000001001000010001110110100000000
000100000010010010101110000010000
000000001001010001011110000000001
000100100001100000111100000001000
000000001100001001011110000000100
000001000001001010101110000100000
000100100010100000111100000001000
000000100100100010011110000000001
000000010010100010011110000000001
000000001010001001011110000000100
000100100001000100111011000000000
000001100001001000111101000000000
000100000001100100101110001000000
000010000010010100101110000100000
000001001001000010111010000000100
000100100000100001110110010000000
000001010001000001111010000000100
000100001000100100110110100000000
000000010010010100011110000000100
000100001000100100110110000000010
000010010001010000111100001000000
000001100100000100111011000000000
000100010100000100111010000000100
000010000001010010101110000000001
000100000001001001101110000010000
000001001001100000111100100000000
000000100001001001011110000000010
000100100100001000111100100000000
000000100010100100011110000001000
000001100001001000111100000001000
000010000010010001101110000000001
000010010010000001111010010000000
000100010010010000111100100000000
000001001100000001111011000000000
000001000100001001101110000100000
000010000010100010101110000010000
000100100100010000111100100000000
000010000010100010101110001000000
000001010010010000111100100000000
000000001001001100011110000000100
000100000001001001101110001000000
000010000001010010101110001000000
000000100100100001011110000000001
000001001001000100111010000100000
000010010100000010111010000000100
000001010000001001110110000000010




=== State Orbit 29 =====================
size : 720
repr state: 000100100000010000110100000010000
lex min decimal: 2738191934526552632503
states:
000000100000100001010110000000100
000000010010000001011010000000001
000000001000001010010110000000100
000000100100010000011100000000010
000000001001010000011100001000000
000100000000100001100110000000001
000100000000100010100110010000000
000100000010000010101010010000000
000000000001001010001110000010000
000100010100000000111000010000000
000000100100001000011100001000000
000010000100000010101010000000001
000010000000100010100110001000000
000010010001000000111000000001000
000000010001010000011100000000100
000000010000010001010110010000000
000000010010000100011010000100000
000010000001000001101011000000000
000000010001000001011010010000000
000000001100000100011010000000010
000000001001000100011010000000010
000000100001001000011100000000100
000100000001000001101010000010000
000000100001000100011010000000001
000000100100001000011100000000010
000001001000100000110100000001000
000000001100100000011100100000000
000001010000001000110100000001000
000001000010000010101010000010000
000100000010010000101100000010000
000100000000001001100110100000000
000000010010000001011010010000000
000100010010000000111000001000000
000001000100001000101100000000001
000001000000001100100110000000010
000000000010100010001110000001000
000100000000001001100110001000000
000100100001000000111000001000000
000000000010010001001110000000100
000001000000100001100110100000000
000000001001000100011010000100000
000000100001001000011100100000000
000100010000000100110010000000100
000010010001000000111000001000000
000000001100001000011100000000001
000001001100000000111000000000100
000100000000100001100110000000010
000000100010010000011100100000000
000010100100000000111000100000000
000100000000010010100110001000000
000000100000010010010110010000000
000000000010001010001110000001000
000000010000001010010110000001000
000000000100100001001110000010000
000000010100000010011010000000001
000010100000100000110100001000000
000000001010010000011101000000000
000000100001001000011101000000000
000000100000001100010110000001000
000000100001000100011010000100000
000000100001100000011100001000000
000100100000000010110010000100000
000000100000100010010110000010000
000010000001001000101100000010000
000010000000010001100110000000001
000100000100000001101010010000000
000000001000010001010110000000001
000100010010000000111000100000000
000000001010010000011100100000000
000000001001010000011100000000001
000100000010010000101100100000000
000100001100000000111000000001000
000010000010000100101010010000000
000010010001000000111000000000100
000001000100000100101010000010000
000000000001001010001110000000100
000010000000100010100110100000000
000001000010010000101100100000000
000100000001000001101010010000000
000000001100000001011010000000001
000000100000010010010110100000000
000001100000001000110100000000010
000000000100100010001110000000100
000100010000000100110011000000000
000100000100000010101010000010000
000010000010100000101100000010000
000010010000000100110010000010000
000100010000000010110011000000000
000100000000001001100110000100000
000001001000100000110100000000010
000000001000001100010110000000100
000001001000000100110010000000100
000100000100010000101100000001000
000000001001000010011010000100000
000001000100000001101010001000000
000000010000100010010110100000000
000010100000000010110010100000000
000001000000001010100110000000001
000000001010000001011010000000001
000100010000000010110010000010000
000000010100000100011010000000010
000100010100000000111000100000000
000010001010000000111000100000000
000001000100001000101101000000000
000100100001000000111000000000100
000001100000100000110100010000000
000100000010100000101100000000001
000100000100001000101100000010000
000000001000001010010110000000001
000000100001001000011100000000010
000001010000000010110010000100000
000000010100100000011101000000000
000010010000000001110010000000100
000001000100001000101100000100000
000010000001000001101010001000000
000001000000100001100110000000010
000000001010000010011010000000010
000100001000000001110010100000000
000010000000001010100110001000000
000000100000001001010110100000000
000001010010000000111000000100000
000000100001000100011011000000000
000000100001100000011100000000001
000010100000010000110101000000000
000000001001000010011010000000010
000000001000100100010110000001000
000000000100001100001110000000010
000100000001100000101100000000001
000000000010100010001110000010000
000001000001000100101010000010000
000001000100000100101010010000000
000010000000010001100110010000000
000010000001000010101010001000000
000010000001000010101011000000000
000000010000100100010110010000000
000010010100000000111000000100000
000001001000000010110010000100000
000010000001000001101010010000000
000000100010000010011010010000000
000100001100000000111000100000000
000100001001000000111000001000000
000000010001001000011100000000010
000100000010000100101010001000000
000000100000001001010110000000100
000010000010100000101100100000000
000100000001000100101010000000001
000010001000001000110101000000000
000010001000000001110011000000000
000000100100000001011010010000000
000000010100000010011010000100000
000001000000100001100110000000001
000000000001100100001110000100000
000000100000001100010110100000000
000000010001010000011100000000001
000000010000001001010110000000100
000000010000010100010110000010000
000001100000100000110100001000000
000001001000010000110100000010000
000000000001010001001110001000000
000001000010001000101100000100000
000001001010000000111000001000000
000010000100000010101011000000000
000100001100000000111000000000100
000100001000100000110100010000000
000000001100000100011011000000000
000001000000100100100110001000000
000010100000100000110101000000000
000001100000100000110100000010000
000000010001000010011010000001000
000000000001010010001110000100000
000010000000100010100110000000010
000000000010010001001110000000010
000010000100010000101100000001000
000000000100010010001110000001000
000100000100010000101100000000001
000000100010000100011010000100000
000001000001100000101100100000000
000000000010100100001110000000100
000001010000001000110100000000010
000010001000010000110100010000000
000001100000000100110010000010000
000000010000100100010110100000000
000000000001010010001110001000000
000001100000000100110011000000000
000100100000010000110100000000010
000000100010100000011100001000000
000010010000001000110100000001000
000001100000001000110100010000000
000001000000010010100110010000000
000010100100000000111000010000000
000000010001001000011100000000100
000000010010000001011010000000010
000000000100010100001110000010000
000000000001001100001110000000010
000000001100000001011010000100000
000000010000100100010110000000100
000000000010010001001110000100000
000010000000010100100110000100000
000000000100100001001110000000010
000001001000010000110100000000010
000010010100000000111000000000100
000000010010100000011100000000010
000100010100000000111000000001000
000001010000010000110100001000000
000001000010000001101010000000100
000100000001000100101010000000100
000000100001000001011010010000000
000010000000010100100110010000000
000001000010001000101100000001000
000001010000010000110101000000000
000000100001000001011010000001000
000010010000100000110100000010000
000001001100000000111000000100000
000000000100001100001110000001000
000010100010000000111000010000000
000001000010001000101101000000000
000100001001000000111000010000000
000000100000001001010110010000000
000000010000001001010110100000000
000010000001001000101100000100000
000000001100100000011101000000000
000100000001100000101101000000000
000000010001010000011101000000000
000010100100000000111000000100000
000000000100010100001110001000000
000001000001000100101010000000100
000100100000000001110010000000100
000010001000000001110010000010000
000100000100001000101100000000001
000010001001000000111000001000000
000001000000010010100110001000000
000010000000001001100110100000000
000000000001010001001110000010000
000000100100010000011100001000000
000001010000000001110010100000000
000100100000000010110010000000010
000100010000000100110010000000010
000010000001000010101010000000001
000100010000100000110100000001000
000100000000010100100110000000010
000010001000010000110100000000010
000100000000010100100110000000001
000001000010000010101010010000000
000000100100000001011010000100000
000010000001010000101100000000001
000000010001010000011100001000000
000000001100001000011100000000100
000000010010001000011100100000000
000010000000010100100110000000010
000010001000001000110100000010000
000000100100000010011010000100000
000010000000001010100110100000000
000001010010000000111000001000000
000100001100000000111000010000000
000000010000010100010110010000000
000001000010000001101010000000001
000000000100001001001110000100000
000001000001100000101100000010000
000100000001001000101100100000000
000001000000001010100110000000010
000010000001001000101101000000000
000100000001001000101101000000000
000100000010010000101100000100000
000010000100000010101010001000000
000000100010000010011010000001000
000000001000001100010110000010000
000001100000000001110010000000010
000100010000100000110100010000000
000010010000000100110010000100000
000001000001100000101100000001000
000000000010001010001110000010000
000100000100010000101100100000000
000000001100000100011010000001000
000000001001000100011010010000000
000010000000010001100110000000010
000001100100000000111000001000000
000010000010000100101010000010000
000000000010001001001110000001000
000010010000100000110100001000000
000100001000000100110010100000000
000000000010100010001110000000010
000000001001000100011010000000001
000100001000000001110010000010000
000010001000000001110010000100000
000000001000100100010110000000100
000100010010000000111000000100000
000001000001000010101010000010000
000100010000010000110100001000000
000000100000001100010110000010000
000000000010100100001110000001000
000010010000100000110100000001000
000000000001001010001110000000010
000100000001000001101011000000000
000001100000001000110100000001000
000000001100100000011100000000100
000000000001100001001110000000010
000000000100010100001110000000010
000001001000000010110010000000010
000001010000000010110011000000000
000000010100000010011011000000000
000001000010010000101100000100000
000010010000000001110010000000010
000000001000010010010110000000100
000010100000000010110010000000100
000001000010000010101011000000000
000001010001000000111000000001000
000100000010100000101100000100000
000000000001100001001110001000000
000100010000010000110100000010000
000001000001000010101010000000100
000000001010000010011011000000000
000100000010000010101010000010000
000000100000100001010110000000001
000000010010000100011010000000001
000010000000001010100110000000001
000010100100000000111000001000000
000010001001000000111000010000000
000001000010010000101101000000000
000100001000001000110100000010000
000000000001010001001110000000010
000010000100000100101010010000000
000001010000000001110010000000010
000010000100010000101100000100000
000001100001000000111000000001000
000000010010000001011010000100000
000010100000000010110011000000000
000000100010100000011100000000001
000000001010000010011010000001000
000001001100000000111000000001000
000010000010000100101010000000100
000100000001000001101010001000000
000001000000010001100110001000000
000100010000100000110100000000010
000000001000010010010110000001000
000000010001000010011010000100000
000100100000001000110100001000000
000000100000010100010110100000000
000010000001010000101101000000000
000001000010001000101100000000001
000100100000000001110010000000010
000000010001000001011010000001000
000000001000010010010110010000000
000001000001000100101010010000000
000010001000001000110100010000000
000100000000100010100110000000010
000000001100000001011011000000000
000000100100001000011100100000000
000001000010000010101010001000000
000001001000000010110010000010000
000010000000001001100110000100000
000010000100100000101101000000000
000000010010000100011010000000010
000001000001010000101100100000000
000000100010000010011010000000010
000001000100001000101100000001000
000010001010000000111000000001000
000000001001010000011100100000000
000000100001000100011010000001000
000000010000010001010110000010000
000001000100100000101101000000000
000000010100000010011010000001000
000001001000000100110010000000010
000000100010100000011100000000100
000000100000100001010110010000000
000100100010000000111000000100000
000001100100000000111000000100000
000000001000001010010110000010000
000000100001000001011010000000010
000100100000000010110010000010000
000010001000000010110011000000000
000001000001100000101100000000001
000000100100010000011100000000001
000000010000001001010110000001000
000000000100010100001110000001000
000000000100001100001110001000000
000010000010000001101010000010000
000000001001000010011010010000000
000100100001000000111000000100000
000000001010001000011101000000000
000001000000010001100110000000010
000010000100000100101010001000000
000000001000100001010110000010000
000100000100000010101010000000001
000000010001000010011011000000000
000000010010100000011100001000000
000000000100001001001110001000000
000010000000100100100110010000000
000000000100010010001110001000000
000000001100000001011010000001000
000000010000001010010110000010000
000001000001010000101100000000001
000000001010001000011100001000000
000001001100000000111000001000000
000010000001000001101010000010000
000001010010000000111000100000000
000000100100000001011010000000001
000000010000010100010110000000100
000000000010010100001110000000010
000000100000100010010110000000001
000000000100100001001110000000100
000001001000000100110010000100000
000001000100100000101100000010000
000001000100000100101010001000000
000010010000100000110100000000010
000100000000010100100110001000000
000010000001000010101010000000100
000001001000000100110010000010000
000010000000001001100110001000000
000001000000100001100110001000000
000010000100100000101100100000000
000100000000100010100110000100000
000000100010000100011011000000000
000000000001010010001110000000100
000000100100000001011010000000010
000010100000000100110011000000000
000100000000001001100110010000000
000010001010000000111000000000100
000010001000000010110010000000100
000001000000010010100110100000000
000001001010000000111000000001000
000000001000010001010110100000000
000100000000010010100110010000000
000100010000000010110010000100000
000010100010000000111000100000000
000000100010000010011011000000000
000100000000100010100110000000001
000001100001000000111000100000000
000000000010010100001110000010000
000000000001010010001110000001000
000100010000000100110010100000000
000000000100001001001110000001000
000001010000001000110100010000000
000001100000000001110010100000000
000001010001000000111000010000000
000001000000001100100110010000000
000000001001100000011100100000000
000000000010001001001110000000100
000000001010000010011010010000000
000001000100000001101011000000000
000000010000010001010110000000001
000000100100000010011010000000001
000000000001001010001110000100000
000001000000010010100110000100000
000100000010100000101100000001000
000001000100100000101100000100000
000000100000010010010110000001000
000001100001000000111000010000000
000000000010100010001110001000000
000000010010100000011100000000001
000001001000100000110100001000000
000100100001000000111000000001000
000010001000000001110010100000000
000000100000010100010110000010000
000000001001010000011100000000010
000100001000001000110100001000000
000010000001010000101100000001000
000100001000000100110011000000000
000000100000100010010110010000000
000000010001001000011101000000000
000001010001000000111000000000100
000001000000010001100110100000000
000010000010001000101100000000001
000001010001000000111000100000000
000100000100000001101010000000100
000000010010001000011100000000001
000100000001000100101011000000000
000000000010001010001110000000010
000100000000100001100110000100000
000001000000100100100110010000000
000000100010100000011101000000000
000001001000010000110100001000000
000000010000001001010110010000000
000001000001000010101010000000001
000100100000010000110100000010000
000001001000000010110010000000100
000000001100001000011101000000000
000000100010010000011100000000100
000010000010001000101100100000000
000000010100010000011100001000000
000010000001001000101100100000000
000010000000001010100110000000010
000000010100000100011010010000000
000000010100010000011101000000000
000010001000010000110100000001000
000000010100000100011011000000000
000000100000100010010110000000100
000100000100001000101100000001000
000001001010000000111000000100000
000000000001010001001110000001000
000010100000100000110100000010000
000010000010100000101100000001000
000000000010010001001110000010000
000000010000001010010110100000000
000000010000100010010110000010000
000001000100000001101010000000100
000001000000001010100110000100000
000010000000010001100110000100000
000000000001100001001110000001000
000100010000010000110100010000000
000000100010000100011010000000001
000000000001001100001110000010000
000000000010010100001110000000100
000001000100100000101100100000000
000000010010000100011010010000000
000001000000001100100110000100000
000001010000001000110101000000000
000010000100000100101010000010000
000000001100000100011010010000000
000000100100001000011100000000001
000000100001100000011101000000000
000000001010001000011100000000100
000010000010000001101010000000100
000000000010001001001110000100000
000000010000100100010110000001000
000001100100000000111000010000000
000100000100000010101010000000100
000000010100100000011100100000000
000100000010000010101011000000000
000010010000000001110010000100000
000100000001100000101100000001000
000100000001100000101100000100000
000000010000100010010110000000001
000001000100000001101010000000001
000100000100000001101010000000001
000001000010010000101100000010000
000010100000000100110010000100000
000100001001000000111000000100000
000100000000001100100110001000000
000001010000010000110100010000000
000001010000000001110011000000000
000000001001100000011100000000001
000000001000100100010110010000000
000000001001100000011100001000000
000100000100000010101010010000000
000100000010000100101010000000100
000100000010000100101011000000000
000000010100100000011100000000100
000010100010000000111000000000100
000000000100010010001110000000100
000100010000100000110101000000000
000000100000010100010110000001000
000010000000001001100110010000000
000010001000000010110010100000000
000010000010001000101100000001000
000100100000001000110100000010000
000010001000010000110101000000000
000100000100000001101010000010000
000001000010000001101011000000000
000100100000010000110100000001000
000001000001000010101010010000000
000001010010000000111000010000000
000000001000010001010110000001000
000000000100100001001110000100000
000000000010100100001110001000000
000000010001000001011010000000010
000100100000000001110010000010000
000000100000010100010110000000001
000000001010000001011010000100000
000000001010010000011100000000100
000010100000010000110100010000000
000100010000000010110010100000000
000000000001100100001110000001000
000000001000100001010110000000001
000000100001100000011100000000100
000000001000001100010110010000000
000001100000000100110010000100000
000010100000010000110100000000010
000000000100010010001110000100000
000000010000100010010110000001000
000100001000001000110100010000000
000100001000100000110100000001000
000100000001001000101100000100000
000010001000000010110010000000010
000100010100000000111000000000100
000010000000100100100110001000000
000001010000000001110010000000100
000000000001100001001110000010000
000100100010000000111000000001000
000010010000000001110010000010000
000010010100000000111000000001000
000000100000100001010110000010000
000100000001001000101100000010000
000010000100010000101100000000001
000001001000010000110100000001000
000010000010000100101010000000001
000000100000001100010110000000001
000010001000001000110100001000000
000001100000001000110101000000000
000010000010100000101100000000001
000000000001100100001110000000100
000010001001000000111000100000000
000100000010010000101101000000000
000100000000010010100110000100000
000000000010100100001110000100000
000000100100010000011100100000000
000001001000100000110100000010000
000001100000000001110010000000100
000100100000001000110100000001000
000010000100000100101011000000000
000001000000001100100110000000001
000000100100000010011010000000010
000010010000000100110010000000100
000001000001010000101100000001000
000100000000001100100110100000000
000001000000100100100110100000000
000000001010000001011010000001000
000000000100001001001110000000100
000100001000000100110010000000010
000001001010000000111000000000100
000001000000100100100110000100000
000010001010000000111000010000000
000010010001000000111000000100000
000000100010000100011010000001000
000000010100000100011010000001000
000000001000100001010110100000000
000100001000000001110011000000000
000100000010000010101010001000000
000010100000010000110100000001000
000001010000000010110010000010000
000000001000001010010110010000000
000100000000010010100110100000000
000100000000010100100110100000000
000100001001000000111000100000000
000000010010001000011100000000010
000100010000010000110101000000000
000100100000000001110010000100000
000000001000001100010110000000001
000001100000100000110101000000000
000001100001000000111000000000100
000000000010001001001110001000000
000010100010000000111000000001000
000000010010100000011100100000000
000010100000100000110100010000000
000000000010010100001110000100000
000010000010000001101010010000000
000100000010000100101010000000001
000000001100001000011100001000000
000000001010001000011100000000001
000100001000000100110010000000100
000000000100100010001110000000010
000000000100001100001110000010000
000000100010010000011101000000000
000001000001010000101100000010000
000001010000000010110010100000000
000001010000010000110100000010000
000010000000010100100110000000001
000000100010010000011100000000010
000010000100010000101101000000000
000010000001010000101100000100000
000000000100100010001110000100000
000100100010000000111000000000100
000001000000010001100110000000001
000001000000001010100110010000000
000000001000100100010110100000000
000010000000100010100110000000001
000000010000010001010110000000100
000100100000000010110010000000100
000100000001000100101010001000000
000000010010001000011100001000000
000100001000100000110100000000010
000000010001000010011010000000001
000100000010100000101101000000000
000000001100100000011100000000010
000000001001000010011010000000001
000010001001000000111000000100000
000100001000100000110101000000000
000100000000001100100110000000001
000001100000000100110010100000000
000000000001001100001110000000100
000100100000001000110100000000010
000000001001100000011100000000010
000001000100000100101011000000000
000000100000010010010110000000100
000100000000100001100110010000000
000010100000000010110010000000010
000000001000010001010110000010000
000000010000001010010110000000001
000100000000001100100110000000010
000001100000000001110011000000000
000000010000010100010110000000001
000100000100010000101100000010000
000000000100100010001110000010000
000100100010000000111000001000000
000010000000100100100110100000000
000000010001000001011011000000000
000000000010001010001110001000000
000001000010000001101010001000000
000010010000000100110010000000010
000010000100100000101100000010000
000100001000000001110010000100000
000010000000100100100110000100000
000010010100000000111000001000000
000100000100001000101100100000000
000001100100000000111000100000000
000000001010010000011100000000010
000100001000001000110101000000000
000100100000010000110100001000000
000000000001001100001110000100000
000010100000000100110010000010000
000000010100100000011100000000010
000010010000001000110100000010000
000000000001100100001110001000000
000000001000100001010110000001000
000000100001000001011011000000000
000000100000001001010110000001000
000010010000001000110100001000000
000000010001001000011100100000000
000000010100010000011100000000100
000000010100010000011100000000001
000000100100000010011010010000000
000010100000000100110010100000000
000010000010001000101100000010000
000001000001000100101010000000001
000000001010000001011011000000000
000010010000001000110100000000010
000000001000010010010110100000000
000010000100000010101010000000100
000010000010000001101010000000001
000100010010000000111000010000000
000010000100100000101100000100000




=== State Orbit 30 =====================
size : 360
repr state: 000100100000010010110110000010000
lex min decimal: 21932028017321434246327
states:
000001001010010000111101000000000
000010000001001010101110000010000
000001010001010000111100001000000
000010001010000001111010000100000
000001001010010000111100001000000
000010100010000100111011000000000
000001100100000001111010010000000
000000001010010001011110000000100
000100100010000010111010000100000
000010001010000001111011000000000
000010010100100000111100100000000
000001001000010010110110000010000
000001100001100000111100000001000
000100100001001000111100001000000
000100001001100000111101000000000
000100000001001100101110001000000
000010001000001010110110000010000
000001000010010001101110000010000
000100001001000100111010000000100
000001010001000010111010000100000
000100000001001100101110000010000
000001100001000100111010000100000
000001000010001010101110000100000
000010010001001000111100000001000
000100001001100000111100100000000
000010001000010001110110000010000
000001001100000100111011000000000
000001010000010001110110100000000
000000001001010010011110000000100
000010000010001001101110000010000
000010010000001001110110010000000
000000010100010100011110000000100
000000001100100001011110000000100
000100001100000001111011000000000
000001001100100000111100001000000
000001000100001100101110001000000
000100100001000001111010000100000
000100000010010100101110000010000
000000100100010010011110000001000
000100100010000010111011000000000
000001000010001010101110000010000
000000001001100100011110000000100
000010000100100010101110001000000
000001001000100100110110010000000
000001100100001000111100100000000
000001100001000100111010010000000
000001000001010010101110000000001
000001010010001000111100001000000
000000100001100001011110000001000
000010001001000010111010010000000
000010100000100010110110000000010
000001000100001100101110000000001
000100010000100010110110000000010
000000010001001010011110000000010
000001000001010010101110000100000
000001100000100001110110000000010
000010100100010000111100001000000
000100010010000100111010000100000
000010001001010000111100001000000
000100000001001100101110000000001
000010000001010001101110000010000
000000100100010010011110000000010
000100010000100010110110000010000
000100000010010100101110000100000
000000100001100001011110000000001
000100010000010100110110000000010
000001010000010001110110000000010
000010100010100000111101000000000
000100010100010000111100001000000
000010100100000010111011000000000
000001010001010000111100100000000
000100010100000010111011000000000
000001001000010010110110100000000
000100000100001001101110000010000
000010100000010100110110000010000
000001100001100000111101000000000
000100010010000100111010000000100
000100001100000001111010000000100
000100000100001001101110000100000
000100001100001000111100100000000
000000010100100010011110000000001
000010100000100010110110000010000
000001010001000010111010000000100
000001010001010000111100000001000
000010100010100000111100000001000
000100001000100001110110000000010
000010010001001000111100001000000
000000001001100100011110000000001
000100001001100000111100001000000
000100001000001100110110100000000
000100000001100001101110000100000
000010000100010100101110001000000
000010010100000100111011000000000
000001010000001010110110000010000
000100100010000010111010010000000
000010000010100100101110001000000
000010001010001000111100000001000
000000001100001100011110000000010
000100100000001001110110000010000
000010010000100100110110000010000
000100000100001001101110000000001
000000001010001010011110000000001
000000001010010001011110000001000
000100000100010010101110000010000
000010001000010001110110010000000
000000010010100100011110000000001
000010010100100000111101000000000
000010000001010001101110001000000
000001000100001100101110000100000
000000010010100100011110000001000
000000010100100010011110000001000
000010100000010100110110100000000
000000100100001001011110000000001
000001000001100100101110001000000
000010001000001010110110100000000
000000100010010100011110000001000
000010010001000001111011000000000
000001100000001100110110000000010
000001000001100100101110000100000
000001000001100100101110000010000
000001000001010010101110001000000
000010100000100010110110010000000
000001001000100100110110100000000
000001000100001100101110000010000
000100100001001000111100100000000
000000010010100100011110000000100
000000001010001010011110000001000
000000100100001001011110000000010
000001010000001010110110000000010
000100010000100010110110100000000
000010000100010100101110000000001
000001001100100000111100100000000
000010100100010000111100000001000
000010000100010100101110000100000
000000100010100010011110000001000
000100001000001100110110000010000
000100100000010010110110000000010
000010010001001000111100100000000
000000010001001010011110000001000
000010000010100100101110000010000
000001000010001010101110000000001
000010001001010000111101000000000
000001000010010001101110001000000
000001010010001000111101000000000
000010010000100100110110100000000
000000100010010100011110000000100
000010010100000100111010000100000
000010000010100100101110000100000
000000001100001100011110000000100
000010100010000100111010000100000
000001000001100100101110000000001
000010100000010100110110000000010
000001010000010001110110000010000
000010001010001000111101000000000
000100000001100001101110000010000
000001100001000100111011000000000
000100001000100001110110100000000
000001010010000001111010010000000
000010000010100100101110000000001
000000001001010010011110000000001
000001100000100001110110000010000
000000100001100001011110000000010
000001010001000010111010010000000
000100100010010000111101000000000
000000010100100010011110000000100
000100000001100001101110001000000
000100010100010000111100000001000
000010010000100100110110000000010
000010010001000001111010000000100
000001100001100000111100001000000
000010100010000100111010010000000
000001100100000001111010000000100
000100001001100000111100000001000
000010010000100100110110010000000
000100010010000100111010010000000
000010100100000010111010000000100
000100010010100000111100100000000
000010001010001000111100100000000
000010001010000001111010000000100
000001001100100000111100000001000
000010010001000001111010000100000
000100001001000100111010000100000
000001100000001100110110000010000
000000010001010001011110000000100
000010010001000001111010010000000
000000010100010100011110000001000
000001000010001010101110001000000
000000100100010010011110000000100
000001010010000001111010000000100
000000010010001001011110000000010
000000010100010100011110000000001
000001010001010000111101000000000
000100100001001000111101000000000
000010000100100010101110000100000
000010000100010100101110000010000
000100010100010000111101000000000
000001000010010001101110000000001
000010001001000010111010000000100
000001010000001010110110100000000
000010100100000010111010000100000
000000100100001001011110000000100
000010001001000010111011000000000
000100100001001000111100000001000
000000010010001001011110000000001
000100010100010000111100100000000
000100010100000010111010000100000
000001000100100001101110000100000
000100000100010010101110001000000
000000001010001010011110000000010
000100100000010010110110100000000
000010001010000001111010010000000
000100000001001100101110000100000
000010010000001001110110000000010
000100000100010010101110000000001
000100010000010100110110000010000
000100001000100001110110010000000
000001001010010000111100000001000
000001010000010001110110010000000
000100001000001100110110010000000
000000001100100001011110000000001
000000100010010100011110000000010
000010001000001010110110000000010
000010010100000100111010000000100
000000100010100010011110000000001
000000100010100010011110000000100
000100100000001001110110100000000
000100100010010000111100001000000
000000100100010010011110000000001
000000010001010001011110000000010
000001100000001100110110100000000
000100100001000001111010000000100
000100000001100001101110000000001
000010100000010100110110010000000
000100100010000010111010000000100
000010100010000100111010000000100
000000001001010010011110000001000
000100100010010000111100000001000
000100100001000001111011000000000
000010010001001000111101000000000
000000100010010100011110000000001
000001010001000010111011000000000
000010100010100000111100100000000
000000010001010001011110000000001
000000001100100001011110000000010
000001001000100100110110000000010
000010010000001001110110100000000
000100000010010100101110000000001
000000001010010001011110000000001
000000010001010001011110000001000
000100010100000010111010000000100
000010001000010001110110100000000
000000001100001100011110000001000
000000100010100010011110000000010
000001010010000001111010000100000
000100000010100010101110000100000
000100010010100000111100001000000
000000010010100100011110000000010
000001001100000100111010000100000
000001010010000001111011000000000
000000010100100010011110000000010
000100000100001001101110001000000
000100100000010010110110000010000
000000100001001100011110000000001
000000010001001010011110000000100
000100010000010100110110100000000
000100001000001100110110000000010
000000010010001001011110000001000
000100001100001000111100000001000
000001001010000010111010010000000
000010001010001000111100001000000
000100001100000001111010010000000
000000001010010001011110000000010
000000001010001010011110000000100
000100010010100000111100000001000
000010000100100010101110000010000
000001001010000010111010000000100
000000001001100100011110000000010
000100001100001000111100001000000
000000100100001001011110000001000
000001100100000001111011000000000
000100000010100010101110000010000
000001000100100001101110000010000
000100100001000001111010010000000
000010001000001010110110010000000
000100010010000100111011000000000
000001010010001000111100100000000
000001000010010001101110000100000
000010001001000010111010000100000
000010000010001001101110000100000
000100001100000001111010000100000
000010100100010000111100100000000
000010000010001001101110000000001
000010010100000100111010010000000
000010001001010000111100000001000
000001001000010010110110010000000
000100001001000100111011000000000
000001001000100100110110000010000
000100100000001001110110010000000
000001001100000100111010000000100
000010000001001010101110000100000
000001001000010010110110000000010
000001000100100001101110000000001
000100000010010100101110001000000
000001000001010010101110000010000
000100001100001000111101000000000
000001010010001000111100000001000
000010001001010000111100100000000
000010010100100000111100000001000
000010000001010001101110000100000
000100001000100001110110000010000
000010000100100010101110000000001
000010000001001010101110000000001
000001100000100001110110100000000
000001001010010000111100100000000
000100100010010000111100100000000
000000001100001100011110000000001
000001100100001000111100000001000
000010100000100010110110100000000
000100010000010100110110010000000
000001100100001000111101000000000
000001100001100000111100100000000
000000100001001100011110000000010
000000001001010010011110000000010
000100100000001001110110000000010
000100010100000010111010010000000
000001001010000010111010000100000
000010001000010001110110000000010
000010010100100000111100001000000
000100000010100010101110000000001
000000001001100100011110000001000
000000010100010100011110000000010
000001001100100000111101000000000
000001001010000010111011000000000
000010100100010000111101000000000
000000010010001001011110000000100
000010100100000010111010010000000
000001100100000001111010000100000
000001100000001100110110010000000
000001100001000100111010000000100
000000100001001100011110000000100
000100010010100000111101000000000
000000010001001010011110000000001
000010000010001001101110001000000
000000100001100001011110000000100
000001100000100001110110010000000
000100000100010010101110000100000
000000001100100001011110000001000
000001000100100001101110001000000
000100010000100010110110010000000
000000100001001100011110000001000
000010100010100000111100001000000
000001010000001010110110010000000
000010000001001010101110001000000
000010000001010001101110000000001
000100100000010010110110010000000
000100000010100010101110001000000
000100001001000100111010010000000
000001100100001000111100001000000
000001001100000100111010010000000
000010010000001001110110000010000




=== State Orbit 31 =====================
size : 360
repr state: 000100100000010001110110000010000
lex min decimal: 22005814993616272452791
states:
000010001100001000111100001000000
000100100000001010110110000010000
000001100010010000111101000000000
000010000001100001101110000010000
000010001010000100111010010000000
000001100000010010110110100000000
000001010000001100110110000000010
000001010100010000111101000000000
000000010001100001011110000001000
000000001010010100011110000000010
000000010001100100011110000000100
000100010001000100111011000000000
000000001100100010011110000000100
000010001000100010110110000000010
000010000001001100101110000100000
000100100001000010111010000000100
000001100000010100110110100000000
000000010001010100011110000000001
000010001100000001111011000000000
000100010010000001111010000100000
000001010000100001110110100000000
000000010010001100011110000000010
000001010100000001111010000000100
000001100010100000111100001000000
000001000100010001101110001000000
000000010001100001011110000000010
000010010000001100110110000000010
000001100100010000111100001000000
000010010100000001111010000100000
000001100000100010110110000010000
000001010100000010111010000100000
000001010010000100111010010000000
000000001010100010011110000001000
000100010001001000111100100000000
000010001000001100110110000010000
000010000100001001101110001000000
000010100000100001110110000010000
000010001100000001111010000100000
000100000001010001101110000010000
000000001001010100011110000000001
000000100100010001011110000000010
000001100000001010110110000000010
000100000010010001101110000010000
000001001010100000111100000001000
000001010000100100110110100000000
000000010100100001011110000000010
000000100010010001011110000000100
000010010001100000111100001000000
000001001100000010111010000100000
000100001001010000111100100000000
000000001100010010011110000000100
000010000100010001101110000100000
000010010001000100111010000100000
000100001010000010111011000000000
000001010001000100111010000000100
000000010100001100011110000000010
000010000100001001101110000100000
000100000010100001101110000000001
000000010001100100011110000001000
000000010100001001011110000000100
000001001010000100111010000000100
000001100000010001110110100000000
000001010100001000111100000001000
000010001100010000111100000001000
000100010010001000111100100000000
000000001100010010011110000001000
000000001100001010011110000000001
000000001010100001011110000001000
000000100010001010011110000000010
000010100001000010111011000000000
000001010100000100111010010000000
000000100100001010011110000000001
000100100010000001111010000100000
000100000001010100101110000000001
000001100100000010111010010000000
000010100001000010111010000000100
000100000100010001101110000010000
000000100010001010011110000001000
000001100000010010110110010000000
000001000100001010101110000100000
000010001001000100111010010000000
000001010001100000111100000001000
000100010000001010110110100000000
000001010100000001111011000000000
000001000010100001101110000000001
000001000100010100101110001000000
000100001010001000111101000000000
000010100000001010110110000000010
000001000100100010101110000100000
000000100100001010011110000000010
000000010001100010011110000001000
000100010000001100110110000000010
000001010000100001110110000000010
000010001010100000111100100000000
000010100010001000111100100000000
000000100010001100011110000001000
000100000001010010101110000100000
000001001000010100110110000010000
000010000001100100101110000100000
000000001010010100011110000000100
000000001100010001011110000001000
000010010100000001111010000000100
000000100001010001011110000000010
000000001010100100011110000000100
000001000100001010101110000000001
000000100001010100011110000001000
000001000100100010101110000010000
000100100010001000111100001000000
000010100000001100110110000010000
000001010000100010110110000010000
000010001010100000111100000001000
000000100001010100011110000000001
000100001001000010111010010000000
000010100100001000111100100000000
000100001000010100110110100000000
000100010100000001111010010000000
000100010001000001111010010000000
000100000100010001101110000000001
000001100000010001110110000000010
000000010100100001011110000000100
000100000010100001101110000100000
000000010010100001011110000000001
000001100000100010110110010000000
000100100000010001110110000000010
000000100001010010011110000001000
000100001010001000111100001000000
000010001000001100110110010000000
000100001010000010111010010000000
000010010000100001110110000000010
000100001000010010110110010000000
000100001010100000111100000001000
000100001000100010110110010000000
000100010001010000111101000000000
000001000010010100101110000010000
000010100100001000111100001000000
000010100001010000111101000000000
000010000010001100101110000010000
000000001100010100011110000001000
000010100001010000111100000001000
000010010100001000111100000001000
000100100000010001110110000010000
000001100001010000111100000001000
000010100000010001110110000000010
000010100010000001111010000000100
000100000010010001101110000100000
000100010000010001110110010000000
000010001000100100110110010000000
000100000010001100101110001000000
000010000001100010101110001000000
000000010100001100011110000001000
000010001000010100110110000000010
000100000001001010101110000010000
000010000010100001101110000000001
000010001001100000111100100000000
000010000100001010101110000000001
000010100001001000111101000000000
000100000010001010101110001000000
000001100010100000111101000000000
000001010000100100110110010000000
000010000100001100101110000010000
000001000010100001101110001000000
000001000001100010101110000010000
000010100001000100111010000100000
000100010001010000111100001000000
000001010100000100111011000000000
000100000010001001101110001000000
000001000001010100101110000010000
000010100001100000111101000000000
000100001000010010110110100000000
000010001100000010111010000000100
000000001100100010011110000000010
000000010001001100011110000000010
000010000100100001101110000010000
000010010000100001110110000010000
000000001010100001011110000000001
000000100001100010011110000000001
000001100010000001111011000000000
000001000010100100101110000100000
000010001000100001110110000010000
000001000100010010101110000100000
000100001001000010111010000100000
000100000010001100101110000000001
000001000010100010101110000010000
000010100010001000111100000001000
000010100100000001111010010000000
000001010100001000111101000000000
000000001010100100011110000001000
000100010100001000111100100000000
000100001100000010111010000000100
000001100010000001111010000000100
000000100010001100011110000000001
000100000001100010101110000100000
000100010100001000111100000001000
000010001001000100111010000100000
000010000001100001101110001000000
000010001000100010110110100000000
000000100001010010011110000000100
000100000001001010101110000100000
000001100001000010111010000000100
000100000010001010101110000010000
000010010100001000111100001000000
000100001010100000111101000000000
000010001010000100111010000000100
000100010000001001110110010000000
000001001000100010110110000010000
000100010001000010111010000100000
000001001000010100110110000000010
000010100000100001110110010000000
000010000100001100101110001000000
000001100010001000111100000001000
000001010010100000111100100000000
000010000100010001101110000000001
000010001000100001110110100000000
000010000010001100101110000000001
000001010100000010111011000000000
000100100001010000111100001000000
000001001100010000111100000001000
000001000010010100101110000100000
000001001100010000111100001000000
000010000001100010101110000000001
000010100000001001110110010000000
000000010100001001011110000001000
000000100010001001011110000000100
000000100010100001011110000000001
000001100000010100110110000010000
000001100001000010111010010000000
000100001010010000111101000000000
000000001010001100011110000000001
000010010001000100111010000000100
000001000100010010101110001000000
000100000001010010101110001000000
000001100010000100111010000100000
000001010001000100111010010000000
000010001000100100110110100000000
000000100010010001011110000000010
000100100010000001111010000000100
000001001100000010111010000000100
000010100001100000111100001000000
000100001000010100110110000000010
000010001100001000111101000000000
000100001001010000111100001000000
000010100001000001111011000000000
000010010000001100110110000010000
000010100001000001111010010000000
000010001100010000111101000000000
000010100000001010110110100000000
000001000100010100101110000010000
000100001100010000111100100000000
000001000010100010101110001000000
000000010100010001011110000000001
000100010001000001111011000000000
000001100010010000111100100000000
000100010001000010111011000000000
000010100100000001111010000100000
000100001010000100111011000000000
000001000100010001101110000000001
000010100000001001110110100000000
000100001010000001111010000100000
000010000001010100101110000100000
000000100001001010011110000000010
000010100000001100110110100000000
000100010000100001110110000000010
000001010010000100111010000100000
000000001100010001011110000000001
000100001000001010110110010000000
000010000001001100101110000010000
000100000001010100101110001000000
000100100001000010111010000100000
000001010000001100110110010000000
000001100010001000111101000000000
000100001100000010111010010000000
000001000001100010101110000000001
000100001000010001110110100000000
000000100010001001011110000001000
000010001000010100110110010000000
000000010001100010011110000000001
000010000001100100101110001000000
000100010000001010110110000010000
000100000001010001101110001000000
000010001100100000111100100000000
000100001010000001111011000000000
000001100010000010111011000000000
000001010100100000111100100000000
000000100010100001011110000000100
000100010010001000111100001000000
000100001100010000111100000001000
000001000010001100101110000100000
000100100010001000111100000001000
000000100001100010011110000000100
000001000010100100101110001000000
000001100010000100111011000000000
000000001001010100011110000000010
000100001000010001110110000010000
000001010001100000111100100000000
000000100001010001011110000001000
000001001010000100111010000100000
000001000010001100101110000000001
000100010000010001110110000010000
000000010100010001011110000000100
000001100000001010110110010000000
000100010001001000111101000000000
000000001100010100011110000000010
000010010001100000111100000001000
000001010100100000111101000000000
000000010100001010011110000000001
000001100100010000111100100000000
000000100001001010011110000000100
000100010000001001110110100000000
000000010100001010011110000001000
000100000100001010101110000010000
000100010001100000111100000001000
000000001010001100011110000000100
000010100010000001111010010000000
000000001010100010011110000000010
000000010010001100011110000000001
000010000100001010101110001000000
000010001100100000111101000000000
000001010010100000111100001000000
000000001001100010011110000000010
000000010001010100011110000000100
000100000010001001101110000100000
000000001100001010011110000000100
000001100100000010111010000100000
000100100001010000111100000001000
000001010000010100110110000010000
000010000100100001101110000100000
000001001010100000111100001000000
000001010100010000111100001000000
000010001100000010111011000000000
000100100000001010110110000000010
000000010001001100011110000000100
000010000001010100101110000000001
000100001010010000111100100000000
000100010000100001110110010000000
000100010010000001111010010000000
000001000001010100101110000000001
000000001001100010011110000000001
000100001000100010110110000000010
000000100100010001011110000000001
000010001100000100111010010000000
000010001001100000111100001000000
000001100010000010111010010000000
000010100001000100111011000000000
000001010000010100110110010000000
000010100001001000111100100000000
000100010001000100111010000000100
000001001000100010110110000000010
000100001000001010110110000010000
000000010010100001011110000000010
000010000010100001101110000010000
000100010000001100110110100000000
000100001010000100111010000000100
000010100000010001110110010000000
000010001100000100111011000000000
000100010100000001111010000000100
000001010000100010110110100000000
000100010001100000111101000000000
000100000001100010101110000000001
000100000100001010101110000000001
000001100001010000111100100000000




=== State Orbit 32 =====================
size : 360
repr state: 000100010000000000110000000010000
lex min decimal: 372399258873116322999
states:
000000000100000001001010000001000
000000100000000001010011000000000
000000001100000000011000000100000
000000000001000100001011000000000
000000000001100000001101000000000
000000000000010100000110000000100
000100000001000000101000000010000
000000100000000001010010000000001
000000000001000100001010000001000
000001000000100000100100010000000
000000000010000100001010000001000
000100000000000001100010001000000
000010000000001000100100010000000
000000000100000010001010000000010
000000001000010000010101000000000
000000000000001010000110000001000
000001000000000010100010000000010
000100000010000000101000000001000
000001000000100000100100000000001
000000010000000001010010100000000
000000001010000000011000001000000
000010000000000001100010000000010
000000000000001100000110000000100
000100010000000000110000000100000
000001000010000000101000010000000
000000100000010000010101000000000
000000100000001000010100000000001
000000100000000010010011000000000
000001000000010000100100000000001
000010000000000100100010001000000
000010000000100000100100000000001
000100000001000000101000000000100
000000010001000000011000100000000
000000000010001000001100000000100
000001000010000000101000000000001
000000010000000001010010000000001
000000000000100001000110001000000
000000100001000000011000010000000
000010000000000100100010000000010
000100000000010000100100000001000
000100000000000001100010100000000
000000000100000010001010000010000
000000001000000010010010100000000
000000010000001000010100010000000
000001000100000000101000000010000
000000000001010000001101000000000
000000001000000010010010000010000
000000000100000010001010001000000
000000000100001000001101000000000
000000000001100000001100000000010
000001100000000000110000000001000
000000000000001010000110100000000
000010001000000000110000001000000
000000000100010000001101000000000
000000000001000100001010010000000
000000001000100000010100000010000
000001000000000100100010000000001
000010000000000001100010000000001
000000100000001000010100010000000
000000000001100000001100000010000
000000000001000100001010000010000
000000000000001010000110010000000
000010000000000100100010100000000
000100000000000010100010000000100
000000000001000010001010000000010
000000000100010000001100000000010
000010000000000100100011000000000
000000000000010100000110000001000
000010000001000000101000000001000
000000001000010000010100000000001
000000000000100001000110000000100
000000000001010000001100000010000
000000000001000010001010010000000
000000000001000010001011000000000
000000000100001000001100000000010
000100001000000000110000000100000
000000000010000001001010001000000
000000000000010001000110000000100
000000001000100000010100000000001
000000000010001000001100000010000
000001010000000000110000000000100
000000000100010000001100000010000
000000100010000000011000000100000
000100010000000000110000000000010
000001010000000000110000000010000
000000000010000100001010010000000
000000010000000001010010000010000
000000000010100000001100000010000
000010000000000001100010001000000
000010000001000000101000000000001
000100000000000001100011000000000
000000000000001100000110100000000
000000000000100010000110001000000
000000000001000100001010000000010
000000000000010001000110010000000
000010000000000001100010100000000
000010000000001000100100000100000
000000000001000010001010000010000
000010000100000000101000000000100
000000100000010000010100000000100
000000100000001000010101000000000
000000001010000000011000000000010
000100000001000000101000000001000
000001000000010000100100000100000
000000000010001000001100000000010
000000010000000001010011000000000
000100001000000000110000000000100
000000000000100010000110000000100
000001000100000000101000100000000
000100000000010000100100000000001
000000001000000100010011000000000
000000010000100000010100000000100
000010000100000000101000000001000
000010000000100000100100010000000
000010000000001000100101000000000
000000100000001000010100000010000
000000000000010001000110001000000
000000000100010000001100100000000
000000001000010000010100010000000
000010000001000000101000100000000
000000000100001000001100000100000
000000000001010000001100100000000
000010100000000000110000000100000
000000000100000001001011000000000
000000000100000001001010000000010
000000000001100000001100000000100
000000100001000000011000000000010
000001000000000010100010100000000
000001000010000000101000000000100
000000000000001100000110001000000
000000000010001000001100100000000
000000010000001000010100001000000
000010000100000000101000010000000
000010000001000000101000000010000
000000000010001000001100000100000
000100010000000000110000000000100
000100000000000001100010000000001
000010001000000000110000000010000
000001100000000000110000000100000
000100000000010000100100000000010
000000100000001000010100000000100
000010000100000000101000100000000
000000000100001000001100100000000
000001000000000100100010001000000
000010100000000000110000000010000
000000000100001000001100000010000
000100000000010000100100000100000
000000000001010000001100000000010
000000100000010000010100000010000
000001010000000000110000000000010
000010001000000000110000000000010
000000010100000000011000000000001
000000010001000000011000001000000
000000001000000010010010000001000
000000000010000001001010010000000
000000010000001000010100000000100
000100000000000001100010000000100
000001000000010000100100000001000
000010100000000000110000000000010
000001000000000100100011000000000
000001000010000000101000000010000
000010000000000001100011000000000
000100010000000000110000000010000
000001000000000010100010001000000
000000100000010000010100000000001
000000010001000000011000010000000
000000000100010000001100000000100
000000010000001000010100000000001
000000010000001000010100000010000
000100001000000000110000000001000
000001000010000000101000000001000
000100001000000000110000000000010
000100000010000000101000000010000
000000000100001000001100000000100
000000001000000100010010000010000
000000000010001000001101000000000
000000100001000000011000000000001
000010000000100000100100000001000
000000000010000001001010000001000
000100000000010000100100010000000
000100000001000000101000010000000
000010000000100000100100000100000
000000000010000001001011000000000
000100000010000000101000100000000
000001000000000100100010100000000
000000001100000000011000001000000
000000000000010001000110000100000
000001100000000000110000000000010
000000100000010000010100010000000
000000100001000000011000001000000
000001000100000000101000010000000
000000000100010000001100000100000
000100000001000000101000000000001
000100000000001000100101000000000
000000001000100000010101000000000
000000010100000000011000000100000
000000001000100000010100010000000
000000000000010100000110100000000
000000001000000010010010000000001
000100010000000000110000000001000
000001100000000000110000000000100
000000010000000100010010100000000
000000100010000000011000010000000
000000001000000100010010000100000
000100000000000010100011000000000
000000000010100000001100000000100
000000001100000000011000000000001
000001010000000000110000000100000
000000010000100000010100000010000
000000000000010100000110001000000
000000000000001010000110000100000
000010000100000000101000000000001
000100000000000010100010000000010
000001000000000100100010000000010
000001000000100000100101000000000
000001000000010000100100010000000
000100000000001000100100000100000
000000001000000100010010000000001
000000001000000100010010100000000
000000000000100001000110000001000
000100000000010000100101000000000
000000000001000100001010001000000
000010001000000000110000000100000
000001000000010000100100000000010
000010100000000000110000001000000
000100000001000000101000100000000
000100000010000000101000000000001
000001010000000000110000001000000
000100000010000000101000000000100
000000000000010100000110010000000
000010000000100000100100000000010
000000000000001010000110000000100
000010000000000001100010000000100
000010000000000100100010000000001
000000100010000000011000001000000
000010000000001000100100000000001
000000100010000000011000000000010
000000010000100000010100010000000
000001000100000000101000000000001
000001000000100000100100000000010
000000000001010000001100000000100
000000100000000001010010000001000
000000010001000000011000000100000
000000010100000000011000010000000
000000000010000001001010000010000
000010000100000000101000000010000
000000001000000010010010000100000
000100000000000010100010001000000
000000001010000000011000000100000
000000000000010100000110000100000
000000000100000010001010010000000
000000000000010001000110000001000
000001100000000000110000001000000
000010000000001000100100000000010
000000001000100000010100000000100
000000000000001100000110000001000
000000100001000000011000000100000
000000000010100000001100000000010
000000000000100001000110010000000
000000001000000010010011000000000
000000001100000000011000000000010
000000000010100000001100100000000
000100000000001000100100000000001
000000100000000010010010000100000
000100001000000000110000001000000
000000100000000010010010000000001
000000000000010001000110100000000
000001000000000010100011000000000
000000000000001100000110010000000
000010000000100000100101000000000
000010100000000000110000000001000
000000001000000100010010000001000
000000100000001000010100001000000
000001000000100000100100000001000
000000000001100000001100100000000
000000000100000001001010000010000
000100001000000000110000000010000
000000010000000100010010000001000
000001010000000000110000000001000
000000010001000000011000000000001
000000010000000100010010000010000
000000001100000000011000100000000
000000000100000010001011000000000
000100010000000000110000001000000
000001000000100000100100000100000
000000100000000001010010000010000
000000000100000001001010010000000
000000100000000010010010000001000
000001100000000000110000000010000
000100000000000001100010000000010
000000010000000100010010000000001
000001000000000010100010000000100
000000100000000010010010100000000
000001000100000000101000000000100
000010001000000000110000000000100
000000100000000001010010100000000
000000001010000000011000100000000
000000001010000000011000010000000
000000000001010000001100000100000
000000000000100010000110010000000
000000000000001100000110000100000
000000001010000000011000000000001
000010100000000000110000000000100
000001000000000010100010000000001
000000000000100001000110000100000
000000010000001000010101000000000
000000010001000000011000000000010
000010000000001000100100000001000
000010000001000000101000000000100
000000000100000001001010001000000
000000010100000000011000000000010
000000001000100000010100001000000
000000000000100010000110000100000
000000001000010000010100001000000
000000001000010000010100000010000
000010000000000100100010000000100
000000000000100010000110000001000
000000000010000100001010000010000
000000000001100000001100000100000
000000001100000000011000010000000
000000010000100000010101000000000
000000010000100000010100001000000
000100000000001000100100010000000
000000010000000001010010000001000
000000100000000001010010000100000
000100000000000010100010100000000
000000000010000100001010001000000
000000100001000000011000100000000
000100000010000000101000010000000
000000100010000000011000100000000
000000010100000000011000100000000
000000010100000000011000001000000
000100000000001000100100000000010
000000010000000001010010000100000
000000000100000010001010000001000
000000000010000001001010000000010
000000000000001010000110001000000
000000100010000000011000000000001
000001000010000000101000100000000
000010000001000000101000010000000
000010001000000000110000000001000
000000010000000100010010000100000
000001000000010000100101000000000
000000001000010000010100000000100
000001000100000000101000000001000
000000000001000010001010000001000
000000100000010000010100001000000
000000000010100000001100000100000
000000010000100000010100000000001
000000000001000010001010001000000
000100000000001000100100000001000
000000000010000100001010000000010
000000000000100001000110100000000
000000000010000100001011000000000
000100000000000010100010000000001
000000010000000100010011000000000
000000000000100010000110100000000
000000100000000010010010000010000
000000000010100000001101000000000
000001000000000100100010000000100




=== State Orbit 33 =====================
size : 180
repr state: 000100010010000000111000000010000
lex min decimal: 2738333797914814803127
states:
000001010010000000111000000010000
000010000000010001100110000000100
000000100001000100011010001000000
000001010000010000110100000100000
000001000000100100100111000000000
000010000000100010100110000001000
000000010010000001011010000010000
000100000001001000101100010000000
000000001001000100011010000010000
000000001001010000011100000010000
000010001000000010110010000001000
000010001000000001110010001000000
000010000100010000101100000000100
000000001100001000011100000100000
000001000010000010101010100000000
000010000010100000101100000000010
000000000010100100001111000000000
000001000010001000101100000000100
000010000100000010101010000001000
000010100000000100110010001000000
000100010100000000111000000000010
000000010000010001010110000100000
000100010000100000110100000000100
000000010001010000011100000100000
000010000000001010100110000001000
000000000010001001001111000000000
000001000000001010100110000000100
000001000001000010101010000000010
000010000100100000101100010000000
000000001000010001010110001000000
000001010001000000111000000000010
000000100100000001011010000010000
000000010000010100010110000100000
000001100000100000110100000100000
000001100100000000111000000010000
000000100100001000011100000010000
000001000001100000101100000000010
000100001000100000110100000000100
000001000000010001100110000001000
000001000010010000101100010000000
000100001100000000111000000000010
000001000001010000101100000000010
000000000001100001001110100000000
000000000100010100001110100000000
000001001000100000110100000000001
000001000001000100101010000000010
000100000001100000101100000000100
000000010100010000011100000100000
000001000100100000101100010000000
000000000001001100001110010000000
000000000010100010001110100000000
000010000000100100100111000000000
000100010000010000110100000100000
000100000000001100100110000001000
000000100010100000011100000100000
000000100010000100011010001000000
000010000001000001101010100000000
000000010000001010010110001000000
000010001000010000110100000000100
000000100100010000011100000010000
000000000100100010001110010000000
000010000000010100100110000000100
000100000000100010100110000000100
000100000100001000101100000000010
000010000100000100101010100000000
000000100100000010011010000010000
000100000100010000101100000000010
000000001010000001011010001000000
000001000000010010100111000000000
000000100001100000011100000100000
000001000100001000101100000000100
000100000000010010100111000000000
000000100010000010011010100000000
000001000000100001100110000001000
000001000100000100101010100000000
000000000001001010001110010000000
000000000010010100001110010000000
000000010010100000011100000010000
000010000001000010101010000001000
000100001001000000111000000010000
000000100010010000011100010000000
000010010000000001110010000000001
000010000010000001101010000000010
000000000001010010001111000000000
000010000000001001100111000000000
000000001000001100010110000100000
000100000010000010101010100000000
000010000001010000101100000000100
000000000010001010001110100000000
000001010000001000110100000000100
000100000000001001100111000000000
000000001001000010011010000010000
000010010100000000111000000000001
000000001000001010010110000100000
000000001000100100010111000000000
000100010000000100110010000001000
000000010001001000011100010000000
000000001100000100011010100000000
000000010000001001010111000000000
000010000010001000101100000000010
000100000001000001101010100000000
000010100000100000110100000100000
000100010000000010110010001000000
000001001000000100110010000000001
000100100000000001110010000000001
000100100001000000111000000000001
000000001010001000011100000100000
000001100001000000111000000000010
000000000100010010001111000000000
000001001000000010110010000000001
000100000010100000101100000000100
000000001100000001011010001000000
000000010001000001011010100000000
000100000000010100100110000001000
000001001000010000110100000000001
000000001100100000011100010000000
000001000100000001101010000001000
000010010000100000110100000000001
000000001010000010011010100000000
000000010001000010011010001000000
000000100000001100010110001000000
000000100000100001010110000100000
000000010000100010010110001000000
000100010010000000111000000010000
000001100000001000110100000000100
000010000010000100101010000000010
000000100001000001011010100000000
000000000100001100001110100000000
000010001000001000110100000100000
000001000000001100100110000000100
000000000100001001001111000000000
000100001000000100110010000001000
000000100000010100010110001000000
000100000010010000101100010000000
000000000001010001001110100000000
000001010000000010110010001000000
000001100000000100110010001000000
000010100100000000111000000010000
000000000010010001001110010000000
000100001000000001110010001000000
000010000001001000101100010000000
000010100000010000110100000000100
000010100010000000111000000000010
000000001010010000011100010000000
000100000001000100101010000001000
000001100000000001110010000001000
000100100000001000110100000000001
000010010001000000111000000000001
000001000010000001101010000001000
000000001001100000011100000010000
000001010000000001110010000001000
000010001001000000111000000010000
000100100010000000111000000000001
000010010000001000110100000000001
000100000000100001100110000000100
000000100000010010010111000000000
000100000100000001101010000000010
000001001100000000111000000000001
000001001010000000111000000000001
000010010000000100110010000000001
000010001010000000111000000000010
000000000001100100001111000000000
000100000100000010101010000000010
000000001000100001010110001000000
000000010010000100011010000010000
000000100001001000011100010000000
000000100000100010010110000100000
000000001000010010010111000000000
000100100000000010110010000000001
000000010000100100010111000000000
000100000010000100101010000001000
000000100000001001010111000000000
000100001000001000110100000100000
000000010010001000011100000010000
000010100000000010110010000001000
000100100000010000110100000000001
000000000100100001001110010000000
000000010100000100011010100000000
000000010100100000011100010000000
000000010100000010011010001000000




=== State Orbit 34 =====================
size : 180
repr state: 000100010010100000111100000010000
lex min decimal: 21932044905820036885687
states:
000010100000010100110110000000100
000001100001100000111100000000010
000100000100001001101111000000000
000001001010000010111010000000001
000010100100010000111100000000100
000100000010010100101110000001000
000010010001000001111010100000000
000100010010100000111100000000100
000100000010100010101110000000100
000010001000001010110110000100000
000100001001000100111010000001000
000001001000010010110110000000001
000010010100000100111010000000001
000001100000001100110110000000100
000001100100001000111100000000100
000100001100000001111010001000000
000001000001010010101111000000000
000000001010001010011110000100000
000000001100100001011110001000000
000000100100001001011110000010000
000010010000001001110110000000001
000100010010100000111100000010000
000010001001010000111100000000100
000001000100001100101110100000000
000010001010000001111010000000010
000100010000100010110110001000000
000001000001010010101110000000010
000000100001001100011110010000000
000100000001100001101110000000100
000000100010100010011110100000000
000001010000001010110110000000100
000000100010100010011110000100000
000100001001000100111010000010000
000100100000001001110111000000000
000100001100001000111100000000010
000100100000010010110111000000000
000000001100001100011110000100000
000010010000001001110111000000000
000100010100000010111010001000000
000010001000001010110110000001000
000001100000100001110110000001000
000001000100100001101110000001000
000001100001000100111010000000010
000010100010100000111100000100000
000010001010001000111100000100000
000001001000010010110111000000000
000010001001000010111010000001000
000010100100000010111010000010000
000100100001000001111010100000000
000100000100010010101111000000000
000000001100100001011110010000000
000100100001000001111010000000001
000100000001001100101110000001000
000010010001001000111100000000001
000000010001001010011110010000000
000010010001001000111100010000000
000010000001001010101110010000000
000001100000001100110110001000000
000000100100010010011110000010000
000010001001000010111010000010000
000010000100010100101110100000000
000100100010000010111010000000001
000000010001001010011110001000000
000001000001100100101111000000000
000010100000100010110110000001000
000001010000010001110110000001000
000001001000100100110110000000001
000100001000001100110110000001000
000000010010001001011111000000000
000010000010100100101110000000010
000100010100010000111100000000010
000001100001100000111100000100000
000010000010001001101110000000010
000100100010010000111100010000000
000001010010001000111100000000100
000001010010000001111010000001000
000100010000010100110110000001000
000001010001000010111010000000010
000010100010100000111100000000010
000000001001010010011111000000000
000100001000100001110110001000000
000001000010001010101110100000000
000000010010100100011110000010000
000000001010010001011110001000000
000001001010000010111010100000000
000001100100000001111010000010000
000010100000010100110110001000000
000100001100001000111100000100000
000010100100000010111010000001000
000001010000010001110110000100000
000001100000100001110110000100000
000010010000100100110110000000001
000100100000010010110110000000001
000001010010001000111100000010000
000100010100010000111100000100000
000010001000010001110110000000100
000010010100100000111100000000001
000001010001000010111010001000000
000010000010100100101111000000000
000010000100100010101110000001000
000100001001100000111100000010000
000000001010010001011110010000000
000010100010000100111010000000010
000010001000010001110110001000000
000001000100001100101110000000100
000100001000100001110110000000100
000010100100010000111100000010000
000010010100100000111100010000000
000000010010001001011110000010000
000010010100000100111010100000000
000001001000100100110111000000000
000100100001001000111100010000000
000010100000100010110110000100000
000100100001001000111100000000001
000000100001001100011110001000000
000001100100000001111010000001000
000000100001100001011110000100000
000100010100000010111010000000010
000100010000100010110110000000100
000100000100001001101110000000010
000010010000100100110111000000000
000100001001100000111100000000100
000001010000001010110110001000000
000000001001100100011111000000000
000010000001001010101110000001000
000001001010010000111100010000000
000010000100010100101110000000100
000001010001010000111100000100000
000001001100000100111010100000000
000010000001010001101110100000000
000000100010010100011110010000000
000001000010010001101110000001000
000000001100001100011110100000000
000001000010010001101110010000000
000100000010100010101110100000000
000010000010001001101111000000000
000001001010010000111100000000001
000001100001000100111010001000000
000001010001010000111100000000010
000100001100000001111010000000010
000000100001100001011110100000000
000000001010001010011110100000000
000100000001001100101110010000000
000010000001010001101110000000100
000001000010001010101110000000100
000001001100100000111100000000001
000010001001010000111100000010000
000001001100000100111010000000001
000000010100100010011110001000000
000100000001100001101110100000000
000000010001010001011110100000000
000000100010010100011110001000000
000000010100010100011110100000000
000100100010000010111010100000000
000000010100100010011110010000000
000100010000010100110110000100000
000000100100010010011111000000000
000001000001100100101110000000010
000100010010000100111010000001000
000100100000001001110110000000001
000010100010000100111010001000000
000000001001010010011110000010000
000001001100100000111100010000000
000001010010000001111010000010000
000010010001000001111010000000001
000001100100001000111100000010000
000100001000001100110110000100000
000001000100100001101110010000000
000000001001100100011110000010000
000010000100100010101110010000000
000100100010010000111100000000001
000100000100010010101110000000010
000010001010000001111010001000000
000000010001010001011110000100000
000100000010010100101110010000000
000000100100001001011111000000000
000000010100010100011110000100000
000010001010001000111100000000010
000100010010000100111010000010000
000000010010100100011111000000000




=== State Orbit 35 =====================
size : 60
repr state: 000100010010100100111110000010000
lex min decimal: 173066777548076187217079
states:
000001010010010001111110000001000
000100010100010100111110000100000
000001100001100001111110000100000
000001100100001100111110000000100
000100010100100010111110001000000
000100100010010010111110000000001
000010010010001001111111000000000
000100100010010100111110010000000
000100001100001100111110000100000
000010100010100100111110000000010
000100100001100001111110100000000
000100100100001001111111000000000
000100100001001100111110010000000
000010010001001010111110010000000
000100001100100001111110001000000
000010010100010100111110100000000
000001100100100001111110000001000
000001001001100100111111000000000
000001010001010001111110000100000
000010100010100010111110000100000
000001001100100100111110000000001
000001001100001100111110100000000
000100010010100100111110000010000
000100010100010010111110000000010
000010001001001010111110000001000
000010010001001001111110000000001
000010001001010001111110000000100
000100001001001100111110000001000
000100001001100001111110000000100
000010100100100010111110000001000
000001001010010010111110000000001
000001010010001001111110000010000
000010001001010010111110000010000
000010010100100010111110010000000
000100001100001001111110000000010
000001100100001001111110000010000
000001001001010010111111000000000
000010100100010010111110000010000
000010010001010001111110100000000
000001001010010001111110010000000
000100100010100010111110100000000
000010010100100100111110000000001
000010100010010100111110001000000
000100100100010010111111000000000
000010100100010100111110000000100
000100010010010100111110000001000
000100100001001001111110000000001
000010001010001001111110000000010
000100001001100100111110000010000
000100010010100010111110000000100
000001100001100100111110000000010
000001001100100001111110010000000
000001010001001010111110001000000
000001010010001010111110000000100
000010001010001010111110000100000
000010001010010001111110001000000
000001001010001010111110100000000
000001010001010010111110000000010
000001100001001100111110001000000
000010010010100100111111000000000




=== State Orbit 36 =====================
size : 180
repr state: 000100010010100001111110000010000
lex min decimal: 175501172430953451449527
states:
000100010100001010111110001000000
000100001100010001111110001000000
000001001100100010111110010000000
000100010010001001111111000000000
000001001100010010111111000000000
000100001010010100111110010000000
000100010010001001111110000010000
000010010001001100111110000000001
000100100001010001111110100000000
000010010100001001111111000000000
000001100010001010111110100000000
000001100010010100111110001000000
000100010001010100111110000100000
000100001001100010111110000000100
000001010100001100111110100000000
000010100100001001111111000000000
000001100010001100111110001000000
000001100100010010111110000010000
000010001100100001111110001000000
000001010001100010111110000000010
000010100001010100111110000000100
000001010100010100111110000100000
000100010100001001111110000000010
000010100001001010111110010000000
000010001100100001111110010000000
000100010001001010111110010000000
000001100001010010111111000000000
000001001100010100111110000000001
000001100010001010111110000000100
000100001010100010111110100000000
000100001001010100111110000001000
000010010001100001111110100000000
000100010100001010111110000000010
000010001100001100111110100000000
000010001100001100111110000100000
000010010001100100111111000000000
000010001100001010111110000001000
000100010001010001111110000100000
000001100001010100111110000000010
000010001010100001111110001000000
000010010100100001111110000000001
000001100100010010111111000000000
000001010100010100111110100000000
000010010001100100111110000000001
000100001001010010111110000010000
000001010100100010111110001000000
000001010100001010111110001000000
000001100010001100111110000000100
000001010001010100111110000000010
000100010001100001111110000000100
000100001010100001111110000000100
000010100001100010111110000100000
000010100010100001111110000100000
000001100010100010111110000100000
000010001001010100111110000000100
000010010100100001111110010000000
000010010100001001111110000000001
000010100010001100111110000000010
000100100001001010111110010000000
000010001010001100111110000000010
000001100001010010111110000000010
000100001010001100111110000100000
000010100010100001111110000000010
000010010100001100111110000000001
000010001010100001111110000000010
000100010010001100111110000001000
000100100010001010111110100000000
000001100100010001111110000010000
000100001001100010111110000010000
000001100010010001111110010000000
000100100010010001111110010000000
000100100001010010111110000000001
000001001010100100111111000000000
000100100010001001111110000000001
000001010001100100111110000000010
000001010100010001111110000001000
000100001010010100111110000001000
000100010001100010111110001000000
000001010010100100111111000000000
000100010100010001111110000000010
000010100010001001111111000000000
000001100100010001111110000001000
000010001010100100111110000000010
000100001100010001111110000000010
000100010001001100111110000001000
000100001010100010111110000000100
000010010001100001111110000000001
000010001001100010111110000010000
000010100001100001111110000100000
000001100010100001111110000100000
000001100010100001111110000001000
000100100001010001111110000000001
000001010010100001111110000010000
000010100100001010111110000010000
000001100010010001111110000001000
000001100001010100111110001000000
000001001010100100111110000000001
000010100001100001111110100000000
000001010001100010111110001000000
000100001001010010111111000000000
000100001010001010111110000100000
000100001100010010111111000000000
000100010001100010111110000000100
000010010001001100111110010000000
000010001100010001111110001000000
000001010010100001111110000001000
000010001100001010111110000100000
000100100001001010111110000000001
000010100001010001111110000000100
000100010001001010111110001000000
000001010010001100111110000010000
000100010010100001111110000010000
000010001001100010111110000001000
000010100010001100111110001000000
000100100001010010111111000000000
000001010010001100111110000000100
000010100001100010111110000001000
000100010001010001111110100000000
000001001010100010111110000000001
000100001010100001111110001000000
000001100001100010111110000100000
000010001001010100111110000010000
000100010100001001111111000000000
000010100100010001111110000010000
000010001010100100111111000000000
000001100010010100111110010000000
000010100001001010111110000001000
000001100001100010111110000000010
000010100001010001111110100000000
000100100010001001111111000000000
000100001010001010111110100000000
000001001010010100111110000000001
000001010010100100111110000010000
000100001010001100111110000001000
000010100100001010111110000001000
000010100010001001111110000000010
000010001010001100111110000100000
000001010100100010111110010000000
000010100100010001111110000000100
000100010010100001111110000000100
000100010100010001111110000100000
000100100010001010111110000000001
000100010001001100111110010000000
000010100100001001111110000010000
000010010100001100111110100000000
000010001100010100111110100000000
000001100010100010111110100000000
000001010100001100111110000000100
000010001001100100111110000010000
000001010100001010111110000000100
000010100001001100111110001000000
000010001001100100111111000000000
000001010100100001111110010000000
000001001100010100111110100000000
000001010001100100111111000000000
000001001100010010111110000000001
000100001100010010111110000000010
000100001001010100111110000010000
000001010001010100111110000100000
000001001010100010111110100000000
000100010001010100111110000001000
000001010100010001111110000100000
000010001100100010111110010000000
000010100001010100111110001000000
000010001100010001111110000000100
000001001100100010111110000000001
000001100100001010111110000010000
000100100010010001111110000000001
000001010100100001111110000001000
000010001100100010111110000001000
000010001100010100111110000000100
000001001010010100111110010000000
000100010001100001111110100000000
000100001010010001111110001000000
000100010010001100111110000010000
000100001010010001111110010000000
000100001100001010111110000100000
000100001100001010111110000000010
000001100100001010111110000000100
000010100001001100111110010000000




=== State Orbit 37 =====================
size : 180
repr state: 000100010010001000111100000010000
lex min decimal: 22005831882114875092151
states:
000100010000001001110111000000000
000000001100001010011110000100000
000010001000100001110110001000000
000100001000010001110110001000000
000100001010100000111100000000100
000010000100001001101111000000000
000010001001000100111010000010000
000010000001010100101110000000100
000100010100000001111010000000010
000010001100000100111010100000000
000010001100001000111100000100000
000100001100000010111010000000010
000100010010001000111100000010000
000000001001010100011110000010000
000001010100100000111100010000000
000100001010000001111010001000000
000001001000100010110110000000001
000010100001001000111100010000000
000100000010010001101110010000000
000100010001000010111010001000000
000000001100010100011110100000000
000001001000010100110110000000001
000010000100010001101110000000100
000100100010001000111100000000001
000010100010001000111100000000010
000001100010000100111010001000000
000001001100000010111010000000001
000010000001100010101110000001000
000001100010000010111010100000000
000100010010000001111010000010000
000100001000010010110111000000000
000000001010100100011111000000000
000000001001100010011110000010000
000001001010100000111100000000001
000100010001000100111010000001000
000001010000100010110110001000000
000001100010001000111100000000100
000001001010000100111010000000001
000000010001100100011111000000000
000001100010010000111100010000000
000010100001000100111010001000000
000000100001100010011110000100000
000010000100001100101110100000000
000010000001001100101110010000000
000001100000010010110111000000000
000100100000001010110110000000001
000000100100010001011110000010000
000000010001010100011110000100000
000001100000001010110110000000100
000000010010100001011110000010000
000001100100000010111010000010000
000100001000010100110110000001000
000100100001010000111100000000001
000001010010100000111100000010000
000000001010001100011110000100000
000100010000010001110110000100000
000100000010001001101111000000000
000100000001010100101110000001000
000010010000001100110110000000001
000001000010100100101111000000000
000001000100100010101110010000000
000010100001000001111010100000000
000010000010100001101110000000010
000010100100001000111100000010000
000001000010010100101110010000000
000100010001100000111100000000100
000001000100010001101110000001000
000100001000100010110110000000100
000010010001000100111010000000001
000100001001000010111010000010000
000001100100010000111100000010000
000010001100000010111010000001000
000010100000001010110110000001000
000010010100000001111010000000001
000100100010000001111010000000001
000000010001100010011110001000000
000010001001100000111100000010000
000010001000001100110110000100000
000001010100000100111010100000000
000100000010100001101110000000100
000010001000010100110110000000100
000001000010001100101110000000100
000001000100010010101111000000000
000010100001100000111100000100000
000100001010001000111100000100000
000100010000100001110110000000100
000100100000010001110110000000001
000001000010100010101110100000000
000000100010001001011111000000000
000010000100001010101110000001000
000001100001010000111100000000010
000001000100001010101110000000100
000001000001100010101110000000010
000010001010000100111010000000010
000000010100100001011110010000000
000000100010010001011110010000000
000100001010000010111010100000000
000001010000100100110111000000000
000000100001010100011110001000000
000100000100010001101110000000010
000001100000010100110110001000000
000001010001100000111100000000010
000010000001100100101111000000000
000100010000001100110110000001000
000000100010100001011110000100000
000001100000100010110110000100000
000001100010000001111010000001000
000010000100100001101110010000000
000100000001010010101111000000000
000001000010100001101110000001000
000010000001100001101110100000000
000100010100001000111100000000010
000100001010010000111100010000000
000001010000010100110110000100000
000100100001000010111010000000001
000000010001001100011110010000000
000010100010000001111010000000010
000010100000001100110110001000000
000100000001001010101110010000000
000000001100010010011111000000000
000001010100000010111010001000000
000010100001010000111100000000100
000010100100000001111010000010000
000010001100100000111100010000000
000000100001010001011110100000000
000100010000001010110110001000000
000010001100010000111100000000100
000000100010001100011110001000000
000001010100001000111100000000100
000000100100001010011110000010000
000010001000100100110111000000000
000100000010001100101110000001000
000001010100010000111100000100000
000000010100001001011111000000000
000001010010000100111010000010000
000001010000100001110110000001000
000010100000010001110110000000100
000100010001010000111100000100000
000001100001000010111010000000010
000010001100000001111010001000000
000010010001100000111100000000001
000010010100001000111100000000001
000100000100001010101110000000010
000100001001010000111100000010000
000100000010001010101110100000000
000000001100010001011110001000000
000100001010000100111010000001000
000000001100100010011110010000000
000000100001001010011110010000000
000100010001001000111100010000000
000000100001010010011111000000000
000010100001000010111010000001000
000100000001100010101110000000100
000100001000001010110110000100000
000100010001000001111010100000000
000000010100001010011110001000000
000010010000100001110110000000001
000001100000010001110110000001000
000001010000001100110110000000100
000010001010100000111100000000010
000001000001010100101110000000010
000010001000100010110110000001000
000000001010010100011110010000000
000000001010100001011110001000000
000000100010001010011110100000000
000001010001000100111010000000010
000001100010100000111100000100000
000100000001010001101110100000000
000001000100010100101110100000000
000000001010100010011110100000000
000001010100000001111010000001000
000001001100010000111100000000001
000000010001100001011110100000000
000010100000001001110111000000000
000010000010001100101110000000010
000010100000100001110110000100000
000000010100010001011110000100000
000100001100010000111100000000010
000000010010001100011110000010000
000000010100001100011110100000000




=== State Orbit 38 =====================
size : 180
repr state: 000100010001000000111000000010000
lex min decimal: 3107268679389005835447
states:
000001010000100000110100000000001
000100000000010001100110000000100
000001010000000100110010001000000
000001000100000010101010100000000
000100001000010000110100000100000
000100000010001000101100000000100
000100010000001000110100000000100
000001100000000010110010001000000
000000000010001100001110010000000
000000010100000001011010100000000
000001000010100000101100000000010
000000001000010100010111000000000
000100000001000010101010100000000
000100010000001000110100000000001
000010100000001000110100000100000
000100000000001010100110000000100
000100000001000010101010000001000
000000000001100010001111000000000
000001010000000100110010000001000
000010100001000000111000000010000
000001100010000000111000000000010
000000000100001010001110010000000
000010001000000100110010001000000
000000001010000100011010100000000
000100000000001010100111000000000
000001000000010100100110000001000
000001010100000000111000000010000
000001000100010000101100000000100
000000000010001100001111000000000
000100000010001000101100010000000
000100010001000000111000000000010
000000100010000001011010100000000
000001010000000100110010000000001
000000001000010100010110000100000
000000010001100000011100000010000
000100000000010001100110000001000
000000000010001100001110100000000
000010000100001000101100000000010
000000001100010000011100000010000
000100000001000010101010000000010
000000000010100001001110010000000
000010001000100000110100000000001
000000000100001010001110100000000
000010000000001100100110000000100
000000100000001010010111000000000
000010000000100001100110000000100
000001000100000010101010000001000
000010001000000100110010000000001
000100010000000001110010000000001
000000010000001100010111000000000
000000001100010000011100000100000
000010000100001000101100010000000
000100001010000000111000000000010
000001010100000000111000000000001
000000001100010000011100010000000
000000001000100010010111000000000
000010000001000100101010000001000
000001000100010000101100000000010
000001000000010100100111000000000
000010000100001000101100000000100
000000000100010001001110100000000
000000001010000100011010001000000
000100000010000001101010000000010
000000100000001010010110001000000
000001000010000100101010000001000
000000100001010000011100010000000
000000010100001000011100010000000
000100010000000001110010000001000
000001010000100000110100000100000
000001100000000010110010000000001
000000001100000010011010001000000
000000010100001000011100000010000
000001100000000010110010000001000
000000010000100001010110001000000
000000001100000010011010100000000
000010000100000001101010100000000
000100000000001010100110000001000
000000000010100001001110100000000
000010000100000001101010000000010
000000000001010100001110010000000
000010001000100000110100000000100
000010001100000000111000000010000
000010000001000100101010100000000
000000010100000001011010001000000
000001000100010000101100010000000
000010000000100001100111000000000
000001000000100010100110000000100
000001000010000100101010100000000
000000100010001000011100000100000
000000000001010100001110100000000
000000100000001010010110000100000
000000100000010001010110001000000
000010100001000000111000000000010
000100001000010000110100000000001
000010001000100000110100000100000
000010100000000001110010000000001
000000001010100000011100000100000
000000100001010000011100000100000
000001000010100000101100010000000
000001000000100010100110000001000
000010100000000001110010000001000
000000001010100000011100000010000
000100000001010000101100000000010
000100001000000010110010001000000
000001100010000000111000000000001
000010000000001100100111000000000
000100000010000001101010100000000
000000000100001010001111000000000
000000001010100000011100010000000
000000010001000100011010001000000
000100000010001000101100000000010
000100000000010001100111000000000
000010100000001000110100000000001
000000010100000001011010000010000
000000010100001000011100000100000
000001000000010100100110000000100
000000001010000100011010000010000
000010000000001100100110000001000
000010100000001000110100000000100
000001100000010000110100000100000
000001010000100000110100000000100
000000000001100010001110010000000
000000100001010000011100000010000
000010000001100000101100010000000
000010000001000100101010000000010
000100001010000000111000000000001
000000100001000010011010001000000
000100010000001000110100000100000
000100000001010000101100010000000
000001100000010000110100000000001
000000001000100010010110000100000
000000010001000100011010100000000
000010000100000001101010000001000
000000010000100001010110000100000
000100001010000000111000000010000
000001000010000100101010000000010
000100001000000010110010000000001
000000010001000100011010000010000
000000001000100010010110001000000
000010001000000100110010000001000
000000000010100001001111000000000
000010000001100000101100000000010
000000010000001100010110001000000
000100000010000001101010000001000
000000001100000010011010000010000
000000100010001000011100000010000
000000100000010001010110000100000
000100000001010000101100000000100
000010001100000000111000000000001
000000100010000001011010001000000
000000010000001100010110000100000
000010000001100000101100000000100
000001000010100000101100000000100
000010100000000001110010001000000
000100010001000000111000000010000
000001010100000000111000000000010
000100010001000000111000000000001
000100010000000001110010001000000
000010100001000000111000000000001
000000000100010001001111000000000
000100001000010000110100000000100
000001100010000000111000000010000
000000100010000001011010000010000
000000001000010100010110001000000
000000000001100010001110100000000
000000010001100000011100000100000
000010000000100001100110000001000
000010001100000000111000000000010
000000100000010001010111000000000
000001100000010000110100000000100
000000010000100001010111000000000
000000100010001000011100010000000
000000000001010100001111000000000
000000100001000010011010100000000
000000100001000010011010000010000
000001000000100010100111000000000
000001000100000010101010000000010
000000000100010001001110010000000
000000010001100000011100010000000
000100001000000010110010000001000




=== State Orbit 39 =====================
size : 180
repr state: 000100010001100000111100000010000
lex min decimal: 22006390328468669033655
states:
000100100000001010110111000000000
000100001100010000111100000100000
000100010000001010110110000000100
000000001100001010011110100000000
000001010010100000111100000000100
000100001010000001111010000000010
000000001010100010011110000100000
000100000001010100101110010000000
000001010000100100110110000000001
000010100001100000111100000000010
000001001100010000111100010000000
000000001010001100011110100000000
000100001000100010110110001000000
000001100001000010111010001000000
000000010100001010011110010000000
000000100100001010011111000000000
000010010100001000111100010000000
000100000010001100101110010000000
000100000100010001101111000000000
000001010100000001111010000010000
000000010010100001011111000000000
000001000100001010101110100000000
000001100100010000111100000000100
000001001000100010110111000000000
000001100010000100111010000000010
000010001100001000111100000000010
000000010001100010011110010000000
000001010100001000111100000010000
000001100100000010111010000001000
000001001100000010111010100000000
000000100001010010011110000010000
000010010001000100111010100000000
000100010100001000111100000100000
000001000001100010101111000000000
000000010001001100011110001000000
000100010001001000111100000000001
000001010001000100111010001000000
000010001010100000111100000100000
000001000001010100101111000000000
000000100001001010011110001000000
000010001100000010111010000010000
000010001000010100110110001000000
000000100010010001011110001000000
000100010001100000111100000010000
000000010010001100011111000000000
000000100001010001011110000100000
000010100010001000111100000100000
000010000100001001101110000000010
000100010001000001111010000000001
000100000001100010101110100000000
000000010001100001011110000100000
000001000100010010101110000000010
000100000001010001101110000000100
000001000010100001101110010000000
000100010000001100110110000100000
000010000001100010101110010000000
000000100010001010011110000100000
000010000001100100101110000000010
000100001100000010111010001000000
000100010000001001110110000000001
000100000010100001101110100000000
000010000001100001101110000000100
000001100010000010111010000000001
000000001100010100011110000100000
000001100010010000111100000000001
000010001000001100110110000001000
000100001010000100111010000010000
000001010100000100111010000000001
000000001010010100011110001000000
000010100001000100111010000000010
000100010001010000111100000000010
000010100000001010110110000100000
000100100010001000111100010000000
000000100010001001011110000010000
000000100010001100011110010000000
000000001010100001011110010000000
000010100000100001110110000001000
000100001010100000111100000010000
000100010001000010111010000000010
000100001000001010110110000001000
000100010000100001110110001000000
000100100001000010111010100000000
000001001000010100110111000000000
000010001000100010110110000100000
000100000001001010101110000001000
000001100000010010110110000000001
000001100000100010110110000001000
000010010000100001110111000000000
000001010010000100111010000001000
000010001001100000111100000000100
000001010000010100110110000001000
000001000100010100101110000000100
000000100001100010011110100000000
000000001100010010011110000010000
000001000010100010101110000000100
000001001010100000111100010000000
000001000010010100101110000001000
000100001001010000111100000000100
000000001100100010011110001000000
000001100010100000111100000000010
000100010001000100111010000010000
000100000010001010101110000000100
000010100010000001111010001000000
000100010100000001111010001000000
000010000100001010101110010000000
000100001010001000111100000000010
000100000010001001101110000000010
000100001001000010111010000001000
000001010000001100110110001000000
000000010100001100011110000100000
000010010001100000111100010000000
000001000100010001101110010000000
000100100000010001110111000000000
000001010000100001110110000100000
000010100000010001110110001000000
000000010100100001011110001000000
000001010100000010111010000000010
000010001010000100111010001000000
000000010100001001011110000010000
000010001100000100111010000000001
000100001010000010111010000000001
000100100010000001111010100000000
000000100100010001011111000000000
000000100010100001011110100000000
000010100100000001111010000001000
000010001000100100110110000000001
000000010001100100011110000010000
000001010100100000111100000000001
000010000001010100101110100000000
000100100001010000111100010000000
000001010001100000111100000100000
000001100010000001111010000010000
000100010010001000111100000000100
000010001100100000111100000000001
000010100001001000111100000000001
000000001001100010011111000000000
000001000010001100101110100000000
000100010010000001111010000001000
000000001010100100011110000010000
000001000100100010101110000001000
000010100000001001110110000000001
000001100001010000111100000100000
000010000100100001101110000001000
000100001010010000111100000000001
000000010001010100011110100000000
000000010100010001011110100000000
000010100001000001111010000000001
000010001000100001110110000000100
000001010000100010110110000000100
000010000010100001101111000000000
000010100000001100110110000000100
000010001100000001111010000000010
000100001000010001110110000000100
000010001001000100111010000001000
000010010000001100110111000000000
000001000010100100101110000000010
000000001100010001011110010000000
000100000001010010101110000000010
000010100001000010111010000010000
000001100000001010110110001000000
000000100001010100011110010000000
000010001100010000111100000010000
000100001000010100110110000100000
000010100001010000111100000010000
000000001001010100011111000000000
000001010100010000111100000000010
000010000100010001101110100000000
000001100000010100110110000000100
000010000010001100101111000000000
000010100100001000111100000000100
000001100000010001110110000100000
000100000010010001101110000001000
000010010100000001111010100000000
000001100010001000111100000010000
000100000100001010101111000000000
000001001010000100111010100000000
000010000001001100101110000001000
000100001000010010110110000000001
000100010000010001110110000001000
000010000100001100101110000000100




=== State Orbit 40 =====================
size : 60
repr state: 000100010001100100111110000010000
lex min decimal: 173140564524371025423543
states:
000001001100010001111110010000000
000010010100001010111110010000000
000100010001100100111110000010000
000100100010001100111110010000000
000010100010001010111110000100000
000001010010010100111110000001000
000010001100100100111110000000001
000001010100100100111110000000001
000010001010010100111110001000000
000010001100010010111110000010000
000001100001010001111110000100000
000100100001100010111110100000000
000001010100010010111110000000010
000001100100010100111110000000100
000001001010100001111110010000000
000100010100100001111110001000000
000010100001100100111110000000010
000100001010001001111110000000010
000001100010001001111110000010000
000100100001010100111110010000000
000001100100100010111110000001000
000100010100001100111110000100000
000001001001010100111111000000000
000001010010100010111110000000100
000100010001001001111110000000001
000001010100001001111110000010000
000010100001001001111110000000001
000010001010100010111110000100000
000100010010001010111110000000100
000100010001010010111110000000010
000010100010010001111110001000000
000010010010100001111111000000000
000100100010100001111110100000000
000100001010010010111110000000001
000100100100010001111111000000000
000100010010010001111110000001000
000001010001001100111110001000000
000001100010100100111110000000010
000100001001010001111110000000100
000001100010010010111110000000001
000100001010100100111110000010000
000001001010001100111110100000000
000010100001010010111110000010000
000010001001100001111110000000100
000010010010001100111111000000000
000001001001100010111111000000000
000010100100001100111110000000100
000100001100100010111110001000000
000010010100010001111110100000000
000010010001100010111110010000000
000100001001001010111110000001000
000001100001001010111110001000000
000010001001001100111110000001000
000010010001010100111110100000000
000001001100001010111110100000000
000100001100010100111110000100000
000001010001100001111110000100000
000010100100100001111110000001000
000010001100001001111110000000010
000100100100001010111111000000000




=== State Orbit 41 =====================
size : 360
repr state: 000100010000100000110100000010000
lex min decimal: 2738198689925993688247
states:
000001000010000001101010010000000
000010000100000010101010000010000
000000010000100010010110010000000
000010000001000001101010000000100
000001001000000010110010100000000
000100000000001100100110010000000
000000001010001000011100100000000
000000100000010100010110010000000
000010000100000010101010010000000
000000000001100001001110000000100
000010000010000100101010001000000
000001100100000000111000000000100
000100000100010000101100000100000
000010100100000000111000000000100
000000001010001000011100000000010
000001001000000100110011000000000
000000001001000100011011000000000
000100000100001000101100000100000
000010100010000000111000000100000
000001100000001000110100001000000
000000100001000001011010000000001
000100000000100010100110001000000
000010000100010000101100000010000
000001001000010000110101000000000
000010000000001001100110000000001
000010010001000000111000100000000
000010100000100000110100000000010
000001100100000000111000000001000
000001100000001000110100000010000
000010000010100000101101000000000
000000000010100010001110000000100
000100000100000010101011000000000
000001000000100100100110000000001
000000010100100000011100000000001
000000001100001000011100100000000
000000001010000001011010010000000
000010010001000000111000010000000
000000001000001010010110000001000
000010001000000010110010000100000
000100100000001000110101000000000
000100000000010010100110000000010
000010000001001000101100000001000
000001000010000001101010000010000
000000010100000010011010000000010
000001100000000001110010000100000
000001000010001000101100100000000
000100010000010000110100000000010
000000100100000010011010000001000
000010000001001000101100000000001
000000100001100000011100000000010
000000100100000001011011000000000
000000010000001001010110000000001
000010000010001000101101000000000
000000001001000010011010000001000
000010001000001000110100000001000
000100000010010000101100000001000
000001000000100001100110000100000
000100010000010000110100000001000
000100100010000000111000010000000
000100100010000000111000100000000
000010000000100010100110010000000
000000010001000010011010010000000
000100010100000000111000001000000
000000001000001100010110100000000
000000000010010100001110001000000
000000010100100000011100001000000
000010010000001000110101000000000
000100001000001000110100000000010
000001000001000010101011000000000
000010001000000001110010000000010
000000010001010000011100000000010
000100100000000010110011000000000
000010010100000000111000100000000
000001000010001000101100000010000
000100000000001001100110000000001
000000100000100001010110100000000
000100000001001000101100000000001
000001010001000000111000000100000
000000000100100001001110000001000
000100000000100010100110100000000
000100000100001000101101000000000
000000010010100000011101000000000
000010000000010001100110001000000
000001000010000010101010000000001
000000000010001010001110000100000
000010000001000010101010000010000
000000100000010010010110000010000
000100010000000100110010000010000
000100000000010100100110010000000
000000010001000001011010000000001
000100000000010100100110000100000
000000010010001000011101000000000
000001000010000010101010000000100
000010010000000001110010100000000
000000001010000001011010000000010
000000001000100100010110000010000
000000000100001100001110000000100
000000010010000001011011000000000
000000000001100100001110000000010
000001000001100000101101000000000
000000100010100000011100000000010
000001000000010001100110000100000
000001010000010000110100000001000
000000001001100000011101000000000
000010000010100000101100000100000
000000100000100001010110000001000
000000010100000100011010000000001
000100100000010000110100010000000
000000010000010001010110100000000
000000000010010100001110000001000
000000010001010000011100100000000
000000001000001100010110000001000
000000000010001010001110000000100
000010001000010000110100000010000
000000000010001001001110000000010
000010001000010000110100001000000
000100100001000000111000010000000
000000010010100000011100000000100
000100001000001000110100000001000
000000001000010010010110000010000
000000100001001000011100001000000
000100000000001100100110000100000
000010000100100000101100000000001
000100000000100001100110100000000
000010100100000000111000000001000
000001000001100000101100000100000
000000001000100100010110000000001
000010100000010000110100000010000
000000001001100000011100000000100
000000010000010001010110000001000
000000001100100000011100001000000
000000100001100000011100100000000
000000010010001000011100000000100
000100000001000100101010010000000
000001000001000100101010001000000
000010000100100000101100000001000
000000010100000100011010000100000
000001010000000001110010000010000
000000000100010100001110000100000
000000010001001000011100000000001
000000010001000001011010000100000
000100000010100000101100000010000
000001001010000000111000100000000
000010000000001010100110000100000
000001010010000000111000000000100
000001100000100000110100000001000
000001010010000000111000000001000
000010000010001000101100000100000
000000000001100100001110000010000
000000100000010010010110000000001
000100100000000001110010100000000
000000100001000100011010000000010
000100001000000100110010000100000
000000001100000001011010010000000
000000100010100000011100100000000
000000001000100001010110010000000
000100010010000000111000000000100
000000010010000100011011000000000
000001000100100000101100000000001
000000010000100100010110000000001
000100000000001001100110000000010
000000000100010010001110000000010
000001000100000001101010000010000
000000001001000100011010000001000
000000100001001000011100000000001
000000010000010100010110000001000
000000001001000010011011000000000
000010000001000001101010000000001
000001000000001010100110100000000
000001001010000000111000010000000
000100001000000100110010000010000
000000001001010000011101000000000
000000010100010000011100100000000
000001000000001100100110001000000
000001000000001010100110001000000
000000100000100010010110000001000
000010010100000000111000010000000
000000010001001000011100001000000
000100000100000001101010001000000
000001100001000000111000001000000
000000010100010000011100000000010
000010000100000100101010000000100
000001001000100000110101000000000
000100000100000010101010001000000
000010001010000000111000001000000
000100000100010000101101000000000
000001000100100000101100000001000
000010000001010000101100100000000
000000100000001001010110000000001
000000010000100100010110000010000
000001100000000100110010000000100
000000001100000100011010000000001
000010000010000001101010001000000
000000100001000100011010010000000
000010000000100010100110000100000
000000000001001100001110000001000
000000100100010000011101000000000
000000001000001010010110100000000
000010010000000100110010100000000
000100000010100000101100100000000
000001000010010000101100000000001
000100100000001000110100010000000
000000010000010100010110100000000
000001001000000100110010100000000
000010000000100100100110000000010
000100001000000001110010000000100
000010000000001001100110000000010
000000010000001001010110000010000
000001010000001000110100000010000
000010001000000010110010000010000
000001000000100001100110010000000
000010010000000100110011000000000
000010100000000100110010000000010
000001000000010001100110010000000
000100001000100000110100000010000
000000000001001100001110001000000
000001000100000100101010000000100
000000001010000010011010000100000
000000000001001010001110001000000
000100010000100000110100001000000
000010100000100000110100000001000
000000100010000010011010000100000
000010000000100100100110000000001
000010000000001010100110010000000
000000100000010100010110000000100
000000001000010001010110010000000
000010000001000010101010010000000
000000100000001100010110000000100
000001010000010000110100000000010
000001010000000001110010000100000
000000001001010000011100000000100
000000100100010000011100000000100
000000100010000100011010010000000
000001000001000100101011000000000
000010000100000100101010000000001
000100001000000001110010000000010
000000001100000001011010000000010
000100001000100000110100001000000
000001000100000001101010010000000
000100100000000010110010100000000
000100000001001000101100000001000
000100000001000100101010000010000
000001001100000000111000010000000
000100000010010000101100000000001
000010100000000010110010000010000
000000001000100001010110000000100
000100000010000100101010000010000
000001000000010010100110000000001
000000010010000100011010000001000
000000100001000001011010000100000
000000000100010010001110000010000
000010010000100000110100010000000
000010100000000010110010000100000
000000001010010000011100000000001
000001010000000010110010000000100
000100100000000001110011000000000
000001000000100100100110000000010
000000000100001001001110000010000
000001001100000000111000100000000
000100000010000010101010000000100
000000001010000010011010000000001
000000100100001000011100000000100
000001100000000001110010000010000
000001001000000010110011000000000
000001100000100000110100000000010
000100010000000010110010000000010
000000100010000100011010000000010
000000010000001010010110000000100
000100001001000000111000000000100
000001000100000100101010000000001
000000000100001100001110000100000
000000000100100010001110001000000
000001100001000000111000000100000
000010100000000100110010000000100
000001000000001100100110100000000
000000000001010010001110000000010
000100001100000000111000000100000
000000000001010010001110000010000
000000000010100100001110000000010
000010100010000000111000001000000
000000010001000010011010000000010
000000000010100010001110000100000
000010010000001000110100010000000
000010001001000000111000000000100
000001000000010010100110000000010
000010000100010000101100100000000
000000100100000010011011000000000
000000010100000010011010010000000
000001000100001000101100000010000
000000100010010000011100000000001
000001010001000000111000001000000
000000000010001001001110000010000
000000000100001001001110000000010
000010000000010001100110100000000
000000000010010001001110000001000
000001100000000100110010000000010
000010000000010100100110001000000
000000100000001100010110010000000
000100100000010000110101000000000
000100001100000000111000001000000
000001000001010000101101000000000
000000100000001001010110000010000
000000000100100010001110000001000
000001000001010000101100000100000
000100000010000100101010010000000
000000100010000010011010000000001
000000000001010001001110000000100
000000001000010010010110000000001
000000001010010000011100001000000
000000010000100010010110000000100
000010001001000000111000000001000
000000001100100000011100000000001
000000000100100001001110001000000
000000000010100100001110000010000
000000100100001000011101000000000
000100000100000001101011000000000
000000000100010100001110000000100
000000000001100001001110000100000
000010100000010000110100001000000
000000100100000001011010000001000
000100010100000000111000000100000
000000001000010001010110000000100
000100000000010010100110000000001
000000100010010000011100001000000
000001001000100000110100010000000
000100000001000001101010000000100
000100010000000100110010000100000
000100000001100000101100000010000
000001001000010000110100010000000
000100010000100000110100000010000
000010000001010000101100000010000
000001000001000010101010001000000
000000001100000100011010000100000
000000010010000001011010000001000
000000001100001000011100000000010
000010001010000000111000000100000
000000000010010001001110001000000
000001010000001000110100001000000
000001000010010000101100000001000
000000000001001010001110000001000
000100001001000000111000000001000
000010001000001000110100000000010
000000010000001010010110010000000
000100000010000010101010000000001
000100000001100000101100100000000
000100010000000010110010000000100
000100100001000000111000100000000
000010010000100000110101000000000
000001000100001000101100100000000
000100010010000000111000000001000
000010001000000001110010000000100
000001010000000010110010000000010
000000100000100010010110100000000
000010000010000001101011000000000
000010000010000100101011000000000
000100000000100001100110001000000
000010010000000001110011000000000
000000000001010001001110000100000
000100000001000001101010000000001
000010000000010100100110100000000




=== State Orbit 42 =====================
size : 120
repr state: 000100010000100100110110000010000
lex min decimal: 21636887993441429318839
states:
000010010010100000111101000000000
000100100010100000111100100000000
000000001100001001011110000000010
000001010000010010110110000000010
000010000010010100101110001000000
000100100000100001110110100000000
000100010010000010111010000000100
000001001100000001111010010000000
000010010001010000111100100000000
000000010010010001011110000001000
000010010000010100110110100000000
000010000100010010101110000010000
000000001010010010011110000000001
000010010001000010111010010000000
000001000001001010101110001000000
000000100100100001011110000001000
000100000010010010101110000000001
000000010010001010011110000000100
000001001001100000111101000000000
000100100000100010110110100000000
000100010100000100111010000100000
000010010010001000111101000000000
000001100100100000111100000001000
000000100100001100011110000000100
000100000010100100101110000010000
000001000100100100101110000000001
000100001000100100110110000010000
000000010100100100011110000000001
000100100000001100110110010000000
000100001000001001110110000000010
000001001100001000111100100000000
000010100000100100110110000000010
000001100100000100111010000000100
000001100001000001111010000100000
000001010000001001110110000010000
000100000100010100101110000100000
000100100000010100110110010000000
000010100010010000111100001000000
000010001000010010110110000010000
000000001100100100011110000000001
000000001001100001011110000000100
000000100001001001011110000000001
000001001010001000111100100000000
000010000001010010101110000010000
000100100100010000111101000000000
000010100000010010110110000010000
000000010100010010011110000000010
000010001001000001111010000000100
000000001001001010011110000001000
000100010100100000111100001000000
000100100100001000111101000000000
000100010000100100110110000010000
000001001001000010111011000000000
000001001000010001110110010000000
000100100100000001111011000000000
000010000010001010101110000100000
000010010100010000111100100000000
000010001000001001110110000000010
000001010001000001111010000100000
000000100010010010011110000000001
000000010001010010011110000000010
000001000001100001101110000100000
000010010100000010111010010000000
000000010001001001011110000000001
000100000100001100101110000100000
000010100100000100111010000000100
000001010010010000111100000001000
000010010000010001110110100000000
000100010010010000111100000001000
000001001000001010110110100000000
000100001100100000111100001000000
000001100001001000111100001000000
000010010010000001111011000000000
000010100010000010111010000100000
000001000001001100101110001000000
000000100001100100011110000000010
000010010000100010110110010000000
000010100100100000111100000001000
000001000010010010101110000000001
000001000010001001101110000010000
000001100000001001110110000010000
000001000100001001101110000010000
000000010010100010011110000000100
000001010001001000111100001000000
000001000001010001101110000100000
000010010010000100111011000000000
000010001010010000111100001000000
000001001001010000111101000000000
000100000100100001101110001000000
000100001001000001111010000000100
000000001010001001011110000000010
000100100010000100111010010000000
000010000010100010101110000100000
000001001000001100110110100000000
000100001100000100111010000100000
000000010010010100011110000001000
000001010010000010111010000000100
000010000100100100101110000000001
000100010000010010110110000000010
000010010000001010110110010000000
000010000001001001101110000000001
000001001010000001111010010000000
000001001001000100111011000000000
000000001001001100011110000001000
000000100010100100011110000000010
000100000001001001101110000000001
000001100000100100110110000000010
000010000010010001101110001000000
000010001001001000111100000001000
000100001001001000111100000001000
000100000001100100101110000010000
000100100001100000111100100000000
000100000100100010101110001000000
000010001010000010111010000100000
000000100100010100011110000000100
000100100001000100111010010000000
000100100100000010111011000000000
000000001001010001011110000000100
000001001000100001110110010000000
000000100100100010011110000001000




=== State Orbit 43 =====================
size : 360
repr state: 000100010000100001110110000010000
lex min decimal: 22005818371315992980663
states:
000010100001001000111100001000000
000100010010001000111100000001000
000010001100100000111100001000000
000010100000001100110110010000000
000010001001000100111011000000000
000001010001000100111010000100000
000100010100000001111010000100000
000010100000010001110110100000000
000001100010010000111100001000000
000000001100010010011110000000010
000010000100001001101110000000001
000100000010001100101110000010000
000100010010000001111010000000100
000001010100100000111100001000000
000100100001010000111100100000000
000100010000010001110110100000000
000100010000001100110110000010000
000010000100001010101110000100000
000001010000001100110110000010000
000000100001001010011110000000001
000001010100010000111100100000000
000100100000010001110110010000000
000001100010100000111100000001000
000001010000100001110110010000000
000001010100001000111100100000000
000100010001000001111010000000100
000001010000100010110110010000000
000100001010001000111100100000000
000000001001100010011110000000100
000010001010000100111011000000000
000001100010000100111010010000000
000100000010010001101110000000001
000001000010100010101110000000001
000010100000001100110110000000010
000100010001000010111010000000100
000100001000010100110110000010000
000100000010001001101110000010000
000001100000001010110110100000000
000010100001100000111100000001000
000001100010001000111100001000000
000001000010100010101110000100000
000001100010000010111010000100000
000010001000100010110110010000000
000001010010100000111101000000000
000001000001010100101110000100000
000100000001100010101110000010000
000010000001100010101110000100000
000100001000010010110110000010000
000100000010001010101110000000001
000010001100001000111100100000000
000000010001001100011110000000001
000001010100001000111100001000000
000000100100001010011110000000100
000100000001010010101110000010000
000100000001010100101110000100000
000000001010001100011110000000010
000000010100010001011110000000010
000100000010001001101110000000001
000001010100010000111100000001000
000001100010000100111010000000100
000010000010001100101110000100000
000000100001010001011110000000001
000001000010100001101110000010000
000010001010000100111010000100000
000100100010000001111010010000000
000001010000100010110110000000010
000010001100100000111100000001000
000010000100010001101110001000000
000100000001100010101110001000000
000010000001100001101110000100000
000000001100001010011110000001000
000100100001000010111011000000000
000001000100100010101110001000000
000001100000010010110110000000010
000001010001100000111101000000000
000010000001100100101110000000001
000000100010100001011110000000010
000010001000100010110110000010000
000100001010001000111100000001000
000000010001100100011110000000001
000000001100010010011110000000001
000001100010000001111010000100000
000010100000001001110110000000010
000100001000010100110110010000000
000010100001100000111100100000000
000010000100001010101110000010000
000100001010010000111100001000000
000001100010100000111100100000000
000100010100001000111100001000000
000001100100010000111100000001000
000100010001001000111100000001000
000000100010001001011110000000001
000010000100001100101110000100000
000001010100000010111010010000000
000010100000010001110110000010000
000010001100000100111010000100000
000010100010001000111101000000000
000001100010001000111100100000000
000100000001001010101110000000001
000001000100100010101110000000001
000000100100010001011110000000100
000010001100000010111010010000000
000010100100001000111100000001000
000010010000100001110110010000000
000100010001100000111100001000000
000001000001100010101110001000000
000000010100100001011110000000001
000001001100010000111101000000000
000010100000001010110110000010000
000000001010001100011110000001000
000001010001100000111100001000000
000100001000100010110110000010000
000001001000010100110110100000000
000001000010010100101110001000000
000001000100010010101110000010000
000100000010100001101110000010000
000010100001010000111100100000000
000100001000100010110110100000000
000000010010001100011110000001000
000001100010010000111100000001000
000000001010100010011110000000100
000100010000100001110110000010000
000001100100000010111010000000100
000010001000010100110110000010000
000001100010000001111010010000000
000000100001010001011110000000100
000100001100000010111010000100000
000010010100001000111101000000000
000100000100001010101110001000000
000100001001000010111010000000100
000000001010010100011110000000001
000010100100000001111010000000100
000001010100100000111100000001000
000100000010010001101110001000000
000010100001000100111010000000100
000001010010000100111011000000000
000010000100001100101110000000001
000100010000010001110110000000010
000010000001100001101110000000001
000100001100000010111011000000000
000100010100001000111101000000000
000001000001010100101110001000000
000100010001010000111100000001000
000100001000010001110110000000010
000010001000001100110110100000000
000010010100001000111100100000000
000100010000100001110110100000000
000000100001010010011110000000001
000001100000010001110110000010000
000100001010000010111010000100000
000100000001001010101110001000000
000000010100001001011110000000001
000000010100100001011110000001000
000010010001100000111101000000000
000010100001000010111010010000000
000010100010000001111011000000000
000010000010100001101110000100000
000001100000010100110110010000000
000010100001000010111010000100000
000100100010000001111011000000000
000000010010001100011110000000100
000000100100010001011110000001000
000001000010100001101110000100000
000000010100010001011110000001000
000000001010100100011110000000001
000010001000010100110110100000000
000000100001100010011110000000010
000000100010001100011110000000010
000100010001000010111010010000000
000000010001100010011110000000010
000001010000100001110110000010000
000000010100001010011110000000100
000001100001000010111011000000000
000000010001100010011110000000100
000100000001010100101110000010000
000010010000100001110110100000000
000100010001010000111100100000000
000001100000100010110110100000000
000010100001000100111010010000000
000001001100010000111100100000000
000100000100010001101110000100000
000100001010000100111010010000000
000100010000001010110110010000000
000100001000010001110110010000000
000010100001000001111010000000100
000100001000001010110110100000000
000001100000001010110110000010000
000100001010000001111010010000000
000010001000100100110110000000010
000010000001001100101110001000000
000000001100010100011110000000100
000100000001010010101110000000001
000001001010100000111100100000000
000000001001100010011110000001000
000000100001010100011110000000010
000000001100100010011110000000001
000010001000100001110110010000000
000001100001010000111101000000000
000001001100000010111011000000000
000010100100000001111011000000000
000100010001001000111100001000000
000010001100000001111010000000100
000001001010000100111011000000000
000000001100010100011110000000001
000000100010001100011110000000100
000010000100100001101110000000001
000100010001100000111100100000000
000000010100001001011110000000010
000100001010100000111100100000000
000010100010001000111100001000000
000010000100001001101110000010000
000000010001010100011110000001000
000100010010001000111101000000000
000000010100001010011110000000010
000000001001010100011110000001000
000100010010000001111011000000000
000100100010001000111100100000000
000010001010100000111101000000000
000010000100100001101110001000000
000000010010100001011110000000100
000100001010100000111100001000000
000001010100000010111010000000100
000010000010100001101110001000000
000001100100010000111101000000000
000100000010001010101110000100000
000100010000001001110110000000010
000010001001100000111100000001000
000100010100000001111011000000000
000001010000001100110110100000000
000010001001000100111010000000100
000000010100001100011110000000100
000000001001010100011110000000100
000000001100010001011110000000010
000000001010100100011110000000010
000001001000010100110110010000000
000000001010100001011110000000010
000001000010010100101110000000001
000010010000001100110110100000000
000001000010100100101110000000001
000100001001000010111011000000000
000000100001001010011110000001000
000001000001100010101110000100000
000010001000001100110110000000010
000000010001100001011110000000100
000001010100000100111010000100000
000001000100001010101110001000000
000100000100001010101110000100000
000010000001100100101110000010000
000001010100000001111010000100000
000010100001010000111100001000000
000000100001010100011110000000100
000100000001010001101110000000001
000001100100000010111011000000000
000010001100010000111100001000000
000000010001100001011110000000001
000000100001100010011110000001000
000001000010100100101110000010000
000001001010100000111101000000000
000001001000100010110110010000000
000010100000100001110110000000010
000100001010000100111010000100000
000100100001000010111010010000000
000001100000010100110110000000010
000000100010010001011110000001000
000010000010001100101110001000000
000100001000001010110110000000010
000000010001001100011110000001000
000001000100010100101110000000001
000001000100010001101110000010000
000010000001010100101110001000000
000010001100000001111010010000000
000100000010100001101110001000000
000001010010000100111010000000100
000001000100001010101110000010000
000001000010001100101110001000000
000001010000010100110110100000000
000100100001010000111101000000000
000010000001010100101110000010000
000001000100010010101110000000001
000001000010001100101110000010000
000010001100010000111100100000000
000100000100010001101110001000000
000100001010010000111100000001000
000100010001000100111010000100000
000100100000001010110110100000000
000100000010001100101110000100000
000000010010100001011110000001000
000010100100001000111101000000000
000000100010100001011110000001000
000010001100000010111010000100000
000001100000100010110110000000010
000001100000010010110110000010000
000010100000001010110110010000000
000000001100001010011110000000010
000001100001010000111100001000000
000000001100100010011110000001000
000010001000100100110110000010000
000010001100001000111100000001000
000100001100010000111101000000000
000010010001100000111100100000000
000000010001100100011110000000010
000000100010001010011110000000001
000100001100010000111100001000000
000000001010100010011110000000001
000010001000100001110110000000010
000001000100010001101110000100000
000010100001001000111100000001000
000010100001000001111010000100000
000010010001000100111011000000000
000100001001010000111100000001000
000100010001000001111010000100000
000100100000001010110110010000000
000000100001010010011110000000010
000010010000001100110110010000000
000001100001000010111010000100000
000100001000010010110110000000010
000010100010000001111010000100000
000000100100001010011110000001000
000001000100010100101110000100000
000010000001001100101110000000001
000100001001010000111101000000000
000100010000001010110110000000010
000010000001100010101110000010000
000100001010000010111010000000100
000000001010010100011110000001000
000100100000010001110110100000000
000100100010001000111101000000000
000000100010001001011110000000010
000010001001100000111101000000000
000001001000100010110110100000000
000000100010010001011110000000001
000000001100010001011110000000100
000001010010100000111100000001000
000001010100000001111010010000000
000100000001010001101110000100000
000010010100000001111010010000000
000100010000001001110110000010000
000001010000010100110110000000010
000010010001000100111010010000000
000001010000100100110110000000010
000100010000001100110110010000000
000010001010100000111100001000000
000001001010000100111010010000000
000001001100000010111010010000000
000000100010001010011110000000100
000001100000010001110110010000000
000000010100001100011110000000001
000000010001010100011110000000010
000001100010000010111010000000100
000001010000100100110110000010000
000100010001000100111010010000000
000010010100000001111011000000000
000000001010100001011110000000100
000010001100000100111010000000100
000001010100000100111010000000100
000010100000001001110110000010000
000010100000100001110110100000000
000100001010000001111010000000100
000001010001000100111011000000000
000010000100010001101110000010000




=== State Orbit 44 =====================
size : 360
repr state: 000100010000001000110100000010000
lex min decimal: 3107126816000743664823
states:
000100010000001000110100000001000
000001010000100000110100001000000
000010100000001000110100010000000
000000000010100001001110000010000
000001000100000010101010000010000
000000010000001100010110000000100
000010001000000100110011000000000
000000000100010001001110000100000
000000100000010001010110000000100
000010000100001000101100000001000
000100010000000001110011000000000
000000001100000010011010010000000
000000100000001010010110000001000
000000001100010000011101000000000
000000100010001000011100001000000
000000010100000001011010000000001
000000000001010100001110000000100
000001010100000000111000000100000
000100000001010000101101000000000
000000010100001000011100000000001
000100000000010001100110100000000
000000010001000100011011000000000
000000010000100001010110010000000
000000001010100000011101000000000
000010001100000000111000000100000
000100010001000000111000100000000
000000000010001100001110001000000
000100001010000000111000000000100
000100000001000010101010000000100
000001010000000100110010000100000
000000001100000010011011000000000
000100010000001000110100001000000
000010000100001000101101000000000
000010000100001000101100000100000
000001100000010000110101000000000
000100000001000010101010000010000
000100000010000001101010001000000
000010100000001000110100000001000
000000000010100001001110000000100
000000001000100010010110010000000
000000010001100000011100000000010
000100000000001010100110000000010
000010000001100000101100100000000
000010000001100000101100000001000
000000001010000100011010000001000
000100000001010000101100000010000
000010001100000000111000001000000
000000001010000100011010010000000
000100000010001000101100000000001
000001000000010100100110000000001
000000010001100000011100000000100
000100001000010000110100001000000
000100001010000000111000000001000
000100001010000000111000000100000
000000000100010001001110000000100
000001100000010000110100000010000
000000001100010000011100000000010
000001000100000010101010010000000
000001010000000100110011000000000
000001100010000000111000000000100
000000100010000001011010000000010
000000100010001000011100000000001
000000001100010000011100000000100
000001000010100000101100000100000
000000001100000010011010000100000
000010100000000001110010000000100
000001000100000010101010001000000
000000010100000001011010010000000
000001010000000100110010000000010
000010000000001100100110000000010
000100010000001000110100010000000
000000001010100000011100001000000
000100010001000000111000000100000
000100000010001000101101000000000
000000100010001000011100000000010
000000010100000001011011000000000
000000010000001100010110100000000
000000000010100001001110000100000
000000100001010000011100001000000
000010001100000000111000000000100
000010000100000001101011000000000
000010001000000100110010000000100
000010000100001000101100000010000
000001000010100000101100000001000
000100001000010000110100000000010
000000010000100001010110000001000
000000010100000001011010000001000
000000100000001010010110000000001
000000100000010001010110010000000
000000100001000010011011000000000
000010100000000001110011000000000
000000100010001000011101000000000
000000000001010100001110000000010
000010000000100001100110100000000
000001010100000000111000000001000
000100000000001010100110000100000
000000100010000001011010010000000
000000000010001100001110000000010
000000100000010001010110000010000
000000100010000001011011000000000
000100001000010000110101000000000
000000100000001010010110000000100
000000001100000010011010000000010
000000100000001010010110000010000
000100001010000000111000010000000
000000000001100010001110000000100
000001000000100010100110001000000
000001010000100000110101000000000
000000100010001000011100100000000
000010000100000001101010000000100
000010001100000000111000000001000
000001100010000000111000010000000
000000001000010100010110000010000
000100001000000010110010100000000
000000010000100001010110000010000
000010100000001000110100000000010
000100000001000010101010001000000
000001010000100000110100000010000
000000000010100001001110000001000
000100000000010001100110000000001
000001000010100000101100100000000
000000100001000010011010000001000
000100000001000010101010000000001
000000010000001100010110000001000
000001000010000100101010000000001
000010001000100000110100000010000
000010001100000000111000010000000
000001100000010000110100000001000
000000100001000010011010000000010
000100001010000000111000100000000
000000010001100000011101000000000
000010000000001100100110000100000
000100010001000000111000000000100
000001000000010100100110000000010
000001000000010100100110010000000
000000010000100001010110000000001
000001010000100000110100000001000
000000010000100001010110100000000
000010001000100000110100001000000
000010000000100001100110010000000
000001100010000000111000001000000
000000000010100001001110001000000
000000000100001010001110000000100
000000010100000001011010000100000
000000010100000001011010000000010
000010000100000001101010001000000
000001100000000010110010000100000
000010000000100001100110001000000
000001000100010000101100000100000
000100010000000001110010000000100
000100010000001000110100000000010
000100001000010000110100000010000
000000000001010100001110000100000
000000010001000100011010000000001
000100001000000010110010000000100
000000000010001100001110000010000
000100000000010001100110010000000
000010000001100000101100000100000
000000000010100001001110000000010
000001000100010000101100100000000
000010001000100000110100010000000
000000010001000100011010000000010
000000010100001000011100000000100
000100000010001000101100000001000
000010000001000100101010000000100
000000000001010100001110000010000
000010001000100000110100000000010
000000010000100001010110000000100
000100000000001010100110001000000
000010100000001000110100001000000
000010001000000100110010000010000
000001100010000000111000100000000
000000100000010001010110100000000
000001000100000010101010000000001
000010000100001000101100100000000
000001010000000100110010000010000
000000000100001010001110000001000
000000000001010100001110001000000
000100010000001000110100000010000
000100010000000001110010000000010
000010100000000001110010100000000
000000010001100000011100100000000
000000100001000010011010000100000
000001000010100000101100000010000
000001010000000100110010100000000
000100000000010001100110001000000
000000100001010000011100000000010
000001010100000000111000000000100
000000100000010001010110000000001
000001000000010100100110001000000
000010000000100001100110000100000
000000010100001000011100001000000
000001000010000100101010000000100
000010000000001100100110000000001
000001010100000000111000010000000
000100000001010000101100100000000
000010100000001000110100000010000
000001000000010100100110100000000
000000010001100000011100000000001
000001000000010100100110000100000
000000000001100010001110000001000
000100000010000001101010000000001
000000100010001000011100000000100
000000000100010001001110000001000
000100000010000001101010000010000
000001010100000000111000100000000
000010100001000000111000000100000
000000000001100010001110000100000
000000100001000010011010000000001
000001000100010000101101000000000
000000100010000001011010000000001
000100010000000001110010100000000
000100000000001010100110100000000
000010000100000001101010010000000
000000100001010000011101000000000
000000000001100010001110001000000
000100001000000010110010000010000
000000100001010000011100100000000
000100000001010000101100000100000
000001010100000000111000001000000
000010000100000001101010000010000
000001100010000000111000000100000
000000000100001010001110000000010
000010000000001100100110010000000
000001100000000010110010100000000
000000010001000100011010000001000
000000001100010000011100000000001
000100000010001000101100000010000
000100010000001000110101000000000
000100001000000010110010000000010
000000100010000001011010000100000
000001100000000010110010000000010
000010000000100001100110000000001
000000001010000100011010000000010
000000001010000100011010000100000
000100000010001000101100100000000
000100000001010000101100000000001
000001000010000100101011000000000
000010000000100001100110000000010
000001000000100010100110100000000
000010000000001100100110100000000
000000010100001000011101000000000
000100000010000001101010010000000
000100000001000010101011000000000
000000010000001100010110000000001
000001000000100010100110000100000
000001010000100000110100000000010
000001000010000100101010000010000
000010100001000000111000100000000
000001000100010000101100000000001
000000000001100010001110000010000
000000010000001100010110000010000
000010100001000000111000001000000
000010000100000001101010000000001
000010100000000001110010000000010
000000100001010000011100000000100
000000001000010100010110000000001
000000100000001010010110010000000
000001100000000010110010000010000
000010100001000000111000000000100
000010100001000000111000000001000
000100010001000000111000010000000
000010001000100000110100000001000
000000001010100000011100000000100
000000001000100010010110000001000
000000100000010001010110000001000
000001010000100000110100010000000
000000001010100000011100000000001
000001000010100000101101000000000
000000001010100000011100100000000
000000100000001010010110100000000
000000000010001100001110000001000
000000001100010000011100001000000
000000001000010100010110000001000
000000100001010000011100000000001
000000001000100010010110000000100
000010000001100000101100000010000
000000001000100010010110000010000
000010001000100000110101000000000
000010000000001100100110001000000
000010000001000100101011000000000
000000001010000100011010000000001
000000001100000010011010000000001
000001000100000010101011000000000
000010100000001000110101000000000
000001000000100010100110000000001
000000010000001100010110010000000
000100000001010000101100000001000
000010000001000100101010010000000
000100010001000000111000001000000
000000010100001000011100000000010
000001010000000100110010000000100
000000000010001100001110000100000
000001100000010000110100001000000
000010100001000000111000010000000
000100010001000000111000000001000
000000000001100010001110000000010
000100010000000001110010000100000
000000001100000010011010000001000
000001100010000000111000000001000
000001100000000010110011000000000
000000100001000010011010010000000
000100000010000001101010000000100
000001100000010000110100010000000
000001000100000010101010000000100
000010100000000001110010000100000
000000001000010100010110000000100
000100001000010000110100000001000
000000010100001000011100100000000
000000001100010000011100100000000
000001100000010000110100000000010
000001000100010000101100000010000
000001000010100000101100000000001
000000000100010001001110000000010
000100010000000001110010000010000
000000000001010100001110000001000
000001000010000100101010010000000
000000000100001010001110001000000
000001000000100010100110010000000
000010000001100000101100000000001
000000000100001010001110000100000
000100000000001010100110010000000
000000100010000001011010000001000
000010000001100000101101000000000
000010001100000000111000100000000
000100001010000000111000001000000
000100000000010001100110000000010
000100000000010001100110000100000
000001000100010000101100000001000
000100001000000010110010000100000
000100001000010000110100010000000
000000000100001010001110000010000
000100000010000001101011000000000
000000001010100000011100000000010
000000000100010001001110000010000
000010001000000100110010100000000
000000001010000100011011000000000
000100000001000010101010010000000
000010100000000001110010000010000
000001000000100010100110000000010
000010001000000100110010000000010
000010001000000100110010000100000
000000010001000100011010010000000
000000001000010100010110010000000
000100000000001010100110000000001
000010000100001000101100000000001
000000010001000100011010000100000
000100000010001000101100000100000
000000000100010001001110001000000
000010000001000100101010001000000
000000001000100010010110100000000
000001100000000010110010000000100
000010000001000100101010000010000
000000010001100000011100001000000
000000001000010100010110100000000
000010000001000100101010000000001
000000001000100010010110000000001
000001000010000100101010001000000
000100001000000010110011000000000
000000000010001100001110000000100




=== State Orbit 45 =====================
size : 90
repr state: 000100000000100000100100000010000
lex min decimal: 335502393025976691895
states:
000000000001000001001010000100000
000010000000000010100010000100000
000000000000010010000110000000001
000001000000000001100010000100000
000001000001000000101000001000000
000001000000000001100010000010000
000000010000010000010100100000000
000100000000100000100100001000000
000000010010000000011001000000000
000000000010000010001010000000100
000000000010000010001010000000001
000000100000000100010010000000100
000000010010000000011000000000100
000000000000100100000110000000010
000010010000000000110000010000000
000001001000000000110000010000000
000000100100000000011000000000100
000000000010010000001100000000001
000000010000010000010100000001000
000100000000000100100010000100000
000010000000010000100100000010000
000000010000000010010010000000100
000010010000000000110001000000000
000000001000001000010100100000000
000000000100000100001010000100000
000000100000000100010010010000000
000000001000000001010010000000010
000000000010000010001010000100000
000000000001000001001010000000001
000000000001001000001100001000000
000000000010010000001100000001000
000001000001000000101001000000000
000000000000100100000110000000001
000000000000001001000110000000001
000000010010000000011000000001000
000100100000000000110000100000000
000000000100100000001100000000001
000000001001000000011000000000100
000000001000001000010100000001000
000000100000100000010100100000000
000000001001000000011001000000000
000100000000100000100100000010000
000000001000001000010100000000010
000000000000001001000110000010000
000000000100100000001100000001000
000100100000000000110000010000000
000000100100000000011000000001000
000100000100000000101000000100000
000001000000001000100100100000000
000000000001001000001100000000001
000001000000001000100100001000000
000000000100000100001010000000001
000100000100000000101001000000000
000010000000010000100100001000000
000000001000000001010010000000100
000100000000000100100010000010000
000000100000100000010100000001000
000010000000000010100010010000000
000100000000100000100100100000000
000010000010000000101001000000000
000000000000001001000110000000010
000010000000010000100100100000000
000000000100100000001100001000000
000000000000010010000110000010000
000001000001000000101000000100000
000100100000000000110001000000000
000000100100000000011001000000000
000000000010010000001100001000000
000010000000000010100010000010000
000000010000000010010010000000010
000000000001000001001010000000100
000000010000010000010100000000010
000000100000000100010010000000010
000000000000010010000110000000010
000000001001000000011000000001000
000100000100000000101000001000000
000000000000100100000110000010000
000100000000000100100010010000000
000001001000000000110000100000000
000010010000000000110000100000000
000010000010000000101000001000000
000001000000000001100010010000000
000001000000001000100100000010000
000001001000000000110001000000000
000000100000100000010100000000010
000000000100000100001010000000100
000000001000000001010010010000000
000000010000000010010010010000000
000010000010000000101000000100000
000000000001001000001100000001000




=== State Orbit 46 =====================
size : 30
repr state: 000100000000100100100110000010000
lex min decimal: 2701297320479226686647
states:
000010000010010000101100001000000
000000001000001001010110000000010
000000000100100100001110000000001
000000001001000001011010000000100
000001000000001001100110000010000
000100100000100000110100100000000
000001001001000000111001000000000
000001000001001000101100001000000
000000010010010000011100000001000
000100100100000000111001000000000
000000000001001001001110000000001
000001000001000001101010000100000
000010010010000000111001000000000
000010000010000010101010000100000
000000100100100000011100000001000
000100000100100000101100001000000
000000001001001000011100000001000
000001001000000001110010010000000
000100000100000100101010000100000
000000010000010010010110000000010
000000010010000010011010000000100
000000000010010010001110000000001
000000100100000100011010000000100
000100000000100100100110000010000
000010000000010010100110000010000
000010010000000010110010010000000
000000100000100100010110000000010
000001001000001000110100100000000
000010010000010000110100100000000
000100100000000100110010010000000




=== State Orbit 47 =====================
size : 180
repr state: 000100000000100010100110000010000
lex min decimal: 2738190808626645789879
states:
000100000100010000101100001000000
000000100010100000011100000001000
000000010001000001011010000000100
000010010000100000110100100000000
000100000010100000101100001000000
000001000001010000101100001000000
000100001100000000111001000000000
000010000000100010100110000010000
000010000000010001100110000010000
000000001000010001010110000000010
000001000000001010100110000010000
000010010000001000110100100000000
000000010100000010011010000000100
000001001000000100110010010000000
000010000001001000101100001000000
000100000001001000101100001000000
000000000100010010001110000000001
000001000000010001100110000010000
000010001000000001110010010000000
000001000000100100100110000010000
000100001000000100110010010000000
000100001000100000110100100000000
000000000010001010001110000000001
000000001100100000011100000001000
000000010001001000011100000001000
000100010100000000111001000000000
000000010010000100011010000000100
000000000010010100001110000000001
000010100000010000110100100000000
000010000010000001101010000100000
000000010100010000011100000001000
000001000100000100101010000100000
000000100100000010011010000000100
000100000000001001100110000010000
000000100100010000011100000001000
000000010100100000011100000001000
000010000010001000101100001000000
000000000001010010001110000000001
000100000000100010100110000010000
000000010000001010010110000000010
000000010010100000011100000001000
000000100001100000011100000001000
000000001000010010010110000000010
000000010100000100011010000000100
000001000100000001101010000100000
000001100000000001110010010000000
000000001001100000011100000001000
000100001000000001110010010000000
000010000000100100100110000010000
000000010001000010011010000000100
000100000100000010101010000100000
000000000001100001001110000000001
000001001000010000110100100000000
000000100100000001011010000000100
000000100001000001011010000000100
000001000010001000101100001000000
000100000100001000101100001000000
000010010100000000111001000000000
000000000010010001001110000000001
000010010000000001110010010000000
000001010000000001110010010000000
000001000000001100100110000010000
000001000000010010100110000010000
000001000001000010101010000100000
000100010010000000111001000000000
000100100000000001110010010000000
000010010000000100110010010000000
000100000001000001101010000100000
000000001100000100011010000000100
000000100100001000011100000001000
000010000100000100101010000100000
000010000100010000101100001000000
000100001001000000111001000000000
000001010000000010110010010000000
000010001001000000111001000000000
000010000000001010100110000010000
000000100000001100010110000000010
000000001100000001011010000000100
000000000001010001001110000000001
000100000010010000101100001000000
000010001000000010110010010000000
000010001000010000110100100000000
000000100001000100011010000000100
000100001000001000110100100000000
000000100010000010011010000000100
000000010010000001011010000000100
000100000000010100100110000010000
000001001000000010110010010000000
000100000000010010100110000010000
000001001010000000111001000000000
000000100000010100010110000000010
000010010001000000111001000000000
000000010001010000011100000001000
000100000001100000101100001000000
000000001000001010010110000000010
000001000010000001101010000100000
000000010010001000011100000001000
000001000100100000101100001000000
000001100000001000110100100000000
000100000000100001100110000010000
000001010000010000110100100000000
000000001010001000011100000001000
000000010000001001010110000000010
000010000001000010101010000100000
000010000100000010101010000100000
000010000001010000101100001000000
000001010001000000111001000000000
000100000010000100101010000100000
000000100000100010010110000000010
000000001000100100010110000000010
000010000010000100101010000100000
000000100001001000011100000001000
000000000001001100001110000000001
000010100000000100110010010000000
000000000001001010001110000000001
000010100010000000111001000000000
000001100001000000111001000000000
000100000100000001101010000100000
000000010000100100010110000000010
000001000000100001100110000010000
000000001001010000011100000001000
000001010010000000111001000000000
000000010000100010010110000000010
000001100100000000111001000000000
000000000100001100001110000000001
000000000100010100001110000000001
000001001100000000111001000000000
000010000100100000101100001000000
000100010000010000110100100000000
000000001010010000011100000001000
000010100000000010110010010000000
000001100000000100110010010000000
000000001000100001010110000000010
000001000001100000101100001000000
000000100000100001010110000000010
000010001010000000111001000000000
000010000001000001101010000100000
000000010000010100010110000000010
000001100000100000110100100000000
000000010000010001010110000000010
000001000010010000101100001000000
000001010000001000110100100000000
000100000010000010101010000100000
000000000001100100001110000000001
000001000010000010101010000100000
000001001000100000110100100000000
000000100010010000011100000001000
000010100000100000110100100000000
000000000010001001001110000000001
000000001100001000011100000001000
000000000100001001001110000000001
000100100001000000111001000000000
000000001001000100011010000000100
000010000000010100100110000010000
000100100000000010110010010000000
000100000000001100100110000010000
000000100000001001010110000000010
000100010000000100110010010000000
000000001001000010011010000000100
000000000100100001001110000000001
000100100000001000110100100000000
000000000100100010001110000000001
000000001010000001011010000000100
000100010000100000110100100000000
000000000010100100001110000000001
000000100010000100011010000000100
000000000010100010001110000000001
000100100000010000110100100000000
000100100010000000111001000000000
000001000001000100101010000100000
000010000000001001100110000010000
000100000001000100101010000100000
000000001010000010011010000000100
000000100000010010010110000000010
000100010000000010110010010000000
000001000100001000101100001000000
000000001000001100010110000000010
000010001000001000110100100000000
000010000010100000101100001000000
000010100100000000111001000000000




=== State Orbit 48 =====================
size : 180
repr state: 000100000000010000100100000010000
lex min decimal: 372395881173395795127
states:
000000100000000010010010000000100
000100000000000001100010010000000
000010000001000000101001000000000
000000000010001000001100000000001
000000000010000001001010000100000
000000000010100000001100001000000
000000100000001000010100000001000
000000000000010001000110000000001
000000000001000100001010000000100
000001000000000010100010000100000
000000001010000000011000000000100
000010000000000100100010010000000
000000000001000010001010000000001
000001000100000000101000000100000
000000001000100000010100000000010
000000100010000000011000000001000
000000000000010001000110000000010
000000000100001000001100001000000
000000000100010000001100000001000
000000001000000100010010010000000
000010100000000000110001000000000
000010000000001000100100100000000
000000010100000000011000000001000
000100010000000000110001000000000
000000010000001000010100000000010
000000000001010000001100000001000
000000000100010000001100001000000
000000000010100000001100000001000
000000000010001000001100000001000
000000000000001100000110000000001
000010000000001000100100001000000
000100000000000010100010000100000
000000000100001000001100000000001
000000000000100001000110000000010
000001000010000000101001000000000
000000010000000001010010000000100
000000100000000001010010010000000
000000001000100000010100100000000
000001000100000000101000001000000
000000000001010000001100001000000
000010000000000001100010000010000
000000000010000100001010000100000
000000000000001010000110000000010
000000000001100000001100001000000
000000000000100001000110000010000
000001000000010000100100000010000
000000001000010000010100000001000
000000010000100000010100000000010
000001000000100000100100000010000
000000100010000000011001000000000
000001000000000010100010000010000
000000100001000000011001000000000
000000000100000010001010000000001
000000000000010001000110000010000
000001000000010000100100100000000
000100000000001000100100100000000
000000100000000010010010010000000
000000000010000100001010000000100
000100001000000000110000100000000
000000000001010000001100000000001
000100010000000000110000100000000
000001010000000000110000010000000
000000001010000000011001000000000
000100000000010000100100100000000
000000000001000010001010000000100
000100000000000010100010010000000
000000000100000001001010000000100
000000000100000010001010000000100
000000010000100000010100100000000
000010000001000000101000000100000
000100000000001000100100001000000
000010000000000001100010010000000
000100000010000000101001000000000
000000000000100010000110000010000
000100010000000000110000010000000
000000000001100000001100000001000
000000010000000100010010000000010
000000000000010100000110000000001
000000000000001010000110000010000
000010000000000100100010000010000
000000100000000001010010000000100
000000100000010000010100100000000
000010000000100000100100001000000
000000100001000000011000000000100
000001000000000010100010010000000
000001000000100000100100100000000
000000100000000010010010000000010
000000100000000001010010000000010
000000001100000000011000000000100
000100000000010000100100001000000
000100000010000000101000000100000
000010000100000000101000000100000
000100000001000000101000000100000
000010000100000000101000001000000
000100000010000000101000001000000
000100001000000000110001000000000
000100000000010000100100000010000
000000100000001000010100000000010
000000001000000010010010000000010
000000010001000000011001000000000
000000000000010100000110000010000
000000000000001100000110000010000
000010000000001000100100000010000
000000001000000010010010000000100
000010000000000001100010000100000
000000000000100010000110000000010
000010001000000000110000010000000
000000100000010000010100000001000
000000001010000000011000000001000
000000010001000000011000000000100
000100000000000001100010000100000
000000100010000000011000000000100
000010000000100000100100100000000
000000010001000000011000000001000
000000000100001000001100000001000
000000000000100010000110000000001
000000000001000100001010000000001
000000010000001000010100000001000
000000000100010000001100000000001
000000001100000000011001000000000
000100000000000001100010000010000
000001000010000000101000001000000
000000010100000000011001000000000
000000000010100000001100000000001
000000000100000010001010000100000
000000010100000000011000000000100
000000100000001000010100100000000
000010000100000000101001000000000
000000001000010000010100000000010
000001000100000000101001000000000
000000001000000100010010000000100
000001000000000100100010000010000
000010000001000000101000001000000
000001010000000000110000100000000
000001010000000000110001000000000
000100001000000000110000010000000
000000000010001000001100001000000
000000100000010000010100000000010
000000010000000100010010010000000
000010000000000100100010000100000
000000000000001010000110000000001
000000000100000001001010000100000
000000000100000001001010000000001
000000000010000001001010000000001
000000010000000100010010000000100
000001100000000000110001000000000
000000000010000100001010000000001
000000010000000001010010010000000
000000000000100001000110000000001
000100000001000000101001000000000
000000100001000000011000000001000
000010001000000000110000100000000
000000000000010100000110000000010
000100000001000000101000001000000
000000010000000001010010000000010
000000000001100000001100000000001
000010100000000000110000010000000
000001000000000100100010000100000
000000010000001000010100100000000
000000010000100000010100000001000
000000001000000010010010010000000
000001000010000000101000000100000
000000001000000100010010000000010
000001000000100000100100001000000
000000001000100000010100000001000
000001000000000100100010010000000
000100000000000010100010000010000
000000000000001100000110000000010
000001000000010000100100001000000
000010000000100000100100000010000
000010100000000000110000100000000
000010001000000000110001000000000
000000000001000100001010000100000
000000000001000010001010000100000
000000001100000000011000000001000
000000001000010000010100100000000
000000000010000001001010000000100
000001100000000000110000010000000
000100000000001000100100000010000
000001100000000000110000100000000




=== State Orbit 49 =====================
size : 60
repr state: 000100000000010001100110000010000
lex min decimal: 3107125690100836822199
states:
000000100001000010011010000000100
000010000001000100101010000100000
000000001100010000011100000001000
000000000010100001001110000000001
000000100001010000011100000001000
000100001010000000111001000000000
000010100001000000111001000000000
000100000000001010100110000010000
000010001000100000110100100000000
000000100000001010010110000000010
000000010100000001011010000000100
000000010001000100011010000000100
000100000000010001100110000010000
000010000100000001101010000100000
000000000001010100001110000000001
000000000100001010001110000000001
000001010100000000111001000000000
000000010001100000011100000001000
000000010000100001010110000000010
000100000001010000101100001000000
000100000010001000101100001000000
000100010000000001110010010000000
000001100010000000111001000000000
000000001100000010011010000000100
000100001000000010110010010000000
000001100000010000110100100000000
000001000010000100101010000100000
000010001100000000111001000000000
000100000001000010101010000100000
000100010000001000110100100000000
000010000000001100100110000010000
000001000100010000101100001000000
000010001000000100110010010000000
000001000000100010100110000010000
000000100010000001011010000000100
000001000010100000101100001000000
000000001000100010010110000000010
000000000001100010001110000000001
000001010000100000110100100000000
000000001010000100011010000000100
000100010001000000111001000000000
000010000100001000101100001000000
000001100000000010110010010000000
000100001000010000110100100000000
000000001010100000011100000001000
000010000000100001100110000010000
000001000100000010101010000100000
000010100000001000110100100000000
000010100000000001110010010000000
000001010000000100110010010000000
000000100000010001010110000000010
000001000000010100100110000010000
000010000001100000101100001000000
000000000010001100001110000000001
000100000010000001101010000100000
000000010000001100010110000000010
000000100010001000011100000001000
000000000100010001001110000000001
000000001000010100010110000000010
000000010100001000011100000001000




=== State Orbit 50 =====================
size : 60
repr state: 000000100000000000010000000010000
lex min decimal: 38056526136758070455
states:
000000000010000000001000100000000
000000000000100000000100010000000
000000000001000000001000000000010
000000001000000000010000000010000
000000000100000000001000010000000
000000000000001000000100010000000
000000000000000010000010001000000
000001000000000000100000000000100
000000000000000100000010000001000
000000100000000000010000000000001
000000000000010000000101000000000
000000000000000100000010100000000
000100000000000000100000000000001
000001000000000000100000000001000
000000100000000000010000000010000
000010000000000000100000000000010
000000000000000100000010001000000
000000010000000000010000000100000
000000010000000000010000001000000
000000000000010000000100000000100
000000000000000001000010000001000
000000000010000000001000000010000
000000000000000001000010001000000
000000000001000000001000000010000
000000000000000010000011000000000
000000000000000001000011000000000
000000001000000000010000000000001
000000100000000000010000001000000
000000100000000000010000000100000
000000000000010000000100000100000
000000000000001000000100000000100
000000000001000000001000100000000
000000000001000000001000010000000
000100000000000000100000000001000
000000000000001000000100000100000
000000000000001000000101000000000
000100000000000000100000000000100
000000010000000000010000000010000
000000001000000000010000000100000
000001000000000000100000000000001
000000000010000000001000000000010
000000000000100000000100000100000
000000000100000000001000000010000
000000000100000000001000100000000
000000000000000100000011000000000
000100000000000000100000000000010
000000000000100000000101000000000
000010000000000000100000000000100
000000000000000001000010100000000
000000000000000010000010100000000
000000000000000010000010000001000
000000010000000000010000000000001
000001000000000000100000000000010
000000000100000000001000000000010
000000001000000000010000001000000
000010000000000000100000000000001
000000000010000000001000010000000
000000000000100000000100000000100
000000000000010000000100010000000
000010000000000000100000000001000




=== State Orbit 51 =====================
size : 30
repr state: 000000100100000000011000000010000
lex min decimal: 336077727878373272759
states:
000000010010000000011000000010000
000000001001000000011000000010000
000100000000100000100100000000100
000000010000010000010100000100000
000100100000000000110000000000001
000000000000010010000111000000000
000000100000100000010100000100000
000000000100100000001100010000000
000001000000000001100010000001000
000000000000100100000111000000000
000000000100000100001010100000000
000000010000000010010010001000000
000001000000001000100100000000100
000001001000000000110000000000001
000000001000000001010010001000000
000010000010000000101000000000010
000010000000010000100100000000100
000000000000001001000111000000000
000000000001001000001100010000000
000010000000000010100010000001000
000000000010010000001100010000000
000000000001000001001010100000000
000001000001000000101000000000010
000010010000000000110000000000001
000000100100000000011000000010000
000100000100000000101000000000010
000000100000000100010010001000000
000100000000000100100010000001000
000000000010000010001010100000000
000000001000001000010100000100000




=== State Orbit 52 =====================
size : 60
repr state: 000000100010000000011000000010000
lex min decimal: 372971216025792375991
states:
000000100000001000010100000100000
000010001000000000110000000000001
000000010100000000011000000010000
000000000100000001001010100000000
000001100000000000110000000000001
000000000001000010001010100000000
000000001000010000010100000100000
000000000100010000001100010000000
000010000000000001100010000001000
000100000010000000101000000000010
000001000100000000101000000000010
000010000000001000100100000000100
000100000000001000100100000000100
000000100000000010010010001000000
000000010001000000011000000010000
000000010000000001010010001000000
000000000001000100001010100000000
000000000010001000001100010000000
000000000000010001000111000000000
000000000010000100001010100000000
000000100000000001010010001000000
000010100000000000110000000000001
000000100010000000011000000010000
000000100001000000011000000010000
000000001000000010010010001000000
000100000001000000101000000000010
000001010000000000110000000000001
000001000010000000101000000000010
000000000001010000001100010000000
000100001000000000110000000000001
000000000000010100000111000000000
000000000100000010001010100000000
000000000010000001001010100000000
000000000000001100000111000000000
000001000000010000100100000000100
000100000000000010100010000001000
000000001010000000011000000010000
000000000010100000001100010000000
000000000001100000001100010000000
000010000001000000101000000000010
000000001000100000010100000100000
000001000000000010100010000001000
000010000000000100100010000001000
000001000000000100100010000001000
000100000000000001100010000001000
000000000100001000001100010000000
000000000000001010000111000000000
000010000100000000101000000000010
000000010000000100010010001000000
000000000000100010000111000000000
000100010000000000110000000000001
000000100000010000010100000100000
000000001000000100010010001000000
000000001100000000011000000010000
000000010000100000010100000100000
000000010000001000010100000100000
000000000000100001000111000000000
000100000000010000100100000000100
000010000000100000100100000000100
000001000000100000100100000000100



[QRM NOTE]: Time elapsed since start: 22.051 seconds

[QRM NOTE]: Time elapsed since last: 14.521 seconds

[QRM NOTE]: Peak memory: 3616055 bytes


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=5,value=3]

=======================================================================================================================================

Representatitive states in reachability not in Rmin

{1382066384139000200129719, 1381696881803972960414903, 1381992597162705361923255, 1211627116935108401392823, 1230525806238623837023415, 1230562707608070604025015}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 36.130 seconds

[QRM NOTE]: Time elapsed since last: 14.078 seconds

[QRM NOTE]: Peak memory: 3694224 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy -s node=3,value=5 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=5]

===========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 26

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 720

[FW NOTE]: number of branching actions: 30

ivy_to_cpp target=qrm toy_consensus_forall.node_3_value_5.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_3_value_5.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_3_value_5.finite.cpp toy_consensus_forall.node_3_value_5.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_3_value_5.finite.o toy_consensus_forall.node_3_value_5.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.541 seconds

[QRM NOTE]: Time elapsed since last: 7.541 seconds

[QRM NOTE]: Peak memory: 1252970 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        738

[FW NOTE]: number of dfs representative states:     14

[FW NOTE]: number of dfs non-representative states: 724


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=5]

==================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3', 'value4']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voted('node',)
predicate: voting_quorum=('quorum',)
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'decided(value2)', 'decided(value3)', 'decided(value4)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node0,value4)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node1,value4)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)', 'vote(node2,value4)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
representative states : 939, 39339, 1095083, 34665387, 1108407211, 34698155, 1108441515, 1074836395, 1127851, 34699691, 35812267, 37803, 1094571, 1127339


=== State Orbit 0 =====================
size : 3
repr state: 00000000000000000000000001
lex min decimal: 939
states:
00000000000000000000000100
00000000000000000000000010
00000000000000000000000001




=== State Orbit 1 =====================
size : 15
repr state: 00000100000000000000100001
lex min decimal: 39339
states:
00000100000000000000100001
00000001000000000000100001
00000000000001000000010010
00000000000000010000001100
00000000000000001000001100
00000000000000000001001100
00000000000100000000010010
00000000000000000100001100
00000000000000100000010010
00000000100000000000100001
00000000010000000000100001
00000000001000000000010010
00000010000000000000100001
00000000000000000010001100
00000000000010000000010010




=== State Orbit 2 =====================
size : 30
repr state: 00000100001000000000110001
lex min decimal: 1095083
states:
00000000000010000100011010
00000000001000010000011010
00000000100001000000110010
00000000000000100001011010
00000001000010000000110010
00000000001000010000011100
00000100001000000000110010
00000000100000000010101001
00000001000000000100101100
00000000000100001000011100
00000000010000000001101001
00000000010000100000110001
00000100000000010000101001
00000100000000010000101100
00000000000010000100011100
00000010000100000000110010
00000000010000100000110010
00000000000100001000011010
00000000000001000010011010
00000010000000001000101100
00000000000001000010011100
00000000100000000010101100
00000000000000100001011100
00000010000100000000110001
00000001000010000000110001
00000100001000000000110001
00000000010000000001101100
00000010000000001000101001
00000000100001000000110001
00000001000000000100101001




=== State Orbit 3 =====================
size : 15
repr state: 00000100001000010000111001
lex min decimal: 34665387
states:
00000000010000100001111001
00000010000100001000111001
00000000010000100001111010
00000100001000010000111010
00000001000010000100111001
00000100001000010000111100
00000100001000010000111001
00000001000010000100111100
00000010000100001000111010
00000000100001000010111100
00000001000010000100111010
00000000100001000010111001
00000000100001000010111010
00000000010000100001111100
00000010000100001000111100




=== State Orbit 4 =====================
size : 15
repr state: 10000100001000010000111100
lex min decimal: 1108407211
states:
00100001000010000100111010
00001000010000100001111010
00010000100001000010111100
01000010000100001000111100
01000010000100001000111001
00001000010000100001111001
00100001000010000100111100
00010000100001000010111001
10000100001000010000111001
10000100001000010000111010
10000100001000010000111100
01000010000100001000111010
00001000010000100001111100
00010000100001000010111010
00100001000010000100111001




=== State Orbit 5 =====================
size : 120
repr state: 00000100001000001000111001
lex min decimal: 34698155
states:
00000010001000001000111001
00000010000100000100111001
00000010000001000010111100
00000000101000010000111010
00000001000001000100111001
00000000100000100010111100
00000000100001000001111010
00000000101000010000111100
00000000100010000100111100
00000100000100001000111010
00000100000010000100111100
00000000101000000010111001
00000000100100000010111100
00000010000001001000111001
00000100000100010000111100
00000001000000100100111001
00000010000001001000111100
00000000010010000001111100
00000100001000001000111001
00000000010000100010111010
00000010000100000100111010
00000000010001000010111010
00000001000010001000111001
00000000011000000001111001
00000001000100000100111001
00000001001000000100111100
00000010000000101000111001
00000001001000010000111100
00000000010100001000111010
00000001000000100100111100
00000000100010000100111010
00000100000010000100111010
00000001000010000010111001
00000000010100000001111100
00000000100100001000111010
00000001000010000001111001
00000010000100000001111010
00000000100001000100111001
00000100000000110000111100
00000000100001001000111001
00000001000001000100111100
00000000010100000001111001
00000001000001000010111100
00000000011000010000111100
00000000011000000001111100
00000000100010000010111100
00000000100010000010111001
00000001000010001000111010
00000100001000000001111010
00000100000000100001111010
00000001000010010000111001
00000000010001000001111100
00000000100001000100111010
00000000100000100010111001
00000001001000000100111001
00000000100001010000111010
00000000010010000001111001
00000001001000010000111010
00000100000000110000111001
00000001000010000001111010
00000100000100010000111001
00000010000100010000111001
00000010000010001000111100
00000100001000000001111001
00000010000001000010111010
00000000010000100100111001
00000010000010000100111100
00000000010100001000111100
00000000010010000100111010
00000001000000100001111100
00000001000100001000111010
00000100000001010000111001
00000001000010010000111010
00000000010000110000111001
00000100000010010000111001
00000001000000100001111010
00000010001000010000111010
00000100000001000010111010
00000100000001000010111100
00000000010000101000111001
00000001000100001000111100
00000001000010000010111010
00000000010000110000111010
00000010000100000001111001
00000000010000101000111010
00000100000000100001111100
00000000100001001000111010
00000000010000100010111001
00000001000100000100111100
00000100001000000100111001
00000100000100001000111100
00000000010000100100111010
00000100001000000010111010
00000100000010010000111100
00000010000100000010111001
00000010000100010000111010
00000001000001000010111010
00000000100001010000111001
00000010001000010000111100
00000000101000000010111100
00000000010001000001111001
00000010000000101000111100
00000010000010000100111010
00000000100001000001111001
00000010000010001000111001
00000010000000100001111010
00000100001000001000111010
00000100001000000010111001
00000000100100000010111001
00000010000100000010111010
00000000010010000100111100
00000000010001000010111100
00000000100000100001111100
00000100001000000100111010
00000000100000100001111010
00000000011000010000111010
00000010000000100001111100
00000000100100001000111100
00000010001000001000111100
00000100000001010000111100




=== State Orbit 6 =====================
size : 60
repr state: 10000100001000001000111100
lex min decimal: 1108441515
states:
00010001000001000010111001
01000010000100000010111100
00010000100001010000111100
01000000100100001000111001
01000010000000101000111010
00010000100100000010111010
00010000100001000100111100
10000001001000010000111001
00100010000010000100111001
00100001001000000100111010
00010000100010000010111010
10000100000010010000111010
01000010000100000001111100
00001010000000100001111001
00100000100010000100111001
00100000010010000100111001
01000010000100010000111100
00100001000000100100111010
10000100001000000001111100
00001000010001000001111010
00100001000010000010111100
00001000010000100100111100
00100100000010000100111001
00100001000001000100111010
00100001000010000001111100
00010000100001000001111100
00100001000100000100111010
00100001000010010000111100
00001000010010000001111010
00001100000000100001111001
00001000100000100001111001
10000100001000000010111100
00001000010100000001111010
00001000010000100010111100
10000010001000010000111001
00010000100001001000111100
00010000100000100010111010
00001000011000000001111010
00001001000000100001111001
00100001000010001000111100
00010000101000000010111010
10000100000000110000111010
10000100000100010000111010
00010000010001000010111001
10000100001000001000111100
10000000011000010000111001
01000010000100000100111100
00001000010000101000111100
10000000101000010000111001
01000000010100001000111001
01000001000100001000111001
10000100001000000100111100
00001000010000110000111100
00010010000001000010111001
10000100000001010000111010
00010100000001000010111001
01000010000010001000111010
01000100000100001000111001
01000010000001001000111010
01000010001000001000111010




=== State Orbit 7 =====================
size : 15
repr state: 10000100001000000000110100
lex min decimal: 1074836395
states:
01000000000100001000011001
00001000000000100001011001
00001000010000100000110100
00100001000000000100101010
01000010000100000000110100
10000100000000010000101010
01000010000000001000101010
00001000010000000001101010
00100001000010000000110100
10000100001000000000110100
00100000000010000100011001
00010000100001000000110100
10000000001000010000011001
00010000100000000010101010
00010000000001000010011001




=== State Orbit 8 =====================
size : 120
repr state: 00000100000100000000110001
lex min decimal: 1127851
states:
00000000100000000001101100
00000100000100000000110010
00000000100010000000110001
00000000100100000000110010
00000000010000000100101001
00000000000100010000011100
00000000000001000100011100
00000000000100000100011100
00000001000001000000110010
00000100000001000000110001
00000000010000000100101100
00000000010001000000110001
00000000000000100100011010
00000100000010000000110010
00000000000001000001011100
00000100000000000001101001
00000100000000000001101100
00000100000000000100101001
00000000000100000001011010
00000001001000000000110010
00000001000000001000101001
00000010000000100000110001
00000010000000000010101001
00000000010000010000101001
00000000100000010000101001
00000001000000000001101001
00000010000000000100101001
00000001001000000000110001
00000000100000000100101100
00000000000000110000011100
00000001000001000000110001
00000010000000000100101100
00000000001000000100011010
00000000001000000010011100
00000100000100000000110001
00000000010010000000110001
00000000011000000000110010
00000000010001000000110010
00000000000000100010011100
00000000000100000100011010
00000010000000000001101001
00000100000000000100101100
00000000010000000010101001
00000000100000100000110001
00000010000000000010101100
00000010000000010000101001
00000001000000000010101001
00000000100000001000101100
00000000100000100000110010
00000000100000000001101001
00000100000001000000110010
00000001000000000001101100
00000000100000000100101001
00000000001000000100011100
00000010000001000000110010
00000010001000000000110010
00000000001000000010011010
00000001000000100000110010
00000100000000100000110010
00000000000010001000011010
00000000000001010000011010
00000000010100000000110010
00000001000000010000101100
00000000010100000000110001
00000000010010000000110010
00000000000001000001011010
00000100000000001000101001
00000000000010010000011010
00000000000001001000011100
00000000010000001000101001
00000100000000001000101100
00000000000000100010011010
00000000001000001000011010
00000010000000000001101100
00000010001000000000110001
00000000000001010000011100
00000001000000010000101001
00000000101000000000110010
00000000000010010000011100
00000000000000101000011100
00000000100100000000110001
00000001000000100000110001
00000000000010000010011100
00000000101000000000110001
00000000000100000010011100
00000000010000001000101100
00000000000010000001011010
00000100000000000010101100
00000000010000010000101100
00000000001000001000011100
00000000000010001000011100
00000000001000000001011100
00000000011000000000110001
00000000000100000010011010
00000100000000100000110001
00000000001000000001011010
00000000000001000100011010
00000000000010000001011100
00000010000000010000101100
00000001000000001000101100
00000001000100000000110010
00000100000000000010101001
00000000000010000010011010
00000000100010000000110010
00000000000001001000011010
00000000000100000001011100
00000000000000110000011010
00000000000100010000011010
00000000000000101000011010
00000010000010000000110010
00000010000000100000110010
00000000100000010000101100
00000000010000000010101100
00000100000010000000110001
00000010000001000000110001
00000001000000000010101100
00000000100000001000101001
00000010000010000000110001
00000001000100000000110001
00000000000000100100011100




=== State Orbit 9 =====================
size : 60
repr state: 00000100000100001000111001
lex min decimal: 34699691
states:
00000100000100010000111010
00000100001000000001111100
00000000011000010000111001
00000000100100001000111001
00000000010001000010111001
00000010000100010000111100
00000000100010000100111001
00000000100001000001111100
00000100000000110000111010
00000000100001001000111100
00000100001000001000111100
00000010000000100001111001
00000000100010000010111010
00000100001000000100111100
00000000010100001000111001
00000100000010000100111001
00000100000001000010111001
00000000101000010000111001
00000010000001001000111010
00000010000010000100111001
00000001000010001000111100
00000010000000101000111010
00000000100000100001111001
00000001000000100100111010
00000001000010000001111100
00000001000010000010111100
00000010001000010000111001
00000000010000100010111100
00000100000100001000111001
00000000100001010000111100
00000001000010010000111100
00000001001000010000111001
00000001000001000100111010
00000100000010010000111010
00000000010000101000111100
00000100001000000010111100
00000000010000110000111100
00000000010100000001111010
00000000101000000010111010
00000001000001000010111001
00000000011000000001111010
00000000010010000100111001
00000000100000100010111010
00000000100100000010111010
00000100000000100001111001
00000001000000100001111001
00000010000010001000111010
00000001001000000100111010
00000000010001000001111010
00000010000100000001111100
00000000010000100100111100
00000100000001010000111010
00000001000100001000111001
00000010001000001000111010
00000010000100000100111100
00000010000100000010111100
00000010000001000010111001
00000000100001000100111100
00000001000100000100111010
00000000010010000001111010




=== State Orbit 10 =====================
size : 180
repr state: 00000100000100000100111001
lex min decimal: 35812267
states:
00000100000100000100111100
00000000011000000010111001
00000010000000100100111010
00000010000010000010111100
00000001000001010000111001
00000001000001000001111010
00000010000000100100111001
00000100000010000001111010
00000100000010000001111100
00000100000000100010111010
00000000010010001000111010
00000100000010001000111010
00000010000001000100111010
00000100000010001000111100
00000010000001000001111001
00000000010100000100111010
00000000100010001000111010
00000010000000100100111100
00000001000100000001111010
00000100000000101000111001
00000010000001000001111010
00000100000100000001111100
00000001001000000010111001
00000000101000000100111001
00000100000010000010111010
00000010000000110000111010
00000000101000001000111010
00000001000000110000111010
00000010000000100010111010
00000001000000101000111001
00000100000100000010111001
00000000100010010000111001
00000100000100000100111001
00000100000100000010111010
00000000010010000010111010
00000100000001000001111010
00000000101000001000111100
00000001000100000010111100
00000010000010000010111001
00000000010001010000111010
00000100000000100100111001
00000000101000001000111001
00000000010001001000111010
00000000010100010000111001
00000001000000110000111001
00000000011000001000111100
00000100000000100010111001
00000100000001000100111100
00000000011000001000111001
00000010000010000001111001
00000010001000000010111001
00000000010001000100111001
00000010001000000100111010
00000000100010001000111100
00000010000000110000111001
00000010000001010000111100
00000001001000000001111100
00000100000010000001111001
00000010001000000100111001
00000000100000101000111100
00000000100100010000111001
00000000100100000100111010
00000100000000100010111100
00000010001000000001111001
00000000100100000001111010
00000001000100000001111001
00000000100010010000111100
00000001001000000001111010
00000100000100000001111001
00000000010010000010111100
00000000010010000010111001
00000000010100010000111100
00000100000010001000111001
00000000011000000010111010
00000000100100010000111100
00000000010100000100111100
00000001000100000001111100
00000000011000000010111100
00000000101000000100111100
00000000010010001000111100
00000000100100010000111010
00000000100100000001111001
00000000010100000010111001
00000010000010000010111010
00000100000010000010111001
00000010000010010000111001
00000100000001001000111010
00000001001000000010111100
00000000010010001000111001
00000010000000100010111100
00000000100010000001111100
00000000010010010000111001
00000010001000000010111100
00000100000001000100111010
00000001000100010000111100
00000000101000000001111010
00000100000001001000111001
00000001000001010000111100
00000001001000000001111001
00000100000010000010111100
00000001000000101000111100
00000010001000000001111100
00000001000001010000111010
00000001000100000010111001
00000000010001010000111001
00000100000100000010111100
00000000100010001000111001
00000000101000000001111100
00000000010100000100111001
00000000010010010000111010
00000000010010010000111100
00000001001000000010111010
00000010000010010000111100
00000001000001000001111100
00000100000001000001111001
00000100000001000100111001
00000001000000100010111001
00000001000001001000111010
00000010000010010000111010
00000000010001001000111001
00000100000000101000111010
00000000100000100100111001
00000010001000000001111010
00000100000100000100111010
00000100000000100100111100
00000000010001000100111100
00000100000000100100111010
00000001000100010000111001
00000000100000110000111010
00000001001000001000111100
00000001000000100010111010
00000000100000100100111010
00000010000000100010111001
00000000101000000100111010
00000001001000001000111001
00000000100100000100111001
00000010000001010000111001
00000000100010010000111010
00000000010001001000111100
00000010001000000100111100
00000001000100000010111010
00000000100100000001111100
00000000101000000001111001
00000100000001000001111100
00000000010100000010111100
00000010000010000001111100
00000000100000101000111001
00000100000100000001111010
00000000011000000100111010
00000000010001010000111100
00000000100000101000111010
00000010000010000001111010
00000100000000101000111100
00000001000001001000111100
00000000011000000100111100
00000000100000110000111100
00000010000001010000111010
00000000100000110000111001
00000100000001001000111100
00000000011000001000111010
00000010000000110000111100
00000000010100010000111010
00000000100100000100111100
00000000010100000010111010
00000000011000000100111001
00000000010001000100111010
00000001000001000001111001
00000010000001000001111100
00000001001000001000111010
00000001000000110000111100
00000001000000101000111010
00000001000001001000111001
00000000100010000001111010
00000010000001000100111100
00000000100010000001111001
00000010001000000010111010
00000010000001000100111001
00000001000100010000111010
00000000100000100100111100
00000001000000100010111100




=== State Orbit 11 =====================
size : 30
repr state: 00000000001000000000010001
lex min decimal: 37803
states:
00000000010000000000100010
00000000000100000000010001
00000000010000000000100100
00000010000000000000100010
00000000000000000100001010
00000000000000001000001010
00000000000000000010001010
00000000000000000001001001
00000000000000010000001001
00000000000010000000010100
00000000000000000010001001
00000000100000000000100100
00000001000000000000100100
00000000000000100000010001
00000000000001000000010100
00000000001000000000010001
00000100000000000000100100
00000001000000000000100010
00000000000100000000010100
00000000100000000000100010
00000100000000000000100010
00000010000000000000100100
00000000000001000000010001
00000000000010000000010001
00000000000000001000001001
00000000000000000001001010
00000000000000010000001010
00000000001000000000010100
00000000000000100000010100
00000000000000000100001001




=== State Orbit 12 =====================
size : 15
repr state: 00000000001000010000011001
lex min decimal: 1094571
states:
00000010000100000000110100
00000000000010000100011001
00000000010000100000110100
00000010000000001000101010
00000000000000100001011001
00000000010000000001101010
00000100001000000000110100
00000100000000010000101010
00000000100000000010101010
00000000000100001000011001
00000001000000000100101010
00000000000001000010011001
00000001000010000000110100
00000000100001000000110100
00000000001000010000011001




=== State Orbit 13 =====================
size : 60
repr state: 00000000001000001000011001
lex min decimal: 1127339
states:
00000010000000000100101010
00000000100000001000101010
00000100000000000010101010
00000010001000000000110100
00000000000001010000011001
00000001000000001000101010
00000010000000100000110100
00000100000000000001101010
00000100000000100000110100
00000000000100000100011001
00000000001000000010011001
00000000010000001000101010
00000100000010000000110100
00000010000000000010101010
00000000000010000001011001
00000000001000001000011001
00000010000000000001101010
00000000100010000000110100
00000001000000010000101010
00000000100000000001101010
00000001000000000001101010
00000001001000000000110100
00000000000100000010011001
00000000100100000000110100
00000000010001000000110100
00000000000000100010011001
00000000011000000000110100
00000100000001000000110100
00000000000001000100011001
00000000000001001000011001
00000000000100010000011001
00000000101000000000110100
00000010000010000000110100
00000000010010000000110100
00000001000000000010101010
00000000001000000100011001
00000000010000000100101010
00000001000001000000110100
00000000000000110000011001
00000000000000100100011001
00000000100000010000101010
00000001000100000000110100
00000100000000000100101010
00000000001000000001011001
00000000000010010000011001
00000001000000100000110100
00000000010100000000110100
00000010000000010000101010
00000000100000000100101010
00000000010000010000101010
00000000000010000010011001
00000010000001000000110100
00000000100000100000110100
00000000000001000001011001
00000000000000101000011001
00000000000100000001011001
00000100000000001000101010
00000000000010001000011001
00000100000100000000110100
00000000010000000010101010



[QRM NOTE]: Time elapsed since start: 10.390 seconds

[QRM NOTE]: Time elapsed since last: 2.849 seconds

[QRM NOTE]: Peak memory: 1435874 bytes


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=5]

=======================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 13.380 seconds

[QRM NOTE]: Time elapsed since last: 2.990 seconds

[QRM NOTE]: Peak memory: 613648 bytes

next size: node=5,value=3


******************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3

******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy -s node=5,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=5,value=3]

=======================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 16.467 seconds

[QRM NOTE]: Time elapsed since last: 16.467 seconds

[QRM NOTE]: Peak memory: 1182952 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy -s node=3,value=5 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=======================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=5]

=======================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 2.914 seconds

[QRM NOTE]: Time elapsed since last: 2.914 seconds

[QRM NOTE]: Peak memory: 255288 bytes

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_13

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_13 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_13 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_13 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS


***************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_forall.ivy

***************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy']

[CUTOFF]: node=3,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 219.842 seconds

[QRM NOTE]: Time elapsed since last: 219.842 seconds

