
**********************************************************

	[QRM]: ivybench/sym/ivy/sharded_kv.ivy

**********************************************************


****************************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1

****************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=1,key=1,value=1 -f 1 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 3

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 1

[FW NOTE]: number of branching actions: 3

ivy_to_cpp target=qrm sharded_kv.node_1_key_1_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_1_key_1_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_1_key_1_value_1.finite.cpp sharded_kv.node_1_key_1_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_1_key_1_value_1.finite.o sharded_kv.node_1_key_1_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.954 seconds

[QRM NOTE]: Time elapsed since last: 7.954 seconds

[QRM NOTE]: Peak memory: 1178052 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        4

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 0


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

=======================================================================================================

sort: key=['key0']
sort: value=['value0']
sort: node=['node0']
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
representative states : 0, 4, 6, 1


=== State Orbit 0 =====================
size : 1
repr state: 000
lex min decimal: 0
states:
000




=== State Orbit 1 =====================
size : 1
repr state: 100
lex min decimal: 4
states:
100




=== State Orbit 2 =====================
size : 1
repr state: 110
lex min decimal: 6
states:
110




=== State Orbit 3 =====================
size : 1
repr state: 001
lex min decimal: 1
states:
001



[QRM NOTE]: Time elapsed since start: 8.036 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 1204049 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 8.040 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 154660 bytes


=======================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

=======================================================================================================


==================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

==================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 01-
0     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1-1
1     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -11
2     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 3

[PRIME NOTE]: number of orbits before merging: 3

[PRIME NOTE]: number of primes: 3

[QRM NOTE]: Time elapsed since start: 8.052 seconds

[QRM NOTE]: Time elapsed since last: 0.011 seconds

[QRM NOTE]: Peak memory: 1211280 bytes


============================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

============================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2]
 solution : []


Before reduction : 
 pending  : [0, 1, 2]
 solution : []

Essensial at level 0 : {0, 1}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0)]

Covered at level 0 : {2}

After reduction : 
 pending  : []
 solution : [0, 1]


Before reduction : 
 pending  : []
 solution : [0, 1]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1]

[QRM NOTE]: Time elapsed since start: 8.053 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 163267 bytes


================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 01-
0     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node0,key0)', 'table(node0,key0,value0)']

sign_func_name2args: {'1$owner': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0',)): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0',)): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node0,key0)', 'table(node0,key0,value0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0',)): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0',)): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)', '~owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,KEY0,VALUE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1-1
1     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0',)): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0',)): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0',)): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0',)): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0; node$0$transfer_msg$0': [node$0$owner$0$0; node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0; node$0$transfer_msg$0': node$0$owner$0$0; node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)


==========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 01-
0     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,KEY0,VALUE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)
qcost : 5




=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1-1
1     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)
qcost : 5



[QRM NOTE]: Time elapsed since start: 8.132 seconds

[QRM NOTE]: Time elapsed since last: 0.079 seconds

[QRM NOTE]: Peak memory: 1827032 bytes


=========================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

=========================================================================================


New level: 1
 pending : []
 solution : [0, 1]


Before reduction : 
 pending  : []
 solution : [0, 1]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1]


Solution : [0, 1] has cost 10.


Before backtrack at level 1
 pending : []
 solution : [0, 1]

After backtrack at level 1
 pending : []
 solution : [0, 1]


========================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

========================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 10

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 1] (length = 2)

invariant [invar_0] forall NODE0,KEY0,VALUE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0) # qcost: 5

invariant [invar_1] forall NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0) # qcost: 5




[QRM NOTE]: Time elapsed since start: 8.172 seconds

[QRM NOTE]: Time elapsed since last: 0.040 seconds

[QRM NOTE]: Peak memory: 1813062 bytes


============================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

============================================================================================

ivy_check complete=fo ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 52: invar_0
        ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 53: invar_1

    The following action implementations are present:
        ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 34: implementation of put
        ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 26: implementation of recv_transfer_msg
        ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 18: implementation of reshard

    The following initializers are present:
        ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 11: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 52: invar_0 ... PASS
        ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 53: invar_1 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:put
            ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 53: invar_1 ... PASS
        (internal) ext:recv_transfer_msg
            ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 53: invar_1 ... FAIL
        (internal) ext:reshard
            ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 52: invar_0 ... FAIL
            ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 53: invar_1 ... FAIL

    The following program assertions are treated as assumptions:
        in action reshard when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 19: assumption
        in action recv_transfer_msg when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 27: assumption
        in action put when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: line 35: assumption

error: failed checks: 3
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 10.661 seconds

[QRM NOTE]: Time elapsed since last: 2.488 seconds

[QRM NOTE]: Peak memory: 815031 bytes


*******************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1

*******************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=2,key=1,value=1 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=1]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 8

ivy_to_cpp target=qrm sharded_kv.node_2_key_1_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_2_key_1_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_2_key_1_value_1.finite.cpp sharded_kv.node_2_key_1_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_2_key_1_value_1.finite.o sharded_kv.node_2_key_1_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 8.265 seconds

[QRM NOTE]: Time elapsed since last: 8.265 seconds

[QRM NOTE]: Peak memory: 1177360 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        7

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 3


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=1]

=======================================================================================================

sort: key=['key0']
sort: value=['value0']
sort: node=['node0', 'node1']
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
representative states : 0, 16, 20, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000
lex min decimal: 0
states:
000000




=== State Orbit 1 =====================
size : 2
repr state: 100000
lex min decimal: 16
states:
010000
100000




=== State Orbit 2 =====================
size : 2
repr state: 101000
lex min decimal: 20
states:
010100
101000




=== State Orbit 3 =====================
size : 2
repr state: 000010
lex min decimal: 1
states:
000010
000001



[QRM NOTE]: Time elapsed since start: 8.349 seconds

[QRM NOTE]: Time elapsed since last: 0.084 seconds

[QRM NOTE]: Peak memory: 1204659 bytes


============================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=1]

============================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 60, binary: 111100

Found a representative state in Rmin not in reachability: decimal: 52, binary: 110100

Found a representative state in Rmin not in reachability: decimal: 3, binary: 000011

Found a representative state in Rmin not in reachability: decimal: 18, binary: 010010

Found a representative state in Rmin not in reachability: decimal: 22, binary: 010110

Found a representative state in Rmin not in reachability: decimal: 48, binary: 110000

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 8.358 seconds

[QRM NOTE]: Time elapsed since last: 0.009 seconds

[QRM NOTE]: Peak memory: 158191 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=1,key=2,value=1 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=2,value=1]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm sharded_kv.node_1_key_2_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_1_key_2_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_1_key_2_value_1.finite.cpp sharded_kv.node_1_key_2_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_1_key_2_value_1.finite.o sharded_kv.node_1_key_2_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.601 seconds

[QRM NOTE]: Time elapsed since last: 7.601 seconds

[QRM NOTE]: Peak memory: 1177358 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        16

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 6


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=2,value=1]

=======================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0']
sort: node=['node0']
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'table(node0,key0,value0)', 'table(node0,key1,value0)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key1,value0)']
representative states : 0, 48, 16, 52, 18, 22, 3, 60, 20, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000
lex min decimal: 0
states:
000000




=== State Orbit 1 =====================
size : 1
repr state: 110000
lex min decimal: 48
states:
110000




=== State Orbit 2 =====================
size : 2
repr state: 010000
lex min decimal: 16
states:
100000
010000




=== State Orbit 3 =====================
size : 2
repr state: 111000
lex min decimal: 52
states:
110100
111000




=== State Orbit 4 =====================
size : 2
repr state: 010010
lex min decimal: 18
states:
100001
010010




=== State Orbit 5 =====================
size : 2
repr state: 010110
lex min decimal: 22
states:
101001
010110




=== State Orbit 6 =====================
size : 1
repr state: 000011
lex min decimal: 3
states:
000011




=== State Orbit 7 =====================
size : 1
repr state: 111100
lex min decimal: 60
states:
111100




=== State Orbit 8 =====================
size : 2
repr state: 010100
lex min decimal: 20
states:
010100
101000




=== State Orbit 9 =====================
size : 2
repr state: 000001
lex min decimal: 1
states:
000001
000010



[QRM NOTE]: Time elapsed since start: 7.684 seconds

[QRM NOTE]: Time elapsed since last: 0.083 seconds

[QRM NOTE]: Peak memory: 1209655 bytes


============================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv: node=1,key=2,value=1]

============================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.693 seconds

[QRM NOTE]: Time elapsed since last: 0.009 seconds

[QRM NOTE]: Peak memory: 162520 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=1,key=1,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=2]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 5

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm sharded_kv.node_1_key_1_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_1_key_1_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_1_key_1_value_2.finite.cpp sharded_kv.node_1_key_1_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_1_key_1_value_2.finite.o sharded_kv.node_1_key_1_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.497 seconds

[QRM NOTE]: Time elapsed since last: 7.497 seconds

[QRM NOTE]: Peak memory: 1176817 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        6

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 2


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0']
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
representative states : 0, 16, 20, 1


=== State Orbit 0 =====================
size : 1
repr state: 00000
lex min decimal: 0
states:
00000




=== State Orbit 1 =====================
size : 1
repr state: 10000
lex min decimal: 16
states:
10000




=== State Orbit 2 =====================
size : 2
repr state: 11000
lex min decimal: 20
states:
10100
11000




=== State Orbit 3 =====================
size : 2
repr state: 00010
lex min decimal: 1
states:
00001
00010



[QRM NOTE]: Time elapsed since start: 7.578 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 1203870 bytes


============================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=2]

============================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 28, binary: 11100

Found a representative state in Rmin not in reachability: decimal: 3, binary: 00011

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.587 seconds

[QRM NOTE]: Time elapsed since last: 0.009 seconds

[QRM NOTE]: Peak memory: 157301 bytes

next size: node=2,key=1,value=2


****************************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2

****************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=2,key=1,value=2 -f 1 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 4

[FW NOTE]: number of branching actions: 16

ivy_to_cpp target=qrm sharded_kv.node_2_key_1_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_2_key_1_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_2_key_1_value_2.finite.cpp sharded_kv.node_2_key_1_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_2_key_1_value_2.finite.o sharded_kv.node_2_key_1_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.978 seconds

[QRM NOTE]: Time elapsed since last: 7.978 seconds

[QRM NOTE]: Peak memory: 1177756 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        11

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 7


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1']
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
representative states : 0, 256, 272, 1


=== State Orbit 0 =====================
size : 1
repr state: 0000000000
lex min decimal: 0
states:
0000000000




=== State Orbit 1 =====================
size : 2
repr state: 1000000000
lex min decimal: 256
states:
1000000000
0100000000




=== State Orbit 2 =====================
size : 4
repr state: 1010000000
lex min decimal: 272
states:
0100010000
1010000000
0100100000
1001000000




=== State Orbit 3 =====================
size : 4
repr state: 0000001000
lex min decimal: 1
states:
0000001000
0000000010
0000000100
0000000001



[QRM NOTE]: Time elapsed since start: 8.294 seconds

[QRM NOTE]: Time elapsed since last: 0.315 seconds

[QRM NOTE]: Peak memory: 1206254 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 8.295 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 157007 bytes


=======================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

=======================================================================================================


==================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

==================================================================================================


=== Prime Orbit 0 =====================
size : 8
num_suborbits: 2
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 16
num_suborbits: 4
8 (*) : -----1---1
8     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value1)']
9     : ---1---1--
9     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value1)']
10     : ----1---1-
10     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value0)']
11     : --1---1---
11     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
12 (*) : --1------1
12     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
13     : ----1--1--
13     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value1)']
14     : ---1----1-
14     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
15     : -----11---
15     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)']
16 (*) : ---1-----1
16     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
17     : -----1-1--
17     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value1)']
18     : --1-----1-
18     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
19     : ----1-1---
19     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)']
20 (*) : ----1----1
20     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
21     : --1----1--
21     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
22     : -----1--1-
22     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value0)']
23     : ---1--1---
23     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 3
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 4
num_suborbits: 1
35 (*) : 1----1----
35     : ['owner(node0,key0)', 'table(node1,key0,value1)']
36     : -1-1------
36     : ['owner(node1,key0)', 'table(node0,key0,value1)']
37     : 1---1-----
37     : ['owner(node0,key0)', 'table(node1,key0,value0)']
38     : -11-------
38     : ['owner(node1,key0)', 'table(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 3
39 (*) : --1--1----
39     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
40     : ---11-----
40     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
43 (*) : ---1-1----
43     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
44     : --1-1-----
44     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 7

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 45

[QRM NOTE]: Time elapsed since start: 8.310 seconds

[QRM NOTE]: Time elapsed since last: 0.015 seconds

[QRM NOTE]: Peak memory: 1270233 bytes


============================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

============================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6]
 solution : []

Essensial at level 0 : {0, 2, 3, 4, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1)]

Covered at level 0 : {1, 5}

After reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]

[QRM NOTE]: Time elapsed since start: 8.312 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 222099 bytes


================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 8
num_suborbits: 2
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0], 'node$0$transfer_msg$0': [node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0': node$0$owner$0$0, 'node$0$transfer_msg$0': node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE1,KEY0,VALUE0)', 'owner(NODE0,KEY0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')[]

sort partition signature: key$0$owner$1$0; key$0$transfer_msg$1$0

class signature: key$0$owner$1$0; key$0$transfer_msg$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$owner$0$0 | node$0$transfer_msg$0$0

class signature: node$0$owner$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')[]

sort partition signature: key$0$owner$1$0; key$0$transfer_msg$1$0

class signature: key$0$owner$1$0; key$0$transfer_msg$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$owner$0$0; node$0$transfer_msg$0$0

class signature: node$0$owner$0$0; node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')[]

sort partition signature: key$0$owner$1$0; key$0$transfer_msg$1$0

class signature: key$0$owner$1$0; key$0$transfer_msg$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$owner$0$0 | node$0$transfer_msg$0$0

class signature: node$0$owner$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')[]

sort partition signature: key$0$owner$1$0; key$0$transfer_msg$1$0

class signature: key$0$owner$1$0; key$0$transfer_msg$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$owner$0$0; node$0$transfer_msg$0$0

class signature: node$0$owner$0$0; node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,VALUE0,NODE0,NODE1. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0)


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 3
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE1,KEY0,VALUE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')[]

sort partition signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')[]

sort partition signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')[]

sort partition signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE1,NODE1,KEY0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1)


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'owner(node1,key0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',)))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$owner$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$1]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$owner$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$1': Const('key0', EnumeratedSort('key', ('key0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

part_sig: ('key$0$owner$1$0; key$0$owner$1$1', 'node$0$owner$0$0 | node$0$owner$0$1')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'owner(node1,key0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)))}

sign_func_name2count:  {'0$owner': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$owner$1': [key$0$owner$1$0; key$0$owner$1$1]}

	identical_single_classes: {'key$0$owner$1; key$0$owner$1': key$0$owner$1$0; key$0$owner$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists

quantifier mode: key: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0. (exists NODE0. ~owner(NODE0,KEY0))


=== Prime Orbit 4 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node1,key0)', 'table(node1,key0,value1)']

sign_func_name2args: {'1$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node1,key0)', 'table(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~owner(NODE0,KEY0)', 'table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,VALUE0,NODE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 3
39 (*) : --1--1----
39     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
40     : ---11-----
40     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
43 (*) : ---1-1----
43     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
44     : --1-1-----
44     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node1,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node0,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$0, node$0$table$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value1)', 'table(node1,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0, value$0$table$2$1], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0; value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0; value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')


---------- SigGenerator ----------

terms:  ['table(node0,key0,value0)', 'table(node1,key0,value1)']

func_name2symbol:  {'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'table': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$table': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

	sort: node

	identical_classes: {'node$0$table$0': [node$0$table$0$0, node$0$table$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$table$0': [node$0$table$0$0, node$0$table$0$1]}

	sort: key

	identical_classes: {'key$0$table$1; key$0$table$1': [key$0$table$1$0; key$0$table$1$1]}

	identical_single_classes: {'key$0$table$1; key$0$table$1': key$0$table$1$0; key$0$table$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE1,KEY0,VALUE1)', 'table(NODE0,KEY0,VALUE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0 | node$0$table$0$1

class signature: node$0$table$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$table$2$0 | value$0$table$2$1

class signature: value$0$table$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0; node$0$table$0$1

class signature: node$0$table$0$0; node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$table$2$0 | value$0$table$2$1

class signature: value$0$table$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0 | node$0$table$0$1

class signature: node$0$table$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$table$2$0; value$0$table$2$1

class signature: value$0$table$2$0; value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0 | node$0$table$0$1

class signature: node$0$table$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$table$2$0 | value$0$table$2$1

class signature: value$0$table$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0; node$0$table$0$1

class signature: node$0$table$0$0; node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$table$2$0 | value$0$table$2$1

class signature: value$0$table$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0 | node$0$table$0$1

class signature: node$0$table$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$table$2$0; value$0$table$2$1

class signature: value$0$table$2$0; value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')[]

sort partition signature: node$0$table$0$0; node$0$table$0$1

class signature: node$0$table$0$0; node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$table$2$0; value$0$table$2$1

class signature: value$0$table$2$0; value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')[]

sort partition signature: node$0$table$0$0; node$0$table$0$1

class signature: node$0$table$0$0; node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$table$2$0; value$0$table$2$1

class signature: value$0$table$2$0; value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')[]

sort partition signature: node$0$table$0$0; node$0$table$0$1

class signature: node$0$table$0$0; node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$table$2$0; value$0$table$2$1

class signature: value$0$table$2$0; value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE1,NODE1,KEY0. ~table(NODE1,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 & VALUE0 = VALUE1)


==========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 8
num_suborbits: 2
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   4
num_exists :   0
num_literals : 2
quantified form : forall KEY0,VALUE0,NODE0,NODE1. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0)
qcost : 6




=== Prime Orbit 2 =====================
size : 6
num_suborbits: 3
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,VALUE1,NODE1,KEY0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall KEY0. (exists NODE0. ~owner(NODE0,KEY0))
qcost : 3




=== Prime Orbit 4 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall KEY0,VALUE0,NODE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)
qcost : 5




=== Prime Orbit 6 =====================
size : 6
num_suborbits: 3
39 (*) : --1--1----
39     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
40     : ---11-----
40     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
43 (*) : ---1-1----
43     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
44     : --1-1-----
44     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,VALUE1,NODE1,KEY0. ~table(NODE1,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 & VALUE0 = VALUE1)
qcost : 9



[QRM NOTE]: Time elapsed since start: 8.546 seconds

[QRM NOTE]: Time elapsed since last: 0.233 seconds

[QRM NOTE]: Peak memory: 1970595 bytes


=========================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

=========================================================================================


New level: 1
 pending : []
 solution : [0, 2, 3, 4, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]


Solution : [0, 2, 3, 4, 6] has cost 32.


Before backtrack at level 1
 pending : []
 solution : [0, 2, 3, 4, 6]

After backtrack at level 1
 pending : []
 solution : [0, 2, 3, 4, 6]


========================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

========================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 32

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 2, 3, 4, 6] (length = 5)

invariant [invar_0] forall KEY0,VALUE0,NODE0,NODE1. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) # qcost: 6

invariant [invar_2] forall VALUE0,NODE0,VALUE1,NODE1,KEY0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1) # qcost: 9

invariant [invar_3] forall KEY0. (exists NODE0. ~owner(NODE0,KEY0)) # qcost: 3

invariant [invar_4] forall KEY0,VALUE0,NODE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0) # qcost: 5

invariant [invar_6] forall VALUE0,NODE0,VALUE1,NODE1,KEY0. ~table(NODE1,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 & VALUE0 = VALUE1) # qcost: 9




[QRM NOTE]: Time elapsed since start: 8.594 seconds

[QRM NOTE]: Time elapsed since last: 0.048 seconds

[QRM NOTE]: Peak memory: 1922048 bytes


============================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

============================================================================================

ivy_check complete=fo ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 52: invar_0
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 53: invar_2
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 54: invar_3
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 55: invar_4
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 56: invar_6

    The following action implementations are present:
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 34: implementation of put
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 26: implementation of recv_transfer_msg
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 18: implementation of reshard

    The following initializers are present:
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 11: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 54: invar_3 ... FAIL
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
        ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 56: invar_6 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:put
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 56: invar_6 ... FAIL
        (internal) ext:recv_transfer_msg
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 54: invar_3 ... FAIL
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 56: invar_6 ... PASS
        (internal) ext:reshard
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 52: invar_0 ... FAIL
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 56: invar_6 ... PASS

    The following program assertions are treated as assumptions:
        in action reshard when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 19: assumption
        in action recv_transfer_msg when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 27: assumption
        in action put when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: line 35: assumption

error: failed checks: 4
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 10.683 seconds

[QRM NOTE]: Time elapsed since last: 2.089 seconds

[QRM NOTE]: Peak memory: 923032 bytes


*******************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2

*******************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=3,key=1,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 12

[FW NOTE]: number of branching actions: 30

ivy_to_cpp target=qrm sharded_kv.node_3_key_1_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_3_key_1_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_3_key_1_value_2.finite.cpp sharded_kv.node_3_key_1_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_3_key_1_value_2.finite.o sharded_kv.node_3_key_1_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 8.263 seconds

[QRM NOTE]: Time elapsed since last: 8.263 seconds

[QRM NOTE]: Peak memory: 1183187 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        16

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 12


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1', 'node2']
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
representative states : 0, 4096, 4160, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 3
repr state: 001000000000000
lex min decimal: 4096
states:
010000000000000
001000000000000
100000000000000




=== State Orbit 2 =====================
size : 6
repr state: 001000010000000
lex min decimal: 4160
states:
100010000000000
010000100000000
100100000000000
001000010000000
001000001000000
010001000000000




=== State Orbit 3 =====================
size : 6
repr state: 000000000100000
lex min decimal: 1
states:
000000000000010
000000000100000
000000000000100
000000000010000
000000000000001
000000000001000



[QRM NOTE]: Time elapsed since start: 8.370 seconds

[QRM NOTE]: Time elapsed since last: 0.107 seconds

[QRM NOTE]: Peak memory: 1213934 bytes


============================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

============================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 12352, binary: 011000001000000

Found a representative state in Rmin not in reachability: decimal: 12288, binary: 011000000000000

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 8.556 seconds

[QRM NOTE]: Time elapsed since last: 0.186 seconds

[QRM NOTE]: Peak memory: 265347 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=2,key=2,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=2,value=2]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 20

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 8

[FW NOTE]: number of branching actions: 32

ivy_to_cpp target=qrm sharded_kv.node_2_key_2_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_2_key_2_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_2_key_2_value_2.finite.cpp sharded_kv.node_2_key_2_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_2_key_2_value_2.finite.o sharded_kv.node_2_key_2_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 8.476 seconds

[QRM NOTE]: Time elapsed since last: 8.476 seconds

[QRM NOTE]: Peak memory: 1185173 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 12

[FW NOTE]: number of total reachable states:        121

[FW NOTE]: number of dfs representative states:     22

[FW NOTE]: number of dfs non-representative states: 99


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=2,value=2]

=======================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1']
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'owner(node1,key0)', 'owner(node1,key1)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key1,value0)', 'table(node0,key1,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key1,value0)', 'table(node1,key1,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key1,value0)', 'transfer_msg(node0,key1,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key1,value0)', 'transfer_msg(node1,key1,value1)']
representative states : 0, 65536, 196608, 393216, 65792, 1, 196864, 65600, 394240, 65540, 65796, 20, 65856, 5, 398336, 399360, 65800, 6, 24, 65920, 198144, 197888


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000000000
lex min decimal: 0
states:
00000000000000000000




=== State Orbit 1 =====================
size : 4
repr state: 00010000000000000000
lex min decimal: 65536
states:
10000000000000000000
00100000000000000000
01000000000000000000
00010000000000000000




=== State Orbit 2 =====================
size : 2
repr state: 00110000000000000000
lex min decimal: 196608
states:
00110000000000000000
11000000000000000000




=== State Orbit 3 =====================
size : 2
repr state: 01100000000000000000
lex min decimal: 393216
states:
01100000000000000000
10010000000000000000




=== State Orbit 4 =====================
size : 8
repr state: 00010000001000000000
lex min decimal: 65792
states:
00100000100000000000
01000001000000000000
10000100000000000000
00010000000100000000
00010000001000000000
00100000010000000000
01000010000000000000
10001000000000000000




=== State Orbit 5 =====================
size : 8
repr state: 00000000000000100000
lex min decimal: 1
states:
00000000000000000001
00000000000000100000
00000000000000000010
00000000000010000000
00000000000000001000
00000000000000010000
00000000000001000000
00000000000000000100




=== State Orbit 6 =====================
size : 8
repr state: 00110000100000000000
lex min decimal: 196864
states:
00110000100000000000
00110000000100000000
11000100000000000000
11000001000000000000
11000010000000000000
11001000000000000000
00110000001000000000
00110000010000000000




=== State Orbit 7 =====================
size : 8
repr state: 00010000000010000000
lex min decimal: 65600
states:
01000000000000001000
00010000000010000000
00010000000001000000
00100000000000100000
10000000000000000001
10000000000000000010
00100000000000010000
01000000000000000100




=== State Orbit 8 =====================
size : 8
repr state: 10011000000000000000
lex min decimal: 394240
states:
10010000000100000000
01100010000000000000
01100001000000000000
10011000000000000000
01100000010000000000
10010100000000000000
10010000001000000000
01100000100000000000




=== State Orbit 9 =====================
size : 8
repr state: 00010000000000001000
lex min decimal: 65540
states:
01000000000010000000
00010000000000000100
10000000000000010000
01000000000001000000
00100000000000000001
00100000000000000010
10000000000000100000
00010000000000001000




=== State Orbit 10 =====================
size : 8
repr state: 00010000001000001000
lex min decimal: 65796
states:
10001000000000100000
00010000000100000100
00100000100000000010
00100000010000000001
01000001000001000000
10000100000000010000
00010000001000001000
01000010000010000000




=== State Orbit 11 =====================
size : 4
repr state: 00000000000000101000
lex min decimal: 20
states:
00000000000010000010
00000000000000010100
00000000000001000001
00000000000000101000




=== State Orbit 12 =====================
size : 8
repr state: 01000010000000001000
lex min decimal: 65856
states:
01000001000000000100
01000010000000001000
10001000000000000010
00100000010000010000
00100000100000100000
10000100000000000001
00010000001010000000
00010000000101000000




=== State Orbit 13 =====================
size : 4
repr state: 00000000000000001010
lex min decimal: 5
states:
00000000000000001010
00000000000001010000
00000000000000000101
00000000000010100000




=== State Orbit 14 =====================
size : 4
repr state: 01100010100000000000
lex min decimal: 398336
states:
01100001010000000000
10010100000100000000
10011000001000000000
01100010100000000000




=== State Orbit 15 =====================
size : 4
repr state: 01100001100000000000
lex min decimal: 399360
states:
10010100001000000000
01100010010000000000
10011000000100000000
01100001100000000000




=== State Orbit 16 =====================
size : 8
repr state: 01000001000010000000
lex min decimal: 65800
states:
10001000000000010000
00010000001000000100
00010000000100001000
00100000100000000001
10000100000000100000
01000001000010000000
01000010000001000000
00100000010000000010




=== State Orbit 17 =====================
size : 4
repr state: 00000000000010010000
lex min decimal: 6
states:
00000000000000001001
00000000000010010000
00000000000001100000
00000000000000000110




=== State Orbit 18 =====================
size : 4
repr state: 00000000000010000001
lex min decimal: 24
states:
00000000000000100100
00000000000001000010
00000000000010000001
00000000000000011000




=== State Orbit 19 =====================
size : 8
repr state: 10001000000000000001
lex min decimal: 65920
states:
10001000000000000001
01000010000000000100
00010000000110000000
00100000010000100000
00100000100000010000
01000001000000001000
00010000001001000000
10000100000000000010




=== State Orbit 20 =====================
size : 4
repr state: 11001001000000000000
lex min decimal: 198144
states:
11000110000000000000
00110000100100000000
11001001000000000000
00110000011000000000




=== State Orbit 21 =====================
size : 4
repr state: 11000101000000000000
lex min decimal: 197888
states:
00110000010100000000
11000101000000000000
00110000101000000000
11001010000000000000



[QRM NOTE]: Time elapsed since start: 8.655 seconds

[QRM NOTE]: Time elapsed since last: 0.179 seconds

[QRM NOTE]: Peak memory: 1257987 bytes


============================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv: node=2,key=2,value=2]

============================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.831 seconds

[QRM NOTE]: Time elapsed since last: 0.175 seconds

[QRM NOTE]: Peak memory: 282494 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=2,key=1,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=3]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 14

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 12

[FW NOTE]: number of branching actions: 24

ivy_to_cpp target=qrm sharded_kv.node_2_key_1_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_2_key_1_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_2_key_1_value_3.finite.cpp sharded_kv.node_2_key_1_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_2_key_1_value_3.finite.o sharded_kv.node_2_key_1_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.266 seconds

[QRM NOTE]: Time elapsed since last: 7.266 seconds

[QRM NOTE]: Peak memory: 1183006 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        15

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 11


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=3]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1']
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
representative states : 0, 4096, 4160, 1


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000
lex min decimal: 0
states:
00000000000000




=== State Orbit 1 =====================
size : 2
repr state: 01000000000000
lex min decimal: 4096
states:
01000000000000
10000000000000




=== State Orbit 2 =====================
size : 6
repr state: 01000100000000
lex min decimal: 4160
states:
10010000000000
10100000000000
01000100000000
10001000000000
01000010000000
01000001000000




=== State Orbit 3 =====================
size : 6
repr state: 00000000100000
lex min decimal: 1
states:
00000000001000
00000000010000
00000000100000
00000000000001
00000000000010
00000000000100



[QRM NOTE]: Time elapsed since start: 7.385 seconds

[QRM NOTE]: Time elapsed since last: 0.119 seconds

[QRM NOTE]: Peak memory: 1213450 bytes


============================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=3]

============================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.536 seconds

[QRM NOTE]: Time elapsed since last: 0.151 seconds

[QRM NOTE]: Peak memory: 258480 bytes

next size: node=3,key=1,value=2


****************************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2

****************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=3,key=1,value=2 -f 1 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.027 seconds

[QRM NOTE]: Time elapsed since last: 0.027 seconds

[QRM NOTE]: Peak memory: 4828 bytes


=======================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

=======================================================================================================


==================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

==================================================================================================


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 2
0 (*) : --1----------1-
0     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
1     : -1---------1---
1     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
2     : 1--------1-----
2     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
3     : --1-----------1
3     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
4     : -1----------1--
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1---------1----
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6 (*) : -1-----------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
7     : --1--------1---
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
8     : 1------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
9     : --1------1-----
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
10     : 1----------1---
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
11     : -1-------1-----
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
12     : -1------------1
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
13     : --1---------1--
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
14     : 1-------------1
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
15     : --1-------1----
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
16     : 1-----------1--
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
17     : -1--------1----
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 4
18 (*) : ------1------1-
18     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
19     : --------1--1---
19     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value0)']
20     : ----1--------1-
20     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
21     : --------11-----
21     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value0)']
22     : ----1------1---
22     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
23     : ------1--1-----
23     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)']
24     : -----1--------1
24     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
25     : -------1----1--
25     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value1)']
26     : ---1----------1
26     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
27     : -------1--1----
27     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value1)']
28     : ---1--------1--
28     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : -----1----1----
29     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value1)']
30 (*) : ---1---------1-
30     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
31     : ---1-------1---
31     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
32     : -----1-------1-
32     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
33     : -----1---1-----
33     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)']
34     : -------1---1---
34     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value0)']
35     : -------1-1-----
35     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value0)']
36     : ----1---------1
36     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
37     : ----1-------1--
37     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
38     : ------1-------1
38     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
39     : ------1---1----
39     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value1)']
40     : --------1---1--
40     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value1)']
41     : --------1-1----
41     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value1)']
42 (*) : -------1-----1-
42     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value0)']
43     : -----1-----1---
43     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value0)']
44     : ---1-----1-----
44     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
45     : --------1-----1
45     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value1)']
46     : ------1-----1--
46     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value1)']
47     : ----1-----1----
47     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value1)']
48 (*) : --------1----1-
48     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value0)']
49     : ------1----1---
49     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value0)']
50     : ----1----1-----
50     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)']
51     : -------1------1
51     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
52     : -----1------1--
52     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
53     : ---1------1----
53     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 15
num_suborbits: 3
54 (*) : ---------1---1-
54     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
55     : ---------1-1---
55     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
56     : -----------1-1-
56     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
57     : ----------1---1
57     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
58     : ----------1-1--
58     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
59     : ------------1-1
59     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
60 (*) : ----------1--1-
60     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
61     : ----------11---
61     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
62     : ------------11-
62     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
63     : ---------1--1--
63     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
64     : -----------1--1
64     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
65     : ---------1----1
65     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
102 (*) : ---------11----
102     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
103     : -----------11--
103     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
104     : -------------11
104     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
66 (*) : -11------------
66     : ['owner(node1,key0)', 'owner(node2,key0)']
67     : 1-1------------
67     : ['owner(node0,key0)', 'owner(node2,key0)']
68     : 11-------------
68     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 6
num_suborbits: 1
69 (*) : -0----1--------
69     : ['table(node1,key0,value1)', '~owner(node1,key0)']
70     : --0-----1------
70     : ['table(node2,key0,value1)', '~owner(node2,key0)']
71     : 0---1----------
71     : ['table(node0,key0,value1)', '~owner(node0,key0)']
72     : -0---1---------
72     : ['table(node1,key0,value0)', '~owner(node1,key0)']
73     : --0----1-------
73     : ['table(node2,key0,value0)', '~owner(node2,key0)']
74     : 0--1-----------
74     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
75 (*) : --1---1--------
75     : ['owner(node2,key0)', 'table(node1,key0,value1)']
76     : -1------1------
76     : ['owner(node1,key0)', 'table(node2,key0,value1)']
77     : --1-1----------
77     : ['owner(node2,key0)', 'table(node0,key0,value1)']
78     : 1-------1------
78     : ['owner(node0,key0)', 'table(node2,key0,value1)']
79     : -1--1----------
79     : ['owner(node1,key0)', 'table(node0,key0,value1)']
80     : 1-----1--------
80     : ['owner(node0,key0)', 'table(node1,key0,value1)']
81     : --1--1---------
81     : ['owner(node2,key0)', 'table(node1,key0,value0)']
82     : -1-----1-------
82     : ['owner(node1,key0)', 'table(node2,key0,value0)']
83     : --11-----------
83     : ['owner(node2,key0)', 'table(node0,key0,value0)']
84     : 1------1-------
84     : ['owner(node0,key0)', 'table(node2,key0,value0)']
85     : -1-1-----------
85     : ['owner(node1,key0)', 'table(node0,key0,value0)']
86     : 1----1---------
86     : ['owner(node0,key0)', 'table(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 15
num_suborbits: 3
87 (*) : ---1--1--------
87     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
88     : ---1----1------
88     : ['table(node0,key0,value0)', 'table(node2,key0,value1)']
89     : ----11---------
89     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
90     : -----1--1------
90     : ['table(node1,key0,value0)', 'table(node2,key0,value1)']
91     : ----1--1-------
91     : ['table(node0,key0,value1)', 'table(node2,key0,value0)']
92     : ------11-------
92     : ['table(node1,key0,value1)', 'table(node2,key0,value0)']
93 (*) : ---11----------
93     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
94     : -----11--------
94     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
95     : -------11------
95     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
96 (*) : ----1-1--------
96     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
97     : ----1---1------
97     : ['table(node0,key0,value1)', 'table(node2,key0,value1)']
98     : ------1-1------
98     : ['table(node1,key0,value1)', 'table(node2,key0,value1)']
99     : ---1-1---------
99     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
100     : ---1---1-------
100     : ['table(node0,key0,value0)', 'table(node2,key0,value0)']
101     : -----1-1-------
101     : ['table(node1,key0,value0)', 'table(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 7

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 105

[QRM NOTE]: Time elapsed since start: 0.059 seconds

[QRM NOTE]: Time elapsed since last: 0.032 seconds

[QRM NOTE]: Peak memory: 1196193 bytes


============================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

============================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6]
 solution : []

Essensial at level 0 : {0, 2, 3, 4, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1)]

Covered at level 0 : {1, 5}

After reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]

[QRM NOTE]: Time elapsed since start: 0.062 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 146820 bytes


================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 2
0 (*) : --1----------1-
0     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
1     : -1---------1---
1     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
2     : 1--------1-----
2     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
3     : --1-----------1
3     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
4     : -1----------1--
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1---------1----
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6 (*) : -1-----------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
7     : --1--------1---
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
8     : 1------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
9     : --1------1-----
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
10     : 1----------1---
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
11     : -1-------1-----
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
12     : -1------------1
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
13     : --1---------1--
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
14     : 1-------------1
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
15     : --1-------1----
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
16     : 1-----------1--
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
17     : -1--------1----
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']

sign_func_name2args: {'0$owner': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0], 'node$0$transfer_msg$0': [node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0': node$0$owner$0$0, 'node$0$transfer_msg$0': node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)', 'transfer_msg(NODE1,KEY0,VALUE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')[]

sort partition signature: key$0$owner$1$0; key$0$transfer_msg$1$0

class signature: key$0$owner$1$0; key$0$transfer_msg$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$owner$0$0; node$0$transfer_msg$0$0

class signature: node$0$owner$0$0; node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')[]

sort partition signature: key$0$owner$1$0; key$0$transfer_msg$1$0

class signature: key$0$owner$1$0; key$0$transfer_msg$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$owner$0$0 | node$0$transfer_msg$0$0

class signature: node$0$owner$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')[]

sort partition signature: key$0$owner$1$0; key$0$transfer_msg$1$0

class signature: key$0$owner$1$0; key$0$transfer_msg$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$owner$0$0; node$0$transfer_msg$0$0

class signature: node$0$owner$0$0; node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')[]

sort partition signature: key$0$owner$1$0; key$0$transfer_msg$1$0

class signature: key$0$owner$1$0; key$0$transfer_msg$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$owner$0$0 | node$0$transfer_msg$0$0

class signature: node$0$owner$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,NODE0,NODE1,VALUE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0)


=== Prime Orbit 2 =====================
size : 15
num_suborbits: 3
54 (*) : ---------1---1-
54     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
55     : ---------1-1---
55     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
56     : -----------1-1-
56     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
57     : ----------1---1
57     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
58     : ----------1-1--
58     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
59     : ------------1-1
59     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
60 (*) : ----------1--1-
60     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
61     : ----------11---
61     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
62     : ------------11-
62     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
63     : ---------1--1--
63     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
64     : -----------1--1
64     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
65     : ---------1----1
65     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
102 (*) : ---------11----
102     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
103     : -----------11--
103     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
104     : -------------11
104     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE1,KEY0,VALUE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')[]

sort partition signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1

class signature: key$0$transfer_msg$1$0; key$0$transfer_msg$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')[]

sort partition signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')[]

sort partition signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')[]

sort partition signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1

class signature: node$0$transfer_msg$0$0; node$0$transfer_msg$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1

class signature: value$0$transfer_msg$2$0; value$0$transfer_msg$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE0,KEY0,NODE1,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1)


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
66 (*) : -11------------
66     : ['owner(node1,key0)', 'owner(node2,key0)']
67     : 1-1------------
67     : ['owner(node0,key0)', 'owner(node2,key0)']
68     : 11-------------
68     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'owner(node2,key0)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',)))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$owner$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$1]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$owner$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$1': Const('key0', EnumeratedSort('key', ('key0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

part_sig: ('key$0$owner$1$0; key$0$owner$1$1', 'node$0$owner$0$0 | node$0$owner$0$1')


---------- SigGenerator ----------

terms:  ['owner(node1,key0)', 'owner(node2,key0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)))}

sign_func_name2count:  {'0$owner': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$owner$1': [key$0$owner$1$0; key$0$owner$1$1]}

	identical_single_classes: {'key$0$owner$1; key$0$owner$1': key$0$owner$1$0; key$0$owner$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE1,KEY0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,NODE0,NODE1. ~owner(NODE1,KEY0) | ~owner(NODE0,KEY0) | NODE0 = NODE1


=== Prime Orbit 4 =====================
size : 6
num_suborbits: 1
69 (*) : -0----1--------
69     : ['table(node1,key0,value1)', '~owner(node1,key0)']
70     : --0-----1------
70     : ['table(node2,key0,value1)', '~owner(node2,key0)']
71     : 0---1----------
71     : ['table(node0,key0,value1)', '~owner(node0,key0)']
72     : -0---1---------
72     : ['table(node1,key0,value0)', '~owner(node1,key0)']
73     : --0----1-------
73     : ['table(node2,key0,value0)', '~owner(node2,key0)']
74     : 0--1-----------
74     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node1,key0)', 'table(node1,key0,value1)']

sign_func_name2args: {'1$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node1,key0)', 'table(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~owner(NODE0,KEY0)', 'table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,NODE0,VALUE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)


=== Prime Orbit 6 =====================
size : 15
num_suborbits: 3
87 (*) : ---1--1--------
87     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
88     : ---1----1------
88     : ['table(node0,key0,value0)', 'table(node2,key0,value1)']
89     : ----11---------
89     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
90     : -----1--1------
90     : ['table(node1,key0,value0)', 'table(node2,key0,value1)']
91     : ----1--1-------
91     : ['table(node0,key0,value1)', 'table(node2,key0,value0)']
92     : ------11-------
92     : ['table(node1,key0,value1)', 'table(node2,key0,value0)']
93 (*) : ---11----------
93     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
94     : -----11--------
94     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
95     : -------11------
95     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
96 (*) : ----1-1--------
96     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
97     : ----1---1------
97     : ['table(node0,key0,value1)', 'table(node2,key0,value1)']
98     : ------1-1------
98     : ['table(node1,key0,value1)', 'table(node2,key0,value1)']
99     : ---1-1---------
99     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
100     : ---1---1-------
100     : ['table(node0,key0,value0)', 'table(node2,key0,value0)']
101     : -----1-1-------
101     : ['table(node1,key0,value0)', 'table(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node1,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node0,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$0, node$0$table$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value1)', 'table(node1,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0, value$0$table$2$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0; value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0; value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')


---------- SigGenerator ----------

terms:  ['table(node0,key0,value0)', 'table(node1,key0,value1)']

func_name2symbol:  {'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'table': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$table': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

	sort: node

	identical_classes: {'node$0$table$0': [node$0$table$0$0, node$0$table$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$table$0': [node$0$table$0$0, node$0$table$0$1]}

	sort: key

	identical_classes: {'key$0$table$1; key$0$table$1': [key$0$table$1$0; key$0$table$1$1]}

	identical_single_classes: {'key$0$table$1; key$0$table$1': key$0$table$1$0; key$0$table$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)', 'table(NODE1,KEY0,VALUE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0 | node$0$table$0$1

class signature: node$0$table$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$table$2$0 | value$0$table$2$1

class signature: value$0$table$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0; node$0$table$0$1

class signature: node$0$table$0$0; node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$table$2$0 | value$0$table$2$1

class signature: value$0$table$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0 | node$0$table$0$1

class signature: node$0$table$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$table$2$0; value$0$table$2$1

class signature: value$0$table$2$0; value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0 | node$0$table$0$1

class signature: node$0$table$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$table$2$0 | value$0$table$2$1

class signature: value$0$table$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0; node$0$table$0$1

class signature: node$0$table$0$0; node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$table$2$0 | value$0$table$2$1

class signature: value$0$table$2$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')[]

sort partition signature: key$0$table$1$0; key$0$table$1$1

class signature: key$0$table$1$0; key$0$table$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['KEY0:key']

eq_terms: []

sort partition signature: node$0$table$0$0 | node$0$table$0$1

class signature: node$0$table$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$table$2$0; value$0$table$2$1

class signature: value$0$table$2$0; value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')[]

sort partition signature: node$0$table$0$0; node$0$table$0$1

class signature: node$0$table$0$0; node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$table$2$0; value$0$table$2$1

class signature: value$0$table$2$0; value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')[]

sort partition signature: node$0$table$0$0; node$0$table$0$1

class signature: node$0$table$0$0; node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$table$2$0; value$0$table$2$1

class signature: value$0$table$2$0; value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')[]

sort partition signature: node$0$table$0$0; node$0$table$0$1

class signature: node$0$table$0$0; node$0$table$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$table$2$0; value$0$table$2$1

class signature: value$0$table$2$0; value$0$table$2$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value = VALUE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'VALUE0:value = VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE0,KEY0,NODE1,VALUE0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1)


==========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 2
0 (*) : --1----------1-
0     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
1     : -1---------1---
1     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
2     : 1--------1-----
2     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
3     : --1-----------1
3     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
4     : -1----------1--
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1---------1----
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6 (*) : -1-----------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
7     : --1--------1---
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
8     : 1------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
9     : --1------1-----
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
10     : 1----------1---
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
11     : -1-------1-----
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
12     : -1------------1
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
13     : --1---------1--
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
14     : 1-------------1
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
15     : --1-------1----
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
16     : 1-----------1--
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
17     : -1--------1----
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
num_forall :   4
num_exists :   0
num_literals : 2
quantified form : forall KEY0,NODE0,NODE1,VALUE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0)
qcost : 6




=== Prime Orbit 2 =====================
size : 15
num_suborbits: 3
54 (*) : ---------1---1-
54     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
55     : ---------1-1---
55     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
56     : -----------1-1-
56     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
57     : ----------1---1
57     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
58     : ----------1-1--
58     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
59     : ------------1-1
59     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
60 (*) : ----------1--1-
60     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
61     : ----------11---
61     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
62     : ------------11-
62     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
63     : ---------1--1--
63     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
64     : -----------1--1
64     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
65     : ---------1----1
65     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
102 (*) : ---------11----
102     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
103     : -----------11--
103     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
104     : -------------11
104     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall VALUE1,NODE0,KEY0,NODE1,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
66 (*) : -11------------
66     : ['owner(node1,key0)', 'owner(node2,key0)']
67     : 1-1------------
67     : ['owner(node0,key0)', 'owner(node2,key0)']
68     : 11-------------
68     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall KEY0,NODE0,NODE1. ~owner(NODE1,KEY0) | ~owner(NODE0,KEY0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 4 =====================
size : 6
num_suborbits: 1
69 (*) : -0----1--------
69     : ['table(node1,key0,value1)', '~owner(node1,key0)']
70     : --0-----1------
70     : ['table(node2,key0,value1)', '~owner(node2,key0)']
71     : 0---1----------
71     : ['table(node0,key0,value1)', '~owner(node0,key0)']
72     : -0---1---------
72     : ['table(node1,key0,value0)', '~owner(node1,key0)']
73     : --0----1-------
73     : ['table(node2,key0,value0)', '~owner(node2,key0)']
74     : 0--1-----------
74     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall KEY0,NODE0,VALUE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)
qcost : 5




=== Prime Orbit 6 =====================
size : 15
num_suborbits: 3
87 (*) : ---1--1--------
87     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
88     : ---1----1------
88     : ['table(node0,key0,value0)', 'table(node2,key0,value1)']
89     : ----11---------
89     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
90     : -----1--1------
90     : ['table(node1,key0,value0)', 'table(node2,key0,value1)']
91     : ----1--1-------
91     : ['table(node0,key0,value1)', 'table(node2,key0,value0)']
92     : ------11-------
92     : ['table(node1,key0,value1)', 'table(node2,key0,value0)']
93 (*) : ---11----------
93     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
94     : -----11--------
94     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
95     : -------11------
95     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
96 (*) : ----1-1--------
96     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
97     : ----1---1------
97     : ['table(node0,key0,value1)', 'table(node2,key0,value1)']
98     : ------1-1------
98     : ['table(node1,key0,value1)', 'table(node2,key0,value1)']
99     : ---1-1---------
99     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
100     : ---1---1-------
100     : ['table(node0,key0,value0)', 'table(node2,key0,value0)']
101     : -----1-1-------
101     : ['table(node1,key0,value0)', 'table(node2,key0,value0)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall VALUE1,NODE0,KEY0,NODE1,VALUE0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1)
qcost : 9



[QRM NOTE]: Time elapsed since start: 0.259 seconds

[QRM NOTE]: Time elapsed since last: 0.197 seconds

[QRM NOTE]: Peak memory: 1912496 bytes


=========================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

=========================================================================================


New level: 1
 pending : []
 solution : [0, 2, 3, 4, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]


Solution : [0, 2, 3, 4, 6] has cost 35.


Before backtrack at level 1
 pending : []
 solution : [0, 2, 3, 4, 6]

After backtrack at level 1
 pending : []
 solution : [0, 2, 3, 4, 6]


========================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

========================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 35

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 2, 3, 4, 6] (length = 5)

invariant [invar_0] forall KEY0,NODE0,NODE1,VALUE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0) # qcost: 6

invariant [invar_2] forall VALUE1,NODE0,KEY0,NODE1,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1) # qcost: 9

invariant [invar_3] forall KEY0,NODE0,NODE1. ~owner(NODE1,KEY0) | ~owner(NODE0,KEY0) | NODE0 = NODE1 # qcost: 6

invariant [invar_4] forall KEY0,NODE0,VALUE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0) # qcost: 5

invariant [invar_6] forall VALUE1,NODE0,KEY0,NODE1,VALUE0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1) # qcost: 9




[QRM NOTE]: Time elapsed since start: 0.325 seconds

[QRM NOTE]: Time elapsed since last: 0.066 seconds

[QRM NOTE]: Peak memory: 1857718 bytes


============================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

============================================================================================

ivy_check complete=fo ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_4
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6

    The following action implementations are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 34: implementation of put
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 26: implementation of recv_transfer_msg
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 18: implementation of reshard

    The following initializers are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 11: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:put
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS
        (internal) ext:recv_transfer_msg
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS
        (internal) ext:reshard
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS

    The following program assertions are treated as assumptions:
        in action reshard when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 19: assumption
        in action recv_transfer_msg when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 27: assumption
        in action put when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 35: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall VALUE1,NODE0,KEY0,NODE1,VALUE0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1)))

[QRM NOTE]: Time elapsed since start: 2.234 seconds

[QRM NOTE]: Time elapsed since last: 1.909 seconds

[QRM NOTE]: Peak memory: 858923 bytes


*******************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2

*******************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy -s node=4,key=1,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=4,key=1,value=2]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 20

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 48

[FW NOTE]: number of branching actions: 48

ivy_to_cpp target=qrm sharded_kv.node_4_key_1_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_4_key_1_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_4_key_1_value_2.finite.cpp sharded_kv.node_4_key_1_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_4_key_1_value_2.finite.o sharded_kv.node_4_key_1_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.362 seconds

[QRM NOTE]: Time elapsed since last: 7.362 seconds

[QRM NOTE]: Peak memory: 1187818 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        21

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 17


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=4,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1', 'node2', 'node3']
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'owner(node3,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node3,key0,value0)', 'table(node3,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node3,key0,value0)', 'transfer_msg(node3,key0,value1)']
representative states : 0, 65536, 65792, 1


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000000000
lex min decimal: 0
states:
00000000000000000000




=== State Orbit 1 =====================
size : 4
repr state: 00010000000000000000
lex min decimal: 65536
states:
00100000000000000000
10000000000000000000
01000000000000000000
00010000000000000000




=== State Orbit 2 =====================
size : 8
repr state: 00010000001000000000
lex min decimal: 65792
states:
00010000000100000000
00100000100000000000
10000100000000000000
00100000010000000000
01000010000000000000
01000001000000000000
00010000001000000000
10001000000000000000




=== State Orbit 3 =====================
size : 8
repr state: 00000000000010000000
lex min decimal: 1
states:
00000000000000000010
00000000000000010000
00000000000001000000
00000000000000000001
00000000000000000100
00000000000000100000
00000000000010000000
00000000000000001000



[QRM NOTE]: Time elapsed since start: 7.506 seconds

[QRM NOTE]: Time elapsed since last: 0.145 seconds

[QRM NOTE]: Peak memory: 1221740 bytes


============================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv: node=4,key=1,value=2]

============================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.810 seconds

[QRM NOTE]: Time elapsed since last: 0.304 seconds

[QRM NOTE]: Peak memory: 396575 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy -s node=3,key=2,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=2,value=2]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 30

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 24

[FW NOTE]: number of branching actions: 60

ivy_to_cpp target=qrm sharded_kv.node_3_key_2_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_3_key_2_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_3_key_2_value_2.finite.cpp sharded_kv.node_3_key_2_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_3_key_2_value_2.finite.o sharded_kv.node_3_key_2_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.793 seconds

[QRM NOTE]: Time elapsed since last: 7.793 seconds

[QRM NOTE]: Peak memory: 1190741 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 12

[FW NOTE]: number of total reachable states:        256

[FW NOTE]: number of dfs representative states:     22

[FW NOTE]: number of dfs non-representative states: 234


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=2,value=2]

=======================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1', 'node2']
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'owner(node1,key0)', 'owner(node1,key1)', 'owner(node2,key0)', 'owner(node2,key1)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key1,value0)', 'table(node0,key1,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key1,value0)', 'table(node1,key1,value1)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key1,value0)', 'table(node2,key1,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key1,value0)', 'transfer_msg(node0,key1,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key1,value0)', 'transfer_msg(node1,key1,value1)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key1,value0)', 'transfer_msg(node2,key1,value1)']
representative states : 0, 50331648, 16777216, 100663296, 50335744, 16777220, 16781316, 5, 20, 16781376, 100745216, 100761600, 16781440, 6, 16781320, 24, 50356224, 50352128, 16777280, 100679680, 16781312, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000000000
lex min decimal: 0
states:
000000000000000000000000000000




=== State Orbit 1 =====================
size : 3
repr state: 110000000000000000000000000000
lex min decimal: 50331648
states:
110000000000000000000000000000
000011000000000000000000000000
001100000000000000000000000000




=== State Orbit 2 =====================
size : 6
repr state: 100000000000000000000000000000
lex min decimal: 16777216
states:
000001000000000000000000000000
100000000000000000000000000000
001000000000000000000000000000
010000000000000000000000000000
000100000000000000000000000000
000010000000000000000000000000




=== State Orbit 3 =====================
size : 6
repr state: 010010000000000000000000000000
lex min decimal: 100663296
states:
001001000000000000000000000000
100100000000000000000000000000
000110000000000000000000000000
100001000000000000000000000000
010010000000000000000000000000
011000000000000000000000000000




=== State Orbit 4 =====================
size : 12
repr state: 110000100000000000000000000000
lex min decimal: 50335744
states:
000011000000000100000000000000
110000010000000000000000000000
000011000000000001000000000000
001100000000100000000000000000
110000000100000000000000000000
001100000010000000000000000000
001100000001000000000000000000
110000100000000000000000000000
000011000000001000000000000000
110000001000000000000000000000
001100000000010000000000000000
000011000000000010000000000000




=== State Orbit 5 =====================
size : 12
repr state: 010000000000000000100000000000
lex min decimal: 16777220
states:
000001000000000000000000000100
000100000000000000000001000000
001000000000000000000000010000
001000000000000000000000100000
010000000000000000100000000000
000100000000000000000010000000
010000000000000000010000000000
100000000000000000001000000000
000010000000000000000000000010
100000000000000000000100000000
000010000000000000000000000001
000001000000000000000000001000




=== State Orbit 6 =====================
size : 12
repr state: 010000001000000000100000000000
lex min decimal: 16781316
states:
000010000000001000000000000010
010000000100000000010000000000
010000001000000000100000000000
001000000010000000000000100000
001000000001000000000000010000
000010000000000100000000000001
000001000000000001000000000100
000100000000010000000001000000
100000100000000000001000000000
000100000000100000000010000000
000001000000000010000000001000
100000010000000000000100000000




=== State Orbit 7 =====================
size : 6
repr state: 000000000000000000101000000000
lex min decimal: 5
states:
000000000000000000010100000000
000000000000000000000001010000
000000000000000000000010100000
000000000000000000101000000000
000000000000000000000000000101
000000000000000000000000001010




=== State Orbit 8 =====================
size : 12
repr state: 000000000000000000100000100000
lex min decimal: 20
states:
000000000000000000100000000010
000000000000000000000101000000
000000000000000000001000001000
000000000000000000000100000100
000000000000000000000000010100
000000000000000000100000100000
000000000000000000000010000010
000000000000000000001010000000
000000000000000000010000000001
000000000000000000010000010000
000000000000000000000001000001
000000000000000000000000101000




=== State Orbit 9 =====================
size : 24
repr state: 100000100000000000000000100000
lex min decimal: 16781376
states:
100000010000000000000000010000
001000000001000000000000000001
100000010000000000000000000001
100000100000000000000000100000
000010000000000100000100000000
100000100000000000000000000010
000001000000000001000001000000
000001000000000001010000000000
000010000000000100000000010000
000010000000001000001000000000
000100000000010000010000000000
001000000010000000001000000000
000100000000100000100000000000
000001000000000010100000000000
000001000000000010000010000000
010000000100000000000000000100
000100000000100000000000001000
001000000001000000000100000000
000100000000010000000000000100
010000000100000000000001000000
010000001000000000000000001000
010000001000000000000010000000
000010000000001000000000100000
001000000010000000000000000010




=== State Orbit 10 =====================
size : 12
repr state: 100100100000100000000000000000
lex min decimal: 100745216
states:
011000000101000000000000000000
000110000000010100000000000000
100100100000100000000000000000
001001000010000010000000000000
100100010000010000000000000000
000110000000101000000000000000
001001000001000001000000000000
010010000100000100000000000000
011000001010000000000000000000
010010001000001000000000000000
100001010000000001000000000000
100001100000000010000000000000




=== State Orbit 11 =====================
size : 12
repr state: 100100010000100000000000000000
lex min decimal: 100761600
states:
000110000000011000000000000000
010010000100001000000000000000
100100010000100000000000000000
011000001001000000000000000000
000110000000100100000000000000
001001000001000010000000000000
100100100000010000000000000000
100001100000000001000000000000
001001000010000001000000000000
010010001000000100000000000000
100001010000000010000000000000
011000000110000000000000000000




=== State Orbit 12 =====================
size : 24
repr state: 000100000000100000010000000000
lex min decimal: 16781440
states:
000100000000100000010000000000
000010000000001000000000010000
000001000000000001000010000000
000010000000000100001000000000
100000100000000000000000000001
000010000000001000000100000000
010000001000000000000000000100
100000010000000000000000000010
001000000010000000000000000001
000001000000000010000001000000
010000000100000000000010000000
100000010000000000000000100000
000001000000000010010000000000
000001000000000001100000000000
000010000000000100000000100000
010000001000000000000001000000
000100000000010000100000000000
010000000100000000000000001000
001000000010000000000100000000
100000100000000000000000010000
000100000000100000000000000100
001000000001000000001000000000
000100000000010000000000001000
001000000001000000000000000010




=== State Orbit 13 =====================
size : 6
repr state: 000000000000000000011000000000
lex min decimal: 6
states:
000000000000000000100100000000
000000000000000000000000001001
000000000000000000000000000110
000000000000000000000001100000
000000000000000000011000000000
000000000000000000000010010000




=== State Orbit 14 =====================
size : 12
repr state: 100000010000000000001000000000
lex min decimal: 16781320
states:
100000010000000000001000000000
000010000000001000000000000001
100000100000000000000100000000
010000000100000000100000000000
000100000000010000000010000000
000001000000000001000000001000
000100000000100000000001000000
000001000000000010000000000100
001000000010000000000000010000
000010000000000100000000000010
010000001000000000010000000000
001000000001000000000000100000




=== State Orbit 15 =====================
size : 12
repr state: 000000000000000000001001000000
lex min decimal: 24
states:
000000000000000000000100001000
000000000000000000010000100000
000000000000000000001000000100
000000000000000000100000010000
000000000000000000000000011000
000000000000000000000010000001
000000000000000000010000000010
000000000000000000000110000000
000000000000000000100000000001
000000000000000000000000100100
000000000000000000001001000000
000000000000000000000001000010




=== State Orbit 16 =====================
size : 6
repr state: 110000011000000000000000000000
lex min decimal: 50356224
states:
000011000000001001000000000000
000011000000000110000000000000
001100000001100000000000000000
001100000010010000000000000000
110000011000000000000000000000
110000100100000000000000000000




=== State Orbit 17 =====================
size : 6
repr state: 110000101000000000000000000000
lex min decimal: 50352128
states:
000011000000000101000000000000
110000101000000000000000000000
001100000001010000000000000000
001100000010100000000000000000
000011000000001010000000000000
110000010100000000000000000000




=== State Orbit 18 =====================
size : 24
repr state: 010000000000000000000010000000
lex min decimal: 16777280
states:
010000000000000000000001000000
001000000000000000000000000001
100000000000000000000000100000
000010000000000000000000100000
000001000000000000000001000000
001000000000000000000000000010
100000000000000000000000000010
000010000000000000000000010000
000100000000000000000000001000
000001000000000000010000000000
000100000000000000010000000000
000100000000000000100000000000
001000000000000000000100000000
001000000000000000001000000000
000100000000000000000000000100
000001000000000000100000000000
000010000000000000000100000000
010000000000000000000000000100
010000000000000000000010000000
010000000000000000000000001000
000001000000000000000010000000
100000000000000000000000010000
000010000000000000001000000000
100000000000000000000000000001




=== State Orbit 19 =====================
size : 24
repr state: 011000000010000000000000000000
lex min decimal: 100679680
states:
100001000000000010000000000000
100001000000000001000000000000
001001000000000001000000000000
001001000010000000000000000000
000110000000100000000000000000
010010000000001000000000000000
100100000000100000000000000000
010010001000000000000000000000
010010000000000100000000000000
100001010000000000000000000000
100100000000010000000000000000
010010000100000000000000000000
000110000000000100000000000000
001001000000000010000000000000
011000000001000000000000000000
100100010000000000000000000000
100100100000000000000000000000
000110000000010000000000000000
000110000000001000000000000000
011000001000000000000000000000
011000000100000000000000000000
001001000001000000000000000000
100001100000000000000000000000
011000000010000000000000000000




=== State Orbit 20 =====================
size : 12
repr state: 100000100000000000000000000000
lex min decimal: 16781312
states:
010000000100000000000000000000
010000001000000000000000000000
000100000000100000000000000000
000001000000000001000000000000
001000000010000000000000000000
001000000001000000000000000000
000100000000010000000000000000
100000100000000000000000000000
000001000000000010000000000000
100000010000000000000000000000
000010000000000100000000000000
000010000000001000000000000000




=== State Orbit 21 =====================
size : 12
repr state: 000000000000000000100000000000
lex min decimal: 1
states:
000000000000000000010000000000
000000000000000000000000000010
000000000000000000000010000000
000000000000000000001000000000
000000000000000000000100000000
000000000000000000000000010000
000000000000000000000000001000
000000000000000000000000100000
000000000000000000000000000100
000000000000000000100000000000
000000000000000000000001000000
000000000000000000000000000001



[QRM NOTE]: Time elapsed since start: 8.193 seconds

[QRM NOTE]: Time elapsed since last: 0.399 seconds

[QRM NOTE]: Peak memory: 1300080 bytes


============================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv: node=3,key=2,value=2]

============================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.684 seconds

[QRM NOTE]: Time elapsed since last: 0.492 seconds

[QRM NOTE]: Peak memory: 481849 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy -s node=3,key=1,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=3]

================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 21

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 45

ivy_to_cpp target=qrm sharded_kv.node_3_key_1_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_3_key_1_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_3_key_1_value_3.finite.cpp sharded_kv.node_3_key_1_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_3_key_1_value_3.finite.o sharded_kv.node_3_key_1_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.764 seconds

[QRM NOTE]: Time elapsed since last: 7.764 seconds

[QRM NOTE]: Peak memory: 1187461 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        22

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 18


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=3]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1', 'node2']
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
representative states : 0, 262144, 262656, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000
lex min decimal: 0
states:
000000000000000000000




=== State Orbit 1 =====================
size : 3
repr state: 100000000000000000000
lex min decimal: 262144
states:
001000000000000000000
010000000000000000000
100000000000000000000




=== State Orbit 2 =====================
size : 9
repr state: 100100000000000000000
lex min decimal: 262656
states:
100001000000000000000
001000000100000000000
100100000000000000000
010000001000000000000
010000010000000000000
010000100000000000000
100010000000000000000
001000000001000000000
001000000010000000000




=== State Orbit 3 =====================
size : 9
repr state: 000000000000100000000
lex min decimal: 1
states:
000000000000000000100
000000000000000010000
000000000000100000000
000000000000000000001
000000000000000000010
000000000000000100000
000000000000010000000
000000000000000001000
000000000000001000000



[QRM NOTE]: Time elapsed since start: 7.903 seconds

[QRM NOTE]: Time elapsed since last: 0.139 seconds

[QRM NOTE]: Peak memory: 1221776 bytes


============================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=3]

============================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.279 seconds

[QRM NOTE]: Time elapsed since last: 0.377 seconds

[QRM NOTE]: Peak memory: 438549 bytes

ivy_check complete=fo ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_4
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6

    The following action implementations are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 34: implementation of put
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 26: implementation of recv_transfer_msg
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 18: implementation of reshard

    The following initializers are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 11: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:put
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS
        (internal) ext:recv_transfer_msg
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS
        (internal) ext:reshard
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_4 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS

    The following program assertions are treated as assumptions:
        in action reshard when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 19: assumption
        in action recv_transfer_msg when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 27: assumption
        in action put when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 35: assumption

OK
[IVY_CHECK RESULT]: PASS


**********************************************************

	[QRM]: ivybench/sym/ivy/sharded_kv.ivy

**********************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy']

[CUTOFF]: node=3,key=1,value=2

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 140.374 seconds

[QRM NOTE]: Time elapsed since last: 140.374 seconds

