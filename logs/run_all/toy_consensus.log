
********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************


********************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1

********************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.ivy -s node=2,value=1 -f 1 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_2_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_2_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_2_value_1.finite.cpp toy_consensus.node_2_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_2_value_1.finite.o toy_consensus.node_2_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: number of branching actions: 3

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.484 seconds

[QRM NOTE]: Time elapsed since last: 6.484 seconds

[QRM NOTE]: Peak memory: 1176567 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 3

[FW NOTE]: number of total reachable states:        5

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 1


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

===========================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0']
sort: quorum=['quorum__node0_node1']
predicate: decision('value',)
predicate: didNotVote('node',)
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)', 'vote(node0,value0)', 'vote(node1,value0)']
representative states : 51, 27, 143, 207


=== State Orbit 0 =====================
size : 1
repr state: 001100
lex min decimal: 51
states:
001100




=== State Orbit 1 =====================
size : 2
repr state: 000110
lex min decimal: 27
states:
000110
001001




=== State Orbit 2 =====================
size : 1
repr state: 100011
lex min decimal: 143
states:
100011




=== State Orbit 3 =====================
size : 1
repr state: 110011
lex min decimal: 207
states:
110011



[QRM NOTE]: Time elapsed since start: 6.565 seconds

[QRM NOTE]: Time elapsed since last: 0.081 seconds

[QRM NOTE]: Peak memory: 1204173 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.569 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 153786 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

======================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : --0-0-
0     : ['~didNotVote(node0)', '~vote(node0,value0)']
1     : ---0-0
1     : ['~didNotVote(node1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-1--
2     : ['decision(value0)', 'didNotVote(node1)']
3     : -11---
3     : ['decision(value0)', 'didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01----
4     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : -1--0-
5     : ['decision(value0)', '~vote(node0,value0)']
6     : -1---0
6     : ['decision(value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1-1---
7     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
8     : 1--1--
8     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
9 (*) : 1---0-
9     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
10     : 1----0
10     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : --1-1-
11     : ['didNotVote(node0)', 'vote(node0,value0)']
12     : ---1-1
12     : ['didNotVote(node1)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
13 (*) : 0-00--
13     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
14 (*) : 0-0--1
14     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)']
15     : 0--01-
15     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
16 (*) : 0---11
16     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 10

[PRIME NOTE]: number of primes: 17

[QRM NOTE]: Time elapsed since start: 6.581 seconds

[QRM NOTE]: Time elapsed since last: 0.012 seconds

[QRM NOTE]: Peak memory: 1235149 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

================================================================================================

definition primes: {0, 4, 5, 6, 7, 8, 9}


New level: 0
 pending : [1, 2, 3]
 solution : []


Before reduction : 
 pending  : [1, 2, 3]
 solution : []

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3]
 solution : []

[QRM NOTE]: Time elapsed since start: 6.589 seconds

[QRM NOTE]: Time elapsed since last: 0.008 seconds

[QRM NOTE]: Peak memory: 190030 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-1--
2     : ['decision(value0)', 'didNotVote(node1)']
3     : -11---
3     : ['decision(value0)', 'didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'didNotVote(node1)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$didNotVote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$0$didNotVote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1')): node$0$didNotVote$0$0}

part_sig: ('node$0$didNotVote$0$0', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value0)', 'didNotVote(node1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0',)),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$0$didNotVote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1')): node$0$didNotVote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. ~decision(VALUE0) | ~didNotVote(NODE0)


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01----
4     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', 'decision(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$chosenAt$1$0, value$0$decision$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$chosenAt$1$0}

part_sig: ('quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', 'decision(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',))), 'decision': (EnumeratedSort('value', ('value0',)),)}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$chosenAt$1$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0]}

	identical_single_classes: {'quorum$1$chosenAt$0': quorum$1$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : -1--0-
5     : ['decision(value0)', '~vote(node0,value0)']
6     : -1---0
6     : ['decision(value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', '~vote(node0,value0)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

part_sig: ('node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value0)', '~vote(node0,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0',)),), 'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. ~decision(VALUE0) | vote(NODE0,VALUE0)


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

==============================================================================================================


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-1--
2     : ['decision(value0)', 'didNotVote(node1)']
3     : -11---
3     : ['decision(value0)', 'didNotVote(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. ~decision(VALUE0) | ~didNotVote(NODE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01----
4     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)
qcost : 4




=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : -1--0-
5     : ['decision(value0)', '~vote(node0,value0)']
6     : -1---0
6     : ['decision(value0)', '~vote(node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. ~decision(VALUE0) | vote(NODE0,VALUE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 6.651 seconds

[QRM NOTE]: Time elapsed since last: 0.062 seconds

[QRM NOTE]: Peak memory: 1851909 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

=============================================================================================


New level: 1
 pending : [1, 2, 3]
 solution : []


Before reduction : 
 pending  : [1, 2, 3]
 solution : []

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3]
 solution : []


Solution : [] has cost 0.


Decide in level 1 among pending : [1, 2, 3]

Coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [1, 3]
 solution : [2]


New level: 2
 pending : [1, 3]
 solution : [2]


Before reduction : 
 pending  : [1, 3]
 solution : [2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : {1, 3}

After reduction : 
 pending  : []
 solution : [2]


Before reduction : 
 pending  : []
 solution : [2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [2]


Solution : [2] has cost 4.


Before backtrack at level 2
 pending : []
 solution : [2]

After backtrack at level 2
 pending : [1, 3]
 solution : [2]


Invert decision for 2 at level 1


New level: 2
 pending : [1, 3]
 solution : []


Before reduction : 
 pending  : [1, 3]
 solution : []

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 16), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [1, 3]
 solution : []


Solution : [] has cost 0.


Decide in level 2 among pending : [1, 3]

Coverage : [(0, -1), (1, 16), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Decide 1 with phase True at level 2

After decision at level 2
 pending : [3]
 solution : [1]


New level: 3
 pending : [3]
 solution : [1]


Before reduction : 
 pending  : [3]
 solution : [1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : {3}

After reduction : 
 pending  : []
 solution : [1]


Before reduction : 
 pending  : []
 solution : [1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1]


Solution : [1] has cost 4.


Before backtrack at level 3
 pending : []
 solution : [1]

After backtrack at level 3
 pending : [3]
 solution : [1]


Invert decision for 1 at level 2


New level: 3
 pending : [3]
 solution : []


Before reduction : 
 pending  : [3]
 solution : []

Essensial at level 3 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [3]


Before reduction : 
 pending  : []
 solution : [3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [3]


Solution : [3] has cost 4.


Before backtrack at level 3
 pending : []
 solution : [3]

After backtrack at level 3
 pending : [3]
 solution : []


Before backtrack at level 2
 pending : [3]
 solution : []

After backtrack at level 2
 pending : [3, 1]
 solution : []


Before backtrack at level 1
 pending : [3, 1]
 solution : []

After backtrack at level 1
 pending : [3, 1, 2]
 solution : []


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 3

[MIN NOTE]: total qcost: 4

[MIN NOTE]: maximum branch and bound depth: 3

Definitions (length=2)

invariant [def_didNotVote] didNotVote(N) = forall V. ~vote(N,V) # definition

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [2] (length = 1)

invariant [invar_2] forall VALUE0,QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) # qcost: 4




Solution 1 : [1] (length = 1)

invariant [invar_1] forall VALUE0,NODE0. ~decision(VALUE0) | ~didNotVote(NODE0) # qcost: 4




Solution 2 : [3] (length = 1)

invariant [invar_3] forall VALUE0,NODE0. ~decision(VALUE0) | vote(NODE0,VALUE0) # qcost: 4




[QRM NOTE]: Time elapsed since start: 6.735 seconds

[QRM NOTE]: Time elapsed since last: 0.084 seconds

[QRM NOTE]: Peak memory: 1842475 bytes


================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 44: invar_2

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 44: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 44: invar_2 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 44: invar_2 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 44: invar_1

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 44: invar_1 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 44: invar_1 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 44: invar_1 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 44: invar_3

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 44: invar_3 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 44: invar_3 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 44: invar_3 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 11.928 seconds

[QRM NOTE]: Time elapsed since last: 5.193 seconds

[QRM NOTE]: Peak memory: 844503 bytes


***********************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1

***********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_3_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_1.finite.cpp toy_consensus.node_3_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_1.finite.o toy_consensus.node_3_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 6

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 6.429 seconds

[QRM NOTE]: Time elapsed since last: 6.429 seconds

[QRM NOTE]: Peak memory: 1178074 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        12

[FW NOTE]: number of dfs representative states:     6

[FW NOTE]: number of dfs non-representative states: 6


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: didNotVote('node',)
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: decision('value',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)']
representative states : 29099, 14763, 83883, 462763, 495531, 116651


=== State Orbit 0 =====================
size : 1
repr state: 0000111000
lex min decimal: 29099
states:
0000111000




=== State Orbit 1 =====================
size : 3
repr state: 0000011100
lex min decimal: 14763
states:
0000011100
0000101010
0000110001




=== State Orbit 2 =====================
size : 3
repr state: 1000001110
lex min decimal: 83883
states:
1000001110
0100010101
0010100011




=== State Orbit 3 =====================
size : 1
repr state: 1110000111
lex min decimal: 462763
states:
1110000111




=== State Orbit 4 =====================
size : 1
repr state: 1111000111
lex min decimal: 495531
states:
1111000111




=== State Orbit 5 =====================
size : 3
repr state: 1001001110
lex min decimal: 116651
states:
0101010101
1001001110
0011100011



[QRM NOTE]: Time elapsed since start: 6.511 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 1210233 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

================================================================================================================================

Representatitive states in reachability not in Rmin

{116651}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.593 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 204580 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy -s node=2,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=2]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_2_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_2_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_2_value_2.finite.cpp toy_consensus.node_2_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_2_value_2.finite.o toy_consensus.node_2_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: number of branching actions: 6

[FW NOTE]: symmetric group order: 4

[QRM NOTE]: Time elapsed since start: 6.264 seconds

[QRM NOTE]: Time elapsed since last: 6.264 seconds

[QRM NOTE]: Peak memory: 1178382 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 3

[FW NOTE]: number of total reachable states:        11

[FW NOTE]: number of dfs representative states:     5

[FW NOTE]: number of dfs non-representative states: 6


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=2]

===========================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1']
predicate: decision('value',)
predicate: chosenAt('quorum', 'value')
predicate: didNotVote('node',)
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'decision(value0)', 'decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)']
representative states : 195, 83, 1047, 1303, 27


=== State Orbit 0 =====================
size : 1
repr state: 0000110000
lex min decimal: 195
states:
0000110000




=== State Orbit 1 =====================
size : 4
repr state: 0000011000
lex min decimal: 83
states:
0000011000
0000010100
0000100001
0000100010




=== State Orbit 2 =====================
size : 2
repr state: 1000001010
lex min decimal: 1047
states:
0100000101
1000001010




=== State Orbit 3 =====================
size : 2
repr state: 1010001010
lex min decimal: 1303
states:
0101000101
1010001010




=== State Orbit 4 =====================
size : 2
repr state: 0000001001
lex min decimal: 27
states:
0000000110
0000001001



[QRM NOTE]: Time elapsed since start: 6.351 seconds

[QRM NOTE]: Time elapsed since last: 0.087 seconds

[QRM NOTE]: Peak memory: 1208427 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=2]

================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 3903, binary: 1111001111

Found a representative state in Rmin not in reachability: decimal: 3391, binary: 1101001111

Found a representative state in Rmin not in reachability: decimal: 3135, binary: 1100001111

Found a representative state in Rmin not in reachability: decimal: 1055, binary: 0100000111

Found a representative state in Rmin not in reachability: decimal: 1311, binary: 0101000111

Found a representative state in Rmin not in reachability: decimal: 115, binary: 0000011100

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.384 seconds

[QRM NOTE]: Time elapsed since last: 0.034 seconds

[QRM NOTE]: Peak memory: 175444 bytes

next size: node=3,value=2


***********************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1

***********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy -s node=3,value=1 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

================================================================================================================================

Representatitive states in reachability not in Rmin

{116651}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.094 seconds

[QRM NOTE]: Time elapsed since last: 0.094 seconds

[QRM NOTE]: Peak memory: 48411 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy -s node=2,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=2]

================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 3903, binary: 1111001111

Found a representative state in Rmin not in reachability: decimal: 3391, binary: 1101001111

Found a representative state in Rmin not in reachability: decimal: 3135, binary: 1100001111

Found a representative state in Rmin not in reachability: decimal: 1055, binary: 0100000111

Found a representative state in Rmin not in reachability: decimal: 1823, binary: 0111000111

Found a representative state in Rmin not in reachability: decimal: 1311, binary: 0101000111

Found a representative state in Rmin not in reachability: decimal: 1567, binary: 0110000111

Found a representative state in Rmin not in reachability: decimal: 1815, binary: 0111000101

Found a representative state in Rmin not in reachability: decimal: 1559, binary: 0110000101

Found a representative state in Rmin not in reachability: decimal: 283, binary: 0001000110

Found a representative state in Rmin not in reachability: decimal: 795, binary: 0011000110

Found a representative state in Rmin not in reachability: decimal: 115, binary: 0000011100

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.060 seconds

[QRM NOTE]: Time elapsed since last: 0.060 seconds

[QRM NOTE]: Peak memory: 19964 bytes

next size: node=3,value=2


***********************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1

***********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy -s node=3,value=1 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

================================================================================================================================

Representatitive states in reachability not in Rmin

{116651}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.091 seconds

[QRM NOTE]: Time elapsed since last: 0.091 seconds

[QRM NOTE]: Peak memory: 48411 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy -s node=2,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=2]

================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 3903, binary: 1111001111

Found a representative state in Rmin not in reachability: decimal: 3391, binary: 1101001111

Found a representative state in Rmin not in reachability: decimal: 3135, binary: 1100001111

Found a representative state in Rmin not in reachability: decimal: 1055, binary: 0100000111

Found a representative state in Rmin not in reachability: decimal: 1311, binary: 0101000111

Found a representative state in Rmin not in reachability: decimal: 115, binary: 0000011100

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.055 seconds

[QRM NOTE]: Time elapsed since last: 0.055 seconds

[QRM NOTE]: Peak memory: 19244 bytes

next size: node=3,value=2


********************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2

********************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.ivy -s node=3,value=2 -f 1 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_3_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_2.finite.cpp toy_consensus.node_3_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_2.finite.o toy_consensus.node_3_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 17

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 12

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 6.255 seconds

[QRM NOTE]: Time elapsed since last: 6.255 seconds

[QRM NOTE]: Peak memory: 1182738 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        41

[FW NOTE]: number of dfs representative states:     9

[FW NOTE]: number of dfs non-representative states: 32


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decision('value',)
predicate: vote('node', 'value')
predicate: didNotVote('node',)
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'decision(value0)', 'decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)']
representative states : 229803, 106923, 1182635, 22031275, 22293419, 1067947, 1330091, 1444779, 45483


=== State Orbit 0 =====================
size : 1
repr state: 00000000111000000
lex min decimal: 229803
states:
00000000111000000




=== State Orbit 1 =====================
size : 6
repr state: 00000000011100000
lex min decimal: 106923
states:
00000000110000010
00000000110000001
00000000011010000
00000000101000100
00000000101001000
00000000011100000




=== State Orbit 2 =====================
size : 6
repr state: 10000000001101000
lex min decimal: 1182635
states:
00001000100001010
00100000010100010
01000000001010100
00000100100000101
00010000010010001
10000000001101000




=== State Orbit 3 =====================
size : 2
repr state: 10101000000101010
lex min decimal: 22031275
states:
01010100000010101
10101000000101010




=== State Orbit 4 =====================
size : 2
repr state: 10101010000101010
lex min decimal: 22293419
states:
01010101000010101
10101010000101010




=== State Orbit 5 =====================
size : 6
repr state: 10000000000101001
lex min decimal: 1067947
states:
00100000000100110
00010000000011001
00001000000011010
10000000000101001
01000000000010110
00000100000100101




=== State Orbit 6 =====================
size : 6
repr state: 10000010000101001
lex min decimal: 1330091
states:
00010001000011001
00100010000100110
01000001000010110
00001010000011010
00000101000100101
10000010000101001




=== State Orbit 7 =====================
size : 6
repr state: 10000010001101000
lex min decimal: 1444779
states:
00010001010010001
00001010100001010
01000001001010100
00000101100000101
10000010001101000
00100010010100010




=== State Orbit 8 =====================
size : 6
repr state: 00000000001100100
lex min decimal: 45483
states:
00000000010010010
00000000010100001
00000000100000110
00000000001100100
00000000100001001
00000000001011000



[QRM NOTE]: Time elapsed since start: 6.350 seconds

[QRM NOTE]: Time elapsed since last: 0.095 seconds

[QRM NOTE]: Peak memory: 1227040 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.351 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 183837 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

======================================================================================================


=== Prime Orbit 0 =====================
size : 12
num_suborbits: 1
0 (*) : ---1------1------
0     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node2)']
1     : --1-------1------
1     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node2)']
2     : -1-------1-------
2     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node1)']
3     : 1--------1-------
3     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
4     : -----1----1------
4     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node2)']
5     : ----1-----1------
5     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node2)']
6     : -1------1--------
6     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node0)']
7     : 1-------1--------
7     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
8     : -----1---1-------
8     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node1)']
9     : ----1----1-------
9     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node1)']
10     : ---1----1--------
10     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node0)']
11     : --1-----1--------
11     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ----------1-----1
12     : ['didNotVote(node2)', 'vote(node2,value1)']
13     : ----------1----1-
13     : ['didNotVote(node2)', 'vote(node2,value0)']
14     : ---------1----1--
14     : ['didNotVote(node1)', 'vote(node1,value1)']
15     : ---------1---1---
15     : ['didNotVote(node1)', 'vote(node1,value0)']
16     : --------1---1----
16     : ['didNotVote(node0)', 'vote(node0,value1)']
17     : --------1--1-----
17     : ['didNotVote(node0)', 'vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : 1------1---------
18     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
19     : -1----1----------
19     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
22     : ----1--1---------
22     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
23     : -----11----------
23     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 12
num_suborbits: 1
24 (*) : 1------------0---
24     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
25     : -1------------0--
25     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
26     : --1------------0-
26     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
27     : ---1------------0
27     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
28     : 1----------0-----
28     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
29     : -1----------0----
29     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
30     : ----1----------0-
30     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
31     : -----1----------0
31     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
32     : --1--------0-----
32     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
33     : ---1--------0----
33     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
34     : ----1--------0---
34     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
35     : -----1--------0--
35     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 9
num_suborbits: 2
36 (*) : 1--1-------------
36     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
37     : -11--------------
37     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
38     : 1----1-----------
38     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
39     : -1--1------------
39     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
40     : --1--1-----------
40     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
41     : ---11------------
41     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
54 (*) : 11---------------
54     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
55     : --11-------------
55     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
56     : ----11-----------
56     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
42 (*) : 1-------------1--
42     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
43     : -1-----------1---
43     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
44     : --1-------------1
44     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
45     : ---1-----------1-
45     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
46     : 1-----------1----
46     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
47     : -1---------1-----
47     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
48     : ----1-----------1
48     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
49     : -----1---------1-
49     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
50     : --1---------1----
50     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
51     : ---1-------1-----
51     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
52     : ----1---------1--
52     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
53     : -----1-------1---
53     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
57 (*) : ---------------11
57     : ['vote(node2,value0)', 'vote(node2,value1)']
58     : -------------11--
58     : ['vote(node1,value0)', 'vote(node1,value1)']
59     : -----------11----
59     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
60 (*) : ------11---------
60     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
61 (*) : -0-1-1-----------
61     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
62     : 0-1-1------------
62     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
63     : -1-0-1-----------
63     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
64     : 1-0-1------------
64     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
65     : -1-1-0-----------
65     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
66     : 1-1-0------------
66     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 12
num_suborbits: 1
67 (*) : ---1-0--------1--
67     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
68     : --1-0--------1---
68     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
69     : -1---0----------1
69     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
70     : 1---0----------1-
70     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
71     : ---0-1------1----
71     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
72     : --0-1------1-----
72     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
73     : -1-0------------1
73     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
74     : 1-0------------1-
74     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
75     : -0---1------1----
75     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
76     : 0---1------1-----
76     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
77     : -0-1----------1--
77     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
78     : 0-1----------1---
78     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
79 (*) : ---0---1-----1---
79     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
80     : --0---1-------1--
80     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
81     : -0-----1-------1-
81     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
82     : 0-----1---------1
82     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
83     : -----0-1---1-----
83     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
84     : ----0-1-----1----
84     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 12
num_suborbits: 1
85 (*) : -------11----1---
85     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
86     : ------1-1-----1--
86     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
87     : -------11------1-
87     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
88     : ------1-1-------1
88     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
89     : -------1-1-1-----
89     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
90     : ------1--1--1----
90     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
91     : -------1-1-----1-
91     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
92     : ------1--1------1
92     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
93     : -------1--11-----
93     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
94     : ------1---1-1----
94     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
95     : -------1--1--1---
95     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
96     : ------1---1---1--
96     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 12
num_suborbits: 1
97 (*) : -------1-----1--0
97     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
98     : ------1-------10-
98     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
99     : -------1------01-
99     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
100     : ------1------0--1
100     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
101     : -------1---1----0
101     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
102     : ------1-----1--0-
102     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
103     : -------1----0--1-
103     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
104     : ------1----0----1
104     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
105     : -------1---1--0--
105     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
106     : ------1-----10---
106     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
107     : -------1----01---
107     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
108     : ------1----0--1--
108     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
109 (*) : ----0--------1-1-
109     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
110     : -----0--------1-1
110     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
111     : --0--------1---1-
111     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
112     : ---0--------1---1
112     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
113     : 0----------1-1---
113     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
114     : -0----------1-1--
114     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
115 (*) : -------1-----1-1-
115     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
116     : ------1-------1-1
116     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
117     : -------1---1---1-
117     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
118     : ------1-----1---1
118     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
119     : -------1---1-1---
119     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
120     : ------1-----1-1--
120     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
121 (*) : -0-----1--------0
121     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
122     : 0-----1--------0-
122     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
123     : ---0---1------0--
123     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
124     : --0---1------0---
124     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
125     : -----0-1----0----
125     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
126     : ----0-1----0-----
126     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : -------1------0-0
127     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
128     : ------1------0-0-
128     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
129     : -------1----0---0
129     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
130     : ------1----0---0-
130     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
131     : -------1----0-0--
131     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
132     : ------1----0-0---
132     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
133 (*) : -----0-11--------
133     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
134     : ----0-1-1--------
134     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
135     : ---0---1-1-------
135     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
136     : --0---1--1-------
136     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
137     : -0-----1--1------
137     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
138     : 0-----1---1------
138     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
139 (*) : -------11-------0
139     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
140     : ------1-1------0-
140     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
141     : -------11-----0--
141     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
142     : ------1-1----0---
142     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
143     : -------1-1------0
143     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
144     : ------1--1-----0-
144     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
145     : -------1-1--0----
145     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
146     : ------1--1-0-----
146     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
147     : -------1--1---0--
147     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
148     : ------1---1--0---
148     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
149     : -------1--1-0----
149     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
150     : ------1---10-----
150     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
151 (*) : -------111-------
151     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
152     : ------1-11-------
152     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
153     : -------11-1------
153     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
154     : ------1-1-1------
154     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
155     : -------1-11------
155     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
156     : ------1--11------
156     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
157 (*) : --------0--00----
157     : ['~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
158     : ---------0---00--
158     : ['~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
159     : ----------0----00
159     : ['~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 12
num_suborbits: 1
160 (*) : -0------0--0--1--
160     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
161     : 0-------0---01---
161     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
162     : ---0----0--0----1
162     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
163     : --0-----0---0--1-
163     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
164     : -0-------0--10---
164     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
165     : 0--------0-1--0--
165     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
166     : -----0---0---0--1
166     : ['vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
167     : ----0----0----01-
167     : ['vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
168     : ---0------0-1--0-
168     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
169     : --0-------01----0
169     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
170     : -----0----0---10-
170     : ['vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
171     : ----0-----0--1--0
171     : ['vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
172 (*) : -0---0-1------1--
172     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
173     : 0---0-1------1---
173     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
174     : ---0-0-1--------1
174     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
175     : --0-0-1--------1-
175     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
176     : -0-0---1----1----
176     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
177     : 0-0---1----1-----
177     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 12
num_suborbits: 1
178 (*) : 0-1------0----0--
178     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
179     : -0-1-----0---0---
179     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
180     : 1-0-------0-----0
180     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
181     : -1-0------0----0-
181     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
182     : 0---1---0---0----
182     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
183     : -0---1--0--0-----
183     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
184     : 1---0-----0-----0
184     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
185     : -1---0----0----0-
185     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
186     : --0-1---0---0----
186     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
187     : ---0-1--0--0-----
187     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
188     : --1-0----0----0--
188     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
189     : ---1-0---0---0---
189     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 2
num_suborbits: 1
190 (*) : -0-0-0-1---------
190     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
191     : 0-0-0-1----------
191     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
192 (*) : -00-----0-----11-
192     : ['vote(node1,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)']
193     : 0--0----0----1--1
193     : ['vote(node1,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)']
194     : -0--0----0--1--1-
194     : ['vote(node0,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)']
195     : 0----0---0-1----1
195     : ['vote(node0,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)']
196     : ---00-----0-11---
196     : ['vote(node0,value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)']
197     : --0--0----01--1--
197     : ['vote(node0,value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
198 (*) : 0-------00--0-0--
198     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
199     : -0------00-0-0---
199     : ['~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
200     : --0-----0-0-0---0
200     : ['~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
201     : ---0----0-00---0-
201     : ['~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
202     : ----0----00---0-0
202     : ['~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
203     : -----0---00--0-0-
203     : ['~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
204 (*) : -0---0-1-0---0---
204     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
205     : 0---0-1--0----0--
205     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
206     : ---0-0-1--0----0-
206     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
207     : --0-0-1---0-----0
207     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
208     : -0-0---10--0-----
208     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
209     : 0-0---1-0---0----
209     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
210 (*) : -00--0--0-0---1--
210     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)']
211     : 0--00---0-0--1---
211     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)']
212     : 0--0-0--00------1
212     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)']
213     : -00-0---00-----1-
213     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)']
214     : -0-00----00-1----
214     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)']
215     : 0-0--0---001-----
215     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 12
num_suborbits: 1
216 (*) : -00-----0-0---1-0
216     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node2,value1)']
217     : 0--0----0-0--1-0-
217     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node2,value0)']
218     : 0--0----00----0-1
218     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node1,value1)']
219     : -00-----00---0-1-
219     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node1,value0)']
220     : -0--0----00-1---0
220     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value1)']
221     : 0----0---001---0-
221     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value0)']
222     : 0----0--00--0---1
222     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)']
223     : -0--0---00-0---1-
223     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)']
224     : ---00----00-1-0--
224     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)']
225     : --0--0---001-0---
225     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)']
226     : --0--0--0-0-0-1--
226     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)']
227     : ---00---0-00-1---
227     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
228 (*) : -0-00---0000-----
228     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)']
229     : 0-0--0--000-0----
229     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)']
230     : -00--0--000--0---
230     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)']
231     : 0--00---000---0--
231     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)']
232     : 0--0-0--000----0-
232     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value0)']
233     : -00-0---000-----0
233     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
234 (*) : ---00---0000--0--
234     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value1)']
235     : --0--0--000-00---
235     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)']
236     : -0--0---0000----0
236     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value1)']
237     : 0----0--000-0--0-
237     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value0)']
238     : -00-----000--0--0
238     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value1)']
239     : 0--0----000---00-
239     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 1
num_suborbits: 1
240 (*) : 000000--000------
240     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 34

[PRIME NOTE]: number of primes: 241

[QRM NOTE]: Time elapsed since start: 6.421 seconds

[QRM NOTE]: Time elapsed since last: 0.069 seconds

[QRM NOTE]: Peak memory: 1522081 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

================================================================================================

definition primes: {0, 1, 32, 3, 8, 9, 13, 20, 21, 23, 25, 26, 28, 29, 30, 31}


New level: 0
 pending : [2, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : []


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : []

Essensial at level 0 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, 0), (5, 0), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, 4194304), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : {4, 5}

After reduction : 
 pending  : [2, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : [6]


Before reduction : 
 pending  : [2, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : [6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, 0), (5, 0), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, 4194304), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, 4194304), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : [6]

[QRM NOTE]: Time elapsed since start: 6.487 seconds

[QRM NOTE]: Time elapsed since last: 0.066 seconds

[QRM NOTE]: Peak memory: 484858 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
57 (*) : ---------------11
57     : ['vote(node2,value0)', 'vote(node2,value1)']
58     : -------------11--
58     : ['vote(node1,value0)', 'vote(node1,value1)']
59     : -----------11----
59     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', 'vote(node2,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : 1------1---------
18     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
19     : -1----1----------
19     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
22     : ----1--1---------
22     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
23     : -----11----------
23     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$chosenAt$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decision$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decision$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE1)', 'chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,QUORUM0. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
60 (*) : ------11---------
60     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'decision(value1)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$1]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$decision$0$1}

part_sig: ('value$0$decision$0$0 | value$0$decision$0$1',)


---------- SigGenerator ----------

terms:  ['decision(value0)', 'decision(value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$decision': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$decision$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: exists VALUE0. ~decision(VALUE0)


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
79 (*) : ---0---1-----1---
79     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
80     : --0---1-------1--
80     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
81     : -0-----1-------1-
81     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
82     : 0-----1---------1
82     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
83     : -----0-1---1-----
83     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
84     : ----0-1-----1----
84     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'vote(node1,value0)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'vote(node1,value0)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', '~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE1,VALUE0,QUORUM0. ~vote(NODE0,VALUE1) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decision(VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 11 =====================
size : 12
num_suborbits: 1
85 (*) : -------11----1---
85     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
86     : ------1-1-----1--
86     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
87     : -------11------1-
87     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
88     : ------1-1-------1
88     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
89     : -------1-1-1-----
89     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
90     : ------1--1--1----
90     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
91     : -------1-1-----1-
91     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
92     : ------1--1------1
92     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
93     : -------1--11-----
93     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
94     : ------1---1-1----
94     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
95     : -------1--1--1---
95     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
96     : ------1---1---1--
96     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$0$vote$0$0', 'value$0$decision$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$0$vote$0': [node$0$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$0$vote$0': node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'didNotVote(NODE0)', 'vote(NODE1,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE1,NODE0,VALUE0. ~decision(VALUE0) | ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 12 =====================
size : 12
num_suborbits: 1
97 (*) : -------1-----1--0
97     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
98     : ------1-------10-
98     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
99     : -------1------01-
99     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
100     : ------1------0--1
100     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
101     : -------1---1----0
101     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
102     : ------1-----1--0-
102     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
103     : -------1----0--1-
103     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
104     : ------1----0----1
104     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
105     : -------1---1--0--
105     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
106     : ------1-----10---
106     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
107     : -------1----01---
107     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
108     : ------1----0--1--
108     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decision(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE1,NODE0,VALUE0. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | vote(NODE1,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
115 (*) : -------1-----1-1-
115     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
116     : ------1-------1-1
116     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
117     : -------1---1---1-
117     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
118     : ------1-----1---1
118     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
119     : -------1---1-1---
119     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
120     : ------1-----1-1--
120     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decision(VALUE0)', 'vote(NODE1,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE1,NODE0,VALUE0. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | ~vote(NODE1,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
121 (*) : -0-----1--------0
121     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
122     : 0-----1--------0-
122     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
123     : ---0---1------0--
123     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
124     : --0---1------0---
124     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
125     : -----0-1----0----
125     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
126     : ----0-1----0-----
126     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decision$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decision(VALUE0)


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : -------1------0-0
127     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
128     : ------1------0-0-
128     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
129     : -------1----0---0
129     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
130     : ------1----0---0-
130     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
131     : -------1----0-0--
131     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
132     : ------1----0-0---
132     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decision(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE0. vote(NODE0,VALUE0) | ~decision(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
133 (*) : -----0-11--------
133     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
134     : ----0-1-1--------
134     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
135     : ---0---1-1-------
135     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
136     : --0---1--1-------
136     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
137     : -0-----1--1------
137     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
138     : 0-----1---1------
138     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'didNotVote(node0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

part_sig: ('node$0$didNotVote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'didNotVote(node0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$didNotVote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0; node$1$member$0': [node$0$didNotVote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$didNotVote$0; node$1$member$0': node$0$didNotVote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)', 'decision(VALUE0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decision(VALUE0) | ~didNotVote(NODE0)


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
139 (*) : -------11-------0
139     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
140     : ------1-1------0-
140     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
141     : -------11-----0--
141     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
142     : ------1-1----0---
142     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
143     : -------1-1------0
143     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
144     : ------1--1-----0-
144     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
145     : -------1-1--0----
145     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
146     : ------1--1-0-----
146     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
147     : -------1--1---0--
147     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
148     : ------1---1--0---
148     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
149     : -------1--1-0----
149     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
150     : ------1---10-----
150     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'didNotVote(NODE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE0. ~decision(VALUE0) | ~didNotVote(NODE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
151 (*) : -------111-------
151     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
152     : ------1-11-------
152     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
153     : -------11-1------
153     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
154     : ------1-1-1------
154     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
155     : -------1-11------
155     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
156     : ------1--11------
156     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$didNotVote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

part_sig: ('node$0$didNotVote$0$0 | node$0$didNotVote$0$1', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE1)', 'decision(VALUE0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE0. ~didNotVote(NODE1) | ~decision(VALUE0) | ~didNotVote(NODE0) | NODE0 = NODE1


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
172 (*) : -0---0-1------1--
172     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
173     : 0---0-1------1---
173     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
174     : ---0-0-1--------1
174     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
175     : --0-0-1--------1-
175     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
176     : -0-0---1----1----
176     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
177     : 0-0---1----1-----
177     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'vote(node1,value1)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'vote(node1,value1)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'vote(NODE0,VALUE0)', 'member(NODE0,QUORUM0)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM1,QUORUM0. ~decision(VALUE0) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | QUORUM0 = QUORUM1


=== Prime Orbit 24 =====================
size : 2
num_suborbits: 1
190 (*) : -0-0-0-1---------
190     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
191     : 0-0-0-1----------
191     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
204 (*) : -0---0-1-0---0---
204     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
205     : 0---0-1--0----0--
205     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
206     : ---0-0-1--0----0-
206     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
207     : --0-0-1---0-----0
207     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
208     : -0-0---10--0-----
208     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
209     : 0-0---1-0---0----
209     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', '~didNotVote(node1)', '~vote(node1,value0)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$didNotVote$0$0, node$1$vote$0$0, node$0$member$0$0, node$0$member$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', '~didNotVote(node1)', '~vote(node1,value0)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '1$didNotVote': 1, '1$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, 'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'member(NODE0,QUORUM0)', 'member(NODE0,QUORUM1)', '~didNotVote(NODE0)', '~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', '~vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE1,VALUE0,NODE0,QUORUM1. ~decision(VALUE0) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | didNotVote(NODE0) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | QUORUM0 = QUORUM1)


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

==============================================================================================================


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
57 (*) : ---------------11
57     : ['vote(node2,value0)', 'vote(node2,value1)']
58     : -------------11--
58     : ['vote(node1,value0)', 'vote(node1,value1)']
59     : -----------11----
59     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3




=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : 1------1---------
18     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
19     : -1----1----------
19     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
22     : ----1--1---------
22     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
23     : -----11----------
23     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0,QUORUM0. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
60 (*) : ------11---------
60     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists VALUE0. ~decision(VALUE0)
qcost : 2




=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
79 (*) : ---0---1-----1---
79     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
80     : --0---1-------1--
80     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
81     : -0-----1-------1-
81     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
82     : 0-----1---------1
82     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
83     : -----0-1---1-----
83     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
84     : ----0-1-----1----
84     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE1,VALUE0,QUORUM0. ~vote(NODE0,VALUE1) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decision(VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 11 =====================
size : 12
num_suborbits: 1
85 (*) : -------11----1---
85     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
86     : ------1-1-----1--
86     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
87     : -------11------1-
87     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
88     : ------1-1-------1
88     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
89     : -------1-1-1-----
89     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
90     : ------1--1--1----
90     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
91     : -------1-1-----1-
91     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
92     : ------1--1------1
92     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
93     : -------1--11-----
93     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
94     : ------1---1-1----
94     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
95     : -------1--1--1---
95     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
96     : ------1---1---1--
96     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,VALUE1,NODE0,VALUE0. ~decision(VALUE0) | ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 12 =====================
size : 12
num_suborbits: 1
97 (*) : -------1-----1--0
97     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
98     : ------1-------10-
98     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
99     : -------1------01-
99     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
100     : ------1------0--1
100     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
101     : -------1---1----0
101     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
102     : ------1-----1--0-
102     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
103     : -------1----0--1-
103     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
104     : ------1----0----1
104     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
105     : -------1---1--0--
105     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
106     : ------1-----10---
106     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
107     : -------1----01---
107     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
108     : ------1----0--1--
108     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,VALUE1,NODE0,VALUE0. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | vote(NODE1,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
115 (*) : -------1-----1-1-
115     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
116     : ------1-------1-1
116     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
117     : -------1---1---1-
117     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
118     : ------1-----1---1
118     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
119     : -------1---1-1---
119     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
120     : ------1-----1-1--
120     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,VALUE1,NODE0,VALUE0. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | ~vote(NODE1,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
121 (*) : -0-----1--------0
121     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
122     : 0-----1--------0-
122     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
123     : ---0---1------0--
123     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
124     : --0---1------0---
124     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
125     : -----0-1----0----
125     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
126     : ----0-1----0-----
126     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decision(VALUE0)
qcost : 7




=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : -------1------0-0
127     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
128     : ------1------0-0-
128     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
129     : -------1----0---0
129     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
130     : ------1----0---0-
130     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
131     : -------1----0-0--
131     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
132     : ------1----0-0---
132     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0,VALUE0. vote(NODE0,VALUE0) | ~decision(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
133 (*) : -----0-11--------
133     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
134     : ----0-1-1--------
134     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
135     : ---0---1-1-------
135     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
136     : --0---1--1-------
136     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
137     : -0-----1--1------
137     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
138     : 0-----1---1------
138     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decision(VALUE0) | ~didNotVote(NODE0)
qcost : 7




=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
139 (*) : -------11-------0
139     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
140     : ------1-1------0-
140     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
141     : -------11-----0--
141     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
142     : ------1-1----0---
142     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
143     : -------1-1------0
143     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
144     : ------1--1-----0-
144     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
145     : -------1-1--0----
145     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
146     : ------1--1-0-----
146     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
147     : -------1--1---0--
147     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
148     : ------1---1--0---
148     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
149     : -------1--1-0----
149     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
150     : ------1---10-----
150     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0,VALUE0. ~decision(VALUE0) | ~didNotVote(NODE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
151 (*) : -------111-------
151     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
152     : ------1-11-------
152     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
153     : -------11-1------
153     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
154     : ------1-1-1------
154     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
155     : -------1-11------
155     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
156     : ------1--11------
156     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0,VALUE0. ~didNotVote(NODE1) | ~decision(VALUE0) | ~didNotVote(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
172 (*) : -0---0-1------1--
172     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
173     : 0---0-1------1---
173     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
174     : ---0-0-1--------1
174     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
175     : --0-0-1--------1-
175     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
176     : -0-0---1----1----
176     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
177     : 0-0---1----1-----
177     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,NODE0,QUORUM1,QUORUM0. ~decision(VALUE0) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 24 =====================
size : 2
num_suborbits: 1
190 (*) : -0-0-0-1---------
190     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
191     : 0-0-0-1----------
191     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))
qcost : 4




=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
204 (*) : -0---0-1-0---0---
204     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
205     : 0---0-1--0----0--
205     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
206     : ---0-0-1--0----0-
206     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
207     : --0-0-1---0-----0
207     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
208     : -0-0---10--0-----
208     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
209     : 0-0---1-0---0----
209     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
num_forall :   5
num_exists :   0
num_literals : 9
quantified form : forall QUORUM0,VALUE1,VALUE0,NODE0,QUORUM1. ~decision(VALUE0) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | didNotVote(NODE0) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | QUORUM0 = QUORUM1)
qcost : 14



[QRM NOTE]: Time elapsed since start: 6.617 seconds

[QRM NOTE]: Time elapsed since last: 0.131 seconds

[QRM NOTE]: Peak memory: 2191333 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

=============================================================================================


New level: 1
 pending : [2, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : [6]


Before reduction : 
 pending  : [2, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : [6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, 4194304), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, 4194304), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 1 among pending : [2, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, 4194304), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 7 with phase True at level 1

After decision at level 1
 pending : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : [6, 7]


New level: 2
 pending : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : [6, 7]


Before reduction : 
 pending  : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : [6, 7]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, 4194304), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, 2097152), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 2 among pending : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 24, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, 2097152), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 24 with phase True at level 2

After decision at level 2
 pending : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 27]
 solution : [6, 7, 24]


New level: 3
 pending : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 27]
 solution : [6, 7, 24]


Before reduction : 
 pending  : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 27]
 solution : [6, 7, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, 2097152), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 7, 24]


Before reduction : 
 pending  : []
 solution : [6, 7, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [6, 7, 24]


Solution : [6, 7, 24] has cost 9.


Before backtrack at level 3
 pending : []
 solution : [6, 7, 24]

After backtrack at level 3
 pending : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 27]
 solution : [6, 7, 24]


Invert decision for 24 at level 2


New level: 3
 pending : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 27]
 solution : [6, 7]


Before reduction : 
 pending  : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 27]
 solution : [6, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 27]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 3 among pending : [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [2, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27]
 solution : [6, 7, 15]


New level: 4
 pending : [2, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27]
 solution : [6, 7, 15]


Before reduction : 
 pending  : [2, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27]
 solution : [6, 7, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {2, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 7, 15]


Before reduction : 
 pending  : []
 solution : [6, 7, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [6, 7, 15]


Solution : [6, 7, 15] has cost 12.


Before backtrack at level 4
 pending : []
 solution : [6, 7, 15]

After backtrack at level 4
 pending : [2, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27]
 solution : [6, 7, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [2, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27]
 solution : [6, 7]


Before reduction : 
 pending  : [2, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27]
 solution : [6, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 4 among pending : [2, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 4

After decision at level 4
 pending : [2, 10, 11, 12, 14, 17, 18, 19, 22, 27]
 solution : [6, 7, 16]


New level: 5
 pending : [2, 10, 11, 12, 14, 17, 18, 19, 22, 27]
 solution : [6, 7, 16]


Before reduction : 
 pending  : [2, 10, 11, 12, 14, 17, 18, 19, 22, 27]
 solution : [6, 7, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {2, 10, 11, 12, 14, 17, 18, 19, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 7, 16]


Before reduction : 
 pending  : []
 solution : [6, 7, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [6, 7, 16]


Solution : [6, 7, 16] has cost 12.


Before backtrack at level 5
 pending : []
 solution : [6, 7, 16]

After backtrack at level 5
 pending : [2, 10, 11, 12, 14, 17, 18, 19, 22, 27]
 solution : [6, 7, 16]


Invert decision for 16 at level 4


New level: 5
 pending : [2, 10, 11, 12, 14, 17, 18, 19, 22, 27]
 solution : [6, 7]


Before reduction : 
 pending  : [2, 10, 11, 12, 14, 17, 18, 19, 22, 27]
 solution : [6, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 10, 11, 12, 14, 17, 18, 19, 22, 27]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 5 among pending : [2, 10, 11, 12, 14, 17, 18, 19, 22, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [2, 11, 12, 14, 17, 18, 19, 22, 27]
 solution : [6, 7, 10]


New level: 6
 pending : [2, 11, 12, 14, 17, 18, 19, 22, 27]
 solution : [6, 7, 10]


Before reduction : 
 pending  : [2, 11, 12, 14, 17, 18, 19, 22, 27]
 solution : [6, 7, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {2, 11, 12, 14}

After reduction : 
 pending  : [17, 18, 19, 22, 27]
 solution : [6, 7, 10]


Before reduction : 
 pending  : [17, 18, 19, 22, 27]
 solution : [6, 7, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 18, 19, 22, 27]
 solution : [6, 7, 10]


Solution : [6, 7, 10] has cost 14.


Before backtrack at level 6
 pending : [17, 18, 19, 22, 27]
 solution : [6, 7, 10]

After backtrack at level 6
 pending : [17, 18, 19, 22, 27, 2, 11, 12, 14]
 solution : [6, 7, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [17, 18, 19, 22, 27, 2, 11, 12, 14]
 solution : [6, 7]


Before reduction : 
 pending  : [17, 18, 19, 22, 27, 2, 11, 12, 14]
 solution : [6, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 18, 19, 22, 27, 2, 11, 12, 14]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 6 among pending : [17, 18, 19, 22, 27, 2, 11, 12, 14]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 12 with phase True at level 6

After decision at level 6
 pending : [17, 18, 19, 22, 27, 2, 11, 14]
 solution : [6, 7, 12]


New level: 7
 pending : [17, 18, 19, 22, 27, 2, 11, 14]
 solution : [6, 7, 12]


Before reduction : 
 pending  : [17, 18, 19, 22, 27, 2, 11, 14]
 solution : [6, 7, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, 131072), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {2, 11, 14}

After reduction : 
 pending  : [17, 18, 19, 22, 27]
 solution : [6, 7, 12]


Before reduction : 
 pending  : [17, 18, 19, 22, 27]
 solution : [6, 7, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 22, 27]
 solution : [6, 7, 12]


Solution : [6, 7, 12] has cost 14.


Before backtrack at level 7
 pending : [17, 18, 19, 22, 27]
 solution : [6, 7, 12]

After backtrack at level 7
 pending : [17, 18, 19, 22, 27, 2, 11, 14]
 solution : [6, 7, 12]


Invert decision for 12 at level 6


New level: 7
 pending : [17, 18, 19, 22, 27, 2, 11, 14]
 solution : [6, 7]


Before reduction : 
 pending  : [17, 18, 19, 22, 27, 2, 11, 14]
 solution : [6, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 22, 27, 2, 11, 14]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 7 among pending : [17, 18, 19, 22, 27, 2, 11, 14]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 7

After decision at level 7
 pending : [18, 19, 22, 27, 2, 11, 14]
 solution : [6, 7, 17]


New level: 8
 pending : [18, 19, 22, 27, 2, 11, 14]
 solution : [6, 7, 17]


Before reduction : 
 pending  : [18, 19, 22, 27, 2, 11, 14]
 solution : [6, 7, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {11, 18, 19}

After reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 7, 17]


Before reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 7, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 7, 17]


Solution : [6, 7, 17] has cost 12.


Before backtrack at level 8
 pending : [22, 27, 2, 14]
 solution : [6, 7, 17]

After backtrack at level 8
 pending : [22, 27, 2, 14, 18, 19, 11]
 solution : [6, 7, 17]


Invert decision for 17 at level 7


New level: 8
 pending : [22, 27, 2, 14, 18, 19, 11]
 solution : [6, 7]


Before reduction : 
 pending  : [22, 27, 2, 14, 18, 19, 11]
 solution : [6, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 27, 2, 14, 18, 19, 11]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 8 among pending : [22, 27, 2, 14, 18, 19, 11]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [22, 27, 2, 14, 19, 11]
 solution : [6, 7, 18]


New level: 9
 pending : [22, 27, 2, 14, 19, 11]
 solution : [6, 7, 18]


Before reduction : 
 pending  : [22, 27, 2, 14, 19, 11]
 solution : [6, 7, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 32768), (19, 4096), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {11, 19}

After reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 7, 18]


Before reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 7, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 7, 18]


Solution : [6, 7, 18] has cost 12.


Before backtrack at level 9
 pending : [22, 27, 2, 14]
 solution : [6, 7, 18]

After backtrack at level 9
 pending : [22, 27, 2, 14, 19, 11]
 solution : [6, 7, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [22, 27, 2, 14, 19, 11]
 solution : [6, 7]


Before reduction : 
 pending  : [22, 27, 2, 14, 19, 11]
 solution : [6, 7]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4096), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 14, 11]
 solution : [6, 7, 19]


Before reduction : 
 pending  : [22, 27, 2, 14, 11]
 solution : [6, 7, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4096), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4096), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 14, 11]
 solution : [6, 7, 19]


Solution : [6, 7, 19] has cost 12.


Before backtrack at level 9
 pending : [22, 27, 2, 14, 11]
 solution : [6, 7, 19]

After backtrack at level 9
 pending : [22, 27, 2, 14, 11, 19]
 solution : [6, 7]


Before backtrack at level 8
 pending : [22, 27, 2, 14, 11, 19]
 solution : [6, 7]

After backtrack at level 8
 pending : [22, 27, 2, 14, 11, 19, 18]
 solution : [6, 7]


Before backtrack at level 7
 pending : [22, 27, 2, 14, 11, 19, 18]
 solution : [6, 7]

After backtrack at level 7
 pending : [22, 27, 2, 14, 11, 19, 18, 17]
 solution : [6, 7]


Before backtrack at level 6
 pending : [22, 27, 2, 14, 11, 19, 18, 17]
 solution : [6, 7]

After backtrack at level 6
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12]
 solution : [6, 7]


Before backtrack at level 5
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12]
 solution : [6, 7]

After backtrack at level 5
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6, 7]


Before backtrack at level 4
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6, 7]

After backtrack at level 4
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6, 7]


Before backtrack at level 3
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6, 7]

After backtrack at level 3
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6, 7]


Before backtrack at level 2
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6, 7]

After backtrack at level 2
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15, 24]
 solution : [6, 7]


Invert decision for 7 at level 1


New level: 2
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15, 24]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15, 24]
 solution : [6]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4096), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, 4194304), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15, 24]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 2 among pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15, 24]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, 4194304), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 24 with phase True at level 2

After decision at level 2
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6, 24]


New level: 3
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6, 24]


Before reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, 4194304), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 24]


Before reduction : 
 pending  : []
 solution : [6, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [6, 24]


Solution : [6, 24] has cost 7.


Before backtrack at level 3
 pending : []
 solution : [6, 24]

After backtrack at level 3
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6, 24]


Invert decision for 24 at level 2


New level: 3
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 3 among pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6, 15]


New level: 4
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6, 15]


Before reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {2, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 15]


Before reduction : 
 pending  : []
 solution : [6, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [6, 15]


Solution : [6, 15] has cost 10.


Before backtrack at level 4
 pending : []
 solution : [6, 15]

After backtrack at level 4
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, -1), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 4 among pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, -1), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 4

After decision at level 4
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6, 16]


New level: 5
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6, 16]


Before reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, -1), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {2, 10, 11, 12, 14, 17, 18, 19, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 16]


Before reduction : 
 pending  : []
 solution : [6, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [6, 16]


Solution : [6, 16] has cost 10.


Before backtrack at level 5
 pending : []
 solution : [6, 16]

After backtrack at level 5
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6, 16]


Invert decision for 16 at level 4


New level: 5
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 5 among pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12]
 solution : [6, 10]


New level: 6
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12]
 solution : [6, 10]


Before reduction : 
 pending  : [22, 27, 2, 14, 11, 19, 18, 17, 12]
 solution : [6, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {2, 11, 12, 14}

After reduction : 
 pending  : [22, 27, 19, 18, 17]
 solution : [6, 10]


Before reduction : 
 pending  : [22, 27, 19, 18, 17]
 solution : [6, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 27, 19, 18, 17]
 solution : [6, 10]


Solution : [6, 10] has cost 12.


Before backtrack at level 6
 pending : [22, 27, 19, 18, 17]
 solution : [6, 10]

After backtrack at level 6
 pending : [22, 27, 19, 18, 17, 2, 14, 11, 12]
 solution : [6, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [22, 27, 19, 18, 17, 2, 14, 11, 12]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 19, 18, 17, 2, 14, 11, 12]
 solution : [6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 27, 19, 18, 17, 2, 14, 11, 12]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 6 among pending : [22, 27, 19, 18, 17, 2, 14, 11, 12]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 12 with phase True at level 6

After decision at level 6
 pending : [22, 27, 19, 18, 17, 2, 14, 11]
 solution : [6, 12]


New level: 7
 pending : [22, 27, 19, 18, 17, 2, 14, 11]
 solution : [6, 12]


Before reduction : 
 pending  : [22, 27, 19, 18, 17, 2, 14, 11]
 solution : [6, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 262144), (13, -1), (14, 32768), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {2, 11, 14}

After reduction : 
 pending  : [22, 27, 19, 18, 17]
 solution : [6, 12]


Before reduction : 
 pending  : [22, 27, 19, 18, 17]
 solution : [6, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 27, 19, 18, 17]
 solution : [6, 12]


Solution : [6, 12] has cost 12.


Before backtrack at level 7
 pending : [22, 27, 19, 18, 17]
 solution : [6, 12]

After backtrack at level 7
 pending : [22, 27, 19, 18, 17, 2, 14, 11]
 solution : [6, 12]


Invert decision for 12 at level 6


New level: 7
 pending : [22, 27, 19, 18, 17, 2, 14, 11]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 19, 18, 17, 2, 14, 11]
 solution : [6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 27, 19, 18, 17, 2, 14, 11]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 7 among pending : [22, 27, 19, 18, 17, 2, 14, 11]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 7

After decision at level 7
 pending : [22, 27, 19, 18, 2, 14, 11]
 solution : [6, 17]


New level: 8
 pending : [22, 27, 19, 18, 2, 14, 11]
 solution : [6, 17]


Before reduction : 
 pending  : [22, 27, 19, 18, 2, 14, 11]
 solution : [6, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {11, 18, 19}

After reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 17]


Before reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 17]


Solution : [6, 17] has cost 10.


Before backtrack at level 8
 pending : [22, 27, 2, 14]
 solution : [6, 17]

After backtrack at level 8
 pending : [22, 27, 2, 14, 19, 18, 11]
 solution : [6, 17]


Invert decision for 17 at level 7


New level: 8
 pending : [22, 27, 2, 14, 19, 18, 11]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 14, 19, 18, 11]
 solution : [6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 27, 2, 14, 19, 18, 11]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 8 among pending : [22, 27, 2, 14, 19, 18, 11]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [22, 27, 2, 14, 19, 11]
 solution : [6, 18]


New level: 9
 pending : [22, 27, 2, 14, 19, 11]
 solution : [6, 18]


Before reduction : 
 pending  : [22, 27, 2, 14, 19, 11]
 solution : [6, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, 65536), (19, 8192), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {11, 19}

After reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 18]


Before reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 14]
 solution : [6, 18]


Solution : [6, 18] has cost 10.


Before backtrack at level 9
 pending : [22, 27, 2, 14]
 solution : [6, 18]

After backtrack at level 9
 pending : [22, 27, 2, 14, 19, 11]
 solution : [6, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [22, 27, 2, 14, 19, 11]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 14, 19, 11]
 solution : [6]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 14, 11]
 solution : [6, 19]


Before reduction : 
 pending  : [22, 27, 2, 14, 11]
 solution : [6, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 14, 11]
 solution : [6, 19]


Solution : [6, 19] has cost 10.


Before backtrack at level 9
 pending : [22, 27, 2, 14, 11]
 solution : [6, 19]

After backtrack at level 9
 pending : [22, 27, 2, 14, 11, 19]
 solution : [6]


Before backtrack at level 8
 pending : [22, 27, 2, 14, 11, 19]
 solution : [6]

After backtrack at level 8
 pending : [22, 27, 2, 14, 11, 19, 18]
 solution : [6]


Before backtrack at level 7
 pending : [22, 27, 2, 14, 11, 19, 18]
 solution : [6]

After backtrack at level 7
 pending : [22, 27, 2, 14, 11, 19, 18, 17]
 solution : [6]


Before backtrack at level 6
 pending : [22, 27, 2, 14, 11, 19, 18, 17]
 solution : [6]

After backtrack at level 6
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12]
 solution : [6]


Before backtrack at level 5
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12]
 solution : [6]

After backtrack at level 5
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6]


Before backtrack at level 4
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10]
 solution : [6]

After backtrack at level 4
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6]


Before backtrack at level 3
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16]
 solution : [6]

After backtrack at level 3
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6]


Before backtrack at level 2
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15]
 solution : [6]

After backtrack at level 2
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15, 24]
 solution : [6]


Before backtrack at level 1
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15, 24]
 solution : [6]

After backtrack at level 1
 pending : [22, 27, 2, 14, 11, 19, 18, 17, 12, 10, 16, 15, 24, 7]
 solution : [6]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 7

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=2)

invariant [def_didNotVote] didNotVote(N) = forall V. ~vote(N,V) # definition

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [6, 24] (length = 2)

invariant [invar_6] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_24] forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 6.707 seconds

[QRM NOTE]: Time elapsed since last: 0.090 seconds

[QRM NOTE]: Peak memory: 2155790 bytes


================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 44: invar_6
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 45: invar_24

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 44: invar_6 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 45: invar_24 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 44: invar_6 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 45: invar_24 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 44: invar_6 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 45: invar_24 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 8.388 seconds

[QRM NOTE]: Time elapsed since last: 1.682 seconds

[QRM NOTE]: Peak memory: 1157149 bytes


***********************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2

***********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy -s node=4,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=4,value=2]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_4_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_4_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_4_value_2.finite.cpp toy_consensus.node_4_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_4_value_2.finite.o toy_consensus.node_4_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 22

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: number of branching actions: 16

[FW NOTE]: symmetric group order: 48

[QRM NOTE]: Time elapsed since start: 6.216 seconds

[QRM NOTE]: Time elapsed since last: 6.216 seconds

[QRM NOTE]: Peak memory: 1190264 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        99

[FW NOTE]: number of dfs representative states:     12

[FW NOTE]: number of dfs non-representative states: 87


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=4,value=2]

===========================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
predicate: decision('value',)
predicate: member('node', 'quorum')
predicate: didNotVote('node',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'decision(value0)', 'decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'didNotVote(node3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)']
representative states : 251719095, 121695671, 55635383, 1209396663, 91273686455, 91542121911, 1083567543, 1352002999, 1477832119, 22605239, 5959095, 56683959


=== State Orbit 0 =====================
size : 1
repr state: 0000000000111100000000
lex min decimal: 251719095
states:
0000000000111100000000




=== State Orbit 1 =====================
size : 8
repr state: 0000000000011110000000
lex min decimal: 121695671
states:
0000000000101100010000
0000000000110100000100
0000000000011110000000
0000000000111000000001
0000000000011101000000
0000000000110100001000
0000000000111000000010
0000000000101100100000




=== State Orbit 2 =====================
size : 12
repr state: 0000000000001110100000
lex min decimal: 55635383
states:
0000000000001101010000
0000000000011010000010
0000000000010110001000
0000000000100100010100
0000000000110000000101
0000000000001110100000
0000000000110000001010
0000000000101000010001
0000000000011001000001
0000000000101000100010
0000000000010101000100
0000000000100100101000




=== State Orbit 3 =====================
size : 8
repr state: 1000000000000110101000
lex min decimal: 1209396663
states:
1000000000000110101000
0000100000010010001010
0010000000001010100010
0100000000000101010100
0000000100100000010101
0001000000001001010001
0000010000010001000101
0000001000100000101010




=== State Orbit 4 =====================
size : 2
repr state: 1010101000000010101010
lex min decimal: 91273686455
states:
1010101000000010101010
0101010100000001010101




=== State Orbit 5 =====================
size : 2
repr state: 1010101010000010101010
lex min decimal: 91542121911
states:
1010101010000010101010
0101010101000001010101




=== State Orbit 6 =====================
size : 8
repr state: 1000000000000010101001
lex min decimal: 1083567543
states:
0000010000000001100101
0000001000000001101010
0001000000000001011001
0000000100000010010101
0000100000000010011010
0010000000000010100110
0100000000000001010110
1000000000000010101001




=== State Orbit 7 =====================
size : 8
repr state: 1000000010000010101001
lex min decimal: 1352002999
states:
0000010001000001100101
1000000010000010101001
0100000001000001010110
0001000001000001011001
0000100010000010011010
0000001010000001101010
0000000101000010010101
0010000010000010100110




=== State Orbit 8 =====================
size : 8
repr state: 1000000010000110101000
lex min decimal: 1477832119
states:
0001000001001001010001
0000001010100000101010
0000010001010001000101
0000000101100000010101
1000000010000110101000
0100000001000101010100
0010000010001010100010
0000100010010010001010




=== State Orbit 9 =====================
size : 24
repr state: 0000000000000110100100
lex min decimal: 22605239
states:
0000000000001001100001
0000000000001010100001
0000000000001001100010
0000000000000110100100
0000000000000101101000
0000000000010010000110
0000000000100000011010
0000000000100000010110
0000000000000101100100
0000000000100000101001
0000000000010001001001
0000000000000110011000
0000000000100000100101
0000000000000110010100
0000000000010001001010
0000000000001010010001
0000000000100000100110
0000000000010010000101
0000000000100000011001
0000000000000101011000
0000000000001001010010
0000000000010010001001
0000000000001010010010
0000000000010001000110




=== State Orbit 10 =====================
size : 6
repr state: 0000000000000010100101
lex min decimal: 5959095
states:
0000000000000001101001
0000000000000010010110
0000000000000001011010
0000000000000010100101
0000000000000010011001
0000000000000001100110




=== State Orbit 11 =====================
size : 12
repr state: 0000000000001110010000
lex min decimal: 56683959
states:
0000000000010110000100
0000000000110000000110
0000000000110000001001
0000000000100100011000
0000000000010101001000
0000000000001101100000
0000000000101000010010
0000000000100100100100
0000000000101000100001
0000000000001110010000
0000000000011001000010
0000000000011010000001



[QRM NOTE]: Time elapsed since start: 6.457 seconds

[QRM NOTE]: Time elapsed since last: 0.241 seconds

[QRM NOTE]: Peak memory: 1258468 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=4,value=2]

================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.814 seconds

[QRM NOTE]: Time elapsed since last: 0.357 seconds

[QRM NOTE]: Peak memory: 325477 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_3.finite.cpp toy_consensus.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_3.finite.o toy_consensus.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 18

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 6.458 seconds

[QRM NOTE]: Time elapsed since last: 6.458 seconds

[QRM NOTE]: Peak memory: 1186432 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        94

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 84


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decision('value',)
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: didNotVote('node',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)']
representative states : 1835435, 819627, 17830827, 1224774571, 1226871723, 16847787, 18944939, 19927979, 303531, 43435


=== State Orbit 0 =====================
size : 1
repr state: 000000000000111000000000
lex min decimal: 1835435
states:
000000000000111000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000011100000000
lex min decimal: 819627
states:
000000000000101000001000
000000000000011010000000
000000000000101000100000
000000000000110000000010
000000000000110000000001
000000000000101000010000
000000000000011100000000
000000000000011001000000
000000000000110000000100




=== State Orbit 2 =====================
size : 9
repr state: 100000000000001100100000
lex min decimal: 17830827
states:
000100000000010100000100
000000100000100000100100
000010000000010010000010
000000001000100000001001
000001000000010001000001
010000000000001010010000
000000010000100000010010
001000000000001001001000
100000000000001100100000




=== State Orbit 3 =====================
size : 3
repr state: 100100100000000100100100
lex min decimal: 1224774571
states:
100100100000000100100100
010010010000000010010010
001001001000000001001001




=== State Orbit 4 =====================
size : 3
repr state: 100100100100000100100100
lex min decimal: 1226871723
states:
100100100100000100100100
010010010010000010010010
001001001001000001001001




=== State Orbit 5 =====================
size : 18
repr state: 100000000000000100100010
lex min decimal: 16847787
states:
000100000000000100010100
010000000000000010010001
010000000000000010010100
000000100000000001100100
000010000000000010100010
000000010000000100010010
001000000000000001001010
000000001000000100001001
001000000000000001001100
000010000000000010001010
000100000000000100001100
000001000000000001010001
000000100000000010100100
000000010000000001010010
100000000000000100100001
000001000000000001100001
000000001000000010001001
100000000000000100100010




=== State Orbit 6 =====================
size : 18
repr state: 100000000100000100100010
lex min decimal: 18944939
states:
001000000001000001001010
000100000100000100001100
000000010010000001010010
000100000100000100010100
000001000001000001010001
100000000100000100100010
001000000001000001001100
000000100100000001100100
000010000010000010100010
000000001001000100001001
010000000010000010010100
010000000010000010010001
000001000001000001100001
000000100100000010100100
000000001001000010001001
000000010010000100010010
000010000010000010001010
100000000100000100100001




=== State Orbit 7 =====================
size : 9
repr state: 100000000100001100100000
lex min decimal: 19927979
states:
000000100100100000100100
001000000001001001001000
000100000100010100000100
100000000100001100100000
000001000001010001000001
000000001001100000001001
000010000010010010000010
000000010010100000010010
010000000010001010010000




=== State Orbit 8 =====================
size : 18
repr state: 000000000000001100010000
lex min decimal: 303531
states:
000000000000001010001000
000000000000100000001100
000000000000010100000001
000000000000100000001010
000000000000001100001000
000000000000001001100000
000000000000010010000100
000000000000100000010100
000000000000010100000010
000000000000010001000100
000000000000010001000010
000000000000001001010000
000000000000001010100000
000000000000010010000001
000000000000100000100010
000000000000100000100001
000000000000001100010000
000000000000100000010001




=== State Orbit 9 =====================
size : 6
repr state: 000000000000000100010001
lex min decimal: 43435
states:
000000000000000100001010
000000000000000010100001
000000000000000001100010
000000000000000001010100
000000000000000010001100
000000000000000100010001



[QRM NOTE]: Time elapsed since start: 6.656 seconds

[QRM NOTE]: Time elapsed since last: 0.198 seconds

[QRM NOTE]: Peak memory: 1249196 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 3680614315, binary: 011011011011000011011011

Found a representative state in Rmin not in reachability: decimal: 3676420011, binary: 011011011001000011011011

Found a representative state in Rmin not in reachability: decimal: 3674322859, binary: 011011011000000011011011

Found a representative state in Rmin not in reachability: decimal: 1258338219, binary: 001001011000000001011011

Found a representative state in Rmin not in reachability: decimal: 1260566443, binary: 001001011001000101011011

Found a representative state in Rmin not in reachability: decimal: 1258469291, binary: 001001011000000101011011

Found a representative state in Rmin not in reachability: decimal: 1262532523, binary: 001001011010000001011011

Found a representative state in Rmin not in reachability: decimal: 1264629675, binary: 001001011011000001011011

Found a representative state in Rmin not in reachability: decimal: 1260435371, binary: 001001011001000001011011

Found a representative state in Rmin not in reachability: decimal: 1264760747, binary: 001001011011000101011011

Found a representative state in Rmin not in reachability: decimal: 1262663595, binary: 001001011010000101011011

Found a representative state in Rmin not in reachability: decimal: 1224784811, binary: 001001001000000001011101

Found a representative state in Rmin not in reachability: decimal: 1226881963, binary: 001001001001000001011101

Found a representative state in Rmin not in reachability: decimal: 1226872747, binary: 001001001001000001001011

Found a representative state in Rmin not in reachability: decimal: 1224775595, binary: 001001001000000001001011

Found a representative state in Rmin not in reachability: decimal: 169912235, binary: 000001010001000001010011

Found a representative state in Rmin not in reachability: decimal: 167815083, binary: 000001010000000001010011

Found a representative state in Rmin not in reachability: decimal: 174106539, binary: 000001010011000001010011

Found a representative state in Rmin not in reachability: decimal: 174122923, binary: 000001010011000001110011

Found a representative state in Rmin not in reachability: decimal: 169928619, binary: 000001010001000001110011

Found a representative state in Rmin not in reachability: decimal: 170043307, binary: 000001010001000101010011

Found a representative state in Rmin not in reachability: decimal: 167831467, binary: 000001010000000001110011

Found a representative state in Rmin not in reachability: decimal: 16849835, binary: 000000001000000010001101

Found a representative state in Rmin not in reachability: decimal: 18946987, binary: 000000001001000010001101

Found a representative state in Rmin not in reachability: decimal: 19929003, binary: 000000001001100000001011

Found a representative state in Rmin not in reachability: decimal: 17831851, binary: 000000001000100000001011

Found a representative state in Rmin not in reachability: decimal: 17841067, binary: 000000001000100000011101

Found a representative state in Rmin not in reachability: decimal: 19938219, binary: 000000001001100000011101

Found a representative state in Rmin not in reachability: decimal: 1409408427, binary: 001010100000000011101110

Found a representative state in Rmin not in reachability: decimal: 1411505579, binary: 001010100001000011101110

Found a representative state in Rmin not in reachability: decimal: 1415699883, binary: 001010100011000011101110

Found a representative state in Rmin not in reachability: decimal: 1424088491, binary: 001010100111000011101110

Found a representative state in Rmin not in reachability: decimal: 50476971, binary: 000000011000000100011011

Found a representative state in Rmin not in reachability: decimal: 52574123, binary: 000000011001000100011011

Found a representative state in Rmin not in reachability: decimal: 56768427, binary: 000000011011000100011011

Found a representative state in Rmin not in reachability: decimal: 57685931, binary: 000000011011100000011011

Found a representative state in Rmin not in reachability: decimal: 53491627, binary: 000000011001100000011011

Found a representative state in Rmin not in reachability: decimal: 51394475, binary: 000000011000100000011011

Found a representative state in Rmin not in reachability: decimal: 319915, binary: 000000000000001001110000

Found a representative state in Rmin not in reachability: decimal: 16978859, binary: 000000001000000110001001

Found a representative state in Rmin not in reachability: decimal: 19076011, binary: 000000001001000110001001

Found a representative state in Rmin not in reachability: decimal: 885163, binary: 000000000000011011000000

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.341 seconds

[QRM NOTE]: Time elapsed since last: 0.685 seconds

[QRM NOTE]: Peak memory: 294184 bytes

next size: node=3,value=3


********************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3

********************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.ivy -s node=3,value=3 -f 1 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.025 seconds

[QRM NOTE]: Time elapsed since last: 0.025 seconds

[QRM NOTE]: Peak memory: 36492 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

======================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : -----1---------1--------
9     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
10     : ----1----------1--------
10     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
11     : -----1----------1-------
11     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
12     : ---1------------1-------
12     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
13     : ----1------------1------
13     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
14     : ---1-------------1------
14     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
15     : --1------------1--------
15     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
16     : -1-------------1--------
16     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
17     : --1-------------1-------
17     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
18     : 1---------------1-------
18     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
19     : -1---------------1------
19     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
20     : 1----------------1------
20     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
21     : --------1---------1-----
21     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
22     : -------1----------1-----
22     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
23     : --------1----------1----
23     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
24     : ------1------------1----
24     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
25     : -------1------------1---
25     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
26     : ------1-------------1---
26     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
27     : --1---------------1-----
27     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
28     : -1----------------1-----
28     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
29     : --1----------------1----
29     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
30     : 1------------------1----
30     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
31     : -1------------------1---
31     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
32     : 1-------------------1---
32     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
33     : --------1------------1--
33     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
34     : -------1-------------1--
34     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
35     : --------1-------------1-
35     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
36     : ------1---------------1-
36     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
37     : -------1---------------1
37     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
38     : ------1----------------1
38     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
39     : -----1---------------1--
39     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
40     : ----1----------------1--
40     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
41     : -----1----------------1-
41     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
42     : ---1------------------1-
42     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
43     : ----1------------------1
43     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
44     : ---1-------------------1
44     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : ------------1--1--------
45     : ['didNotVote(node0)', 'vote(node0,value0)']
46     : ------------1---1-------
46     : ['didNotVote(node0)', 'vote(node0,value1)']
47     : ------------1----1------
47     : ['didNotVote(node0)', 'vote(node0,value2)']
48     : -------------1----1-----
48     : ['didNotVote(node1)', 'vote(node1,value0)']
49     : -------------1-----1----
49     : ['didNotVote(node1)', 'vote(node1,value1)']
50     : -------------1------1---
50     : ['didNotVote(node1)', 'vote(node1,value2)']
51     : --------------1------1--
51     : ['didNotVote(node2)', 'vote(node2,value0)']
52     : --------------1-------1-
52     : ['didNotVote(node2)', 'vote(node2,value1)']
53     : --------------1--------1
53     : ['didNotVote(node2)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : ------1------1----------
54     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node1)']
55     : -------1-----1----------
55     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node1)']
56     : --------1----1----------
56     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node1)']
57     : ------1-------1---------
57     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node2)']
58     : -------1------1---------
58     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node2)']
59     : --------1-----1---------
59     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node2)']
60     : ---1--------1-----------
60     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node0)']
61     : ----1-------1-----------
61     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node0)']
62     : -----1------1-----------
62     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node0)']
63     : ---1----------1---------
63     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node2)']
64     : ----1---------1---------
64     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node2)']
65     : -----1--------1---------
65     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node2)']
66     : 1-----------1-----------
66     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
67     : -1----------1-----------
67     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node0)']
68     : --1---------1-----------
68     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node0)']
69     : 1------------1----------
69     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
70     : -1-----------1----------
70     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node1)']
71     : --1----------1----------
71     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ---------11-------------
72     : ['decision(value0)', 'decision(value1)']
73     : ---------1-1------------
73     : ['decision(value0)', 'decision(value2)']
74     : ----------11------------
74     : ['decision(value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : -------1-1--------------
75     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
76     : --------11--------------
76     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
77     : ------1---1-------------
77     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
78     : --------1-1-------------
78     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
79     : ------1----1------------
79     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
80     : -------1---1------------
80     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
81     : ----1----1--------------
81     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
82     : -----1---1--------------
82     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
83     : ---1------1-------------
83     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
84     : -----1----1-------------
84     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
85     : ---1-------1------------
85     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
86     : ----1------1------------
86     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
87     : -1-------1--------------
87     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
88     : --1------1--------------
88     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
89     : 1---------1-------------
89     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
90     : --1-------1-------------
90     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
91     : 1----------1------------
91     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
92     : -1---------1------------
92     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
93 (*) : 1--------------0--------
93     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
94     : -1--------------0-------
94     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
95     : --1--------------0------
95     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
96     : ---1-----------0--------
96     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
97     : ----1-----------0-------
97     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
98     : -----1-----------0------
98     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
99     : 1-----------------0-----
99     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
100     : -1-----------------0----
100     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
101     : --1-----------------0---
101     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
102     : ------1-----------0-----
102     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
103     : -------1-----------0----
103     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
104     : --------1-----------0---
104     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
105     : ---1-----------------0--
105     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
106     : ----1-----------------0-
106     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
107     : -----1-----------------0
107     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
108     : ------1--------------0--
108     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
109     : -------1--------------0-
109     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
110     : --------1--------------0
110     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 27
num_suborbits: 2
111 (*) : 1------1----------------
111     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
112     : 1-------1---------------
112     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
113     : -1----1-----------------
113     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
114     : -1------1---------------
114     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
115     : --1---1-----------------
115     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
116     : --1----1----------------
116     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
117     : ---1---1----------------
117     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
118     : ---1----1---------------
118     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
119     : ----1-1-----------------
119     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
120     : ----1---1---------------
120     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
121     : -----11-----------------
121     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
122     : -----1-1----------------
122     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
123     : 1---1-------------------
123     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
124     : 1----1------------------
124     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
125     : -1-1--------------------
125     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
126     : -1---1------------------
126     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
127     : --11--------------------
127     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
128     : --1-1-------------------
128     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
129 (*) : 1-1---------------------
129     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
130     : 11----------------------
130     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
131     : -11---------------------
131     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
132     : ---1-1------------------
132     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
133     : ---11-------------------
133     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
134     : ----11------------------
134     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
135     : ------1-1---------------
135     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
136     : ------11----------------
136     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
137     : -------11---------------
137     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
138 (*) : -0--1--1----------------
138     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
139     : --0--1--1---------------
139     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
140     : 0--1--1-----------------
140     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
141     : -1--0--1----------------
141     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
142     : --1--0--1---------------
142     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
143     : 1--0--1-----------------
143     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
144     : -1--1--0----------------
144     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
145     : --1--1--0---------------
145     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
146     : 1--1--0-----------------
146     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
147 (*) : -0-----1--------1-------
147     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
148     : --0-----1--------1------
148     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
149     : 0-----1--------1--------
149     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
150     : ----0--1--------1-------
150     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
151     : -----0--1--------1------
151     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
152     : ---0--1--------1--------
152     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
153     : -0--1--------------1----
153     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
154     : --0--1--------------1---
154     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
155     : 0--1--------------1-----
155     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
156     : ----1--0-----------1----
156     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
157     : -----1--0-----------1---
157     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
158     : ---1--0-----------1-----
158     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
159     : -1--0-----------------1-
159     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
160     : --1--0-----------------1
160     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
161     : 1--0-----------------1--
161     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
162     : -1-----0--------------1-
162     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
163     : --1-----0--------------1
163     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
164     : 1-----0--------------1--
164     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
165 (*) : -------0--1------1------
165     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
166     : --------0--1----1-------
166     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
167     : ------0--1-------1------
167     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
168     : --------0--1---1--------
168     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
169     : ------0--1------1-------
169     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
170     : -------0--1----1--------
170     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
171     : ----0-----1---------1---
171     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
172     : -----0-----1-------1----
172     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
173     : ---0-----1----------1---
173     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
174     : -----0-----1------1-----
174     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
175     : ---0-----1---------1----
175     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
176     : ----0-----1-------1-----
176     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
177     : -0--------1------------1
177     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
178     : --0--------1----------1-
178     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
179     : 0--------1-------------1
179     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
180     : --0--------1---------1--
180     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
181     : 0--------1------------1-
181     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
182     : -0--------1----------1--
182     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
183 (*) : ----------1------1-0----
183     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
184     : -----------1----1---0---
184     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
185     : ---------1-------10-----
185     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
186     : -----------1---1----0---
186     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
187     : ---------1------1-0-----
187     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
188     : ----------1----1---0----
188     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
189     : ----------1------1----0-
189     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
190     : -----------1----1------0
190     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
191     : ---------1-------1---0--
191     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
192     : -----------1---1-------0
192     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
193     : ---------1------1----0--
193     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
194     : ----------1----1------0-
194     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
195     : ----------1-----0---1---
195     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
196     : -----------1-----0-1----
196     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
197     : ---------1-----0----1---
197     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
198     : -----------1-----01-----
198     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
199     : ---------1-----0---1----
199     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
200     : ----------1-----0-1-----
200     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
201     : ----------1---------1-0-
201     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
202     : -----------1-------1---0
202     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
203     : ---------1----------10--
203     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
204     : -----------1------1----0
204     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
205     : ---------1---------1-0--
205     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
206     : ----------1-------1---0-
206     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
207     : ----------1-----0------1
207     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
208     : -----------1-----0----1-
208     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
209     : ---------1-----0-------1
209     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
210     : -----------1-----0---1--
210     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
211     : ---------1-----0------1-
211     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
212     : ----------1-----0----1--
212     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
213     : ----------1--------0---1
213     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
214     : -----------1--------0-1-
214     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
215     : ---------1--------0----1
215     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
216     : -----------1--------01--
216     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
217     : ---------1--------0---1-
217     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
218     : ----------1--------0-1--
218     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 2
219 (*) : ----------1------1--1---
219     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
220     : -----------1----1--1----
220     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
221     : ---------1-------1--1---
221     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
222     : -----------1---1--1-----
222     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
223     : ---------1------1--1----
223     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
224     : ----------1----1--1-----
224     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
225     : ----------1------1-----1
225     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
226     : -----------1----1-----1-
226     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
227     : ---------1-------1-----1
227     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
228     : -----------1---1-----1--
228     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
229     : ---------1------1-----1-
229     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
230     : ----------1----1-----1--
230     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
231     : ----------1---------1--1
231     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
232     : -----------1-------1--1-
232     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
233     : ---------1----------1--1
233     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
234     : -----------1------1--1--
234     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
235     : ---------1---------1--1-
235     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
236     : ----------1-------1--1--
236     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
327 (*) : ----------1------11-----
327     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
328     : -----------1----1-1-----
328     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
329     : ---------1-------1-1----
329     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
330     : -----------1---1---1----
330     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
331     : ---------1------1---1---
331     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
332     : ----------1----1----1---
332     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
333     : ----------1------1---1--
333     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
334     : -----------1----1----1--
334     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
335     : ---------1-------1----1-
335     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
336     : -----------1---1------1-
336     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
337     : ---------1------1------1
337     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
338     : ----------1----1-------1
338     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
339     : ----------1---------11--
339     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
340     : -----------1-------1-1--
340     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
341     : ---------1----------1-1-
341     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
342     : -----------1------1---1-
342     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
343     : ---------1---------1---1
343     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
344     : ----------1-------1----1
344     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
237 (*) : --0--------------1--1---
237     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
238     : -0--------------1--1----
238     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
239     : 0--------------1--1-----
239     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
240     : -----0-----------1-----1
240     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
241     : ----0-----------1-----1-
241     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
242     : ---0-----------1-----1--
242     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
243     : --------0-----------1--1
243     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
244     : -------0-----------1--1-
244     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
245     : ------0-----------1--1--
245     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
246 (*) : ----------1-1-------1---
246     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
247     : -----------11------1----
247     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
248     : ---------1--1-------1---
248     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
249     : -----------11-----1-----
249     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
250     : ---------1--1------1----
250     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
251     : ----------1-1-----1-----
251     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
252     : ----------1-1----------1
252     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
253     : -----------11---------1-
253     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
254     : ---------1--1----------1
254     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
255     : -----------11--------1--
255     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
256     : ---------1--1---------1-
256     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
257     : ----------1-1--------1--
257     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
258     : ----------1--1---1------
258     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
259     : -----------1-1--1-------
259     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
260     : ---------1---1---1------
260     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
261     : -----------1-1-1--------
261     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
262     : ---------1---1--1-------
262     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
263     : ----------1--1-1--------
263     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
264     : ----------1--1---------1
264     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
265     : -----------1-1--------1-
265     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
266     : ---------1---1---------1
266     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
267     : -----------1-1-------1--
267     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
268     : ---------1---1--------1-
268     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
269     : ----------1--1-------1--
269     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
270     : ----------1---1--1------
270     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
271     : -----------1--1-1-------
271     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
272     : ---------1----1--1------
272     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
273     : -----------1--11--------
273     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
274     : ---------1----1-1-------
274     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
275     : ----------1---11--------
275     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
276     : ----------1---1-----1---
276     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
277     : -----------1--1----1----
277     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
278     : ---------1----1-----1---
278     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
279     : -----------1--1---1-----
279     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
280     : ---------1----1----1----
280     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
281     : ----------1---1---1-----
281     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
282 (*) : ----0-----1--------0----
282     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
283     : -----0-----1--------0---
283     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
284     : ---0-----1--------0-----
284     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
285     : -0--------1-----------0-
285     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
286     : --0--------1-----------0
286     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
287     : 0--------1-----------0--
287     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
288     : -------0--1-----0-------
288     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
289     : --------0--1-----0------
289     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
290     : ------0--1-----0--------
290     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
291 (*) : -------0--1-1-----------
291     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
292     : --------0--11-----------
292     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
293     : ------0--1--1-----------
293     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
294     : ----0-----1--1----------
294     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
295     : -----0-----1-1----------
295     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
296     : ---0-----1---1----------
296     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
297     : -0--------1---1---------
297     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
298     : --0--------1--1---------
298     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
299     : 0--------1----1---------
299     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
300 (*) : ----------1-----0--0----
300     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
301     : -----------1-----0--0---
301     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
302     : ---------1-----0--0-----
302     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
303     : ----------1-----0-----0-
303     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
304     : -----------1-----0-----0
304     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
305     : ---------1-----0-----0--
305     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
306     : ----------1--------0--0-
306     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
307     : -----------1--------0--0
307     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
308     : ---------1--------0--0--
308     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
309 (*) : ----------1-1------0----
309     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
310     : -----------11-------0---
310     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
311     : ---------1--1-----0-----
311     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
312     : ----------1-1---------0-
312     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
313     : -----------11----------0
313     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
314     : ---------1--1--------0--
314     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
315     : ----------1--1--0-------
315     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
316     : -----------1-1---0------
316     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
317     : ---------1---1-0--------
317     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
318     : ----------1--1--------0-
318     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
319     : -----------1-1---------0
319     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
320     : ---------1---1-------0--
320     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
321     : ----------1---1-0-------
321     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
322     : -----------1--1--0------
322     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
323     : ---------1----10--------
323     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
324     : ----------1---1----0----
324     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
325     : -----------1--1-----0---
325     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
326     : ---------1----1---0-----
326     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ----------1-1-1---------
345     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
346     : -----------11-1---------
346     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
347     : ---------1--1-1---------
347     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
348     : ----------1-11----------
348     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
349     : -----------111----------
349     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
350     : ---------1--11----------
350     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
351     : ----------1--11---------
351     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
352     : -----------1-11---------
352     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
353     : ---------1---11---------
353     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : ------------0--000------
354     : ['~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
355     : -------------0----000---
355     : ['~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
356     : --------------0------000
356     : ['~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : 0--0-----1-----1--------
357     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
358     : -0--0-----1-----1-------
358     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
359     : --0--0-----1-----1------
359     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
360     : 0-----0--1--------1-----
360     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : -0-----0--1--------1----
361     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : --0-----0--1--------1---
362     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : ---0--0--1-----------1--
363     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
364     : ----0--0--1-----------1-
364     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
365     : -----0--0--1-----------1
365     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : 0--0--0--1--------------
366     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
367     : -0--0--0--1-------------
367     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
368     : --0--0--0--1------------
368     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 1
369 (*) : --------0----0----00---1
369     : ['vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
370     : -------0-----0----0-0-1-
370     : ['vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
371     : ------0------0-----001--
371     : ['vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
372     : --------0-----0-----100-
372     : ['vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
373     : -------0------0----1-0-0
373     : ['vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
374     : ------0-------0---1---00
374     : ['vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
375     : -----0------0--00------1
375     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
376     : ----0-------0--0-0----1-
376     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
377     : ---0--------0---00---1--
377     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
378     : -----0--------0--1---00-
378     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
379     : ----0---------0-1----0-0
379     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
380     : ---0----------01------00
380     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
381     : --0---------0--00---1---
381     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
382     : -0----------0--0-0-1----
382     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
383     : 0-----------0---001-----
383     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
384     : --0----------0---100----
384     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
385     : -0-----------0--1-0-0---
385     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
386     : 0------------0-1---00---
386     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 1
387 (*) : 1--0----------0-------00
387     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
388     : -1--0---------0------0-0
388     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
389     : --1--0--------0------00-
389     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
390     : 0--1---------0-----00---
390     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
391     : -0--1--------0----0-0---
391     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
392     : --0--1-------0----00----
392     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
393     : 1-----0-------0-------00
393     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
394     : -1-----0------0------0-0
394     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
395     : --1-----0-----0------00-
395     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
396     : 0-----1-----0---00------
396     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
397     : -0-----1----0--0-0------
397     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
398     : --0-----1---0--00-------
398     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
399     : ---1--0------0-----00---
399     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
400     : ----1--0-----0----0-0---
400     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
401     : -----1--0----0----00----
401     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
402     : ---0--1-----0---00------
402     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
403     : ----0--1----0--0-0------
403     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
404     : -----0--1---0--00-------
404     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 18
num_suborbits: 1
405 (*) : -0---0------0--0---1---1
405     : ['vote(node1,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)']
406     : --0-0-------0--0----1-1-
406     : ['vote(node1,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
407     : 0----0------0---0-1----1
407     : ['vote(node1,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value1)']
408     : --00--------0---0---11--
408     : ['vote(node1,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
409     : 0---0-------0----01---1-
409     : ['vote(node1,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value2)']
410     : -0-0--------0----0-1-1--
410     : ['vote(node1,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value2)']
411     : -0------0----0--1-0----1
411     : ['vote(node0,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)']
412     : --0----0-----0---10---1-
412     : ['vote(node0,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
413     : 0-------0----0-1---0---1
413     : ['vote(node0,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value1)']
414     : --0---0------0---1-0-1--
414     : ['vote(node0,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
415     : 0------0-----0-1----0-1-
415     : ['vote(node0,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value2)']
416     : -0----0------0--1---01--
416     : ['vote(node0,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value2)']
417     : ----0---0-----0-1---10--
417     : ['vote(node0,value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)']
418     : -----0-0------0--1-1-0--
418     : ['vote(node0,value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
419     : ---0----0-----01----1-0-
419     : ['vote(node0,value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value1)']
420     : -----00-------0--11---0-
420     : ['vote(node0,value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
421     : ---0---0------01---1---0
421     : ['vote(node0,value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value2)']
422     : ----0-0-------0-1-1----0
422     : ['vote(node0,value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : --0--0-----10--00-------
423     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
424     : -0--0-----1-0--0-0------
424     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
425     : 0--0-----1--0---00------
425     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
426     : --0-----0--1-0----00----
426     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
427     : -0-----0--1--0----0-0---
427     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : 0-----0--1---0-----00---
428     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
429     : -----0--0--1--0------00-
429     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
430     : ----0--0--1---0------0-0
430     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
431     : ---0--0--1----0-------00
431     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
432 (*) : --------0----00---00-00-
432     : ['~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
433     : -------0-----00---0-00-0
433     : ['~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
434     : ------0------00----00-00
434     : ['~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
435     : -----0------0-000----00-
435     : ['~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
436     : ----0-------0-00-0---0-0
436     : ['~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
437     : ---0--------0-0-00----00
437     : ['~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
438     : --0---------00-00-00----
438     : ['~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
439     : -0----------00-0-00-0---
439     : ['~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
440     : 0-----------00--00-00---
440     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 18
num_suborbits: 1
441 (*) : 0--0----0----001---0--0-
441     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
442     : 0--0---0-----001----0--0
442     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
443     : -0--0---0----00-1-0--0--
443     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
444     : -0--0-0------00-1---0--0
444     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
445     : --0--0-0-----00--10--0--
445     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
446     : --0--00------00--1-0--0-
446     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
447     : 0----00-----0-0-0-1---0-
447     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
448     : 0---0-0-----0-0--01----0
448     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
449     : -0---0-0----0-00---1-0--
449     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
450     : -0-0---0----0-0--0-1---0
450     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
451     : --0-0---0---0-00----10--
451     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
452     : --00----0---0-0-0---1-0-
452     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
453     : --00--0-----00--0--0-1--
453     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
454     : -0-0--0-----00---0--01--
454     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
455     : --0-0--0----00-0--0---1-
455     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
456     : 0---0--0----00---0--0-1-
456     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
457     : -0---0--0---00-0--0----1
457     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
458     : 0----0--0---00--0--0---1
458     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 36
num_suborbits: 1
459 (*) : --00--------00--0-00-1--
459     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
460     : -0-0--------00---00-01--
460     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
461     : --0-0-------00-0--00--1-
461     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
462     : 0---0-------00---0-00-1-
462     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
463     : -0---0------00-0--0-0--1
463     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
464     : 0----0------00--0--00--1
464     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
465     : 0----0------0-0-0-1--00-
465     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
466     : 0---0-------0-0--01--0-0
466     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
467     : -0---0------0-00---1-00-
467     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
468     : -0-0--------0-0--0-1--00
468     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
469     : --0-0-------0-00----10-0
469     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
470     : --00--------0-0-0---1-00
470     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
471     : --0---0-----00-00--0-1--
471     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
472     : -0----0-----00-0-0--01--
472     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
473     : --0----0----00-00-0---1-
473     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
474     : 0------0----00--00--0-1-
474     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
475     : -0------0---00-0-00----1
475     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
476     : 0-------0---00--00-0---1
476     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
477     : 0-------0----001---0-00-
477     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
478     : 0------0-----001----00-0
478     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
479     : -0------0----00-1-0--00-
479     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
480     : -0----0------00-1---0-00
480     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
481     : --0----0-----00--10--0-0
481     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
482     : --0---0------00--1-0--00
482     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
483     : -----00-----0-000-1---0-
483     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
484     : ----0-0-----0-00-01----0
484     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
485     : -----0-0----0-000--1-0--
485     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
486     : ---0---0----0-0-00-1---0
486     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
487     : ----0---0---0-00-0--10--
487     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
488     : ---0----0---0-0-00--1-0-
488     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
489     : ---0----0----001--00--0-
489     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
490     : ---0---0-----001--0-0--0
490     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
491     : ----0---0----00-1-00-0--
491     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
492     : ----0-0------00-1--00--0
492     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
493     : -----0-0-----00--10-00--
493     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
494     : -----00------00--1-00-0-
494     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 1
495 (*) : --0-0--0----0000--0--0-0
495     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
496     : -0---0--0---0000--0--00-
496     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
497     : --00--0-----000-0--0--00
497     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
498     : 0----0--0---000-0--0-00-
498     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
499     : -0-0--0-----000--0--0-00
499     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
500     : 0---0--0----000--0--00-0
500     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
501     : -0---0-0----0000--0-00--
501     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
502     : --0-0---0---0000--00-0--
502     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
503     : 0----00-----000-0--00-0-
503     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
504     : --00----0---000-0-00--0-
504     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
505     : 0---0-0-----000--0-00--0
505     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
506     : -0-0---0----000--00-0--0
506     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
507     : -0--0---0---0000-00--0--
507     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
508     : --0--0-0----00000-0--0--
508     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
509     : 0--0----0---000-00-0--0-
509     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
510     : --0--00-----00000--0--0-
510     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
511     : 0--0---0----000-00--0--0
511     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
512     : -0--0-0-----0000-0--0--0
512     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 1
513 (*) : --0-0-------0000--00-0-0
513     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
514     : -0---0------0000--0-000-
514     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
515     : --00--------000-0-00--00
515     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
516     : 0----0------000-0--0000-
516     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
517     : -0-0--------000--00-0-00
517     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
518     : 0---0-------000--0-000-0
518     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
519     : --0----0----00000-0--0-0
519     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
520     : -0------0---0000-00--00-
520     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
521     : --0---0-----00000--0--00
521     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
522     : 0-------0---000-00-0-00-
522     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
523     : -0----0-----0000-0--0-00
523     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
524     : 0------0----000-00--00-0
524     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
525     : -----0-0----00000-0-00--
525     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
526     : ----0---0---0000-000-0--
526     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
527     : -----00-----00000--00-0-
527     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
528     : ---0----0---000-0000--0-
528     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
529     : ----0-0-----0000-0-00--0
529     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
530     : ---0---0----000-000-0--0
530     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
531 (*) : 0-00-00-0---000-0--0--0-
531     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
532     : 00-00-00----000--0--0--0
532     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
533     : -00-00-00---0000--0--0--
533     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 0.228 seconds

[QRM NOTE]: Time elapsed since last: 0.203 seconds

[QRM NOTE]: Peak memory: 1744256 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================

definition primes: {32, 2, 3, 6, 8, 9, 13, 20, 23, 24, 25, 27, 28, 29, 30, 31}


New level: 0
 pending : [0, 1, 4, 5, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : []


Before reduction : 
 pending  : [0, 1, 4, 5, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : []

Essensial at level 0 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, 0), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : {1, 7}

After reduction : 
 pending  : [4, 5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, 0), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [4, 5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]

[QRM NOTE]: Time elapsed since start: 0.300 seconds

[QRM NOTE]: Time elapsed since last: 0.072 seconds

[QRM NOTE]: Peak memory: 671582 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', 'vote(node0,value1)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', 'vote(node0,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ---------11-------------
72     : ['decision(value0)', 'decision(value1)']
73     : ---------1-1------------
73     : ['decision(value0)', 'decision(value2)']
74     : ----------11------------
74     : ['decision(value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'decision(value1)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$1]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

part_sig: ('value$0$decision$0$0 | value$0$decision$0$1',)


---------- SigGenerator ----------

terms:  ['decision(value0)', 'decision(value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decision': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1. ~decision(VALUE1) | ~decision(VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : -------1-1--------------
75     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
76     : --------11--------------
76     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
77     : ------1---1-------------
77     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
78     : --------1-1-------------
78     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
79     : ------1----1------------
79     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
80     : -------1---1------------
80     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
81     : ----1----1--------------
81     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
82     : -----1---1--------------
82     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
83     : ---1------1-------------
83     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
84     : -----1----1-------------
84     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
85     : ---1-------1------------
85     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
86     : ----1------1------------
86     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
87     : -1-------1--------------
87     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
88     : --1------1--------------
88     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
89     : 1---------1-------------
89     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
90     : --1-------1-------------
90     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
91     : 1----------1------------
91     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
92     : -1---------1------------
92     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE1)', 'chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,QUORUM0. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
165 (*) : -------0--1------1------
165     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
166     : --------0--1----1-------
166     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
167     : ------0--1-------1------
167     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
168     : --------0--1---1--------
168     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
169     : ------0--1------1-------
169     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
170     : -------0--1----1--------
170     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
171     : ----0-----1---------1---
171     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
172     : -----0-----1-------1----
172     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
173     : ---0-----1----------1---
173     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
174     : -----0-----1------1-----
174     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
175     : ---0-----1---------1----
175     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
176     : ----0-----1-------1-----
176     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
177     : -0--------1------------1
177     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
178     : --0--------1----------1-
178     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
179     : 0--------1-------------1
179     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
180     : --0--------1---------1--
180     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
181     : 0--------1------------1-
181     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
182     : -0--------1----------1--
182     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'vote(node0,value2)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'vote(node0,value2)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', 'vote(NODE0,VALUE1)', 'decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,NODE0,QUORUM0. member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
183 (*) : ----------1------1-0----
183     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
184     : -----------1----1---0---
184     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
185     : ---------1-------10-----
185     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
186     : -----------1---1----0---
186     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
187     : ---------1------1-0-----
187     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
188     : ----------1----1---0----
188     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
189     : ----------1------1----0-
189     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
190     : -----------1----1------0
190     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
191     : ---------1-------1---0--
191     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
192     : -----------1---1-------0
192     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
193     : ---------1------1----0--
193     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
194     : ----------1----1------0-
194     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
195     : ----------1-----0---1---
195     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
196     : -----------1-----0-1----
196     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
197     : ---------1-----0----1---
197     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
198     : -----------1-----01-----
198     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
199     : ---------1-----0---1----
199     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
200     : ----------1-----0-1-----
200     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
201     : ----------1---------1-0-
201     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
202     : -----------1-------1---0
202     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
203     : ---------1----------10--
203     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
204     : -----------1------1----0
204     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
205     : ---------1---------1-0--
205     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
206     : ----------1-------1---0-
206     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
207     : ----------1-----0------1
207     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
208     : -----------1-----0----1-
208     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
209     : ---------1-----0-------1
209     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
210     : -----------1-----0---1--
210     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
211     : ---------1-----0------1-
211     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
212     : ----------1-----0----1--
212     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
213     : ----------1--------0---1
213     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
214     : -----------1--------0-1-
214     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
215     : ---------1--------0----1
215     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
216     : -----------1--------01--
216     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
217     : ---------1--------0---1-
217     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
218     : ----------1--------0-1--
218     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'decision(VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,NODE0,NODE1. vote(NODE1,VALUE0) | ~decision(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 2
219 (*) : ----------1------1--1---
219     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
220     : -----------1----1--1----
220     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
221     : ---------1-------1--1---
221     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
222     : -----------1---1--1-----
222     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
223     : ---------1------1--1----
223     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
224     : ----------1----1--1-----
224     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
225     : ----------1------1-----1
225     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
226     : -----------1----1-----1-
226     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
227     : ---------1-------1-----1
227     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
228     : -----------1---1-----1--
228     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
229     : ---------1------1-----1-
229     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
230     : ----------1----1-----1--
230     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
231     : ----------1---------1--1
231     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
232     : -----------1-------1--1-
232     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
233     : ---------1----------1--1
233     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
234     : -----------1------1--1--
234     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
235     : ---------1---------1--1-
235     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
236     : ----------1-------1--1--
236     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
327 (*) : ----------1------11-----
327     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
328     : -----------1----1-1-----
328     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
329     : ---------1-------1-1----
329     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
330     : -----------1---1---1----
330     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
331     : ---------1------1---1---
331     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
332     : ----------1----1----1---
332     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
333     : ----------1------1---1--
333     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
334     : -----------1----1----1--
334     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
335     : ---------1-------1----1-
335     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
336     : -----------1---1------1-
336     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
337     : ---------1------1------1
337     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
338     : ----------1----1-------1
338     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
339     : ----------1---------11--
339     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
340     : -----------1-------1-1--
340     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
341     : ---------1----------1-1-
341     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
342     : -----------1------1---1-
342     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
343     : ---------1---------1---1
343     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
344     : ----------1-------1----1
344     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'vote(NODE1,VALUE2)', 'vote(NODE0,VALUE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node = NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node = NODE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,VALUE2,NODE1,NODE0. ~decision(VALUE0) | ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE1 = VALUE2 | VALUE0 = VALUE1 | VALUE0 = VALUE2))


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
246 (*) : ----------1-1-------1---
246     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
247     : -----------11------1----
247     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
248     : ---------1--1-------1---
248     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
249     : -----------11-----1-----
249     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
250     : ---------1--1------1----
250     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
251     : ----------1-1-----1-----
251     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
252     : ----------1-1----------1
252     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
253     : -----------11---------1-
253     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
254     : ---------1--1----------1
254     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
255     : -----------11--------1--
255     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
256     : ---------1--1---------1-
256     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
257     : ----------1-1--------1--
257     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
258     : ----------1--1---1------
258     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
259     : -----------1-1--1-------
259     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
260     : ---------1---1---1------
260     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
261     : -----------1-1-1--------
261     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
262     : ---------1---1--1-------
262     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
263     : ----------1--1-1--------
263     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
264     : ----------1--1---------1
264     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
265     : -----------1-1--------1-
265     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
266     : ---------1---1---------1
266     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
267     : -----------1-1-------1--
267     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
268     : ---------1---1--------1-
268     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
269     : ----------1--1-------1--
269     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
270     : ----------1---1--1------
270     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
271     : -----------1--1-1-------
271     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
272     : ---------1----1--1------
272     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
273     : -----------1--11--------
273     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
274     : ---------1----1-1-------
274     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
275     : ----------1---11--------
275     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
276     : ----------1---1-----1---
276     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
277     : -----------1--1----1----
277     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
278     : ---------1----1-----1---
278     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
279     : -----------1--1---1-----
279     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
280     : ---------1----1----1----
280     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
281     : ----------1---1---1-----
281     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$0$vote$0$0', 'value$0$decision$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$0$vote$0': [node$0$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$0$vote$0': node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'vote(NODE1,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,NODE0,NODE1. ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | ~decision(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
282 (*) : ----0-----1--------0----
282     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
283     : -----0-----1--------0---
283     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
284     : ---0-----1--------0-----
284     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
285     : -0--------1-----------0-
285     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
286     : --0--------1-----------0
286     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
287     : 0--------1-----------0--
287     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
288     : -------0--1-----0-------
288     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
289     : --------0--1-----0------
289     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
290     : ------0--1-----0--------
290     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', '~vote(node1,value1)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', '~vote(node1,value1)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', '~member(NODE0,QUORUM0)', 'decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. vote(NODE0,VALUE0) | member(NODE0,QUORUM0) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
291 (*) : -------0--1-1-----------
291     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
292     : --------0--11-----------
292     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
293     : ------0--1--1-----------
293     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
294     : ----0-----1--1----------
294     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
295     : -----0-----1-1----------
295     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
296     : ---0-----1---1----------
296     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
297     : -0--------1---1---------
297     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
298     : --0--------1--1---------
298     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
299     : 0--------1----1---------
299     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'didNotVote(node0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

part_sig: ('node$0$didNotVote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'didNotVote(node0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$didNotVote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0; node$1$member$0': [node$0$didNotVote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$didNotVote$0; node$1$member$0': node$0$didNotVote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', '~member(NODE0,QUORUM0)', 'decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. ~didNotVote(NODE0) | member(NODE0,QUORUM0) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)


=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
300 (*) : ----------1-----0--0----
300     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
301     : -----------1-----0--0---
301     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
302     : ---------1-----0--0-----
302     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
303     : ----------1-----0-----0-
303     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
304     : -----------1-----0-----0
304     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
305     : ---------1-----0-----0--
305     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
306     : ----------1--------0--0-
306     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
307     : -----------1--------0--0
307     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
308     : ---------1--------0--0--
308     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'decision(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. vote(NODE1,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
309 (*) : ----------1-1------0----
309     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
310     : -----------11-------0---
310     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
311     : ---------1--1-----0-----
311     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
312     : ----------1-1---------0-
312     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
313     : -----------11----------0
313     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
314     : ---------1--1--------0--
314     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
315     : ----------1--1--0-------
315     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
316     : -----------1-1---0------
316     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
317     : ---------1---1-0--------
317     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
318     : ----------1--1--------0-
318     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
319     : -----------1-1---------0
319     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
320     : ---------1---1-------0--
320     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
321     : ----------1---1-0-------
321     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
322     : -----------1--1--0------
322     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
323     : ---------1----10--------
323     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
324     : ----------1---1----0----
324     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
325     : -----------1--1-----0---
325     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
326     : ---------1----1---0-----
326     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'didNotVote(NODE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. vote(NODE1,VALUE0) | ~didNotVote(NODE0) | ~decision(VALUE0) | NODE0 = NODE1


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ----------1-1-1---------
345     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
346     : -----------11-1---------
346     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
347     : ---------1--1-1---------
347     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
348     : ----------1-11----------
348     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
349     : -----------111----------
349     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
350     : ---------1--11----------
350     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
351     : ----------1--11---------
351     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
352     : -----------1-11---------
352     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
353     : ---------1---11---------
353     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$didNotVote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

part_sig: ('node$0$didNotVote$0$0 | node$0$didNotVote$0$1', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'didNotVote(NODE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~didNotVote(NODE0) | ~didNotVote(NODE1) | ~decision(VALUE0) | NODE0 = NODE1


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : 0--0-----1-----1--------
357     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
358     : -0--0-----1-----1-------
358     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
359     : --0--0-----1-----1------
359     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
360     : 0-----0--1--------1-----
360     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : -0-----0--1--------1----
361     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : --0-----0--1--------1---
362     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : ---0--0--1-----------1--
363     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
364     : ----0--0--1-----------1-
364     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
365     : -----0--0--1-----------1
365     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', 'decision(value0)', 'vote(node0,value0)', 'member(node0,quorum__node0_node1)', 'member(node0,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0, value$0$vote$1$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', 'decision(value0)', 'vote(node0,value0)', 'member(node0,quorum__node0_node1)', 'member(node0,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', '~chosenAt(QUORUM1,VALUE0)', 'member(NODE0,QUORUM1)', 'vote(NODE0,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,QUORUM1,NODE0. ~member(NODE0,QUORUM0) | chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM1) | ~vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | QUORUM0 = QUORUM1


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : 0--0--0--1--------------
366     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
367     : -0--0--0--1-------------
367     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
368     : --0--0--0--1------------
368     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : --0--0-----10--00-------
423     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
424     : -0--0-----1-0--0-0------
424     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
425     : 0--0-----1--0---00------
425     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
426     : --0-----0--1-0----00----
426     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
427     : -0-----0--1--0----0-0---
427     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : 0-----0--1---0-----00---
428     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
429     : -----0--0--1--0------00-
429     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
430     : ----0--0--1---0------0-0
430     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
431     : ---0--0--1----0-------00
431     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', 'decision(value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)', 'member(node0,quorum__node0_node2)', 'member(node0,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$didNotVote$0$0, node$1$vote$0$0, node$1$vote$0$1, node$0$member$0$0, node$0$member$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', 'decision(value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)', 'member(node0,quorum__node0_node2)', 'member(node0,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '1$didNotVote': 1, '1$vote': 2, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM1,VALUE1)', '~vote(NODE0,VALUE0)', 'decision(VALUE1)', '~chosenAt(QUORUM0,VALUE1)', '~didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,QUORUM1,NODE0,QUORUM0. ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE1) | ~decision(VALUE1) | chosenAt(QUORUM0,VALUE1) | didNotVote(NODE0) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ---------11-------------
72     : ['decision(value0)', 'decision(value1)']
73     : ---------1-1------------
73     : ['decision(value0)', 'decision(value2)']
74     : ----------11------------
74     : ['decision(value1)', 'decision(value2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1. ~decision(VALUE1) | ~decision(VALUE0) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : -------1-1--------------
75     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
76     : --------11--------------
76     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
77     : ------1---1-------------
77     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
78     : --------1-1-------------
78     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
79     : ------1----1------------
79     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
80     : -------1---1------------
80     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
81     : ----1----1--------------
81     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
82     : -----1---1--------------
82     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
83     : ---1------1-------------
83     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
84     : -----1----1-------------
84     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
85     : ---1-------1------------
85     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
86     : ----1------1------------
86     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
87     : -1-------1--------------
87     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
88     : --1------1--------------
88     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
89     : 1---------1-------------
89     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
90     : --1-------1-------------
90     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
91     : 1----------1------------
91     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
92     : -1---------1------------
92     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1,QUORUM0. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
165 (*) : -------0--1------1------
165     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
166     : --------0--1----1-------
166     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
167     : ------0--1-------1------
167     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
168     : --------0--1---1--------
168     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
169     : ------0--1------1-------
169     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
170     : -------0--1----1--------
170     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
171     : ----0-----1---------1---
171     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
172     : -----0-----1-------1----
172     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
173     : ---0-----1----------1---
173     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
174     : -----0-----1------1-----
174     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
175     : ---0-----1---------1----
175     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
176     : ----0-----1-------1-----
176     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
177     : -0--------1------------1
177     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
178     : --0--------1----------1-
178     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
179     : 0--------1-------------1
179     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
180     : --0--------1---------1--
180     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
181     : 0--------1------------1-
181     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
182     : -0--------1----------1--
182     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,VALUE1,NODE0,QUORUM0. member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
183 (*) : ----------1------1-0----
183     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
184     : -----------1----1---0---
184     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
185     : ---------1-------10-----
185     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
186     : -----------1---1----0---
186     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
187     : ---------1------1-0-----
187     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
188     : ----------1----1---0----
188     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
189     : ----------1------1----0-
189     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
190     : -----------1----1------0
190     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
191     : ---------1-------1---0--
191     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
192     : -----------1---1-------0
192     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
193     : ---------1------1----0--
193     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
194     : ----------1----1------0-
194     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
195     : ----------1-----0---1---
195     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
196     : -----------1-----0-1----
196     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
197     : ---------1-----0----1---
197     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
198     : -----------1-----01-----
198     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
199     : ---------1-----0---1----
199     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
200     : ----------1-----0-1-----
200     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
201     : ----------1---------1-0-
201     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
202     : -----------1-------1---0
202     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
203     : ---------1----------10--
203     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
204     : -----------1------1----0
204     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
205     : ---------1---------1-0--
205     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
206     : ----------1-------1---0-
206     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
207     : ----------1-----0------1
207     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
208     : -----------1-----0----1-
208     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
209     : ---------1-----0-------1
209     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
210     : -----------1-----0---1--
210     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
211     : ---------1-----0------1-
211     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
212     : ----------1-----0----1--
212     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
213     : ----------1--------0---1
213     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
214     : -----------1--------0-1-
214     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
215     : ---------1--------0----1
215     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
216     : -----------1--------01--
216     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
217     : ---------1--------0---1-
217     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
218     : ----------1--------0-1--
218     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,VALUE1,NODE0,NODE1. vote(NODE1,VALUE0) | ~decision(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 12 =====================
size : 36
num_suborbits: 2
219 (*) : ----------1------1--1---
219     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
220     : -----------1----1--1----
220     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
221     : ---------1-------1--1---
221     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
222     : -----------1---1--1-----
222     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
223     : ---------1------1--1----
223     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
224     : ----------1----1--1-----
224     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
225     : ----------1------1-----1
225     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
226     : -----------1----1-----1-
226     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
227     : ---------1-------1-----1
227     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
228     : -----------1---1-----1--
228     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
229     : ---------1------1-----1-
229     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
230     : ----------1----1-----1--
230     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
231     : ----------1---------1--1
231     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
232     : -----------1-------1--1-
232     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
233     : ---------1----------1--1
233     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
234     : -----------1------1--1--
234     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
235     : ---------1---------1--1-
235     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
236     : ----------1-------1--1--
236     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
327 (*) : ----------1------11-----
327     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
328     : -----------1----1-1-----
328     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
329     : ---------1-------1-1----
329     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
330     : -----------1---1---1----
330     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
331     : ---------1------1---1---
331     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
332     : ----------1----1----1---
332     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
333     : ----------1------1---1--
333     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
334     : -----------1----1----1--
334     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
335     : ---------1-------1----1-
335     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
336     : -----------1---1------1-
336     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
337     : ---------1------1------1
337     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
338     : ----------1----1-------1
338     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
339     : ----------1---------11--
339     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
340     : -----------1-------1-1--
340     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
341     : ---------1----------1-1-
341     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
342     : -----------1------1---1-
342     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
343     : ---------1---------1---1
343     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
344     : ----------1-------1----1
344     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
num_forall :   5
num_exists :   0
num_literals : 10
quantified form : forall VALUE0,VALUE1,VALUE2,NODE1,NODE0. ~decision(VALUE0) | ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE1 = VALUE2 | VALUE0 = VALUE1 | VALUE0 = VALUE2))
qcost : 15




=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
246 (*) : ----------1-1-------1---
246     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
247     : -----------11------1----
247     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
248     : ---------1--1-------1---
248     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
249     : -----------11-----1-----
249     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
250     : ---------1--1------1----
250     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
251     : ----------1-1-----1-----
251     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
252     : ----------1-1----------1
252     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
253     : -----------11---------1-
253     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
254     : ---------1--1----------1
254     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
255     : -----------11--------1--
255     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
256     : ---------1--1---------1-
256     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
257     : ----------1-1--------1--
257     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
258     : ----------1--1---1------
258     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
259     : -----------1-1--1-------
259     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
260     : ---------1---1---1------
260     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
261     : -----------1-1-1--------
261     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
262     : ---------1---1--1-------
262     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
263     : ----------1--1-1--------
263     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
264     : ----------1--1---------1
264     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
265     : -----------1-1--------1-
265     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
266     : ---------1---1---------1
266     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
267     : -----------1-1-------1--
267     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
268     : ---------1---1--------1-
268     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
269     : ----------1--1-------1--
269     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
270     : ----------1---1--1------
270     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
271     : -----------1--1-1-------
271     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
272     : ---------1----1--1------
272     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
273     : -----------1--11--------
273     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
274     : ---------1----1-1-------
274     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
275     : ----------1---11--------
275     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
276     : ----------1---1-----1---
276     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
277     : -----------1--1----1----
277     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
278     : ---------1----1-----1---
278     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
279     : -----------1--1---1-----
279     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
280     : ---------1----1----1----
280     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
281     : ----------1---1---1-----
281     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,VALUE1,NODE0,NODE1. ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | ~decision(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
282 (*) : ----0-----1--------0----
282     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
283     : -----0-----1--------0---
283     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
284     : ---0-----1--------0-----
284     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
285     : -0--------1-----------0-
285     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
286     : --0--------1-----------0
286     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
287     : 0--------1-----------0--
287     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
288     : -------0--1-----0-------
288     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
289     : --------0--1-----0------
289     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
290     : ------0--1-----0--------
290     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,QUORUM0,NODE0. vote(NODE0,VALUE0) | member(NODE0,QUORUM0) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)
qcost : 7




=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
291 (*) : -------0--1-1-----------
291     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
292     : --------0--11-----------
292     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
293     : ------0--1--1-----------
293     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
294     : ----0-----1--1----------
294     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
295     : -----0-----1-1----------
295     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
296     : ---0-----1---1----------
296     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
297     : -0--------1---1---------
297     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
298     : --0--------1--1---------
298     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
299     : 0--------1----1---------
299     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,QUORUM0,NODE0. ~didNotVote(NODE0) | member(NODE0,QUORUM0) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)
qcost : 7




=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
300 (*) : ----------1-----0--0----
300     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
301     : -----------1-----0--0---
301     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
302     : ---------1-----0--0-----
302     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
303     : ----------1-----0-----0-
303     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
304     : -----------1-----0-----0
304     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
305     : ---------1-----0-----0--
305     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
306     : ----------1--------0--0-
306     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
307     : -----------1--------0--0
307     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
308     : ---------1--------0--0--
308     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. vote(NODE1,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
309 (*) : ----------1-1------0----
309     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
310     : -----------11-------0---
310     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
311     : ---------1--1-----0-----
311     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
312     : ----------1-1---------0-
312     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
313     : -----------11----------0
313     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
314     : ---------1--1--------0--
314     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
315     : ----------1--1--0-------
315     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
316     : -----------1-1---0------
316     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
317     : ---------1---1-0--------
317     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
318     : ----------1--1--------0-
318     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
319     : -----------1-1---------0
319     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
320     : ---------1---1-------0--
320     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
321     : ----------1---1-0-------
321     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
322     : -----------1--1--0------
322     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
323     : ---------1----10--------
323     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
324     : ----------1---1----0----
324     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
325     : -----------1--1-----0---
325     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
326     : ---------1----1---0-----
326     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. vote(NODE1,VALUE0) | ~didNotVote(NODE0) | ~decision(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ----------1-1-1---------
345     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
346     : -----------11-1---------
346     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
347     : ---------1--1-1---------
347     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
348     : ----------1-11----------
348     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
349     : -----------111----------
349     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
350     : ---------1--11----------
350     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
351     : ----------1--11---------
351     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
352     : -----------1-11---------
352     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
353     : ---------1---11---------
353     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~didNotVote(NODE0) | ~didNotVote(NODE1) | ~decision(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : 0--0-----1-----1--------
357     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
358     : -0--0-----1-----1-------
358     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
359     : --0--0-----1-----1------
359     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
360     : 0-----0--1--------1-----
360     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : -0-----0--1--------1----
361     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : --0-----0--1--------1---
362     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : ---0--0--1-----------1--
363     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
364     : ----0--0--1-----------1-
364     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
365     : -----0--0--1-----------1
365     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,QUORUM0,QUORUM1,NODE0. ~member(NODE0,QUORUM0) | chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM1) | ~vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : 0--0--0--1--------------
366     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
367     : -0--0--0--1-------------
367     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
368     : --0--0--0--1------------
368     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : --0--0-----10--00-------
423     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
424     : -0--0-----1-0--0-0------
424     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
425     : 0--0-----1--0---00------
425     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
426     : --0-----0--1-0----00----
426     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
427     : -0-----0--1--0----0-0---
427     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : 0-----0--1---0-----00---
428     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
429     : -----0--0--1--0------00-
429     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
430     : ----0--0--1---0------0-0
430     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
431     : ---0--0--1----0-------00
431     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall VALUE1,QUORUM1,NODE0,QUORUM0. ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE1) | ~decision(VALUE1) | chosenAt(QUORUM0,VALUE1) | didNotVote(NODE0) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 0.494 seconds

[QRM NOTE]: Time elapsed since last: 0.195 seconds

[QRM NOTE]: Peak memory: 2445169 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

=============================================================================================


New level: 1
 pending : [4, 5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [4, 5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 1 among pending : [4, 5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 4 with phase True at level 1

After decision at level 1
 pending : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 4]


New level: 2
 pending : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, 67108864), (16, 524288), (17, 33554432), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 2 among pending : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, 67108864), (16, 524288), (17, 33554432), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 4, 22]


New level: 3
 pending : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 4, 22]


Before reduction : 
 pending  : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 4, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, 67108864), (16, 524288), (17, 33554432), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 4, 22]


Before reduction : 
 pending  : []
 solution : [0, 4, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 22]


Solution : [0, 4, 22] has cost 15.


Before backtrack at level 3
 pending : []
 solution : [0, 4, 22]

After backtrack at level 3
 pending : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 4, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, 67108864), (16, 524288), (17, 33554432), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 3 among pending : [5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, 67108864), (16, 524288), (17, 33554432), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [5, 10, 11, 12, 14, 16, 17, 18, 19, 21, 26]
 solution : [0, 4, 15]


New level: 4
 pending : [5, 10, 11, 12, 14, 16, 17, 18, 19, 21, 26]
 solution : [0, 4, 15]


Before reduction : 
 pending  : [5, 10, 11, 12, 14, 16, 17, 18, 19, 21, 26]
 solution : [0, 4, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, 67108864), (16, 524288), (17, 33554432), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {5, 10, 11, 12, 14, 16, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 4, 15]


Before reduction : 
 pending  : []
 solution : [0, 4, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 15]


Solution : [0, 4, 15] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [0, 4, 15]

After backtrack at level 4
 pending : [5, 10, 11, 12, 14, 16, 17, 18, 19, 21, 26]
 solution : [0, 4, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [5, 10, 11, 12, 14, 16, 17, 18, 19, 21, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 10, 11, 12, 14, 16, 17, 18, 19, 21, 26]
 solution : [0, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, 33554432), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [5, 10, 11, 12, 14, 16, 17, 18, 19, 21, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 4 among pending : [5, 10, 11, 12, 14, 16, 17, 18, 19, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, 33554432), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 4

After decision at level 4
 pending : [5, 10, 11, 12, 14, 16, 18, 19, 21, 26]
 solution : [0, 4, 17]


New level: 5
 pending : [5, 10, 11, 12, 14, 16, 18, 19, 21, 26]
 solution : [0, 4, 17]


Before reduction : 
 pending  : [5, 10, 11, 12, 14, 16, 18, 19, 21, 26]
 solution : [0, 4, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, 33554432), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {5, 10, 11, 12, 14, 16, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 4, 17]


Before reduction : 
 pending  : []
 solution : [0, 4, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 17]


Solution : [0, 4, 17] has cost 18.


Before backtrack at level 5
 pending : []
 solution : [0, 4, 17]

After backtrack at level 5
 pending : [5, 10, 11, 12, 14, 16, 18, 19, 21, 26]
 solution : [0, 4, 17]


Invert decision for 17 at level 4


New level: 5
 pending : [5, 10, 11, 12, 14, 16, 18, 19, 21, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 10, 11, 12, 14, 16, 18, 19, 21, 26]
 solution : [0, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [5, 10, 11, 12, 14, 16, 18, 19, 21, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 5 among pending : [5, 10, 11, 12, 14, 16, 18, 19, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [5, 11, 12, 14, 16, 18, 19, 21, 26]
 solution : [0, 4, 10]


New level: 6
 pending : [5, 11, 12, 14, 16, 18, 19, 21, 26]
 solution : [0, 4, 10]


Before reduction : 
 pending  : [5, 11, 12, 14, 16, 18, 19, 21, 26]
 solution : [0, 4, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 8192), (17, -1), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {11, 12, 5, 14}

After reduction : 
 pending  : [16, 18, 19, 21, 26]
 solution : [0, 4, 10]


Before reduction : 
 pending  : [16, 18, 19, 21, 26]
 solution : [0, 4, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 8192), (17, -1), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, -1), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [16, 18, 19, 21, 26]
 solution : [0, 4, 10]


Solution : [0, 4, 10] has cost 20.


Before backtrack at level 6
 pending : [16, 18, 19, 21, 26]
 solution : [0, 4, 10]

After backtrack at level 6
 pending : [16, 18, 19, 21, 26, 5, 11, 12, 14]
 solution : [0, 4, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [16, 18, 19, 21, 26, 5, 11, 12, 14]
 solution : [0, 4]


Before reduction : 
 pending  : [16, 18, 19, 21, 26, 5, 11, 12, 14]
 solution : [0, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, -1), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [16, 18, 19, 21, 26, 5, 11, 12, 14]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 6 among pending : [16, 18, 19, 21, 26, 5, 11, 12, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [16, 18, 19, 21, 26, 5, 12, 14]
 solution : [0, 4, 11]


New level: 7
 pending : [16, 18, 19, 21, 26, 5, 12, 14]
 solution : [0, 4, 11]


Before reduction : 
 pending  : [16, 18, 19, 21, 26, 5, 12, 14]
 solution : [0, 4, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1048576), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, -1), (16, 8192), (17, -1), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {12, 5, 14}

After reduction : 
 pending  : [16, 18, 19, 21, 26]
 solution : [0, 4, 11]


Before reduction : 
 pending  : [16, 18, 19, 21, 26]
 solution : [0, 4, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, -1), (16, 8192), (17, -1), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, -1), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 18, 19, 21, 26]
 solution : [0, 4, 11]


Solution : [0, 4, 11] has cost 20.


Before backtrack at level 7
 pending : [16, 18, 19, 21, 26]
 solution : [0, 4, 11]

After backtrack at level 7
 pending : [16, 18, 19, 21, 26, 5, 12, 14]
 solution : [0, 4, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [16, 18, 19, 21, 26, 5, 12, 14]
 solution : [0, 4]


Before reduction : 
 pending  : [16, 18, 19, 21, 26, 5, 12, 14]
 solution : [0, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, -1), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 18, 19, 21, 26, 5, 12, 14]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 7 among pending : [16, 18, 19, 21, 26, 5, 12, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [18, 19, 21, 26, 5, 12, 14]
 solution : [0, 4, 16]


New level: 8
 pending : [18, 19, 21, 26, 5, 12, 14]
 solution : [0, 4, 16]


Before reduction : 
 pending  : [18, 19, 21, 26, 5, 12, 14]
 solution : [0, 4, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, 524288), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {18, 19, 14}

After reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 4, 16]


Before reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 4, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 4, 16]


Solution : [0, 4, 16] has cost 18.


Before backtrack at level 8
 pending : [21, 26, 5, 12]
 solution : [0, 4, 16]

After backtrack at level 8
 pending : [21, 26, 5, 12, 18, 19, 14]
 solution : [0, 4, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [21, 26, 5, 12, 18, 19, 14]
 solution : [0, 4]


Before reduction : 
 pending  : [21, 26, 5, 12, 18, 19, 14]
 solution : [0, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 5, 12, 18, 19, 14]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 8 among pending : [21, 26, 5, 12, 18, 19, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [21, 26, 5, 12, 19, 14]
 solution : [0, 4, 18]


New level: 9
 pending : [21, 26, 5, 12, 19, 14]
 solution : [0, 4, 18]


Before reduction : 
 pending  : [21, 26, 5, 12, 19, 14]
 solution : [0, 4, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 262144), (19, 8192), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {19, 14}

After reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 4, 18]


Before reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 4, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 4, 18]


Solution : [0, 4, 18] has cost 18.


Before backtrack at level 9
 pending : [21, 26, 5, 12]
 solution : [0, 4, 18]

After backtrack at level 9
 pending : [21, 26, 5, 12, 19, 14]
 solution : [0, 4, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [21, 26, 5, 12, 19, 14]
 solution : [0, 4]


Before reduction : 
 pending  : [21, 26, 5, 12, 19, 14]
 solution : [0, 4]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 5, 12, 14]
 solution : [0, 4, 19]


Before reduction : 
 pending  : [21, 26, 5, 12, 14]
 solution : [0, 4, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 5, 12, 14]
 solution : [0, 4, 19]


Solution : [0, 4, 19] has cost 18.


Before backtrack at level 9
 pending : [21, 26, 5, 12, 14]
 solution : [0, 4, 19]

After backtrack at level 9
 pending : [21, 26, 5, 12, 14, 19]
 solution : [0, 4]


Before backtrack at level 8
 pending : [21, 26, 5, 12, 14, 19]
 solution : [0, 4]

After backtrack at level 8
 pending : [21, 26, 5, 12, 14, 19, 18]
 solution : [0, 4]


Before backtrack at level 7
 pending : [21, 26, 5, 12, 14, 19, 18]
 solution : [0, 4]

After backtrack at level 7
 pending : [21, 26, 5, 12, 14, 19, 18, 16]
 solution : [0, 4]


Before backtrack at level 6
 pending : [21, 26, 5, 12, 14, 19, 18, 16]
 solution : [0, 4]

After backtrack at level 6
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11]
 solution : [0, 4]


Before backtrack at level 5
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11]
 solution : [0, 4]

After backtrack at level 5
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0, 4]


Before backtrack at level 4
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0, 4]

After backtrack at level 4
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0, 4]


Before backtrack at level 3
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0, 4]

After backtrack at level 3
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0, 4]


Before backtrack at level 2
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0, 4]

After backtrack at level 2
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15, 22]
 solution : [0, 4]


Invert decision for 4 at level 1


New level: 2
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15, 22]
 solution : [0]


Before reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15, 22]
 solution : [0]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15, 22]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 2 among pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0, 22]


New level: 3
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0, 22]


Before reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {5, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 22]


Before reduction : 
 pending  : []
 solution : [0, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 22]


Solution : [0, 22] has cost 10.


Before backtrack at level 3
 pending : []
 solution : [0, 22]

After backtrack at level 3
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0]


Before reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 3 among pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0, 15]


New level: 4
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0, 15]


Before reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, 268435456), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {5, 10, 11, 12, 14, 16, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 15]


Before reduction : 
 pending  : []
 solution : [0, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 15]


Solution : [0, 15] has cost 13.


Before backtrack at level 4
 pending : []
 solution : [0, 15]

After backtrack at level 4
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0]


Before reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 4 among pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 4

After decision at level 4
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0, 17]


New level: 5
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0, 17]


Before reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, 134217728), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {5, 10, 11, 12, 14, 16, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 17]


Before reduction : 
 pending  : []
 solution : [0, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 17]


Solution : [0, 17] has cost 13.


Before backtrack at level 5
 pending : []
 solution : [0, 17]

After backtrack at level 5
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0, 17]


Invert decision for 17 at level 4


New level: 5
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0]


Before reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 5 among pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11]
 solution : [0, 10]


New level: 6
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11]
 solution : [0, 10]


Before reduction : 
 pending  : [21, 26, 5, 12, 14, 19, 18, 16, 11]
 solution : [0, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 32768), (17, -1), (18, 8192), (19, 8192), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {11, 12, 5, 14}

After reduction : 
 pending  : [21, 26, 19, 18, 16]
 solution : [0, 10]


Before reduction : 
 pending  : [21, 26, 19, 18, 16]
 solution : [0, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, 32768), (17, -1), (18, 8192), (19, 8192), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 32768), (17, -1), (18, 8192), (19, 8192), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 26, 19, 18, 16]
 solution : [0, 10]


Solution : [0, 10] has cost 15.


Before backtrack at level 6
 pending : [21, 26, 19, 18, 16]
 solution : [0, 10]

After backtrack at level 6
 pending : [21, 26, 19, 18, 16, 5, 12, 14, 11]
 solution : [0, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [21, 26, 19, 18, 16, 5, 12, 14, 11]
 solution : [0]


Before reduction : 
 pending  : [21, 26, 19, 18, 16, 5, 12, 14, 11]
 solution : [0]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 32768), (17, -1), (18, 8192), (19, 8192), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 26, 19, 18, 16, 5, 12, 14, 11]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 6 among pending : [21, 26, 19, 18, 16, 5, 12, 14, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [21, 26, 19, 18, 16, 5, 12, 14]
 solution : [0, 11]


New level: 7
 pending : [21, 26, 19, 18, 16, 5, 12, 14]
 solution : [0, 11]


Before reduction : 
 pending  : [21, 26, 19, 18, 16, 5, 12, 14]
 solution : [0, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4194304), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, -1), (16, 32768), (17, -1), (18, 8192), (19, 8192), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {12, 5, 14}

After reduction : 
 pending  : [21, 26, 19, 18, 16]
 solution : [0, 11]


Before reduction : 
 pending  : [21, 26, 19, 18, 16]
 solution : [0, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, -1), (16, 32768), (17, -1), (18, 8192), (19, 8192), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 32768), (17, -1), (18, 8192), (19, 8192), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 26, 19, 18, 16]
 solution : [0, 11]


Solution : [0, 11] has cost 15.


Before backtrack at level 7
 pending : [21, 26, 19, 18, 16]
 solution : [0, 11]

After backtrack at level 7
 pending : [21, 26, 19, 18, 16, 5, 12, 14]
 solution : [0, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [21, 26, 19, 18, 16, 5, 12, 14]
 solution : [0]


Before reduction : 
 pending  : [21, 26, 19, 18, 16, 5, 12, 14]
 solution : [0]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 32768), (17, -1), (18, 8192), (19, 8192), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 26, 19, 18, 16, 5, 12, 14]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 7 among pending : [21, 26, 19, 18, 16, 5, 12, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [21, 26, 19, 18, 5, 12, 14]
 solution : [0, 16]


New level: 8
 pending : [21, 26, 19, 18, 5, 12, 14]
 solution : [0, 16]


Before reduction : 
 pending  : [21, 26, 19, 18, 5, 12, 14]
 solution : [0, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, 2097152), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {18, 19, 14}

After reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 16]


Before reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 16]


Solution : [0, 16] has cost 13.


Before backtrack at level 8
 pending : [21, 26, 5, 12]
 solution : [0, 16]

After backtrack at level 8
 pending : [21, 26, 5, 12, 19, 18, 14]
 solution : [0, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [21, 26, 5, 12, 19, 18, 14]
 solution : [0]


Before reduction : 
 pending  : [21, 26, 5, 12, 19, 18, 14]
 solution : [0]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, -1), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 5, 12, 19, 18, 14]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 8 among pending : [21, 26, 5, 12, 19, 18, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, -1), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [21, 26, 5, 12, 19, 14]
 solution : [0, 18]


New level: 9
 pending : [21, 26, 5, 12, 19, 14]
 solution : [0, 18]


Before reduction : 
 pending  : [21, 26, 5, 12, 19, 14]
 solution : [0, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, -1), (14, 65536), (15, -1), (16, -1), (17, -1), (18, 1048576), (19, 32768), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {19, 14}

After reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 18]


Before reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 5, 12]
 solution : [0, 18]


Solution : [0, 18] has cost 13.


Before backtrack at level 9
 pending : [21, 26, 5, 12]
 solution : [0, 18]

After backtrack at level 9
 pending : [21, 26, 5, 12, 19, 14]
 solution : [0, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [21, 26, 5, 12, 19, 14]
 solution : [0]


Before reduction : 
 pending  : [21, 26, 5, 12, 19, 14]
 solution : [0]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 5, 12, 14]
 solution : [0, 19]


Before reduction : 
 pending  : [21, 26, 5, 12, 14]
 solution : [0, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 5, 12, 14]
 solution : [0, 19]


Solution : [0, 19] has cost 13.


Before backtrack at level 9
 pending : [21, 26, 5, 12, 14]
 solution : [0, 19]

After backtrack at level 9
 pending : [21, 26, 5, 12, 14, 19]
 solution : [0]


Before backtrack at level 8
 pending : [21, 26, 5, 12, 14, 19]
 solution : [0]

After backtrack at level 8
 pending : [21, 26, 5, 12, 14, 19, 18]
 solution : [0]


Before backtrack at level 7
 pending : [21, 26, 5, 12, 14, 19, 18]
 solution : [0]

After backtrack at level 7
 pending : [21, 26, 5, 12, 14, 19, 18, 16]
 solution : [0]


Before backtrack at level 6
 pending : [21, 26, 5, 12, 14, 19, 18, 16]
 solution : [0]

After backtrack at level 6
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11]
 solution : [0]


Before backtrack at level 5
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11]
 solution : [0]

After backtrack at level 5
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0]


Before backtrack at level 4
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10]
 solution : [0]

After backtrack at level 4
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0]


Before backtrack at level 3
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17]
 solution : [0]

After backtrack at level 3
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0]


Before backtrack at level 2
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15]
 solution : [0]

After backtrack at level 2
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15, 22]
 solution : [0]


Before backtrack at level 1
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15, 22]
 solution : [0]

After backtrack at level 1
 pending : [21, 26, 5, 12, 14, 19, 18, 16, 11, 10, 17, 15, 22, 4]
 solution : [0]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 10

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=2)

invariant [def_didNotVote] didNotVote(N) = forall V. ~vote(N,V) # definition

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [0, 22] (length = 2)

invariant [invar_0] forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_22] forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 0.611 seconds

[QRM NOTE]: Time elapsed since last: 0.117 seconds

[QRM NOTE]: Peak memory: 2406011 bytes


================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall N. didNotVote(N) <-> (forall V. ~vote(N,V))) & (forall Q,V. chosenAt(Q,V) <-> (forall N. member(N,Q) -> vote(N,V))) & (forall Q2,Q1. (exists N. (member(N,Q1) & member(N,Q2)))) & (forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1) & (forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))))

[QRM NOTE]: Time elapsed since start: 2.884 seconds

[QRM NOTE]: Time elapsed since last: 2.272 seconds

[QRM NOTE]: Peak memory: 1407615 bytes


***********************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3

***********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy -s node=4,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=4,value=3]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_4_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_4_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_4_value_3.finite.cpp toy_consensus.node_4_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_4_value_3.finite.o toy_consensus.node_4_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: number of branching actions: 24

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 6.468 seconds

[QRM NOTE]: Time elapsed since last: 6.468 seconds

[QRM NOTE]: Peak memory: 1201712 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        295

[FW NOTE]: number of dfs representative states:     14

[FW NOTE]: number of dfs non-representative states: 281


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=4,value=3]

===========================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: didNotVote('node',)
predicate: decision('value',)
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node2,value2)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node1_node3,value2)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value2)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'didNotVote(node3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)']
representative states : 4026592695, 1912663479, 843115959, 36512066999, 20100485344695, 20104780311991, 34431692215, 38726659511, 40807034295, 307293623, 38989239, 39120311, 847310263, 312536503


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000001111000000000000
lex min decimal: 4026592695
states:
0000000000000001111000000000000




=== State Orbit 1 =====================
size : 12
repr state: 0000000000000000111100000000000
lex min decimal: 1912663479
states:
0000000000000001101000000010000
0000000000000001011000100000000
0000000000000001110000000000001
0000000000000001101000000100000
0000000000000000111010000000000
0000000000000000111001000000000
0000000000000001011000010000000
0000000000000001011000001000000
0000000000000001110000000000100
0000000000000001101000000001000
0000000000000000111100000000000
0000000000000001110000000000010




=== State Orbit 2 =====================
size : 18
repr state: 0000000000000000011100100000000
lex min decimal: 843115959
states:
0000000000000000101001000001000
0000000000000001001000001001000
0000000000000001010000100000100
0000000000000000011100100000000
0000000000000001001000100100000
0000000000000000110010000000010
0000000000000000110100000000100
0000000000000001100000000001001
0000000000000000011001001000000
0000000000000000011010010000000
0000000000000001010000001000001
0000000000000001001000010010000
0000000000000000110001000000001
0000000000000001100000000010010
0000000000000001010000010000010
0000000000000001100000000100100
0000000000000000101010000010000
0000000000000000101100000100000




=== State Orbit 3 =====================
size : 12
repr state: 1000000000000000001100100100000
lex min decimal: 36512066999
states:
0000001000000000100100000100100
1000000000000000001100100100000
0000100000000000010010010000010
0000010000000000010001001000001
0000000010000000100001000001001
0000000001000001000000100100100
0000000000100001000000010010010
0001000000000000010100100000100
0000000000010001000000001001001
0000000100000000100010000010010
0010000000000000001001001001000
0100000000000000001010010010000




=== State Orbit 4 =====================
size : 3
repr state: 1001001001000000000100100100100
lex min decimal: 20100485344695
states:
1001001001000000000100100100100
0100100100100000000010010010010
0010010010010000000001001001001




=== State Orbit 5 =====================
size : 3
repr state: 1001001001001000000100100100100
lex min decimal: 20104780311991
states:
1001001001001000000100100100100
0100100100100100000010010010010
0010010010010010000001001001001




=== State Orbit 6 =====================
size : 24
repr state: 1000000000000000000100100100010
lex min decimal: 34431692215
states:
0001000000000000000100100001100
0100000000000000000010010010001
0000000100000000000010001010010
0010000000000000000001001001010
0000000100000000000010100010010
0000000000100000000001010010010
0000000010000000000001100001001
0000000000010000000100001001001
0000100000000000000010010100010
0000100000000000000010010001010
1000000000000000000100100100010
0000001000000000000100010100100
0001000000000000000100100010100
1000000000000000000100100100001
0000000000010000000010001001001
0000000000100000000100010010010
0100000000000000000010010010100
0000000001000000000001100100100
0000001000000000000100001100100
0000010000000000000001001100001
0010000000000000000001001001100
0000010000000000000001001010001
0000000001000000000010100100100
0000000010000000000001010001001




=== State Orbit 7 =====================
size : 24
repr state: 1000000000001000000100100100010
lex min decimal: 38726659511
states:
0000000000010010000010001001001
0100000000000100000010010010001
0000000100000100000010100010010
0001000000001000000100100001100
0000000010000010000001010001001
0100000000000100000010010010100
0000000001001000000010100100100
0000100000000100000010010100010
0000000000100100000100010010010
0000000010000010000001100001001
0000000001001000000001100100100
0001000000001000000100100010100
0010000000000010000001001001100
0000000000010010000100001001001
0000001000001000000100001100100
1000000000001000000100100100010
0000010000000010000001001010001
0010000000000010000001001001010
0000000100000100000010001010010
0000100000000100000010010001010
1000000000001000000100100100001
0000010000000010000001001100001
0000001000001000000100010100100
0000000000100100000001010010010




=== State Orbit 8 =====================
size : 12
repr state: 1000000000001000001100100100000
lex min decimal: 40807034295
states:
0000000000100101000000010010010
0000010000000010010001001000001
0100000000000100001010010010000
1000000000001000001100100100000
0001000000001000010100100000100
0000000010000010100001000001001
0000001000001000100100000100100
0000000001001001000000100100100
0000000000010011000000001001001
0000000100000100100010000010010
0010000000000010001001001001000
0000100000000100010010010000010




=== State Orbit 9 =====================
size : 72
repr state: 0000000000000000001100100010000
lex min decimal: 307293623
states:
0000000000000000010010001000010
0000000000000000001001010001000
0000000000000001000000010010001
0000000000000000100010000010100
0000000000000000100100000001100
0000000000000001000000001100001
0000000000000000001100010100000
0000000000000000010001100000100
0000000000000000001010010001000
0000000000000000100010000001010
0000000000000000001001010010000
0000000000000001000000001001100
0000000000000001000000001001010
0000000000000000001010010100000
0000000000000001000000100010010
0000000000000000010010010000100
0000000000000000010001001000010
0000000000000000010100001000100
0000000000000000010010100000100
0000000000000000010010010000001
0000000000000000100001000001100
0000000000000000100100000010100
0000000000000001000000010100100
0000000000000000100010000001001
0000000000000000100010000010001
0000000000000000100010000100010
0000000000000000100001000001010
0000000000000001000000001010001
0000000000000000100001000010010
0000000000000000100010000100100
0000000000000001000000010100010
0000000000000000001001001010000
0000000000000000001010100010000
0000000000000000001100001001000
0000000000000000001100001100000
0000000000000001000000100100010
0000000000000001000000010010100
0000000000000001000000100010100
0000000000000000100001000010001
0000000000000001000000100001100
0000000000000000100100000010010
0000000000000001000000010001010
0000000000000000010100100000010
0000000000000001000000100100001
0000000000000000001010001010000
0000000000000000100001000100001
0000000000000000100001000100100
0000000000000000001001001100000
0000000000000000001001100001000
0000000000000000001001100100000
0000000000000000001100100010000
0000000000000000010001001000100
0000000000000000010100010000100
0000000000000000100100000100001
0000000000000000010010100000010
0000000000000000010001010000010
0000000000000000001100100001000
0000000000000001000000100001001
0000000000000000010001100000001
0000000000000000001010001001000
0000000000000000100100000001001
0000000000000000010100010000010
0000000000000000010100001000001
0000000000000000001010100100000
0000000000000001000000001100100
0000000000000000010001010000001
0000000000000001000000001010010
0000000000000001000000010001001
0000000000000000100100000100010
0000000000000000001100010010000
0000000000000000010100100000001
0000000000000000010010001000001




=== State Orbit 10 =====================
size : 18
repr state: 0000000000000000000100100010010
lex min decimal: 38989239
states:
0000000000000000000001100001100
0000000000000000000010010100100
0000000000000000000100001100001
0000000000000000000001010010001
0000000000000000000010100010100
0000000000000000000100010100010
0000000000000000000100001001100
0000000000000000000010010001001
0000000000000000000010001001010
0000000000000000000010100100010
0000000000000000000100100001001
0000000000000000000010001010001
0000000000000000000100010010100
0000000000000000000001001010010
0000000000000000000001001100100
0000000000000000000001100100001
0000000000000000000100100010010
0000000000000000000001010001010




=== State Orbit 11 =====================
size : 36
repr state: 0000000000000000000100100010001
lex min decimal: 39120311
states:
0000000000000000000100010001100
0000000000000000000100100010001
0000000000000000000100100001010
0000000000000000000100001010100
0000000000000000000010010100001
0000000000000000000100001001010
0000000000000000000010001010100
0000000000000000000001010100001
0000000000000000000100010100001
0000000000000000000010001001100
0000000000000000000010100001100
0000000000000000000010100100001
0000000000000000000010001100010
0000000000000000000100001010010
0000000000000000000001100010100
0000000000000000000100010001001
0000000000000000000001010100100
0000000000000000000001010100010
0000000000000000000100010001010
0000000000000000000001100001010
0000000000000000000010001100001
0000000000000000000010001100100
0000000000000000000001001100010
0000000000000000000010010001100
0000000000000000000001001010100
0000000000000000000001100100010
0000000000000000000010100010001
0000000000000000000001100010010
0000000000000000000100010010001
0000000000000000000100001100010
0000000000000000000001010010100
0000000000000000000100001010001
0000000000000000000010100001010
0000000000000000000001010001100
0000000000000000000001100010001
0000000000000000000010100001001




=== State Orbit 12 =====================
size : 36
repr state: 0000000000000000011100010000000
lex min decimal: 847310263
states:
0000000000000001100000000001100
0000000000000001010000100000001
0000000000000000101010000100000
0000000000000000110010000000100
0000000000000001001000100001000
0000000000000000101010000001000
0000000000000000110100000000010
0000000000000000110001000000010
0000000000000001001000001010000
0000000000000001100000000001010
0000000000000000011100010000000
0000000000000000110100000000001
0000000000000001100000000100010
0000000000000001001000001100000
0000000000000000101001000100000
0000000000000001100000000010001
0000000000000001001000010001000
0000000000000000110001000000100
0000000000000001001000010100000
0000000000000001010000001000100
0000000000000000101001000010000
0000000000000000011001100000000
0000000000000001010000010000001
0000000000000000011100001000000
0000000000000001100000000100001
0000000000000000011010001000000
0000000000000001100000000010100
0000000000000000101100000010000
0000000000000001010000001000010
0000000000000000101100000001000
0000000000000000011001010000000
0000000000000001001000100010000
0000000000000000011010100000000
0000000000000000110010000000001
0000000000000001010000010000100
0000000000000001010000100000010




=== State Orbit 13 =====================
size : 24
repr state: 0000000000000000001100010001000
lex min decimal: 312536503
states:
0000000000000000001001100010000
0000000000000000010010001000100
0000000000000000100001000100010
0000000000000000100010000001100
0000000000000000100001000010100
0000000000000000010010100000001
0000000000000001000000001010100
0000000000000000010001100000010
0000000000000001000000010100001
0000000000000000010001010000100
0000000000000000010100001000010
0000000000000001000000010001100
0000000000000000001100001010000
0000000000000001000000100001010
0000000000000001000000001100010
0000000000000000100100000010001
0000000000000000001010001100000
0000000000000000001001010100000
0000000000000000100100000001010
0000000000000000001100010001000
0000000000000000001010100001000
0000000000000000100010000100001
0000000000000000010100010000001
0000000000000001000000100010001



[QRM NOTE]: Time elapsed since start: 7.312 seconds

[QRM NOTE]: Time elapsed since last: 0.844 seconds

[QRM NOTE]: Peak memory: 1310283 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=4,value=3]

================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.346 seconds

[QRM NOTE]: Time elapsed since last: 1.035 seconds

[QRM NOTE]: Peak memory: 447884 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=4]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_3_value_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_4.finite.cpp toy_consensus.node_3_value_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_4.finite.o toy_consensus.node_3_value_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 24

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 6.659 seconds

[QRM NOTE]: Time elapsed since last: 6.659 seconds

[QRM NOTE]: Peak memory: 1198696 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        177

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 167


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=4]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: decision('value',)
predicate: didNotVote('node',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node1,value3)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node0_node2,value3)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'chosenAt(quorum__node1_node2,value3)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'decision(value3)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)']
representative states : 14680491, 6422955, 276833195, 73283019691, 73299796907, 268706731, 285483947, 293610411, 2245035, 149931


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000111000000000000
lex min decimal: 14680491
states:
0000000000000000111000000000000




=== State Orbit 1 =====================
size : 12
repr state: 0000000000000000011100000000000
lex min decimal: 6422955
states:
0000000000000000101000000100000
0000000000000000110000000000010
0000000000000000101000010000000
0000000000000000101000000010000
0000000000000000110000000000001
0000000000000000011000100000000
0000000000000000101000001000000
0000000000000000011001000000000
0000000000000000011100000000000
0000000000000000011010000000000
0000000000000000110000000000100
0000000000000000110000000001000




=== State Orbit 2 =====================
size : 12
repr state: 1000000000000000001100010000000
lex min decimal: 276833195
states:
0000010000000000010010000000100
1000000000000000001100010000000
0000000100000000010000100000001
0000000000100000100000000100010
0000000000010000100000000010001
0001000000000000001000100010000
0010000000000000001001000100000
0000000001000000100000001000100
0000100000000000010100000001000
0000000010000000100000010001000
0100000000000000001010001000000
0000001000000000010001000000010




=== State Orbit 3 =====================
size : 4
repr state: 1000100010000000000100010001000
lex min decimal: 73283019691
states:
0010001000100000000001000100010
0100010001000000000010001000100
0001000100010000000000100010001
1000100010000000000100010001000




=== State Orbit 4 =====================
size : 4
repr state: 1000100010001000000100010001000
lex min decimal: 73299796907
states:
0001000100010001000000100010001
0010001000100010000001000100010
1000100010001000000100010001000
0100010001000100000010001000100




=== State Orbit 5 =====================
size : 36
repr state: 1000000000000000000100010000100
lex min decimal: 268706731
states:
0001000000000000000000100010010
0000100000000000000100001001000
0000100000000000000100000011000
1000000000000000000100010000100
0100000000000000000010001001000
0001000000000000000000100010100
0000000000100000000000100100010
0000000001000000000000101000100
0000000000010000000100000010001
0010000000000000000001000101000
0000010000000000000010000100100
0000010000000000000010000010100
0000000010000000000010010001000
1000000000000000000100010000010
0000000100000000000000101000001
0000000000010000000001000010001
0000001000000000000001001000010
0000000000100000000100000100010
0000000001000000000100001000100
0000000001000000000001001000100
0000000010000000000001010001000
0000001000000000000001010000010
0000000010000000000000110001000
0001000000000000000000100011000
0000001000000000000001000010010
1000000000000000000100010000001
0000000100000000000000110000001
0000000000010000000010000010001
0100000000000000000010001000010
0000000000100000000010000100010
0000010000000000000010010000100
0000000100000000000000100100001
0000100000000000000100000101000
0010000000000000000001000100100
0100000000000000000010001000001
0010000000000000000001000100001




=== State Orbit 6 =====================
size : 36
repr state: 1000000000001000000100010000100
lex min decimal: 285483947
states:
0000000010001000000000110001000
0000100000001000000100000101000
0000000000010001000100000010001
0100000000000100000010001001000
0000000001000100000001001000100
0001000000000001000000100010100
0000000001000100000000101000100
0000000001000100000100001000100
0000000000100010000100000100010
1000000000001000000100010000010
0000010000000100000010000100100
0000001000000010000001001000010
0100000000000100000010001000010
0010000000000010000001000100100
0000000000010001000010000010001
0000000010001000000010010001000
0000000100000001000000101000001
0010000000000010000001000100001
0000100000001000000100000011000
0001000000000001000000100010010
0100000000000100000010001000001
0000000100000001000000100100001
0000010000000100000010000010100
1000000000001000000100010000001
0010000000000010000001000101000
0000000000100010000010000100010
0000001000000010000001010000010
0000000000010001000001000010001
0000100000001000000100001001000
0000010000000100000010010000100
0001000000000001000000100011000
0000001000000010000001000010010
0000000010001000000001010001000
0000000000100010000000100100010
0000000100000001000000110000001
1000000000001000000100010000100




=== State Orbit 7 =====================
size : 12
repr state: 1000000000001000001100010000000
lex min decimal: 293610411
states:
0000000001000100100000001000100
0010000000000010001001000100000
1000000000001000001100010000000
0000010000000100010010000000100
0000001000000010010001000000010
0001000000000001001000100010000
0000000010001000100000010001000
0100000000000100001010001000000
0000000000100010100000000100010
0000100000001000010100000001000
0000000100000001010000100000001
0000000000010001100000000010001




=== State Orbit 8 =====================
size : 36
repr state: 0000000000000000001100001000000
lex min decimal: 2245035
states:
0000000000000000001010000010000
0000000000000000001001000010000
0000000000000000100000010000010
0000000000000000001100000010000
0000000000000000001001001000000
0000000000000000010001000000001
0000000000000000001010010000000
0000000000000000001100000100000
0000000000000000001000101000000
0000000000000000100000000010100
0000000000000000001000110000000
0000000000000000010001000000100
0000000000000000001010000100000
0000000000000000010010000001000
0000000000000000010000100000100
0000000000000000100000000100100
0000000000000000100000000100001
0000000000000000100000001000001
0000000000000000100000000011000
0000000000000000001100001000000
0000000000000000100000000010010
0000000000000000100000001001000
0000000000000000100000001000010
0000000000000000100000010000001
0000000000000000010010000000001
0000000000000000001001010000000
0000000000000000010100000000100
0000000000000000010010000000010
0000000000000000010000100001000
0000000000000000100000010000100
0000000000000000010000100000010
0000000000000000010100000000010
0000000000000000001000100100000
0000000000000000010001000001000
0000000000000000010100000000001
0000000000000000100000000101000




=== State Orbit 9 =====================
size : 24
repr state: 0000000000000000000100001000010
lex min decimal: 149931
states:
0000000000000000000010000010010
0000000000000000000000101000010
0000000000000000000001010000100
0000000000000000000100000010100
0000000000000000000010010000001
0000000000000000000001001001000
0000000000000000000100001000010
0000000000000000000100000010010
0000000000000000000000100101000
0000000000000000000000100100100
0000000000000000000100000100001
0000000000000000000000110000010
0000000000000000000010000100001
0000000000000000000000101001000
0000000000000000000001000010100
0000000000000000000100001000001
0000000000000000000001010000001
0000000000000000000010000011000
0000000000000000000001001000001
0000000000000000000001000011000
0000000000000000000000110000100
0000000000000000000010000101000
0000000000000000000010010000010
0000000000000000000100000100100



[QRM NOTE]: Time elapsed since start: 7.254 seconds

[QRM NOTE]: Time elapsed since last: 0.595 seconds

[QRM NOTE]: Peak memory: 1287215 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=4]

================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.976 seconds

[QRM NOTE]: Time elapsed since last: 0.722 seconds

[QRM NOTE]: Peak memory: 375901 bytes

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_22 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS


********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy']

[CUTOFF]: node=3,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 105.413 seconds

[QRM NOTE]: Time elapsed since last: 105.413 seconds

