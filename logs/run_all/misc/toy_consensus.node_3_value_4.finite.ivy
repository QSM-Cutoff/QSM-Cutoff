#lang ivy1.7

# Source: https://github.com/microsoft/ivy/blob/master/examples/ivy/toy_consensus.ivy 

type node = {node0, node1, node2}
type value = {value0, value1, value2, value3}
type quorum = {quorum__node0_node1, quorum__node0_node2, quorum__node1_node2}

relation member(N:node, Q:quorum)
axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

relation vote(N:node, V:value)
relation decision(V:value)

relation didNotVote(N:node) = forall V. ~vote(N, V)
relation chosenAt(Q:quorum, V:value) = forall N. member(N, Q) -> vote(N, V)

after init  {
    vote(N,V) := false ;
    decision(V) := false;
}

action cast_vote(n:node, v:value) = {
    assume didNotVote(n);
    vote(n, v) := true
}

action decide(v:value, q:quorum) = {
    assume chosenAt(q, v);
    decision(v) := true
}

export cast_vote
export decide

# safety property:
#invariant decision(V1) & decision(V2) -> V1 = V2

##invariant [manual_1] vote(N,V1) & vote(N,V2) -> V1 = V2
##invariant [manual_2] decision(V) -> exists Q:quorum. forall N:node. member(N, Q) -> vote(N,V)

invariant [def_didNotVote] didNotVote(N) = forall V. ~vote(N,V) # definition
invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition
invariant [invar_0] forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6
invariant [invar_21] forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)) # qcost: 4

### For QRM DFS reachability ###

## Dependent relation axioms ##
axiom member(node0,quorum__node0_node1)
axiom member(node1,quorum__node0_node1)
axiom ~member(node2,quorum__node0_node1)
axiom member(node0,quorum__node0_node2)
axiom ~member(node1,quorum__node0_node2)
axiom member(node2,quorum__node0_node2)
axiom ~member(node0,quorum__node1_node2)
axiom member(node1,quorum__node1_node2)
axiom member(node2,quorum__node1_node2)

## Access actions ##
action get_vote(n0: node, v1: value) returns(qrm_result: bool) = {
    qrm_result := vote(n0, v1)
}
export get_vote

action get_bool_vote(n0: node, v1: value, result: bool) returns(qrm_result: bool) = {
    qrm_result := (vote(n0, v1) = result)
}
export get_bool_vote

action get_decision(v0: value) returns(qrm_result: bool) = {
    qrm_result := decision(v0)
}
export get_decision

action get_bool_decision(v0: value, result: bool) returns(qrm_result: bool) = {
    qrm_result := (decision(v0) = result)
}
export get_bool_decision

action get_chosenAt(q0: quorum, v1: value) returns(qrm_result: bool) = {
    qrm_result := chosenAt(q0, v1)
}
export get_chosenAt

action get_bool_chosenAt(q0: quorum, v1: value, result: bool) returns(qrm_result: bool) = {
    qrm_result := (chosenAt(q0, v1) = result)
}
export get_bool_chosenAt

action get_didNotVote(n0: node) returns(qrm_result: bool) = {
    qrm_result := didNotVote(n0)
}
export get_didNotVote

action get_bool_didNotVote(n0: node, result: bool) returns(qrm_result: bool) = {
    qrm_result := (didNotVote(n0) = result)
}
export get_bool_didNotVote

action get_member(n0: node, q1: quorum) returns(qrm_result: bool) = {
    qrm_result := member(n0, q1)
}
export get_member

action get_bool_member(n0: node, q1: quorum, result: bool) returns(qrm_result: bool) = {
    qrm_result := (member(n0, q1) = result)
}
export get_bool_member

