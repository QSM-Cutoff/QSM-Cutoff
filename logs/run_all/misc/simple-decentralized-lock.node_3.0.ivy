#lang ivy1.7

# Source: https://github.com/sat-group/cfg-enum/blob/permissive/benchmarks/simple-de-lock.ivy

type node

relation message(Src: node, Dst: node)
relation has_lock(N: node)

individual start_node: node

after init {
	message(Src, Dst) := false;
	has_lock(X) := X = start_node;
}

action send(src: node, dst: node) = {
    assume has_lock(src);
    message(src, dst) := true;
    has_lock(src) := false;
}

action recv(src: node, dst: node) = {
    assume message(src, dst);
    message(src, dst) := false;
    has_lock(dst) := true;
}

export send
export recv

#invariant X ~= Y -> ~(has_lock(X) & has_lock(Y))

##invariant [manual_1] ~(has_lock(X) & message(Y,Z))
##invariant [manual_2] ~message(X,Y) | ~message(Z,W) | X=Z
##invariant [manual_3] ~message(X,Y) | ~message(Z,W) | Y=W
##invariant [manual_4] forall A, B, C, D . ((((A) = (B)) & ((C) = (D))) | ((~(has_lock(A))) & (~(message(A, C)))) | (~(message(B, D))))

invariant [invar_0] forall NODE1,NODE0,NODE2. ~message(NODE1,NODE2) | ~has_lock(NODE0) # qcost: 5
invariant [invar_1] forall NODE1,NODE0,NODE3,NODE2. ~message(NODE0,NODE2) | ~message(NODE1,NODE3) | ((NODE0 = NODE1 & NODE2 = NODE3 & NODE0 ~= NODE2) | (NODE0 = NODE1 & NODE0 = NODE2 & NODE0 = NODE3)) # qcost: 12
invariant [invar_3] forall NODE0,NODE1. ~has_lock(NODE1) | ~has_lock(NODE0) | NODE0 = NODE1 # qcost: 5
invariant [invar_5] exists NODE0,NODE1. has_lock(NODE0) | message(NODE0,NODE1) # qcost: 4
