#lang ivy1.7

type key = {key0}
type value = {value0, value1}
type node = {node0, node1, node2, node3}

relation table(N:node, K:key, V:value)
relation owner(N:node, K:key)
relation transfer_msg(N:node, K:key, V:value)

after init {
    table(N, K, V) := false;
    transfer_msg(N, K, V) := false;
    assume(owner(N1, K) & owner(N2, K) -> N1 = N2);
    assume(forall K. exists N. owner(N, K));
}

action reshard(k: key, v: value, n_old: node, n_new: node) = {
    require table(n_old, k, v);
    
    table(n_old, k, v) := false;
    owner(n_old, k) := false;
    transfer_msg(n_new, k, v) := true;
}

action recv_transfer_msg(n: node, k: key, v: value) = {
    require transfer_msg(n, k, v);

    transfer_msg(n, k, v) := false;
    table(n, k, v) := true;
    owner(n, k) := true;
}

action put(n: node, k: key, v: value) = {
    require owner(n, k);

    table(n, k, V) := (V = v);
}

export reshard
export recv_transfer_msg
export put

#invariant [safety] (exists N,K,V. transfer_msg(N,K,V)) | (forall K. exists N. owner(N,K))

##invariant [manual_1] forall K. (exists N. owner(N, K)) | (exists N, V. transfer_msg(N, K, V))

invariant [invar_0] forall NODE1,VALUE0,KEY0,NODE0. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) # qcost: 6
invariant [invar_2] forall NODE1,NODE0,VALUE1,VALUE0,KEY0. ~transfer_msg(NODE1,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 & VALUE0 = VALUE1) # qcost: 9
invariant [invar_3] forall NODE1,NODE0,KEY0. ~owner(NODE1,KEY0) | ~owner(NODE0,KEY0) | NODE0 = NODE1 # qcost: 6
invariant [invar_6] forall NODE1,NODE0,VALUE1,VALUE0,KEY0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 & VALUE0 = VALUE1) # qcost: 9
invariant [invar_7] forall KEY0. (exists VALUE0,NODE0. transfer_msg(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)) # qcost: 5
invariant [invar_4] forall VALUE0,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0) # qcost: 5

### For QRM DFS reachability ###

## Dependent relation axioms ##

## Access actions ##
action get_table(n0: node, k1: key, v2: value) returns(qrm_result: bool) = {
    qrm_result := table(n0, k1, v2)
}
export get_table

action get_bool_table(n0: node, k1: key, v2: value, result: bool) returns(qrm_result: bool) = {
    qrm_result := (table(n0, k1, v2) = result)
}
export get_bool_table

action get_transfer_msg(n0: node, k1: key, v2: value) returns(qrm_result: bool) = {
    qrm_result := transfer_msg(n0, k1, v2)
}
export get_transfer_msg

action get_bool_transfer_msg(n0: node, k1: key, v2: value, result: bool) returns(qrm_result: bool) = {
    qrm_result := (transfer_msg(n0, k1, v2) = result)
}
export get_bool_transfer_msg

action get_owner(n0: node, k1: key) returns(qrm_result: bool) = {
    qrm_result := owner(n0, k1)
}
export get_owner

action get_bool_owner(n0: node, k1: key, result: bool) returns(qrm_result: bool) = {
    qrm_result := (owner(n0, k1) = result)
}
export get_bool_owner

