#lang ivy1.7

type resource_manager = {resource_manager0, resource_manager1}

relation working(R:resource_manager)
relation prepared(R:resource_manager)
relation committed(R:resource_manager)
relation aborted(R:resource_manager)

after init {
	working(R) := true;
	prepared(R) := false;
	committed(R) := false;
	aborted(R) := false;
}

action prepare(rm:resource_manager) = {
	require working(rm);
	working(rm) := false;
	prepared(rm) := true;
	committed(rm) := false;
	aborted(rm) := false;
}

action decide_commit(rm:resource_manager) = {
	require prepared(rm);
	require forall R. (prepared(R) | committed(R));
	working(rm) := false;
	prepared(rm) := false;
	committed(rm) := true;
	aborted(rm) := false;
}

action decide_abort(rm:resource_manager) = {
	require (working(rm) | prepared(rm));
	require forall R. ~committed(R);
	working(rm) := false;
	prepared(rm) := false;
	committed(rm) := false;
	aborted(rm) := true;
}

export prepare
export decide_commit
export decide_abort

#invariant [safety] (forall R1, R2. ~(aborted(R1) & committed(R2)) )

##invariant [manual_1] forall R:resource_manager. working(R) | prepared(R) | committed(R) | aborted(R)

##invariant [manual_ic3po2]	(forall R0 . (aborted(R0) -> ~prepared(R0)))

invariant [invar_0] forall RESOURCE_MANAGER0. ~prepared(RESOURCE_MANAGER0) | ~working(RESOURCE_MANAGER0) # qcost: 3
invariant [invar_1] forall RESOURCE_MANAGER0. ~working(RESOURCE_MANAGER0) | ~committed(RESOURCE_MANAGER0) # qcost: 3
invariant [invar_2] forall RESOURCE_MANAGER0. ~working(RESOURCE_MANAGER0) | ~aborted(RESOURCE_MANAGER0) # qcost: 3
invariant [invar_3] forall RESOURCE_MANAGER0. ~prepared(RESOURCE_MANAGER0) | ~aborted(RESOURCE_MANAGER0) # qcost: 3
invariant [invar_4] forall RESOURCE_MANAGER0. ~prepared(RESOURCE_MANAGER0) | ~committed(RESOURCE_MANAGER0) # qcost: 3
invariant [invar_5] forall RESOURCE_MANAGER0. ~aborted(RESOURCE_MANAGER0) | ~committed(RESOURCE_MANAGER0) # qcost: 3
invariant [invar_6] forall RESOURCE_MANAGER0. prepared(RESOURCE_MANAGER0) | committed(RESOURCE_MANAGER0) | aborted(RESOURCE_MANAGER0) | working(RESOURCE_MANAGER0) # qcost: 5

### For QRM DFS reachability ###

## Dependent relation axioms ##

## Access actions ##
action get_aborted(r0: resource_manager) returns(qrm_result: bool) = {
    qrm_result := aborted(r0)
}
export get_aborted

action get_bool_aborted(r0: resource_manager, result: bool) returns(qrm_result: bool) = {
    qrm_result := (aborted(r0) = result)
}
export get_bool_aborted

action get_committed(r0: resource_manager) returns(qrm_result: bool) = {
    qrm_result := committed(r0)
}
export get_committed

action get_bool_committed(r0: resource_manager, result: bool) returns(qrm_result: bool) = {
    qrm_result := (committed(r0) = result)
}
export get_bool_committed

action get_prepared(r0: resource_manager) returns(qrm_result: bool) = {
    qrm_result := prepared(r0)
}
export get_prepared

action get_bool_prepared(r0: resource_manager, result: bool) returns(qrm_result: bool) = {
    qrm_result := (prepared(r0) = result)
}
export get_bool_prepared

action get_working(r0: resource_manager) returns(qrm_result: bool) = {
    qrm_result := working(r0)
}
export get_working

action get_bool_working(r0: resource_manager, result: bool) returns(qrm_result: bool) = {
    qrm_result := (working(r0) = result)
}
export get_bool_working

