
********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************


************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/firewall: node=1

************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.ivy -s node=1 -f 1 -g -w -r -v 5 -w -l ivybench/sym/ivy/firewall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=1]

================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 3

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 1

[FW NOTE]: number of branching actions: 2

ivy_to_cpp target=qrm firewall.node_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_1.finite.cpp firewall.node_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_1.finite.o firewall.node_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.815 seconds

[QRM NOTE]: Time elapsed since last: 7.815 seconds

[QRM NOTE]: Peak memory: 1174051 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 0

[FW NOTE]: number of total reachable states:        2

[FW NOTE]: number of dfs representative states:     2

[FW NOTE]: number of dfs non-representative states: 0


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=1]

=======================================================================================

sort: node=['node0']
predicate: allowed_in('node',)
predicate: sent('node', 'node')
predicate: internal('node',)
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'internal(node0)', 'sent(node0,node0)']
representative states : 0, 2


=== State Orbit 0 =====================
size : 1
repr state: 000
lex min decimal: 0
states:
000




=== State Orbit 1 =====================
size : 1
repr state: 010
lex min decimal: 2
states:
010



[QRM NOTE]: Time elapsed since start: 7.900 seconds

[QRM NOTE]: Time elapsed since last: 0.084 seconds

[QRM NOTE]: Peak memory: 1198639 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.904 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 149556 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=1]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=1]

==================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : --1
0     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1--
1     : ['allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 2

[PRIME NOTE]: number of orbits before merging: 2

[PRIME NOTE]: number of primes: 2

[QRM NOTE]: Time elapsed since start: 7.919 seconds

[QRM NOTE]: Time elapsed since last: 0.015 seconds

[QRM NOTE]: Peak memory: 1204633 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=1]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1]
 solution : []


Before reduction : 
 pending  : [0, 1]
 solution : []

Essensial at level 0 : {0, 1}

Before removed
 coverage : [(0, -1), (1, -1)]

After removed
 coverage : [(0, -1), (1, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1]


Before reduction : 
 pending  : []
 solution : [0, 1]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1)]

After removed
 coverage : [(0, -1), (1, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1]

[QRM NOTE]: Time elapsed since start: 7.920 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 157075 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=1]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : --1
0     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node0)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('node0', EnumeratedSort('node', ('node0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node0,node0)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('node', ('node0',)))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1--
1     : ['allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$allowed_in$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$allowed_in': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~allowed_in(NODE0)


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=1]

==========================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : --1
0     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1--
1     : ['allowed_in(node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~allowed_in(NODE0)
qcost : 2



[QRM NOTE]: Time elapsed since start: 7.986 seconds

[QRM NOTE]: Time elapsed since last: 0.066 seconds

[QRM NOTE]: Peak memory: 1812768 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=1]

=========================================================================


New level: 1
 pending : []
 solution : [0, 1]


Before reduction : 
 pending  : []
 solution : [0, 1]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1)]

After removed
 coverage : [(0, -1), (1, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1]


Solution : [0, 1] has cost 4.


Before backtrack at level 1
 pending : []
 solution : [0, 1]

After backtrack at level 1
 pending : []
 solution : [0, 1]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=1]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 4

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 1] (length = 2)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_1] forall NODE0. ~allowed_in(NODE0) # qcost: 2




[QRM NOTE]: Time elapsed since start: 8.028 seconds

[QRM NOTE]: Time elapsed since last: 0.043 seconds

[QRM NOTE]: Peak memory: 1804455 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=1]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_1.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 39: invar_1

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 39: invar_1 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 39: invar_1 ... FAIL
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 39: invar_1 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 26: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 11.373 seconds

[QRM NOTE]: Time elapsed since last: 3.344 seconds

[QRM NOTE]: Peak memory: 806614 bytes


***************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/firewall: node=1

***************************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.node_1.0.ivy -s node=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/firewall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=2]

================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 8

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 8

ivy_to_cpp target=qrm firewall.node_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_2.finite.cpp firewall.node_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_2.finite.o firewall.node_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.509 seconds

[QRM NOTE]: Time elapsed since last: 7.509 seconds

[QRM NOTE]: Peak memory: 1177402 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        8

[FW NOTE]: number of dfs representative states:     5

[FW NOTE]: number of dfs non-representative states: 3


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=2]

=======================================================================================

sort: node=['node0', 'node1']
predicate: internal('node',)
predicate: allowed_in('node',)
predicate: sent('node', 'node')
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'internal(node0)', 'internal(node1)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node1,node0)', 'sent(node1,node1)']
representative states : 0, 48, 16, 100, 102


=== State Orbit 0 =====================
size : 1
repr state: 00000000
lex min decimal: 0
states:
00000000




=== State Orbit 1 =====================
size : 1
repr state: 00110000
lex min decimal: 48
states:
00110000




=== State Orbit 2 =====================
size : 2
repr state: 00010000
lex min decimal: 16
states:
00100000
00010000




=== State Orbit 3 =====================
size : 2
repr state: 10010010
lex min decimal: 100
states:
01100100
10010010




=== State Orbit 4 =====================
size : 2
repr state: 10010110
lex min decimal: 102
states:
10010110
01100110



[QRM NOTE]: Time elapsed since start: 7.593 seconds

[QRM NOTE]: Time elapsed since last: 0.084 seconds

[QRM NOTE]: Peak memory: 1203352 bytes


============================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/firewall: node=2]

============================================================================================================

Found a representative state in Rmin not in reachability: decimal: 54, binary: 00110110

Found a representative state in Rmin not in reachability: decimal: 50, binary: 00110010

Found a representative state in Rmin not in reachability: decimal: 2, binary: 00000010

Found a representative state in Rmin not in reachability: decimal: 22, binary: 00010110

Found a representative state in Rmin not in reachability: decimal: 6, binary: 00000110

Found a representative state in Rmin not in reachability: decimal: 20, binary: 00010100

Found a representative state in Rmin not in reachability: decimal: 18, binary: 00010010

Representatitive states in reachability not in Rmin

{100, 102}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.599 seconds

[QRM NOTE]: Time elapsed since last: 0.005 seconds

[QRM NOTE]: Peak memory: 156988 bytes

next size: node=2


************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/firewall: node=2

************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.ivy -s node=2 -f 1 -g -w -r -v 5 -w -l ivybench/sym/ivy/firewall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.023 seconds

[QRM NOTE]: Time elapsed since last: 0.023 seconds

[QRM NOTE]: Peak memory: 2296 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=2]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=2]

==================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : ----1---
0     : ['sent(node0,node0)']
1     : -------1
1     : ['sent(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-1----
2     : ['allowed_in(node1)', 'internal(node1)']
3     : 1-1-----
3     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : 1-----0-
4     : ['allowed_in(node0)', '~sent(node1,node0)']
5     : -1---0--
5     : ['allowed_in(node1)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
6 (*) : 11------
6     : ['allowed_in(node0)', 'allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1--0----
7     : ['allowed_in(node0)', '~internal(node1)']
8     : -10-----
8     : ['allowed_in(node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
9 (*) : -0---10-
9     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
10     : 0----01-
10     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : --0--10-
11     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
12     : ---0-01-
12     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
13 (*) : 00---1--
13     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
14     : 00----1-
14     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 4
num_suborbits: 2
15 (*) : -01--1--
15     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
16     : 0--1--1-
16     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
23 (*) : -01---1-
23     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
24     : 0--1-1--
24     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 4
num_suborbits: 2
17 (*) : -0-0-1--
17     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
18     : 0-0---1-
18     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
19 (*) : 0-0--1--
19     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
20     : -0-0--1-
20     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 2
num_suborbits: 1
21 (*) : --00-1--
21     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
22     : --00--1-
22     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
25 (*) : --1--01-
25     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
26     : ---1-10-
26     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 2
num_suborbits: 1
27 (*) : --11--1-
27     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
28     : --11-1--
28     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 13

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 29

[QRM NOTE]: Time elapsed since start: 0.039 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 1102289 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=2]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : []

Essensial at level 0 : {0, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 4), (6, 4), (7, 8), (8, 12), (9, 12), (10, 8), (11, 4), (12, 8)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 2]


Before reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 4), (6, 4), (7, 8), (8, 12), (9, 12), (10, 8), (11, 4), (12, 8)]

After removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 4), (6, 4), (7, 8), (8, 12), (9, 12), (10, 8), (11, 4), (12, 8)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 2]

[QRM NOTE]: Time elapsed since start: 0.042 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 53178 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=2]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : ----1---
0     : ['sent(node0,node0)']
1     : -------1
1     : ['sent(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node0)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node0,node0)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : 1-----0-
4     : ['allowed_in(node0)', '~sent(node1,node0)']
5     : -1---0--
5     : ['allowed_in(node1)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~allowed_in(NODE0) | sent(NODE1,NODE0) | NODE0 = NODE1


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-1----
2     : ['allowed_in(node1)', 'internal(node1)']
3     : 1-1-----
3     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'internal': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
6 (*) : 11------
6     : ['allowed_in(node0)', 'allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$allowed_in$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$allowed_in': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1--0----
7     : ['allowed_in(node0)', '~internal(node1)']
8     : -10-----
8     : ['allowed_in(node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'internal': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~allowed_in(NODE0) | internal(NODE1) | NODE0 = NODE1


=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
9 (*) : -0---10-
9     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
10     : 0----01-
10     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~allowed_in(NODE1)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. sent(NODE1,NODE0) | allowed_in(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : --0--10-
11     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
12     : ---0-01-
12     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~internal(NODE0)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. sent(NODE1,NODE0) | internal(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
13 (*) : 00---1--
13     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
14     : 00----1-
14     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~allowed_in(node1)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~allowed_in(node1)', 'sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$0], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$0, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1


=== Prime Orbit 8 =====================
size : 4
num_suborbits: 2
15 (*) : -01--1--
15     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
16     : 0--1--1-
16     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
23 (*) : -01---1-
23     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
24     : 0--1-1--
24     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'internal(node0)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'internal(node0)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'internal(node0)', 'sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE3)', 'sent(NODE1,NODE2)', 'internal(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1,NODE3. allowed_in(NODE3) | ~sent(NODE1,NODE2) | ~internal(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))


=== Prime Orbit 9 =====================
size : 4
num_suborbits: 2
17 (*) : -0-0-1--
17     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
18     : 0-0---1-
18     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
19 (*) : 0-0--1--
19     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
20     : -0-0--1-
20     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node1)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node0)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node1)', 'sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE2)', '~internal(NODE2)', 'sent(NODE0,NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. allowed_in(NODE2) | internal(NODE2) | ~sent(NODE0,NODE1) | ((NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE1))


=== Prime Orbit 10 =====================
size : 2
num_suborbits: 1
21 (*) : --00-1--
21     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
22     : --00--1-
22     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node1)', 'sent(node0,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node1)', 'sent(node0,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$0], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$0, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE0)', 'sent(NODE0,NODE1)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. internal(NODE0) | ~sent(NODE0,NODE1) | internal(NODE1) | NODE0 = NODE1


=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
25 (*) : --1--01-
25     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
26     : ---1-10-
26     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~sent(node0,node1)', 'sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', '~sent(NODE0,NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | NODE0 = NODE1


=== Prime Orbit 12 =====================
size : 2
num_suborbits: 1
27 (*) : --11--1-
27     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
28     : --11-1--
28     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$internal$0$1, node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$1$0, node$0$internal$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$1$0, node$0$internal$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1': [node$0$internal$0$0; node$0$sent$1$0], 'node$0$internal$0; node$0$sent$0': [node$0$internal$0$1; node$0$sent$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1': node$0$internal$0$0; node$0$sent$1$0, 'node$0$internal$0; node$0$sent$0': node$0$internal$0$1; node$0$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', 'internal(NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~sent(NODE1,NODE0) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=2]

==========================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : ----1---
0     : ['sent(node0,node0)']
1     : -------1
1     : ['sent(node1,node1)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : 1-----0-
4     : ['allowed_in(node0)', '~sent(node1,node0)']
5     : -1---0--
5     : ['allowed_in(node1)', '~sent(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~allowed_in(NODE0) | sent(NODE1,NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-1----
2     : ['allowed_in(node1)', 'internal(node1)']
3     : 1-1-----
3     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)
qcost : 3




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
6 (*) : 11------
6     : ['allowed_in(node0)', 'allowed_in(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1--0----
7     : ['allowed_in(node0)', '~internal(node1)']
8     : -10-----
8     : ['allowed_in(node1)', '~internal(node0)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~allowed_in(NODE0) | internal(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
9 (*) : -0---10-
9     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
10     : 0----01-
10     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. sent(NODE1,NODE0) | allowed_in(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : --0--10-
11     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
12     : ---0-01-
12     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. sent(NODE1,NODE0) | internal(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
13 (*) : 00---1--
13     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
14     : 00----1-
14     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 8 =====================
size : 4
num_suborbits: 2
15 (*) : -01--1--
15     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
16     : 0--1--1-
16     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
23 (*) : -01---1-
23     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
24     : 0--1-1--
24     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE2,NODE0,NODE1,NODE3. allowed_in(NODE3) | ~sent(NODE1,NODE2) | ~internal(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))
qcost : 13




=== Prime Orbit 9 =====================
size : 4
num_suborbits: 2
17 (*) : -0-0-1--
17     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
18     : 0-0---1-
18     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
19 (*) : 0-0--1--
19     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
20     : -0-0--1-
20     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. allowed_in(NODE2) | internal(NODE2) | ~sent(NODE0,NODE1) | ((NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE1))
qcost : 10




=== Prime Orbit 10 =====================
size : 2
num_suborbits: 1
21 (*) : --00-1--
21     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
22     : --00--1-
22     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. internal(NODE0) | ~sent(NODE0,NODE1) | internal(NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
25 (*) : --1--01-
25     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
26     : ---1-10-
26     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 12 =====================
size : 2
num_suborbits: 1
27 (*) : --11--1-
27     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
28     : --11-1--
28     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~sent(NODE1,NODE0) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1
qcost : 6



[QRM NOTE]: Time elapsed since start: 0.251 seconds

[QRM NOTE]: Time elapsed since last: 0.209 seconds

[QRM NOTE]: Peak memory: 1782339 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=2]

=========================================================================


New level: 1
 pending : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 2]


Before reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 4), (6, 4), (7, 8), (8, 12), (9, 12), (10, 8), (11, 4), (12, 8)]

After removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 4), (6, 4), (7, 8), (8, 12), (9, 12), (10, 8), (11, 4), (12, 8)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 2]


Solution : [0, 2] has cost 7.


Decide in level 1 among pending : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

Coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 4), (6, 4), (7, 8), (8, 12), (9, 12), (10, 8), (11, 4), (12, 8)]

Decide 8 with phase True at level 1

After decision at level 1
 pending : [1, 3, 4, 5, 6, 7, 9, 10, 11, 12]
 solution : [0, 2, 8]


New level: 2
 pending : [1, 3, 4, 5, 6, 7, 9, 10, 11, 12]
 solution : [0, 2, 8]


Before reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 9, 10, 11, 12]
 solution : [0, 2, 8]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 4), (6, 4), (7, 8), (8, 12), (9, 12), (10, 8), (11, 4), (12, 8)]

After removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, 8), (5, 1), (6, 2), (7, 2), (8, -1), (9, 5), (10, 8), (11, 0), (12, 1)]

Covered at level 2 : {11}

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 9, 10, 12]
 solution : [0, 2, 8]


Before reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 9, 10, 12]
 solution : [0, 2, 8]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, 8), (5, 1), (6, 2), (7, 2), (8, -1), (9, 5), (10, 8), (11, 0), (12, 1)]

After removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, 8), (5, 1), (6, 2), (7, 2), (8, -1), (9, 5), (10, 8), (11, -1), (12, 1)]

Covered at level 2 : set()

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 9, 10, 12]
 solution : [0, 2, 8]


Solution : [0, 2, 8] has cost 20.


Decide in level 2 among pending : [1, 3, 4, 5, 6, 7, 9, 10, 12]

Coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, 8), (5, 1), (6, 2), (7, 2), (8, -1), (9, 5), (10, 8), (11, -1), (12, 1)]

Decide 4 with phase True at level 2

After decision at level 2
 pending : [1, 3, 5, 6, 7, 9, 10, 12]
 solution : [0, 2, 8, 4]


New level: 3
 pending : [1, 3, 5, 6, 7, 9, 10, 12]
 solution : [0, 2, 8, 4]


Before reduction : 
 pending  : [1, 3, 5, 6, 7, 9, 10, 12]
 solution : [0, 2, 8, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, 8), (5, 1), (6, 2), (7, 2), (8, -1), (9, 5), (10, 8), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, 2), (8, -1), (9, 2), (10, 2), (11, -1), (12, 1)]

Covered at level 3 : set()

After reduction : 
 pending  : [1, 3, 5, 6, 7, 9, 10, 12]
 solution : [0, 2, 8, 4]


Solution : [0, 2, 8, 4] has cost 25.


Decide in level 3 among pending : [1, 3, 5, 6, 7, 9, 10, 12]

Coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, 2), (8, -1), (9, 2), (10, 2), (11, -1), (12, 1)]

Decide 7 with phase True at level 3

After decision at level 3
 pending : [1, 3, 5, 6, 9, 10, 12]
 solution : [0, 2, 8, 4, 7]


New level: 4
 pending : [1, 3, 5, 6, 9, 10, 12]
 solution : [0, 2, 8, 4, 7]


Before reduction : 
 pending  : [1, 3, 5, 6, 9, 10, 12]
 solution : [0, 2, 8, 4, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, 2), (8, -1), (9, 2), (10, 2), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, 1)]

Covered at level 4 : {9, 10, 5, 6}

After reduction : 
 pending  : [1, 3, 12]
 solution : [0, 2, 8, 4, 7]


Before reduction : 
 pending  : [1, 3, 12]
 solution : [0, 2, 8, 4, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 4 : set()

After reduction : 
 pending  : [1, 3, 12]
 solution : [0, 2, 8, 4, 7]


Solution : [0, 2, 8, 4, 7] has cost 31.


Decide in level 4 among pending : [1, 3, 12]

Coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Decide 1 with phase True at level 4

After decision at level 4
 pending : [3, 12]
 solution : [0, 2, 8, 4, 7, 1]


New level: 5
 pending : [3, 12]
 solution : [0, 2, 8, 4, 7, 1]


Before reduction : 
 pending  : [3, 12]
 solution : [0, 2, 8, 4, 7, 1]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 5 : {3, 12}

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 7, 1]


Before reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 7, 1]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 7, 1]


Solution : [0, 2, 8, 4, 7, 1] has cost 34.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 8, 4, 7, 1]

After backtrack at level 5
 pending : [3, 12]
 solution : [0, 2, 8, 4, 7, 1]


Invert decision for 1 at level 4


New level: 5
 pending : [3, 12]
 solution : [0, 2, 8, 4, 7]


Before reduction : 
 pending  : [3, 12]
 solution : [0, 2, 8, 4, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 12]
 solution : [0, 2, 8, 4, 7]


Solution : [0, 2, 8, 4, 7] has cost 31.


Decide in level 5 among pending : [3, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Decide 3 with phase True at level 5

After decision at level 5
 pending : [12]
 solution : [0, 2, 8, 4, 7, 3]


New level: 6
 pending : [12]
 solution : [0, 2, 8, 4, 7, 3]


Before reduction : 
 pending  : [12]
 solution : [0, 2, 8, 4, 7, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 6 : {12}

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 7, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 7, 3]


Solution : [0, 2, 8, 4, 7, 3] has cost 33.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 8, 4, 7, 3]

After backtrack at level 6
 pending : [12]
 solution : [0, 2, 8, 4, 7, 3]


Invert decision for 3 at level 5


New level: 6
 pending : [12]
 solution : [0, 2, 8, 4, 7]


Before reduction : 
 pending  : [12]
 solution : [0, 2, 8, 4, 7]

Essensial at level 6 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 7, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 7, 12]


Solution : [0, 2, 8, 4, 7, 12] has cost 37.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 8, 4, 7, 12]

After backtrack at level 6
 pending : [12]
 solution : [0, 2, 8, 4, 7]


Before backtrack at level 5
 pending : [12]
 solution : [0, 2, 8, 4, 7]

After backtrack at level 5
 pending : [12, 3]
 solution : [0, 2, 8, 4, 7]


Before backtrack at level 4
 pending : [12, 3]
 solution : [0, 2, 8, 4, 7]

After backtrack at level 4
 pending : [12, 3, 5, 6, 9, 10, 1]
 solution : [0, 2, 8, 4, 7]


Invert decision for 7 at level 3


New level: 4
 pending : [12, 3, 5, 6, 9, 10, 1]
 solution : [0, 2, 8, 4]


Before reduction : 
 pending  : [12, 3, 5, 6, 9, 10, 1]
 solution : [0, 2, 8, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 2), (10, 2), (11, -1), (12, 1)]

Covered at level 4 : set()

After reduction : 
 pending  : [12, 3, 5, 6, 9, 10, 1]
 solution : [0, 2, 8, 4]


Solution : [0, 2, 8, 4] has cost 25.


Decide in level 4 among pending : [12, 3, 5, 6, 9, 10, 1]

Coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 2), (10, 2), (11, -1), (12, 1)]

Decide 9 with phase True at level 4

After decision at level 4
 pending : [12, 3, 5, 6, 10, 1]
 solution : [0, 2, 8, 4, 9]


New level: 5
 pending : [12, 3, 5, 6, 10, 1]
 solution : [0, 2, 8, 4, 9]


Before reduction : 
 pending  : [12, 3, 5, 6, 10, 1]
 solution : [0, 2, 8, 4, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 2), (10, 2), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 1)]

Covered at level 5 : {10, 5, 6}

After reduction : 
 pending  : [12, 3, 1]
 solution : [0, 2, 8, 4, 9]


Before reduction : 
 pending  : [12, 3, 1]
 solution : [0, 2, 8, 4, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 5 : set()

After reduction : 
 pending  : [12, 3, 1]
 solution : [0, 2, 8, 4, 9]


Solution : [0, 2, 8, 4, 9] has cost 35.


Before backtrack at level 5
 pending : [12, 3, 1]
 solution : [0, 2, 8, 4, 9]

After backtrack at level 5
 pending : [12, 3, 1, 5, 6, 10]
 solution : [0, 2, 8, 4, 9]


Invert decision for 9 at level 4


New level: 5
 pending : [12, 3, 1, 5, 6, 10]
 solution : [0, 2, 8, 4]


Before reduction : 
 pending  : [12, 3, 1, 5, 6, 10]
 solution : [0, 2, 8, 4]

Essensial at level 5 : {10}

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 5 : {5, 6}

After reduction : 
 pending  : [12, 3, 1]
 solution : [0, 2, 8, 4, 10]


Before reduction : 
 pending  : [12, 3, 1]
 solution : [0, 2, 8, 4, 10]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 5 : set()

After reduction : 
 pending  : [12, 3, 1]
 solution : [0, 2, 8, 4, 10]


Solution : [0, 2, 8, 4, 10] has cost 31.


Decide in level 5 among pending : [12, 3, 1]

Coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Decide 12 with phase True at level 5

After decision at level 5
 pending : [3, 1]
 solution : [0, 2, 8, 4, 10, 12]


New level: 6
 pending : [3, 1]
 solution : [0, 2, 8, 4, 10, 12]


Before reduction : 
 pending  : [3, 1]
 solution : [0, 2, 8, 4, 10, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : {1, 3}

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 10, 12]


Before reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 10, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 10, 12]


Solution : [0, 2, 8, 4, 10, 12] has cost 37.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 8, 4, 10, 12]

After backtrack at level 6
 pending : [3, 1]
 solution : [0, 2, 8, 4, 10, 12]


Invert decision for 12 at level 5


New level: 6
 pending : [3, 1]
 solution : [0, 2, 8, 4, 10]


Before reduction : 
 pending  : [3, 1]
 solution : [0, 2, 8, 4, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [3, 1]
 solution : [0, 2, 8, 4, 10]


Solution : [0, 2, 8, 4, 10] has cost 31.


Decide in level 6 among pending : [3, 1]

Coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Decide 3 with phase True at level 6

After decision at level 6
 pending : [1]
 solution : [0, 2, 8, 4, 10, 3]


New level: 7
 pending : [1]
 solution : [0, 2, 8, 4, 10, 3]


Before reduction : 
 pending  : [1]
 solution : [0, 2, 8, 4, 10, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : {1}

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 10, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 10, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 10, 3]


Solution : [0, 2, 8, 4, 10, 3] has cost 33.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 8, 4, 10, 3]

After backtrack at level 7
 pending : [1]
 solution : [0, 2, 8, 4, 10, 3]


Invert decision for 3 at level 6


New level: 7
 pending : [1]
 solution : [0, 2, 8, 4, 10]


Before reduction : 
 pending  : [1]
 solution : [0, 2, 8, 4, 10]

Essensial at level 7 : {1}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 10, 1]


Before reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 10, 1]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 4, 10, 1]


Solution : [0, 2, 8, 4, 10, 1] has cost 34.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 8, 4, 10, 1]

After backtrack at level 7
 pending : [1]
 solution : [0, 2, 8, 4, 10]


Before backtrack at level 6
 pending : [1]
 solution : [0, 2, 8, 4, 10]

After backtrack at level 6
 pending : [1, 3]
 solution : [0, 2, 8, 4, 10]


Before backtrack at level 5
 pending : [1, 3]
 solution : [0, 2, 8, 4, 10]

After backtrack at level 5
 pending : [1, 3, 10, 5, 6, 12]
 solution : [0, 2, 8, 4]


Before backtrack at level 4
 pending : [1, 3, 10, 5, 6, 12]
 solution : [0, 2, 8, 4]

After backtrack at level 4
 pending : [1, 3, 10, 5, 6, 12, 9]
 solution : [0, 2, 8, 4]


Before backtrack at level 3
 pending : [1, 3, 10, 5, 6, 12, 9]
 solution : [0, 2, 8, 4]

After backtrack at level 3
 pending : [1, 3, 10, 5, 6, 12, 9, 7]
 solution : [0, 2, 8, 4]


Invert decision for 4 at level 2


New level: 3
 pending : [1, 3, 10, 5, 6, 12, 9, 7]
 solution : [0, 2, 8]


Before reduction : 
 pending  : [1, 3, 10, 5, 6, 12, 9, 7]
 solution : [0, 2, 8]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, -1), (5, 1), (6, 2), (7, 2), (8, -1), (9, 5), (10, 8), (11, -1), (12, 1)]

Covered at level 3 : set()

After reduction : 
 pending  : [1, 3, 10, 5, 6, 12, 9, 7]
 solution : [0, 2, 8]


Solution : [0, 2, 8] has cost 20.


Decide in level 3 among pending : [1, 3, 10, 5, 6, 12, 9, 7]

Coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, -1), (5, 1), (6, 2), (7, 2), (8, -1), (9, 5), (10, 8), (11, -1), (12, 1)]

Decide 10 with phase True at level 3

After decision at level 3
 pending : [1, 3, 5, 6, 12, 9, 7]
 solution : [0, 2, 8, 10]


New level: 4
 pending : [1, 3, 5, 6, 12, 9, 7]
 solution : [0, 2, 8, 10]


Before reduction : 
 pending  : [1, 3, 5, 6, 12, 9, 7]
 solution : [0, 2, 8, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, -1), (5, 1), (6, 2), (7, 2), (8, -1), (9, 5), (10, 8), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, 1)]

Covered at level 4 : {9, 5, 6, 7}

After reduction : 
 pending  : [1, 3, 12]
 solution : [0, 2, 8, 10]


Before reduction : 
 pending  : [1, 3, 12]
 solution : [0, 2, 8, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 4 : set()

After reduction : 
 pending  : [1, 3, 12]
 solution : [0, 2, 8, 10]


Solution : [0, 2, 8, 10] has cost 26.


Decide in level 4 among pending : [1, 3, 12]

Coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Decide 3 with phase True at level 4

After decision at level 4
 pending : [1, 12]
 solution : [0, 2, 8, 10, 3]


New level: 5
 pending : [1, 12]
 solution : [0, 2, 8, 10, 3]


Before reduction : 
 pending  : [1, 12]
 solution : [0, 2, 8, 10, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, 4), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 5 : {1, 12}

After reduction : 
 pending  : []
 solution : [0, 2, 8, 10, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 8, 10, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 10, 3]


Solution : [0, 2, 8, 10, 3] has cost 28.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 8, 10, 3]

After backtrack at level 5
 pending : [1, 12]
 solution : [0, 2, 8, 10, 3]


Invert decision for 3 at level 4


New level: 5
 pending : [1, 12]
 solution : [0, 2, 8, 10]


Before reduction : 
 pending  : [1, 12]
 solution : [0, 2, 8, 10]

Essensial at level 5 : {1}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 5 : {12}

After reduction : 
 pending  : []
 solution : [0, 2, 8, 10, 1]


Before reduction : 
 pending  : []
 solution : [0, 2, 8, 10, 1]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 10, 1]


Solution : [0, 2, 8, 10, 1] has cost 29.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 8, 10, 1]

After backtrack at level 5
 pending : [1, 12]
 solution : [0, 2, 8, 10]


Before backtrack at level 4
 pending : [1, 12]
 solution : [0, 2, 8, 10]

After backtrack at level 4
 pending : [1, 12, 5, 6, 9, 7, 3]
 solution : [0, 2, 8, 10]


Invert decision for 10 at level 3


New level: 4
 pending : [1, 12, 5, 6, 9, 7, 3]
 solution : [0, 2, 8]


Before reduction : 
 pending  : [1, 12, 5, 6, 9, 7, 3]
 solution : [0, 2, 8]

Essensial at level 4 : {9, 3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 4 : {1, 5, 6, 7, 12}

After reduction : 
 pending  : []
 solution : [0, 2, 8, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 8, 9, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 8, 9, 3]


Solution : [0, 2, 8, 9, 3] has cost 32.


Before backtrack at level 4
 pending : []
 solution : [0, 2, 8, 9, 3]

After backtrack at level 4
 pending : [9, 3, 1, 12, 5, 6, 7]
 solution : [0, 2, 8]


Before backtrack at level 3
 pending : [9, 3, 1, 12, 5, 6, 7]
 solution : [0, 2, 8]

After backtrack at level 3
 pending : [9, 3, 1, 12, 5, 6, 7, 10]
 solution : [0, 2, 8]


Before backtrack at level 2
 pending : [9, 3, 1, 12, 5, 6, 7, 10]
 solution : [0, 2, 8]

After backtrack at level 2
 pending : [9, 3, 1, 12, 5, 6, 7, 10, 11, 4]
 solution : [0, 2, 8]


Invert decision for 8 at level 1


New level: 2
 pending : [9, 3, 1, 12, 5, 6, 7, 10, 11, 4]
 solution : [0, 2]


Before reduction : 
 pending  : [9, 3, 1, 12, 5, 6, 7, 10, 11, 4]
 solution : [0, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 4), (6, 4), (7, 8), (8, -1), (9, 12), (10, 8), (11, 4), (12, 8)]

Covered at level 2 : set()

After reduction : 
 pending  : [9, 3, 1, 12, 5, 6, 7, 10, 11, 4]
 solution : [0, 2]


Solution : [0, 2] has cost 7.


Decide in level 2 among pending : [9, 3, 1, 12, 5, 6, 7, 10, 11, 4]

Coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 4), (6, 4), (7, 8), (8, -1), (9, 12), (10, 8), (11, 4), (12, 8)]

Decide 9 with phase True at level 2

After decision at level 2
 pending : [3, 1, 12, 5, 6, 7, 10, 11, 4]
 solution : [0, 2, 9]


New level: 3
 pending : [3, 1, 12, 5, 6, 7, 10, 11, 4]
 solution : [0, 2, 9]


Before reduction : 
 pending  : [3, 1, 12, 5, 6, 7, 10, 11, 4]
 solution : [0, 2, 9]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 4), (6, 4), (7, 8), (8, -1), (9, 12), (10, 8), (11, 4), (12, 8)]

After removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 2), (5, 1), (6, 0), (7, 2), (8, -1), (9, -1), (10, 1), (11, 2), (12, 8)]

Covered at level 3 : {6}

After reduction : 
 pending  : [3, 1, 12, 5, 7, 10, 11, 4]
 solution : [0, 2, 9]


Before reduction : 
 pending  : [3, 1, 12, 5, 7, 10, 11, 4]
 solution : [0, 2, 9]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 2), (5, 1), (6, 0), (7, 2), (8, -1), (9, -1), (10, 1), (11, 2), (12, 8)]

After removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 2), (5, 1), (6, -1), (7, 2), (8, -1), (9, -1), (10, 1), (11, 2), (12, 8)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 1, 12, 5, 7, 10, 11, 4]
 solution : [0, 2, 9]


Solution : [0, 2, 9] has cost 17.


Decide in level 3 among pending : [3, 1, 12, 5, 7, 10, 11, 4]

Coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 2), (5, 1), (6, -1), (7, 2), (8, -1), (9, -1), (10, 1), (11, 2), (12, 8)]

Decide 1 with phase True at level 3

After decision at level 3
 pending : [3, 12, 5, 7, 10, 11, 4]
 solution : [0, 2, 9, 1]


New level: 4
 pending : [3, 12, 5, 7, 10, 11, 4]
 solution : [0, 2, 9, 1]


Before reduction : 
 pending  : [3, 12, 5, 7, 10, 11, 4]
 solution : [0, 2, 9, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 2), (5, 1), (6, -1), (7, 2), (8, -1), (9, -1), (10, 1), (11, 2), (12, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 1), (6, -1), (7, 2), (8, -1), (9, -1), (10, 1), (11, 1), (12, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 12, 5, 7, 10, 11, 4]
 solution : [0, 2, 9, 1]


Solution : [0, 2, 9, 1] has cost 20.


Decide in level 4 among pending : [3, 12, 5, 7, 10, 11, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 1), (6, -1), (7, 2), (8, -1), (9, -1), (10, 1), (11, 1), (12, 2)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [3, 5, 7, 10, 11, 4]
 solution : [0, 2, 9, 1, 12]


New level: 5
 pending : [3, 5, 7, 10, 11, 4]
 solution : [0, 2, 9, 1, 12]


Before reduction : 
 pending  : [3, 5, 7, 10, 11, 4]
 solution : [0, 2, 9, 1, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 1), (6, -1), (7, 2), (8, -1), (9, -1), (10, 1), (11, 1), (12, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, 1), (11, 0), (12, -1)]

Covered at level 5 : {11, 5, 7}

After reduction : 
 pending  : [3, 10, 4]
 solution : [0, 2, 9, 1, 12]


Before reduction : 
 pending  : [3, 10, 4]
 solution : [0, 2, 9, 1, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, 1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 10, 4]
 solution : [0, 2, 9, 1, 12]


Solution : [0, 2, 9, 1, 12] has cost 26.


Decide in level 5 among pending : [3, 10, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

Decide 3 with phase True at level 5

After decision at level 5
 pending : [10, 4]
 solution : [0, 2, 9, 1, 12, 3]


New level: 6
 pending : [10, 4]
 solution : [0, 2, 9, 1, 12, 3]


Before reduction : 
 pending  : [10, 4]
 solution : [0, 2, 9, 1, 12, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1)]

Covered at level 6 : {10, 4}

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 12, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 12, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 12, 3]


Solution : [0, 2, 9, 1, 12, 3] has cost 28.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 9, 1, 12, 3]

After backtrack at level 6
 pending : [10, 4]
 solution : [0, 2, 9, 1, 12, 3]


Invert decision for 3 at level 5


New level: 6
 pending : [10, 4]
 solution : [0, 2, 9, 1, 12]


Before reduction : 
 pending  : [10, 4]
 solution : [0, 2, 9, 1, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 4]
 solution : [0, 2, 9, 1, 12]


Solution : [0, 2, 9, 1, 12] has cost 26.


Decide in level 6 among pending : [10, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

Decide 10 with phase True at level 6

After decision at level 6
 pending : [4]
 solution : [0, 2, 9, 1, 12, 10]


New level: 7
 pending : [4]
 solution : [0, 2, 9, 1, 12, 10]


Before reduction : 
 pending  : [4]
 solution : [0, 2, 9, 1, 12, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : {4}

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 12, 10]


Before reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 12, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 12, 10]


Solution : [0, 2, 9, 1, 12, 10] has cost 32.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 9, 1, 12, 10]

After backtrack at level 7
 pending : [4]
 solution : [0, 2, 9, 1, 12, 10]


Invert decision for 10 at level 6


New level: 7
 pending : [4]
 solution : [0, 2, 9, 1, 12]


Before reduction : 
 pending  : [4]
 solution : [0, 2, 9, 1, 12]

Essensial at level 7 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 12, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 12, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 12, 4]


Solution : [0, 2, 9, 1, 12, 4] has cost 31.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 9, 1, 12, 4]

After backtrack at level 7
 pending : [4]
 solution : [0, 2, 9, 1, 12]


Before backtrack at level 6
 pending : [4]
 solution : [0, 2, 9, 1, 12]

After backtrack at level 6
 pending : [4, 10]
 solution : [0, 2, 9, 1, 12]


Before backtrack at level 5
 pending : [4, 10]
 solution : [0, 2, 9, 1, 12]

After backtrack at level 5
 pending : [4, 10, 5, 7, 11, 3]
 solution : [0, 2, 9, 1, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [4, 10, 5, 7, 11, 3]
 solution : [0, 2, 9, 1]


Before reduction : 
 pending  : [4, 10, 5, 7, 11, 3]
 solution : [0, 2, 9, 1]

Essensial at level 5 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, 0), (12, -1)]

Covered at level 5 : {11, 5}

After reduction : 
 pending  : [4, 10, 3]
 solution : [0, 2, 9, 1, 7]


Before reduction : 
 pending  : [4, 10, 3]
 solution : [0, 2, 9, 1, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 10, 3]
 solution : [0, 2, 9, 1, 7]


Solution : [0, 2, 9, 1, 7] has cost 26.


Decide in level 5 among pending : [4, 10, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

Decide 4 with phase True at level 5

After decision at level 5
 pending : [10, 3]
 solution : [0, 2, 9, 1, 7, 4]


New level: 6
 pending : [10, 3]
 solution : [0, 2, 9, 1, 7, 4]


Before reduction : 
 pending  : [10, 3]
 solution : [0, 2, 9, 1, 7, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1)]

Covered at level 6 : {10, 3}

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 7, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 7, 4]


Solution : [0, 2, 9, 1, 7, 4] has cost 31.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 9, 1, 7, 4]

After backtrack at level 6
 pending : [10, 3]
 solution : [0, 2, 9, 1, 7, 4]


Invert decision for 4 at level 5


New level: 6
 pending : [10, 3]
 solution : [0, 2, 9, 1, 7]


Before reduction : 
 pending  : [10, 3]
 solution : [0, 2, 9, 1, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 3]
 solution : [0, 2, 9, 1, 7]


Solution : [0, 2, 9, 1, 7] has cost 26.


Decide in level 6 among pending : [10, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

Decide 10 with phase True at level 6

After decision at level 6
 pending : [3]
 solution : [0, 2, 9, 1, 7, 10]


New level: 7
 pending : [3]
 solution : [0, 2, 9, 1, 7, 10]


Before reduction : 
 pending  : [3]
 solution : [0, 2, 9, 1, 7, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : {3}

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 7, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 7, 10]


Solution : [0, 2, 9, 1, 7, 10] has cost 32.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 9, 1, 7, 10]

After backtrack at level 7
 pending : [3]
 solution : [0, 2, 9, 1, 7, 10]


Invert decision for 10 at level 6


New level: 7
 pending : [3]
 solution : [0, 2, 9, 1, 7]


Before reduction : 
 pending  : [3]
 solution : [0, 2, 9, 1, 7]

Essensial at level 7 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 7, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 9, 1, 7, 3]


Solution : [0, 2, 9, 1, 7, 3] has cost 28.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 9, 1, 7, 3]

After backtrack at level 7
 pending : [3]
 solution : [0, 2, 9, 1, 7]


Before backtrack at level 6
 pending : [3]
 solution : [0, 2, 9, 1, 7]

After backtrack at level 6
 pending : [3, 10]
 solution : [0, 2, 9, 1, 7]


Before backtrack at level 5
 pending : [3, 10]
 solution : [0, 2, 9, 1, 7]

After backtrack at level 5
 pending : [3, 10, 7, 5, 11, 4]
 solution : [0, 2, 9, 1]


Before backtrack at level 4
 pending : [3, 10, 7, 5, 11, 4]
 solution : [0, 2, 9, 1]

After backtrack at level 4
 pending : [3, 10, 7, 5, 11, 4, 12]
 solution : [0, 2, 9, 1]


Invert decision for 1 at level 3


New level: 4
 pending : [3, 10, 7, 5, 11, 4, 12]
 solution : [0, 2, 9]


Before reduction : 
 pending  : [3, 10, 7, 5, 11, 4, 12]
 solution : [0, 2, 9]

Essensial at level 4 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, 2), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, 1), (11, 0), (12, -1)]

Covered at level 4 : {11, 5, 7}

After reduction : 
 pending  : [3, 10, 4]
 solution : [0, 2, 9, 12]


Before reduction : 
 pending  : [3, 10, 4]
 solution : [0, 2, 9, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, 2), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, 1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, 2), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 10, 4]
 solution : [0, 2, 9, 12]


Solution : [0, 2, 9, 12] has cost 23.


Decide in level 4 among pending : [3, 10, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, 2), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

Decide 3 with phase True at level 4

After decision at level 4
 pending : [10, 4]
 solution : [0, 2, 9, 12, 3]


New level: 5
 pending : [10, 4]
 solution : [0, 2, 9, 12, 3]


Before reduction : 
 pending  : [10, 4]
 solution : [0, 2, 9, 12, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, 2), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1)]

Covered at level 5 : {10, 4}

After reduction : 
 pending  : []
 solution : [0, 2, 9, 12, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 9, 12, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 9, 12, 3]


Solution : [0, 2, 9, 12, 3] has cost 25.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 9, 12, 3]

After backtrack at level 5
 pending : [10, 4]
 solution : [0, 2, 9, 12, 3]


Invert decision for 3 at level 4


New level: 5
 pending : [10, 4]
 solution : [0, 2, 9, 12]


Before reduction : 
 pending  : [10, 4]
 solution : [0, 2, 9, 12]

Essensial at level 5 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1)]

Covered at level 5 : {10}

After reduction : 
 pending  : []
 solution : [0, 2, 9, 12, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 9, 12, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 9, 12, 4]


Solution : [0, 2, 9, 12, 4] has cost 28.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 9, 12, 4]

After backtrack at level 5
 pending : [4, 10]
 solution : [0, 2, 9, 12]


Before backtrack at level 4
 pending : [4, 10]
 solution : [0, 2, 9, 12]

After backtrack at level 4
 pending : [4, 10, 12, 7, 5, 11, 3]
 solution : [0, 2, 9]


Before backtrack at level 3
 pending : [4, 10, 12, 7, 5, 11, 3]
 solution : [0, 2, 9]

After backtrack at level 3
 pending : [4, 10, 12, 7, 5, 11, 3, 6, 1]
 solution : [0, 2, 9]


Invert decision for 9 at level 2


New level: 3
 pending : [4, 10, 12, 7, 5, 11, 3, 6, 1]
 solution : [0, 2]


Before reduction : 
 pending  : [4, 10, 12, 7, 5, 11, 3, 6, 1]
 solution : [0, 2]

Essensial at level 3 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 0), (6, 2), (7, -1), (8, -1), (9, -1), (10, 8), (11, 2), (12, 8)]

Covered at level 3 : {5}

After reduction : 
 pending  : [4, 10, 12, 11, 3, 6, 1]
 solution : [0, 2, 7]


Before reduction : 
 pending  : [4, 10, 12, 11, 3, 6, 1]
 solution : [0, 2, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, 0), (6, 2), (7, -1), (8, -1), (9, -1), (10, 8), (11, 2), (12, 8)]

After removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, -1), (6, 2), (7, -1), (8, -1), (9, -1), (10, 8), (11, 2), (12, 8)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 10, 12, 11, 3, 6, 1]
 solution : [0, 2, 7]


Solution : [0, 2, 7] has cost 13.


Decide in level 3 among pending : [4, 10, 12, 11, 3, 6, 1]

Coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, -1), (6, 2), (7, -1), (8, -1), (9, -1), (10, 8), (11, 2), (12, 8)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [10, 12, 11, 3, 6, 1]
 solution : [0, 2, 7, 4]


New level: 4
 pending : [10, 12, 11, 3, 6, 1]
 solution : [0, 2, 7, 4]


Before reduction : 
 pending  : [10, 12, 11, 3, 6, 1]
 solution : [0, 2, 7, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, -1), (3, 4), (4, 8), (5, -1), (6, 2), (7, -1), (8, -1), (9, -1), (10, 8), (11, 2), (12, 8)]

After removed
 coverage : [(0, -1), (1, 4), (2, -1), (3, 1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, 1), (12, 8)]

Covered at level 4 : {10, 6}

After reduction : 
 pending  : [12, 11, 3, 1]
 solution : [0, 2, 7, 4]


Before reduction : 
 pending  : [12, 11, 3, 1]
 solution : [0, 2, 7, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 4), (2, -1), (3, 1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, 1), (12, 8)]

After removed
 coverage : [(0, -1), (1, 4), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, 8)]

Covered at level 4 : set()

After reduction : 
 pending  : [12, 11, 3, 1]
 solution : [0, 2, 7, 4]


Solution : [0, 2, 7, 4] has cost 18.


Decide in level 4 among pending : [12, 11, 3, 1]

Coverage : [(0, -1), (1, 4), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, 8)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [11, 3, 1]
 solution : [0, 2, 7, 4, 12]


New level: 5
 pending : [11, 3, 1]
 solution : [0, 2, 7, 4, 12]


Before reduction : 
 pending  : [11, 3, 1]
 solution : [0, 2, 7, 4, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 4), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, 8)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

Covered at level 5 : {3, 1, 11}

After reduction : 
 pending  : []
 solution : [0, 2, 7, 4, 12]


Before reduction : 
 pending  : []
 solution : [0, 2, 7, 4, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 7, 4, 12]


Solution : [0, 2, 7, 4, 12] has cost 24.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 7, 4, 12]

After backtrack at level 5
 pending : [11, 3, 1]
 solution : [0, 2, 7, 4, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [11, 3, 1]
 solution : [0, 2, 7, 4]


Before reduction : 
 pending  : [11, 3, 1]
 solution : [0, 2, 7, 4]

Essensial at level 5 : {1}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

Covered at level 5 : {3, 11}

After reduction : 
 pending  : []
 solution : [0, 2, 7, 4, 1]


Before reduction : 
 pending  : []
 solution : [0, 2, 7, 4, 1]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 7, 4, 1]


Solution : [0, 2, 7, 4, 1] has cost 21.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 7, 4, 1]

After backtrack at level 5
 pending : [1, 11, 3]
 solution : [0, 2, 7, 4]


Before backtrack at level 4
 pending : [1, 11, 3]
 solution : [0, 2, 7, 4]

After backtrack at level 4
 pending : [1, 11, 3, 10, 6, 12]
 solution : [0, 2, 7, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [1, 11, 3, 10, 6, 12]
 solution : [0, 2, 7]


Before reduction : 
 pending  : [1, 11, 3, 10, 6, 12]
 solution : [0, 2, 7]

Essensial at level 4 : {1, 10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0)]

Covered at level 4 : {3, 11, 12, 6}

After reduction : 
 pending  : []
 solution : [0, 2, 7, 1, 10]


Before reduction : 
 pending  : []
 solution : [0, 2, 7, 1, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 7, 1, 10]


Solution : [0, 2, 7, 1, 10] has cost 22.


Before backtrack at level 4
 pending : []
 solution : [0, 2, 7, 1, 10]

After backtrack at level 4
 pending : [1, 10, 11, 3, 6, 12]
 solution : [0, 2, 7]


Before backtrack at level 3
 pending : [1, 10, 11, 3, 6, 12]
 solution : [0, 2, 7]

After backtrack at level 3
 pending : [1, 10, 11, 3, 6, 12, 7, 5, 4]
 solution : [0, 2]


Before backtrack at level 2
 pending : [1, 10, 11, 3, 6, 12, 7, 5, 4]
 solution : [0, 2]

After backtrack at level 2
 pending : [1, 10, 11, 3, 6, 12, 7, 5, 4, 9]
 solution : [0, 2]


Before backtrack at level 1
 pending : [1, 10, 11, 3, 6, 12, 7, 5, 4, 9]
 solution : [0, 2]

After backtrack at level 1
 pending : [1, 10, 11, 3, 6, 12, 7, 5, 4, 9, 8]
 solution : [0, 2]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=2]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 21

[MIN NOTE]: maximum branch and bound depth: 7

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 2, 7, 4, 1] (length = 5)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_2] forall NODE0,NODE1. ~allowed_in(NODE0) | sent(NODE1,NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_7] forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1 # qcost: 6

invariant [invar_4] forall NODE0,NODE1. ~allowed_in(NODE0) | internal(NODE1) | NODE0 = NODE1 # qcost: 5

invariant [invar_1] forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0) # qcost: 3




[QRM NOTE]: Time elapsed since start: 0.356 seconds

[QRM NOTE]: Time elapsed since last: 0.105 seconds

[QRM NOTE]: Peak memory: 1762527 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=2]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_2.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 39: invar_2
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 40: invar_7
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 41: invar_4
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 42: invar_1

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 39: invar_2 ... PASS
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 40: invar_7 ... PASS
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 41: invar_4 ... PASS
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 42: invar_1 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 39: invar_2 ... FAIL
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 40: invar_7 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 41: invar_4 ... FAIL
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 42: invar_1 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 39: invar_2 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 40: invar_7 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 41: invar_4 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 42: invar_1 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 26: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 2.741 seconds

[QRM NOTE]: Time elapsed since last: 2.385 seconds

[QRM NOTE]: Peak memory: 764116 bytes


***************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/firewall: node=2

***************************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.node_2.0.ivy -s node=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/firewall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm firewall.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_3.finite.cpp firewall.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_3.finite.o firewall.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 8.155 seconds

[QRM NOTE]: Time elapsed since last: 8.155 seconds

[QRM NOTE]: Peak memory: 1180266 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        68

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 52


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: allowed_in('node',)
predicate: sent('node', 'node')
predicate: internal('node',)
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)']
representative states : 0, 3584, 1536, 512, 7176, 7240, 7242, 7246, 7178, 7182, 7180, 5128, 14528, 14532, 14564, 5130


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000111000000000
lex min decimal: 3584
states:
000111000000000




=== State Orbit 2 =====================
size : 3
repr state: 000101000000000
lex min decimal: 1536
states:
000110000000000
000101000000000
000011000000000




=== State Orbit 3 =====================
size : 3
repr state: 000001000000000
lex min decimal: 512
states:
000010000000000
000100000000000
000001000000000




=== State Orbit 4 =====================
size : 6
repr state: 010101010000000
lex min decimal: 7176
states:
010101000000010
001110000001000
100011000100000
010101010000000
100011000000100
001110001000000




=== State Orbit 5 =====================
size : 3
repr state: 010101010000010
lex min decimal: 7240
states:
100011000100100
001110001001000
010101010000010




=== State Orbit 6 =====================
size : 6
repr state: 010101010100010
lex min decimal: 7242
states:
010101010100010
001110001001100
010101010001010
100011010100100
100011001100100
001110001001010




=== State Orbit 7 =====================
size : 3
repr state: 010101010101010
lex min decimal: 7246
states:
100011011100100
010101010101010
001110001001110




=== State Orbit 8 =====================
size : 6
repr state: 010101010100000
lex min decimal: 7178
states:
100011001000100
001110000001010
100011010100000
010101010100000
010101000001010
001110001000100




=== State Orbit 9 =====================
size : 6
repr state: 010101010101000
lex min decimal: 7182
states:
100011011100000
010101000101010
001110000001110
100011011000100
010101010101000
001110001000110




=== State Orbit 10 =====================
size : 6
repr state: 010101010001000
lex min decimal: 7180
states:
010101000100010
100011010000100
010101010001000
001110000001100
100011001100000
001110001000010




=== State Orbit 11 =====================
size : 6
repr state: 100001000000100
lex min decimal: 5128
states:
010100010000000
100001000000100
001010000001000
001100001000000
010001000000010
100010000100000




=== State Orbit 12 =====================
size : 3
repr state: 110001000000110
lex min decimal: 14528
states:
110001000000110
101010000101000
011100011000000




=== State Orbit 13 =====================
size : 6
repr state: 110001001000110
lex min decimal: 14532
states:
011100011000100
110001001000110
101010000101010
011100011100000
101010010101000
110001000001110




=== State Orbit 14 =====================
size : 3
repr state: 110001001001110
lex min decimal: 14564
states:
110001001001110
011100011100100
101010010101010




=== State Orbit 15 =====================
size : 6
repr state: 100001001000100
lex min decimal: 5130
states:
001010000001010
100010010100000
010100010100000
001100001000100
100001001000100
010001000001010



[QRM NOTE]: Time elapsed since start: 8.271 seconds

[QRM NOTE]: Time elapsed since last: 0.116 seconds

[QRM NOTE]: Peak memory: 1230350 bytes


============================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/firewall: node=3]

============================================================================================================

Representatitive states in reachability not in Rmin

{14528, 14564, 14532, 7176, 5128, 7178, 5130, 7180, 7182}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 8.338 seconds

[QRM NOTE]: Time elapsed since last: 0.068 seconds

[QRM NOTE]: Peak memory: 199700 bytes

next size: node=3


************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/firewall: node=3

************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.ivy -s node=3 -f 1 -g -w -r -v 5 -w -l ivybench/sym/ivy/firewall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.022 seconds

[QRM NOTE]: Time elapsed since last: 0.022 seconds

[QRM NOTE]: Peak memory: 19660 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : --1--1---------
3     : ['allowed_in(node2)', 'internal(node2)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 8
num_suborbits: 2
6 (*) : ---------1-11--
6     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
7     : ---------1--11-
7     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
8     : -------11----1-
8     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
9     : -------1----11-
9     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
10     : -------11--1---
10     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
11     : --------11-1---
11     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
12 (*) : -------1---11--
12     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
13     : --------11---1-
13     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 12
num_suborbits: 2
14 (*) : --01--------1--
14     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
15     : -0-1-----1-----
15     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
16     : --0-1--------1-
16     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
17     : 0---1--1-------
17     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
18     : -0---1-----1---
18     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
19     : 0----1--1------
19     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
68 (*) : 0----1------1--
68     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
69     : 0---1----1-----
69     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
70     : -0---1-------1-
70     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
71     : -0-1---1-------
71     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
72     : --0-1------1---
72     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
73     : --01----1------
73     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
20 (*) : --10--------1--
20     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
21     : -1-0-----1-----
21     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
22     : --1-0--------1-
22     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
23     : 1---0--1-------
23     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
24     : -1---0-----1---
24     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
25     : 1----0--1------
25     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
56 (*) : 1----0------1--
56     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
57     : 1---0----1-----
57     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
58     : -1---0-------1-
58     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
59     : -1-0---1-------
59     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
60     : --1-0------1---
60     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
61     : --10----1------
61     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
26 (*) : ---0-0------1--
26     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
27     : ---00----1-----
27     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
28     : ----00-------1-
28     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
29     : ---00--1-------
29     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
30     : ----00-----1---
30     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
31     : ---0-0--1------
31     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
32 (*) : --0--0------1--
32     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
33     : -0--0----1-----
33     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
34     : --0--0-------1-
34     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
35     : 0--0---1-------
35     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
36     : -0--0------1---
36     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
37     : 0--0----1------
37     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
44 (*) : 0--0--------1--
44     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
45     : 0--0-----1-----
45     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
46     : -0--0--------1-
46     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
47     : -0--0--1-------
47     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
48     : --0--0-----1---
48     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
49     : --0--0--1------
49     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
38 (*) : ---1-1------1--
38     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
39     : ---11----1-----
39     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
40     : ----11-------1-
40     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
41     : ---11--1-------
41     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
42     : ----11-----1---
42     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
43     : ---1-1--1------
43     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
50 (*) : 0-0---------1--
50     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
51     : 00-------1-----
51     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
52     : -00----------1-
52     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
53     : 00-----1-------
53     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
54     : -00--------1---
54     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
55     : 0-0-----1------
55     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
62 (*) : 1-1---------1--
62     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
63     : 11-------1-----
63     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
64     : -11----------1-
64     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
65     : 11-----1-------
65     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
66     : -11--------1---
66     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
67     : 1-1-----1------
67     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : -11-----0------
74     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
75     : -11----0-------
75     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
76     : 1-1--------0---
76     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
77     : 1-1------0-----
77     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
78     : 11-----------0-
78     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
79     : 11----------0--
79     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -110-----------
80     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
81     : 1-1-0----------
81     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
82     : 11---0---------
82     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 3
num_suborbits: 1
83 (*) : -1-----0-----0-
83     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
84     : --1-----0--0---
84     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
85     : 1--------0--0--
85     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
86 (*) : -1-0---------0-
86     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
87     : --10-------0---
87     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
88     : 1---0-------0--
88     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
89     : --1-0---0------
89     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
90     : 1----0---0-----
90     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
91     : -1---0-0-------
91     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -1-0-0---------
92     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
93     : --100----------
93     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
94     : 1---00---------
94     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : -1------1--1-0-
96     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
97     : --1----1---0-1-
97     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
98     : 1-------1--10--
98     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
99     : --1-----01--1--
99     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
100     : 1------1-0---1-
100     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
101     : -1-----0-1--1--
101     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
168 (*) : -1------1---01-
168     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
169     : --1----1-0-1---
169     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
170     : 1----------110-
170     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
171     : --1----011-----
171     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
172     : 1--------1-0-1-
172     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
173     : -1-----10---1--
173     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
222 (*) : -1------1--10--
222     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
223     : --1----1-0---1-
223     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
224     : 1-------1--1-0-
224     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
225     : --1----0-1--1--
225     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
226     : 1------1---0-1-
226     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
227     : -1------01--1--
227     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
342 (*) : 1-------1---01-
342     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
343     : 1------1-0-1---
343     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
344     : -1---------110-
344     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
345     : -1-----011-----
345     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
346     : --1------1-0-1-
346     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
347     : --1----10---1--
347     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 3
102 (*) : -10-----1----0-
102     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
103     : -01----1---0---
103     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
104     : 1-0--------10--
104     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
105     : 0-1-----01-----
105     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
106     : 10-------0---1-
106     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
107     : 01-----0----1--
107     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
156 (*) : -10-----1---0--
156     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
157     : -01----1-0-----
157     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
158     : 1-0--------1-0-
158     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
159     : 0-1----0-1-----
159     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
160     : 10---------0-1-
160     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
161     : 01------0---1--
161     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
186 (*) : 01-----01------
186     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
187     : 0-1----10------
187     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
188     : 10-------0-1---
188     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
189     : -01------1-0---
189     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
190     : 1-0---------01-
190     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
191     : -10---------10-
191     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 2
108 (*) : --0-----1--1-0-
108     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
109     : -0-----1---0-1-
109     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
110     : --0-----1--10--
110     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
111     : 0-------01--1--
111     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
112     : -0-----1-0---1-
112     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
113     : 0------0-1--1--
113     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
150 (*) : --0-----1---01-
150     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
151     : -0-----1-0-1---
151     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
152     : --0--------110-
152     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
153     : 0------011-----
153     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
154     : -0-------1-0-1-
154     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
155     : 0------10---1--
155     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
114 (*) : ---0----1--1-0-
114     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
115     : ---0---1---0-1-
115     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
116     : ----0---1--10--
116     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
117     : ----0---01--1--
117     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
118     : -----0-1-0---1-
118     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
119     : -----0-0-1--1--
119     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
132 (*) : ---0----1---01-
132     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
133     : ---0---1-0-1---
133     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
134     : ----0------110-
134     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
135     : ----0--011-----
135     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
136     : -----0---1-0-1-
136     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
137     : -----0-10---1--
137     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
204 (*) : ---0----1--10--
204     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
205     : ---0---1-0---1-
205     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
206     : ----0---1--1-0-
206     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
207     : ----0--0-1--1--
207     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
208     : -----0-1---0-1-
208     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
209     : -----0--01--1--
209     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
288 (*) : ----0---1---01-
288     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
289     : -----0-1-0-1---
289     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
290     : ---0-------110-
290     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
291     : -----0-011-----
291     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
292     : ---0-----1-0-1-
292     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
293     : ----0--10---1--
293     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
120 (*) : -1-0----1---0--
120     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
121     : --10---1-0-----
121     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
122     : 1---0------1-0-
122     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
123     : --1-0--0-1-----
123     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
124     : 1----0-----0-1-
124     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
125     : -1---0--0---1--
125     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
126 (*) : ---0----10--0--
126     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
127     : ---0---1-0--0--
127     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
128     : ----0--0---1-0-
128     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
129     : ----0--0-1---0-
129     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
130     : -----0--0--0-1-
130     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
131     : -----0--0--01--
131     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
138 (*) : -0-0----1----1-
138     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
139     : --00---1---1---
139     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
140     : 0---0------11--
140     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
141     : --0-0---11-----
141     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
142     : 0----0---1---1-
142     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
143     : -0---0-1----1--
143     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
210 (*) : -0-0----1--1---
210     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
211     : --00---1-----1-
211     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
212     : 0---0---1--1---
212     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
213     : --0-0----1--1--
213     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
214     : 0----0-1-----1-
214     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
215     : -0---0---1--1--
215     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
264 (*) : 0---0---1----1-
264     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
265     : 0----0-1---1---
265     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
266     : -0-0-------11--
266     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
267     : -0---0--11-----
267     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
268     : --00-----1---1-
268     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
269     : --0-0--1----1--
269     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
276 (*) : --0-0--11------
276     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
277     : -0---0-11------
277     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
278     : --00-----1-1---
278     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
279     : 0----0---1-1---
279     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
280     : -0-0--------11-
280     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
281     : 0---0-------11-
281     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
144 (*) : --0-----10--0--
144     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
145     : -0-----1-0--0--
145     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
146     : --0----0---1-0-
146     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
147     : 0------0-1---0-
147     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
148     : -0------0--0-1-
148     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
149     : 0-------0--01--
149     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
162 (*) : -1-----01---0--
162     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
163     : --1----100-----
163     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
164     : 1--------0-1-0-
164     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
165     : --1----0-1-0---
165     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
166     : 1----------001-
166     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
167     : -1------0---10-
167     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 18
num_suborbits: 3
174 (*) : -1-1---01------
174     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
175     : --11---10------
175     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
176     : 1---1----0-1---
176     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
177     : --1-1----1-0---
177     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
178     : 1----1------01-
178     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
179     : -1---1------10-
179     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
258 (*) : -1---1--1----0-
258     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
259     : --1-1--1---0---
259     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
260     : 1----1-----10--
260     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
261     : --11----01-----
261     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
262     : 1---1----0---1-
262     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
263     : -1-1---0----1--
263     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
312 (*) : -1---1--1---0--
312     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
313     : --1-1--1-0-----
313     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
314     : 1----1-----1-0-
314     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
315     : --11---0-1-----
315     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
316     : 1---1------0-1-
316     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
317     : -1-1----0---1--
317     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
180 (*) : -1-1----1----1-
180     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
181     : --11---1---1---
181     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
182     : 1---1------11--
182     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
183     : --1-1---11-----
183     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
184     : 1----1---1---1-
184     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
185     : -1---1-1----1--
185     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
228 (*) : -1-1----1--1---
228     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
229     : --11---1-----1-
229     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
230     : 1---1---1--1---
230     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
231     : --1-1----1--1--
231     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
232     : 1----1-1-----1-
232     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
233     : -1---1---1--1--
233     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
252 (*) : -1---1-11------
252     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
253     : --1-1--11------
253     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
254     : 1----1---1-1---
254     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
255     : --11-----1-1---
255     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
256     : 1---1-------11-
256     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
257     : -1-1--------11-
257     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
336 (*) : 1---1---1----1-
336     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
337     : 1----1-1---1---
337     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
338     : -1-1-------11--
338     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
339     : -1---1--11-----
339     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
340     : --11-----1---1-
340     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
341     : --1-1--1----1--
341     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 24
num_suborbits: 4
192 (*) : 01------1----1-
192     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
193     : 0-1----1---1---
193     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
194     : 10---------11--
194     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
195     : -01-----11-----
195     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
196     : 1-0------1---1-
196     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
197     : -10----1----1--
197     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
198 (*) : -10----11------
198     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
199     : -01----11------
199     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
200     : 1-0------1-1---
200     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
201     : 0-1------1-1---
201     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
202     : 10----------11-
202     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
203     : 01----------11-
203     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
216 (*) : 01------1--1---
216     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
217     : 0-1----1-----1-
217     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
218     : 10------1--1---
218     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
219     : -01------1--1--
219     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
220     : 1-0----1-----1-
220     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
221     : -10------1--1--
221     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
330 (*) : 10------1----1-
330     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
331     : 1-0----1---1---
331     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
332     : 01---------11--
332     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
333     : -10-----11-----
333     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
334     : 0-1------1---1-
334     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
335     : -01----1----1--
335     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 12
num_suborbits: 2
234 (*) : -----1--1--1-0-
234     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
235     : ----1--1---0-1-
235     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
236     : -----1--1--10--
236     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
237     : ---1----01--1--
237     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
238     : ----1--1-0---1-
238     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
239     : ---1---0-1--1--
239     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
318 (*) : -----1--1---01-
318     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
319     : ----1--1-0-1---
319     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
320     : -----1-----110-
320     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
321     : ---1---011-----
321     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
322     : ----1----1-0-1-
322     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
323     : ---1---10---1--
323     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 24
num_suborbits: 4
240 (*) : ---10---1--1---
240     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
241     : ---1-0-1-----1-
241     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
242     : ---01---1--1---
242     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
243     : ----10---1--1--
243     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
244     : ---0-1-1-----1-
244     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
245     : ----01---1--1--
245     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
270 (*) : ----01-11------
270     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
271     : ----10-11------
271     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
272     : ---0-1---1-1---
272     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
273     : ---1-0---1-1---
273     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
274     : ---01-------11-
274     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
275     : ---10-------11-
275     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
282 (*) : ---10---1----1-
282     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
283     : ---1-0-1---1---
283     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
284     : ---01------11--
284     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
285     : ----10--11-----
285     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
286     : ---0-1---1---1-
286     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
287     : ----01-1----1--
287     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
324 (*) : ---01---1----1-
324     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
325     : ---0-1-1---1---
325     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
326     : ---10------11--
326     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
327     : ----01--11-----
327     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
328     : ---1-0---1---1-
328     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
329     : ----10-1----1--
329     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
246 (*) : ---00---1---0--
246     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
247     : ---0-0-1-0-----
247     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
248     : ---00------1-0-
248     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
249     : ----00-0-1-----
249     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
250     : ---0-0-----0-1-
250     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
251     : ----00--0---1--
251     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
294 (*) : --0-0---1---0--
294     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
295     : -0---0-1-0-----
295     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
296     : --00-------1-0-
296     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
297     : 0----0-0-1-----
297     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
298     : -0-0-------0-1-
298     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
299     : 0---0---0---1--
299     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
300 (*) : ----01--1---0--
300     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
301     : ----10-1-0-----
301     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
302     : ---0-1-----1-0-
302     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
303     : ---1-0-0-1-----
303     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
304     : ---01------0-1-
304     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
305     : ---10---0---1--
305     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
306 (*) : -----1--10--0--
306     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
307     : ----1--1-0--0--
307     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
308     : -----1-0---1-0-
308     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
309     : ---1---0-1---0-
309     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
310     : ----1---0--0-1-
310     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
311     : ---1----0--01--
311     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 62

[PRIME NOTE]: number of primes: 348

[QRM NOTE]: Time elapsed since start: 0.096 seconds

[QRM NOTE]: Time elapsed since last: 0.074 seconds

[QRM NOTE]: Peak memory: 1387887 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=3]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {0, 12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 576), (3, 768), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 576), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 256), (26, 424), (27, 384), (28, 384), (29, 560), (30, 256), (31, 256), (32, 256), (33, 128)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 576), (3, 768), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 576), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 256), (26, 424), (27, 384), (28, 384), (29, 560), (30, 256), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 576), (3, 768), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 576), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 256), (26, 424), (27, 320), (28, 384), (29, 560), (30, 256), (31, 256), (32, 256), (33, 128)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12]

[QRM NOTE]: Time elapsed since start: 0.111 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 328063 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=3]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node2,node2)']

sign_func_name2args: {'0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node2,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


=== Prime Orbit 12 =====================
size : 3
num_suborbits: 1
83 (*) : -1-----0-----0-
83     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
84     : --1-----0--0---
84     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
85     : 1--------0--0--
85     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1}

	identical_multi_classes: {'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : --1--1---------
3     : ['allowed_in(node2)', 'internal(node2)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)


=== Prime Orbit 2 =====================
size : 8
num_suborbits: 2
6 (*) : ---------1-11--
6     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
7     : ---------1--11-
7     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
8     : -------11----1-
8     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
9     : -------1----11-
9     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
10     : -------11--1---
10     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
11     : --------11-1---
11     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
12 (*) : -------1---11--
12     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
13     : --------11---1-
13     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$2], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1, node$0$sent$0$2]}

sig2const: {'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$0$2; node$0$sent$1$1, node$0$sent$1$0; node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1, node$0$sent$0$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$2, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$0$2; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2; node$0$sent$1$1, node$0$sent$1$0, node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0 | node$0$sent$1$2}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$0; node$0$sent$1': [node$0$sent$0$2; node$0$sent$1$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$2]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$2; node$0$sent$1$1}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', 'sent(NODE0,NODE3)', 'sent(NODE2,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE2:node = NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$2

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$2 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$2 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$1$2

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2']

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$1 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$1 | node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE3,NODE1,NODE4,NODE2. ~sent(NODE1,NODE2) | ~sent(NODE0,NODE3) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE2 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))


=== Prime Orbit 3 =====================
size : 12
num_suborbits: 2
14 (*) : --01--------1--
14     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
15     : -0-1-----1-----
15     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
16     : --0-1--------1-
16     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
17     : 0---1--1-------
17     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
18     : -0---1-----1---
18     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
19     : 0----1--1------
19     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
68 (*) : 0----1------1--
68     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
69     : 0---1----1-----
69     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
70     : -0---1-------1-
70     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
71     : -0-1---1-------
71     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
72     : --0-1------1---
72     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
73     : --01----1------
73     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'internal(node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'internal(node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', 'internal(node0)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE3)', 'internal(NODE0)', 'sent(NODE1,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE0,NODE2. allowed_in(NODE3) | ~internal(NODE0) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
20 (*) : --10--------1--
20     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
21     : -1-0-----1-----
21     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
22     : --1-0--------1-
22     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
23     : 1---0--1-------
23     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
24     : -1---0-----1---
24     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
25     : 1----0--1------
25     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
56 (*) : 1----0------1--
56     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
57     : 1---0----1-----
57     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
58     : -1---0-------1-
58     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
59     : -1-0---1-------
59     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
60     : --1-0------1---
60     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
61     : --10----1------
61     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node0)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE3)', 'sent(NODE1,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE0,NODE2. ~allowed_in(NODE0) | internal(NODE3) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
26 (*) : ---0-0------1--
26     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
27     : ---00----1-----
27     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
28     : ----00-------1-
28     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
29     : ---00--1-------
29     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
30     : ----00-----1---
30     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
31     : ---0-0--1------
31     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$0$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$1], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$1, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~internal(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE0) | internal(NODE1) | NODE0 = NODE1


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
32 (*) : --0--0------1--
32     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
33     : -0--0----1-----
33     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
34     : --0--0-------1-
34     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
35     : 0--0---1-------
35     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
36     : -0--0------1---
36     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
37     : 0--0----1------
37     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
44 (*) : 0--0--------1--
44     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
45     : 0--0-----1-----
45     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
46     : -0--0--------1-
46     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
47     : -0--0--1-------
47     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
48     : --0--0-----1---
48     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
49     : --0--0--1------
49     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'sent(NODE0,NODE1)', '~allowed_in(NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE0,NODE1) | allowed_in(NODE2) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
38 (*) : ---1-1------1--
38     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
39     : ---11----1-----
39     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
40     : ----11-------1-
40     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
41     : ---11--1-------
41     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
42     : ----11-----1---
42     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
43     : ---1-1--1------
43     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$1, node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$internal$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$internal$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1': [node$0$internal$0$0; node$0$sent$1$0], 'node$0$internal$0; node$0$sent$0': [node$0$internal$0$1; node$0$sent$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1': node$0$internal$0$0; node$0$sent$1$0, 'node$0$internal$0; node$0$sent$0': node$0$internal$0$1; node$0$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', 'internal(NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~sent(NODE1,NODE0) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
50 (*) : 0-0---------1--
50     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
51     : 00-------1-----
51     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
52     : -00----------1-
52     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
53     : 00-----1-------
53     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
54     : -00--------1---
54     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
55     : 0-0-----1------
55     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~allowed_in(node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$1, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~allowed_in(node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$1], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$1, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~allowed_in(NODE1)', '~allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~sent(NODE0,NODE1) | allowed_in(NODE1) | allowed_in(NODE0) | NODE0 = NODE1


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
62 (*) : 1-1---------1--
62     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
63     : 11-------1-----
63     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
64     : -11----------1-
64     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
65     : 11-----1-------
65     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
66     : -11--------1---
66     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
67     : 1-1-----1------
67     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$allowed_in$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$allowed_in$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$sent$1': [node$0$allowed_in$0$0; node$0$sent$1$0], 'node$0$allowed_in$0; node$0$sent$0': [node$0$allowed_in$0$1; node$0$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$sent$1': node$0$allowed_in$0$0; node$0$sent$1$0, 'node$0$allowed_in$0; node$0$sent$0': node$0$allowed_in$0$1; node$0$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE1,NODE0)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~allowed_in(NODE0) | ~sent(NODE1,NODE0) | ~allowed_in(NODE1) | NODE0 = NODE1


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : -11-----0------
74     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
75     : -11----0-------
75     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
76     : 1-1--------0---
76     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
77     : 1-1------0-----
77     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
78     : 11-----------0-
78     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
79     : 11----------0--
79     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$1; node$1$sent$1$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$1; node$1$sent$1$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'allowed_in(NODE1)', '~sent(NODE2,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | ~allowed_in(NODE1) | sent(NODE2,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -110-----------
80     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
81     : 1-1-0----------
81     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
82     : 11---0---------
82     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 2, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
86 (*) : -1-0---------0-
86     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
87     : --10-------0---
87     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
88     : 1---0-------0--
88     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
89     : --1-0---0------
89     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
90     : 1----0---0-----
90     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
91     : -1---0-0-------
91     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE2,NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE0) | internal(NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -1-0-0---------
92     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
93     : --100----------
93     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
94     : 1---00---------
94     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE0)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$2]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : -1------1--1-0-
96     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
97     : --1----1---0-1-
97     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
98     : 1-------1--10--
98     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
99     : --1-----01--1--
99     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
100     : 1------1-0---1-
100     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
101     : -1-----0-1--1--
101     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
168 (*) : -1------1---01-
168     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
169     : --1----1-0-1---
169     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
170     : 1----------110-
170     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
171     : --1----011-----
171     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
172     : 1--------1-0-1-
172     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
173     : -1-----10---1--
173     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
222 (*) : -1------1--10--
222     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
223     : --1----1-0---1-
223     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
224     : 1-------1--1-0-
224     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
225     : --1----0-1--1--
225     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
226     : 1------1---0-1-
226     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
227     : -1------01--1--
227     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
342 (*) : 1-------1---01-
342     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
343     : 1------1-0-1---
343     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
344     : -1---------110-
344     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
345     : -1-----011-----
345     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
346     : --1------1-0-1-
346     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
347     : --1----10---1--
347     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE1,NODE3)', '~sent(NODE3,NODE5)', 'sent(NODE2,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE3:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE3) | sent(NODE3,NODE5) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE2 | NODE0 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE5 | NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE2 = NODE4 | NODE0 = NODE4 | NODE0 = NODE2))


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 3
102 (*) : -10-----1----0-
102     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
103     : -01----1---0---
103     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
104     : 1-0--------10--
104     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
105     : 0-1-----01-----
105     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
106     : 10-------0---1-
106     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
107     : 01-----0----1--
107     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
156 (*) : -10-----1---0--
156     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
157     : -01----1-0-----
157     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
158     : 1-0--------1-0-
158     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
159     : 0-1----0-1-----
159     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
160     : 10---------0-1-
160     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
161     : 01------0---1--
161     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
186 (*) : 01-----01------
186     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
187     : 0-1----10------
187     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
188     : 10-------0-1---
188     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
189     : -01------1-0---
189     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
190     : 1-0---------01-
190     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
191     : -10---------10-
191     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', '~sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$allowed_in': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$sent$0': [node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$sent$0': node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE3,NODE4)', '~allowed_in(NODE3)', 'sent(NODE1,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE3,NODE1,NODE4,NODE2. ~allowed_in(NODE0) | sent(NODE3,NODE4) | allowed_in(NODE3) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 2
108 (*) : --0-----1--1-0-
108     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
109     : -0-----1---0-1-
109     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
110     : --0-----1--10--
110     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
111     : 0-------01--1--
111     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
112     : -0-----1-0---1-
112     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
113     : 0------0-1--1--
113     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
150 (*) : --0-----1---01-
150     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
151     : -0-----1-0-1---
151     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
152     : --0--------110-
152     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
153     : 0------011-----
153     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
154     : -0-------1-0-1-
154     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
155     : 0------10---1--
155     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', 'sent(NODE0,NODE2)', '~sent(NODE2,NODE4)', '~allowed_in(NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE3,NODE1,NODE4,NODE2. ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | sent(NODE2,NODE4) | allowed_in(NODE2) | ((NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))


=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
114 (*) : ---0----1--1-0-
114     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
115     : ---0---1---0-1-
115     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
116     : ----0---1--10--
116     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
117     : ----0---01--1--
117     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
118     : -----0-1-0---1-
118     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
119     : -----0-0-1--1--
119     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
132 (*) : ---0----1---01-
132     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
133     : ---0---1-0-1---
133     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
134     : ----0------110-
134     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
135     : ----0--011-----
135     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
136     : -----0---1-0-1-
136     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
137     : -----0-10---1--
137     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
204 (*) : ---0----1--10--
204     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
205     : ---0---1-0---1-
205     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
206     : ----0---1--1-0-
206     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
207     : ----0--0-1--1--
207     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
208     : -----0-1---0-1-
208     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
209     : -----0--01--1--
209     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
288 (*) : ----0---1---01-
288     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
289     : -----0-1-0-1---
289     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
290     : ---0-------110-
290     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
291     : -----0-011-----
291     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
292     : ---0-----1-0-1-
292     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
293     : ----0--10---1--
293     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1, node$1$internal$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1 | node$1$internal$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE4)', '~sent(NODE2,NODE5)', 'sent(NODE0,NODE2)', 'sent(NODE1,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. internal(NODE4) | sent(NODE2,NODE5) | ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE5 | NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
120 (*) : -1-0----1---0--
120     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
121     : --10---1-0-----
121     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
122     : 1---0------1-0-
122     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
123     : --1-0--0-1-----
123     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
124     : 1----0-----0-1-
124     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
125     : -1---0--0---1--
125     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE2,NODE1)', '~internal(NODE1)', 'sent(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE1) | internal(NODE1) | ~sent(NODE1,NODE2) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
126 (*) : ---0----10--0--
126     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
127     : ---0---1-0--0--
127     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
128     : ----0--0---1-0-
128     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
129     : ----0--0-1---0-
129     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
130     : -----0--0--0-1-
130     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
131     : -----0--0--01--
131     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~internal(NODE0)', '~sent(NODE2,NODE0)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~sent(NODE0,NODE1) | internal(NODE0) | sent(NODE2,NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
138 (*) : -0-0----1----1-
138     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
139     : --00---1---1---
139     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
140     : 0---0------11--
140     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
141     : --0-0---11-----
141     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
142     : 0----0---1---1-
142     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
143     : -0---0-1----1--
143     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
210 (*) : -0-0----1--1---
210     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
211     : --00---1-----1-
211     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
212     : 0---0---1--1---
212     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
213     : --0-0----1--1--
213     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
214     : 0----0-1-----1-
214     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
215     : -0---0---1--1--
215     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
264 (*) : 0---0---1----1-
264     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
265     : 0----0-1---1---
265     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
266     : -0-0-------11--
266     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
267     : -0---0--11-----
267     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
268     : --00-----1---1-
268     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
269     : --0-0--1----1--
269     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
276 (*) : --0-0--11------
276     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
277     : -0---0-11------
277     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
278     : --00-----1-1---
278     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
279     : 0----0---1-1---
279     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
280     : -0-0--------11-
280     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
281     : 0---0-------11-
281     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$allowed_in$0': node$1$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', '~internal(NODE5)', 'sent(NODE0,NODE2)', '~allowed_in(NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. ~sent(NODE1,NODE3) | internal(NODE5) | ~sent(NODE0,NODE2) | allowed_in(NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE2 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3))


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
144 (*) : --0-----10--0--
144     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
145     : -0-----1-0--0--
145     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
146     : --0----0---1-0-
146     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
147     : 0------0-1---0-
147     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
148     : -0------0--0-1-
148     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
149     : 0-------0--01--
149     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1 | node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~allowed_in(NODE1)', '~sent(NODE2,NODE0)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~sent(NODE0,NODE1) | allowed_in(NODE1) | sent(NODE2,NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
162 (*) : -1-----01---0--
162     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
163     : --1----100-----
163     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
164     : 1--------0-1-0-
164     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
165     : --1----0-1-0---
165     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
166     : 1----------001-
166     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
167     : -1------0---10-
167     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$1$sent$1$1, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node1)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$0$sent$0; node$1$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$0$sent$0; node$1$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE1,NODE0)', '~sent(NODE2,NODE1)', 'sent(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE1,NODE0) | sent(NODE2,NODE1) | ~sent(NODE1,NODE2) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 25 =====================
size : 18
num_suborbits: 3
174 (*) : -1-1---01------
174     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
175     : --11---10------
175     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
176     : 1---1----0-1---
176     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
177     : --1-1----1-0---
177     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
178     : 1----1------01-
178     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
179     : -1---1------10-
179     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
258 (*) : -1---1--1----0-
258     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
259     : --1-1--1---0---
259     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
260     : 1----1-----10--
260     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
261     : --11----01-----
261     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
262     : 1---1----0---1-
262     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
263     : -1-1---0----1--
263     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
312 (*) : -1---1--1---0--
312     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
313     : --1-1--1-0-----
313     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
314     : 1----1-----1-0-
314     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
315     : --11---0-1-----
315     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
316     : 1---1------0-1-
316     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
317     : -1-1----0---1--
317     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', '~sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'internal(node0)', '~sent(node0,node1)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0; node$1$sent$0': [node$0$internal$0$0; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0; node$1$sent$0': node$0$internal$0$0; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE3)', 'internal(NODE1)', '~sent(NODE1,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE3,NODE1,NODE4,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE3) | ~internal(NODE1) | sent(NODE1,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
180 (*) : -1-1----1----1-
180     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
181     : --11---1---1---
181     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
182     : 1---1------11--
182     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
183     : --1-1---11-----
183     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
184     : 1----1---1---1-
184     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
185     : -1---1-1----1--
185     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
228 (*) : -1-1----1--1---
228     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
229     : --11---1-----1-
229     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
230     : 1---1---1--1---
230     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
231     : --1-1----1--1--
231     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
232     : 1----1-1-----1-
232     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
233     : -1---1---1--1--
233     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
252 (*) : -1---1-11------
252     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
253     : --1-1--11------
253     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
254     : 1----1---1-1---
254     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
255     : --11-----1-1---
255     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
256     : 1---1-------11-
256     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
257     : -1-1--------11-
257     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
336 (*) : 1---1---1----1-
336     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
337     : 1----1-1---1---
337     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
338     : -1-1-------11--
338     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
339     : -1---1--11-----
339     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
340     : --11-----1---1-
340     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
341     : --1-1--1----1--
341     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0': node$0$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE3,NODE5)', 'internal(NODE1)', 'sent(NODE2,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE5', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. ~allowed_in(NODE0) | ~sent(NODE3,NODE5) | ~internal(NODE1) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE4 | NODE1 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))


=== Prime Orbit 27 =====================
size : 24
num_suborbits: 4
192 (*) : 01------1----1-
192     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
193     : 0-1----1---1---
193     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
194     : 10---------11--
194     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
195     : -01-----11-----
195     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
196     : 1-0------1---1-
196     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
197     : -10----1----1--
197     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
198 (*) : -10----11------
198     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
199     : -01----11------
199     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
200     : 1-0------1-1---
200     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
201     : 0-1------1-1---
201     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
202     : 10----------11-
202     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
203     : 01----------11-
203     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
216 (*) : 01------1--1---
216     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
217     : 0-1----1-----1-
217     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
218     : 10------1--1---
218     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
219     : -01------1--1--
219     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
220     : 1-0----1-----1-
220     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
221     : -10------1--1--
221     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
330 (*) : 10------1----1-
330     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
331     : 1-0----1---1---
331     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
332     : 01---------11--
332     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
333     : -10-----11-----
333     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
334     : 0-1------1---1-
334     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
335     : -01----1----1--
335     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$allowed_in': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE1,NODE3)', 'sent(NODE2,NODE4)', '~allowed_in(NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE3', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE1:node = NODE5', 'NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE3', 'NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE3) | ~sent(NODE2,NODE4) | allowed_in(NODE5) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE4 | NODE1 = NODE4) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE2 = NODE4 | NODE0 = NODE4 | NODE0 = NODE2))


=== Prime Orbit 28 =====================
size : 12
num_suborbits: 2
234 (*) : -----1--1--1-0-
234     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
235     : ----1--1---0-1-
235     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
236     : -----1--1--10--
236     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
237     : ---1----01--1--
237     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
238     : ----1--1-0---1-
238     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
239     : ---1---0-1--1--
239     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
318 (*) : -----1--1---01-
318     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
319     : ----1--1-0-1---
319     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
320     : -----1-----110-
320     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
321     : ---1---011-----
321     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
322     : ----1----1-0-1-
322     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
323     : ---1---10---1--
323     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$1, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$1 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$1], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', 'sent(NODE2,NODE3)', '~sent(NODE0,NODE4)', 'internal(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE3,NODE1,NODE4,NODE2. ~sent(NODE1,NODE0) | ~sent(NODE2,NODE3) | sent(NODE0,NODE4) | ~internal(NODE0) | ((NODE0 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))


=== Prime Orbit 29 =====================
size : 24
num_suborbits: 4
240 (*) : ---10---1--1---
240     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
241     : ---1-0-1-----1-
241     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
242     : ---01---1--1---
242     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
243     : ----10---1--1--
243     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
244     : ---0-1-1-----1-
244     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
245     : ----01---1--1--
245     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
270 (*) : ----01-11------
270     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
271     : ----10-11------
271     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
272     : ---0-1---1-1---
272     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
273     : ---1-0---1-1---
273     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
274     : ---01-------11-
274     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
275     : ---10-------11-
275     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
282 (*) : ---10---1----1-
282     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
283     : ---1-0-1---1---
283     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
284     : ---01------11--
284     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
285     : ----10--11-----
285     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
286     : ---0-1---1---1-
286     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
287     : ----01-1----1--
287     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
324 (*) : ---01---1----1-
324     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
325     : ---0-1-1---1---
325     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
326     : ---10------11--
326     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
327     : ----01--11-----
327     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
328     : ---1-0---1---1-
328     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
329     : ----10-1----1--
329     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', '~internal(NODE5)', 'internal(NODE0)', 'sent(NODE2,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. ~sent(NODE1,NODE3) | internal(NODE5) | ~internal(NODE0) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE2 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE2 = NODE4 | NODE0 = NODE4 | NODE0 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
246 (*) : ---00---1---0--
246     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
247     : ---0-0-1-0-----
247     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
248     : ---00------1-0-
248     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
249     : ----00-0-1-----
249     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
250     : ---0-0-----0-1-
250     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
251     : ----00--0---1--
251     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'sent(NODE0,NODE1)', '~internal(NODE0)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE0,NODE1) | internal(NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
294 (*) : --0-0---1---0--
294     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
295     : -0---0-1-0-----
295     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
296     : --00-------1-0-
296     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
297     : 0----0-0-1-----
297     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
298     : -0-0-------0-1-
298     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
299     : 0---0---0---1--
299     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'sent(NODE0,NODE1)', '~allowed_in(NODE1)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | sent(NODE1,NODE0) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
300 (*) : ----01--1---0--
300     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
301     : ----10-1-0-----
301     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
302     : ---0-1-----1-0-
302     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
303     : ---1-0-0-1-----
303     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
304     : ---01------0-1-
304     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
305     : ---10---0---1--
305     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'sent(NODE1,NODE0)', 'internal(NODE0)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
306 (*) : -----1--10--0--
306     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
307     : ----1--1-0--0--
307     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
308     : -----1-0---1-0-
308     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
309     : ---1---0-1---0-
309     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
310     : ----1---0--0-1-
310     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
311     : ---1----0--01--
311     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1], 'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1, 'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', 'internal(NODE0)', '~sent(NODE2,NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE2,NODE1) | sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==========================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 12 =====================
size : 3
num_suborbits: 1
83 (*) : -1-----0-----0-
83     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
84     : --1-----0--0---
84     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
85     : 1--------0--0--
85     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : --1--1---------
3     : ['allowed_in(node2)', 'internal(node2)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 8
num_suborbits: 2
6 (*) : ---------1-11--
6     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
7     : ---------1--11-
7     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
8     : -------11----1-
8     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
9     : -------1----11-
9     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
10     : -------11--1---
10     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
11     : --------11-1---
11     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
12 (*) : -------1---11--
12     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
13     : --------11---1-
13     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
num_forall :   5
num_exists :   0
num_literals : 13
quantified form : forall NODE0,NODE3,NODE1,NODE4,NODE2. ~sent(NODE1,NODE2) | ~sent(NODE0,NODE3) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE2 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))
qcost : 18




=== Prime Orbit 3 =====================
size : 12
num_suborbits: 2
14 (*) : --01--------1--
14     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
15     : -0-1-----1-----
15     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
16     : --0-1--------1-
16     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
17     : 0---1--1-------
17     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
18     : -0---1-----1---
18     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
19     : 0----1--1------
19     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
68 (*) : 0----1------1--
68     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
69     : 0---1----1-----
69     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
70     : -0---1-------1-
70     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
71     : -0-1---1-------
71     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
72     : --0-1------1---
72     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
73     : --01----1------
73     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE1,NODE3,NODE0,NODE2. allowed_in(NODE3) | ~internal(NODE0) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))
qcost : 13




=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
20 (*) : --10--------1--
20     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
21     : -1-0-----1-----
21     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
22     : --1-0--------1-
22     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
23     : 1---0--1-------
23     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
24     : -1---0-----1---
24     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
25     : 1----0--1------
25     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
56 (*) : 1----0------1--
56     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
57     : 1---0----1-----
57     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
58     : -1---0-------1-
58     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
59     : -1-0---1-------
59     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
60     : --1-0------1---
60     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
61     : --10----1------
61     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE1,NODE3,NODE0,NODE2. ~allowed_in(NODE0) | internal(NODE3) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))
qcost : 13




=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
26 (*) : ---0-0------1--
26     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
27     : ---00----1-----
27     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
28     : ----00-------1-
28     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
29     : ---00--1-------
29     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
30     : ----00-----1---
30     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
31     : ---0-0--1------
31     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE0) | internal(NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
32 (*) : --0--0------1--
32     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
33     : -0--0----1-----
33     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
34     : --0--0-------1-
34     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
35     : 0--0---1-------
35     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
36     : -0--0------1---
36     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
37     : 0--0----1------
37     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
44 (*) : 0--0--------1--
44     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
45     : 0--0-----1-----
45     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
46     : -0--0--------1-
46     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
47     : -0--0--1-------
47     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
48     : --0--0-----1---
48     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
49     : --0--0--1------
49     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE0,NODE1) | allowed_in(NODE2) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))
qcost : 10




=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
38 (*) : ---1-1------1--
38     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
39     : ---11----1-----
39     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
40     : ----11-------1-
40     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
41     : ---11--1-------
41     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
42     : ----11-----1---
42     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
43     : ---1-1--1------
43     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~sent(NODE1,NODE0) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
50 (*) : 0-0---------1--
50     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
51     : 00-------1-----
51     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
52     : -00----------1-
52     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
53     : 00-----1-------
53     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
54     : -00--------1---
54     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
55     : 0-0-----1------
55     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~sent(NODE0,NODE1) | allowed_in(NODE1) | allowed_in(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
62 (*) : 1-1---------1--
62     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
63     : 11-------1-----
63     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
64     : -11----------1-
64     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
65     : 11-----1-------
65     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
66     : -11--------1---
66     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
67     : 1-1-----1------
67     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~allowed_in(NODE0) | ~sent(NODE1,NODE0) | ~allowed_in(NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : -11-----0------
74     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
75     : -11----0-------
75     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
76     : 1-1--------0---
76     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
77     : 1-1------0-----
77     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
78     : 11-----------0-
78     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
79     : 11----------0--
79     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | ~allowed_in(NODE1) | sent(NODE2,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 9




=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -110-----------
80     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
81     : 1-1-0----------
81     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
82     : 11---0---------
82     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
86 (*) : -1-0---------0-
86     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
87     : --10-------0---
87     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
88     : 1---0-------0--
88     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
89     : --1-0---0------
89     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
90     : 1----0---0-----
90     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
91     : -1---0-0-------
91     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE0) | internal(NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 9




=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -1-0-0---------
92     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
93     : --100----------
93     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
94     : 1---00---------
94     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : -1------1--1-0-
96     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
97     : --1----1---0-1-
97     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
98     : 1-------1--10--
98     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
99     : --1-----01--1--
99     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
100     : 1------1-0---1-
100     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
101     : -1-----0-1--1--
101     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
168 (*) : -1------1---01-
168     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
169     : --1----1-0-1---
169     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
170     : 1----------110-
170     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
171     : --1----011-----
171     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
172     : 1--------1-0-1-
172     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
173     : -1-----10---1--
173     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
222 (*) : -1------1--10--
222     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
223     : --1----1-0---1-
223     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
224     : 1-------1--1-0-
224     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
225     : --1----0-1--1--
225     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
226     : 1------1---0-1-
226     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
227     : -1------01--1--
227     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
342 (*) : 1-------1---01-
342     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
343     : 1------1-0-1---
343     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
344     : -1---------110-
344     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
345     : -1-----011-----
345     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
346     : --1------1-0-1-
346     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
347     : --1----10---1--
347     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE3) | sent(NODE3,NODE5) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE2 | NODE0 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE5 | NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE2 = NODE4 | NODE0 = NODE4 | NODE0 = NODE2))
qcost : 34




=== Prime Orbit 17 =====================
size : 18
num_suborbits: 3
102 (*) : -10-----1----0-
102     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
103     : -01----1---0---
103     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
104     : 1-0--------10--
104     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
105     : 0-1-----01-----
105     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
106     : 10-------0---1-
106     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
107     : 01-----0----1--
107     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
156 (*) : -10-----1---0--
156     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
157     : -01----1-0-----
157     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
158     : 1-0--------1-0-
158     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
159     : 0-1----0-1-----
159     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
160     : 10---------0-1-
160     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
161     : 01------0---1--
161     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
186 (*) : 01-----01------
186     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
187     : 0-1----10------
187     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
188     : 10-------0-1---
188     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
189     : -01------1-0---
189     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
190     : 1-0---------01-
190     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
191     : -10---------10-
191     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE0,NODE3,NODE1,NODE4,NODE2. ~allowed_in(NODE0) | sent(NODE3,NODE4) | allowed_in(NODE3) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))
qcost : 24




=== Prime Orbit 18 =====================
size : 12
num_suborbits: 2
108 (*) : --0-----1--1-0-
108     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
109     : -0-----1---0-1-
109     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
110     : --0-----1--10--
110     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
111     : 0-------01--1--
111     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
112     : -0-----1-0---1-
112     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
113     : 0------0-1--1--
113     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
150 (*) : --0-----1---01-
150     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
151     : -0-----1-0-1---
151     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
152     : --0--------110-
152     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
153     : 0------011-----
153     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
154     : -0-------1-0-1-
154     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
155     : 0------10---1--
155     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
num_forall :   5
num_exists :   0
num_literals : 14
quantified form : forall NODE0,NODE3,NODE1,NODE4,NODE2. ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | sent(NODE2,NODE4) | allowed_in(NODE2) | ((NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))
qcost : 19




=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
114 (*) : ---0----1--1-0-
114     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
115     : ---0---1---0-1-
115     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
116     : ----0---1--10--
116     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
117     : ----0---01--1--
117     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
118     : -----0-1-0---1-
118     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
119     : -----0-0-1--1--
119     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
132 (*) : ---0----1---01-
132     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
133     : ---0---1-0-1---
133     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
134     : ----0------110-
134     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
135     : ----0--011-----
135     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
136     : -----0---1-0-1-
136     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
137     : -----0-10---1--
137     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
204 (*) : ---0----1--10--
204     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
205     : ---0---1-0---1-
205     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
206     : ----0---1--1-0-
206     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
207     : ----0--0-1--1--
207     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
208     : -----0-1---0-1-
208     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
209     : -----0--01--1--
209     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
288 (*) : ----0---1---01-
288     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
289     : -----0-1-0-1---
289     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
290     : ---0-------110-
290     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
291     : -----0-011-----
291     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
292     : ---0-----1-0-1-
292     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
293     : ----0--10---1--
293     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. internal(NODE4) | sent(NODE2,NODE5) | ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE5 | NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))
qcost : 34




=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
120 (*) : -1-0----1---0--
120     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
121     : --10---1-0-----
121     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
122     : 1---0------1-0-
122     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
123     : --1-0--0-1-----
123     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
124     : 1----0-----0-1-
124     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
125     : -1---0--0---1--
125     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE1) | internal(NODE1) | ~sent(NODE1,NODE2) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
126 (*) : ---0----10--0--
126     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
127     : ---0---1-0--0--
127     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
128     : ----0--0---1-0-
128     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
129     : ----0--0-1---0-
129     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
130     : -----0--0--0-1-
130     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
131     : -----0--0--01--
131     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. ~sent(NODE0,NODE1) | internal(NODE0) | sent(NODE2,NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
138 (*) : -0-0----1----1-
138     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
139     : --00---1---1---
139     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
140     : 0---0------11--
140     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
141     : --0-0---11-----
141     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
142     : 0----0---1---1-
142     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
143     : -0---0-1----1--
143     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
210 (*) : -0-0----1--1---
210     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
211     : --00---1-----1-
211     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
212     : 0---0---1--1---
212     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
213     : --0-0----1--1--
213     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
214     : 0----0-1-----1-
214     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
215     : -0---0---1--1--
215     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
264 (*) : 0---0---1----1-
264     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
265     : 0----0-1---1---
265     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
266     : -0-0-------11--
266     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
267     : -0---0--11-----
267     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
268     : --00-----1---1-
268     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
269     : --0-0--1----1--
269     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
276 (*) : --0-0--11------
276     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
277     : -0---0-11------
277     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
278     : --00-----1-1---
278     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
279     : 0----0---1-1---
279     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
280     : -0-0--------11-
280     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
281     : 0---0-------11-
281     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. ~sent(NODE1,NODE3) | internal(NODE5) | ~sent(NODE0,NODE2) | allowed_in(NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE2 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3))
qcost : 34




=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
144 (*) : --0-----10--0--
144     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
145     : -0-----1-0--0--
145     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
146     : --0----0---1-0-
146     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
147     : 0------0-1---0-
147     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
148     : -0------0--0-1-
148     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
149     : 0-------0--01--
149     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. ~sent(NODE0,NODE1) | allowed_in(NODE1) | sent(NODE2,NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
162 (*) : -1-----01---0--
162     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
163     : --1----100-----
163     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
164     : 1--------0-1-0-
164     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
165     : --1----0-1-0---
165     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
166     : 1----------001-
166     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
167     : -1------0---10-
167     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE1,NODE0) | sent(NODE2,NODE1) | ~sent(NODE1,NODE2) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 25 =====================
size : 18
num_suborbits: 3
174 (*) : -1-1---01------
174     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
175     : --11---10------
175     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
176     : 1---1----0-1---
176     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
177     : --1-1----1-0---
177     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
178     : 1----1------01-
178     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
179     : -1---1------10-
179     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
258 (*) : -1---1--1----0-
258     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
259     : --1-1--1---0---
259     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
260     : 1----1-----10--
260     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
261     : --11----01-----
261     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
262     : 1---1----0---1-
262     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
263     : -1-1---0----1--
263     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
312 (*) : -1---1--1---0--
312     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
313     : --1-1--1-0-----
313     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
314     : 1----1-----1-0-
314     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
315     : --11---0-1-----
315     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
316     : 1---1------0-1-
316     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
317     : -1-1----0---1--
317     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE0,NODE3,NODE1,NODE4,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE3) | ~internal(NODE1) | sent(NODE1,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))
qcost : 24




=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
180 (*) : -1-1----1----1-
180     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
181     : --11---1---1---
181     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
182     : 1---1------11--
182     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
183     : --1-1---11-----
183     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
184     : 1----1---1---1-
184     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
185     : -1---1-1----1--
185     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
228 (*) : -1-1----1--1---
228     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
229     : --11---1-----1-
229     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
230     : 1---1---1--1---
230     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
231     : --1-1----1--1--
231     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
232     : 1----1-1-----1-
232     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
233     : -1---1---1--1--
233     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
252 (*) : -1---1-11------
252     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
253     : --1-1--11------
253     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
254     : 1----1---1-1---
254     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
255     : --11-----1-1---
255     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
256     : 1---1-------11-
256     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
257     : -1-1--------11-
257     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
336 (*) : 1---1---1----1-
336     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
337     : 1----1-1---1---
337     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
338     : -1-1-------11--
338     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
339     : -1---1--11-----
339     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
340     : --11-----1---1-
340     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
341     : --1-1--1----1--
341     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. ~allowed_in(NODE0) | ~sent(NODE3,NODE5) | ~internal(NODE1) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE4 | NODE1 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))
qcost : 34




=== Prime Orbit 27 =====================
size : 24
num_suborbits: 4
192 (*) : 01------1----1-
192     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
193     : 0-1----1---1---
193     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
194     : 10---------11--
194     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
195     : -01-----11-----
195     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
196     : 1-0------1---1-
196     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
197     : -10----1----1--
197     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
198 (*) : -10----11------
198     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
199     : -01----11------
199     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
200     : 1-0------1-1---
200     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
201     : 0-1------1-1---
201     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
202     : 10----------11-
202     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
203     : 01----------11-
203     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
216 (*) : 01------1--1---
216     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
217     : 0-1----1-----1-
217     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
218     : 10------1--1---
218     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
219     : -01------1--1--
219     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
220     : 1-0----1-----1-
220     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
221     : -10------1--1--
221     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
330 (*) : 10------1----1-
330     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
331     : 1-0----1---1---
331     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
332     : 01---------11--
332     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
333     : -10-----11-----
333     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
334     : 0-1------1---1-
334     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
335     : -01----1----1--
335     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE3) | ~sent(NODE2,NODE4) | allowed_in(NODE5) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE4 | NODE1 = NODE4) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE2 = NODE4 | NODE0 = NODE4 | NODE0 = NODE2))
qcost : 34




=== Prime Orbit 28 =====================
size : 12
num_suborbits: 2
234 (*) : -----1--1--1-0-
234     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
235     : ----1--1---0-1-
235     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
236     : -----1--1--10--
236     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
237     : ---1----01--1--
237     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
238     : ----1--1-0---1-
238     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
239     : ---1---0-1--1--
239     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
318 (*) : -----1--1---01-
318     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
319     : ----1--1-0-1---
319     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
320     : -----1-----110-
320     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
321     : ---1---011-----
321     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
322     : ----1----1-0-1-
322     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
323     : ---1---10---1--
323     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   5
num_exists :   0
num_literals : 14
quantified form : forall NODE0,NODE3,NODE1,NODE4,NODE2. ~sent(NODE1,NODE0) | ~sent(NODE2,NODE3) | sent(NODE0,NODE4) | ~internal(NODE0) | ((NODE0 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))
qcost : 19




=== Prime Orbit 29 =====================
size : 24
num_suborbits: 4
240 (*) : ---10---1--1---
240     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
241     : ---1-0-1-----1-
241     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
242     : ---01---1--1---
242     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
243     : ----10---1--1--
243     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
244     : ---0-1-1-----1-
244     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
245     : ----01---1--1--
245     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
270 (*) : ----01-11------
270     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
271     : ----10-11------
271     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
272     : ---0-1---1-1---
272     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
273     : ---1-0---1-1---
273     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
274     : ---01-------11-
274     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
275     : ---10-------11-
275     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
282 (*) : ---10---1----1-
282     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
283     : ---1-0-1---1---
283     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
284     : ---01------11--
284     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
285     : ----10--11-----
285     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
286     : ---0-1---1---1-
286     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
287     : ----01-1----1--
287     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
324 (*) : ---01---1----1-
324     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
325     : ---0-1-1---1---
325     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
326     : ---10------11--
326     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
327     : ----01--11-----
327     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
328     : ---1-0---1---1-
328     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
329     : ----10-1----1--
329     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE5,NODE0,NODE3,NODE1,NODE4,NODE2. ~sent(NODE1,NODE3) | internal(NODE5) | ~internal(NODE0) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE2 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE2 = NODE4 | NODE0 = NODE4 | NODE0 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))
qcost : 34




=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
246 (*) : ---00---1---0--
246     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
247     : ---0-0-1-0-----
247     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
248     : ---00------1-0-
248     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
249     : ----00-0-1-----
249     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
250     : ---0-0-----0-1-
250     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
251     : ----00--0---1--
251     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE0,NODE1) | internal(NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
294 (*) : --0-0---1---0--
294     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
295     : -0---0-1-0-----
295     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
296     : --00-------1-0-
296     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
297     : 0----0-0-1-----
297     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
298     : -0-0-------0-1-
298     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
299     : 0---0---0---1--
299     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | sent(NODE1,NODE0) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
300 (*) : ----01--1---0--
300     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
301     : ----10-1-0-----
301     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
302     : ---0-1-----1-0-
302     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
303     : ---1-0-0-1-----
303     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
304     : ---01------0-1-
304     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
305     : ---10---0---1--
305     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
306 (*) : -----1--10--0--
306     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
307     : ----1--1-0--0--
307     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
308     : -----1-0---1-0-
308     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
309     : ---1---0-1---0-
309     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
310     : ----1---0--0-1-
310     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
311     : ---1----0--01--
311     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE2,NODE1) | sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10



[QRM NOTE]: Time elapsed since start: 1.844 seconds

[QRM NOTE]: Time elapsed since last: 1.733 seconds

[QRM NOTE]: Peak memory: 2176526 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=3]

=========================================================================


New level: 1
 pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 576), (3, 768), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 576), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 256), (26, 424), (27, 320), (28, 384), (29, 560), (30, 256), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 576), (3, 768), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 576), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 256), (26, 424), (27, 320), (28, 384), (29, 560), (30, 256), (31, 256), (32, 256), (33, 128)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12]


Solution : [0, 12] has cost 7.


Decide in level 1 among pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, 1024), (2, 576), (3, 768), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 576), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 256), (26, 424), (27, 320), (28, 384), (29, 560), (30, 256), (31, 256), (32, 256), (33, 128)]

Decide 1 with phase True at level 1

After decision at level 1
 pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1]


New level: 2
 pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1]


Before reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 576), (3, 768), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 576), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 256), (26, 424), (27, 320), (28, 384), (29, 560), (30, 256), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, 320), (4, 320), (5, 512), (6, 640), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, 544), (20, 128), (21, 128), (22, 520), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1]


Solution : [0, 12, 1] has cost 10.


Decide in level 2 among pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 576), (3, 320), (4, 320), (5, 512), (6, 640), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, 544), (20, 128), (21, 128), (22, 520), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

Decide 6 with phase True at level 2

After decision at level 2
 pending : [2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6]


New level: 3
 pending : [2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, 320), (4, 320), (5, 512), (6, 640), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, 544), (20, 128), (21, 128), (22, 520), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, 0), (22, 129), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 3 : {21}

After reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, 0), (22, 129), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 3 among pending : [2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 576), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Decide 2 with phase True at level 3

After decision at level 3
 pending : [3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2]


New level: 4
 pending : [3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2]


Before reduction : 
 pending  : [3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, 128), (33, 32)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2]


Solution : [0, 12, 1, 6, 2] has cost 38.


Decide in level 4 among pending : [3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, 128), (33, 32)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [3, 4, 5, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2, 14]


New level: 5
 pending : [3, 4, 5, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2, 14]


Before reduction : 
 pending  : [3, 4, 5, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, 0), (12, -1), (13, 16), (14, -1), (15, 0), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, 128), (32, 128), (33, 32)]

Covered at level 5 : {11, 15}

After reduction : 
 pending  : [3, 4, 5, 7, 8, 9, 10, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2, 14]


Before reduction : 
 pending  : [3, 4, 5, 7, 8, 9, 10, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, 0), (12, -1), (13, 16), (14, -1), (15, 0), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, 128), (32, 128), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 4, 5, 7, 8, 9, 10, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2, 14]


Solution : [0, 12, 1, 6, 2, 14] has cost 43.


Decide in level 5 among pending : [3, 4, 5, 7, 8, 9, 10, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, 128), (32, 128), (33, 32)]

Decide 3 with phase True at level 5

After decision at level 5
 pending : [4, 5, 7, 8, 9, 10, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2, 14, 3]


New level: 6
 pending : [4, 5, 7, 8, 9, 10, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2, 14, 3]


Before reduction : 
 pending  : [4, 5, 7, 8, 9, 10, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 12, 1, 6, 2, 14, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 0), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, 0), (19, 2), (20, 1), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 1), (31, 1), (32, 1), (33, 0)]

Covered at level 6 : {33, 7, 8, 18, 23, 28}

After reduction : 
 pending  : [4, 5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]


Before reduction : 
 pending  : [4, 5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 0), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, 0), (19, 2), (20, 1), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 1), (31, 1), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]


Solution : [0, 12, 1, 6, 2, 14, 3] has cost 56.


Decide in level 6 among pending : [4, 5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 4]


New level: 7
 pending : [5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 4]


Before reduction : 
 pending  : [5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 7 : {32, 5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 4]


Solution : [0, 12, 1, 6, 2, 14, 3, 4] has cost 69.


Before backtrack at level 7
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 3, 4]

After backtrack at level 7
 pending : [5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]


Before reduction : 
 pending  : [5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]


Solution : [0, 12, 1, 6, 2, 14, 3] has cost 56.


Decide in level 7 among pending : [5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 5]


New level: 8
 pending : [9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 5]


Before reduction : 
 pending  : [9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 8 : {32, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 5]


Solution : [0, 12, 1, 6, 2, 14, 3, 5] has cost 62.


Before backtrack at level 8
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 3, 5]

After backtrack at level 8
 pending : [9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]


Before reduction : 
 pending  : [9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]


Solution : [0, 12, 1, 6, 2, 14, 3] has cost 56.


Decide in level 8 among pending : [9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 9 with phase True at level 8

After decision at level 8
 pending : [10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 9]


New level: 9
 pending : [10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 9]


Before reduction : 
 pending  : [10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 9 : {32, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 9]


Solution : [0, 12, 1, 6, 2, 14, 3, 9] has cost 62.


Before backtrack at level 9
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 3, 9]

After backtrack at level 9
 pending : [10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 9]


Invert decision for 9 at level 8


New level: 9
 pending : [10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]


Before reduction : 
 pending  : [10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]


Solution : [0, 12, 1, 6, 2, 14, 3] has cost 56.


Decide in level 9 among pending : [10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 10 with phase True at level 9

After decision at level 9
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 10]


New level: 10
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 10]


Before reduction : 
 pending  : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 10 : {32, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 10]


Solution : [0, 12, 1, 6, 2, 14, 3, 10] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 3, 10]

After backtrack at level 10
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3, 10]


Invert decision for 10 at level 9


New level: 10
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]


Before reduction : 
 pending  : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]

Essensial at level 10 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 10 : {32, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 3, 13]


Solution : [0, 12, 1, 6, 2, 14, 3, 13] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 3, 13]

After backtrack at level 10
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]


Before backtrack at level 9
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32]
 solution : [0, 12, 1, 6, 2, 14, 3]

After backtrack at level 9
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10]
 solution : [0, 12, 1, 6, 2, 14, 3]


Before backtrack at level 8
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10]
 solution : [0, 12, 1, 6, 2, 14, 3]

After backtrack at level 8
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10, 9]
 solution : [0, 12, 1, 6, 2, 14, 3]


Before backtrack at level 7
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10, 9]
 solution : [0, 12, 1, 6, 2, 14, 3]

After backtrack at level 7
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10, 9, 5]
 solution : [0, 12, 1, 6, 2, 14, 3]


Before backtrack at level 6
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10, 9, 5]
 solution : [0, 12, 1, 6, 2, 14, 3]

After backtrack at level 6
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 3]


Invert decision for 3 at level 5


New level: 6
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14]


Before reduction : 
 pending  : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, 128), (32, 128), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14]


Solution : [0, 12, 1, 6, 2, 14] has cost 43.


Decide in level 6 among pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, 128), (32, 128), (33, 32)]

Decide 31 with phase True at level 6

After decision at level 6
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 32, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31]


New level: 7
 pending : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 32, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31]


Before reduction : 
 pending  : [13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 32, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 10), (18, 3), (19, 2), (20, 0), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 0), (31, -1), (32, 0), (33, 8)]

Covered at level 7 : {32, 20, 30}

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 10), (18, 3), (19, 2), (20, 0), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 0), (31, -1), (32, 0), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 10), (18, 3), (19, 2), (20, -1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, -1), (31, -1), (32, -1), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31]


Solution : [0, 12, 1, 6, 2, 14, 31] has cost 53.


Decide in level 7 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 7, 8, 18, 23, 28, 33, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 10), (18, 3), (19, 2), (20, -1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, -1), (31, -1), (32, -1), (33, 8)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


New level: 8
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 10), (18, 3), (19, 2), (20, -1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, -1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 0), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, 0), (19, 2), (20, -1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 8 : {33, 8, 18, 23, 28}

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 0), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, 0), (19, 2), (20, -1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Solution : [0, 12, 1, 6, 2, 14, 31, 7] has cost 59.


Decide in level 8 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 8

After decision at level 8
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 9]


New level: 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 9]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {4, 5, 10, 13, 16, 17, 19, 22, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 9]


Solution : [0, 12, 1, 6, 2, 14, 31, 7, 9] has cost 65.


Before backtrack at level 9
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 9]

After backtrack at level 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 9]


Invert decision for 9 at level 8


New level: 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Solution : [0, 12, 1, 6, 2, 14, 31, 7] has cost 59.


Decide in level 9 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 5]


New level: 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 5]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {4, 10, 13, 16, 17, 19, 22, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 5]


Solution : [0, 12, 1, 6, 2, 14, 31, 7, 5] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 5]

After backtrack at level 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Solution : [0, 12, 1, 6, 2, 14, 31, 7] has cost 59.


Decide in level 10 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 4]


New level: 11
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 4]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {10, 13, 16, 17, 19, 22, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 4]


Solution : [0, 12, 1, 6, 2, 14, 31, 7, 4] has cost 72.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 4]

After backtrack at level 11
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Solution : [0, 12, 1, 6, 2, 14, 31, 7] has cost 59.


Decide in level 11 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 13]


New level: 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 13]


Before reduction : 
 pending  : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {10, 16, 17, 19, 22, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 13]


Solution : [0, 12, 1, 6, 2, 14, 31, 7, 13] has cost 68.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 13]

After backtrack at level 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 13]


Invert decision for 13 at level 11


New level: 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Before reduction : 
 pending  : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {16, 17, 19, 22, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 10]


Solution : [0, 12, 1, 6, 2, 14, 31, 7, 10] has cost 68.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 31, 7, 10]

After backtrack at level 12
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Before backtrack at level 11
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]

After backtrack at level 11
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Before backtrack at level 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]

After backtrack at level 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Before backtrack at level 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]

After backtrack at level 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4, 5]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Before backtrack at level 8
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4, 5]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]

After backtrack at level 8
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4, 5, 8, 18, 23, 28, 33, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4, 5, 8, 18, 23, 28, 33, 9]
 solution : [0, 12, 1, 6, 2, 14, 31]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4, 5, 8, 18, 23, 28, 33, 9]
 solution : [0, 12, 1, 6, 2, 14, 31]

Essensial at level 8 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, 0), (19, 2), (20, -1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 8 : {33, 18, 28, 23}

After reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, 0), (19, 2), (20, -1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Solution : [0, 12, 1, 6, 2, 14, 31, 8] has cost 59.


Decide in level 8 among pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 4, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 8

After decision at level 8
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 4]


New level: 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 4]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {5, 9, 10, 13, 16, 17, 19, 22, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 4]


Solution : [0, 12, 1, 6, 2, 14, 31, 8, 4] has cost 72.


Before backtrack at level 9
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 4]

After backtrack at level 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 4]


Invert decision for 4 at level 8


New level: 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Solution : [0, 12, 1, 6, 2, 14, 31, 8] has cost 59.


Decide in level 9 among pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 5]


New level: 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 5]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {9, 10, 13, 16, 17, 19, 22, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 5]


Solution : [0, 12, 1, 6, 2, 14, 31, 8, 5] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 5]

After backtrack at level 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Solution : [0, 12, 1, 6, 2, 14, 31, 8] has cost 59.


Decide in level 10 among pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 9]


New level: 11
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 9]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {10, 13, 16, 17, 19, 22, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 9]


Solution : [0, 12, 1, 6, 2, 14, 31, 8, 9] has cost 65.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 9]

After backtrack at level 11
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Solution : [0, 12, 1, 6, 2, 14, 31, 8] has cost 59.


Decide in level 11 among pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 10]


New level: 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 10]


Before reduction : 
 pending  : [16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {13, 16, 17, 19, 22, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 10]


Solution : [0, 12, 1, 6, 2, 14, 31, 8, 10] has cost 68.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 10]

After backtrack at level 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Before reduction : 
 pending  : [16, 17, 19, 22, 24, 25, 26, 27, 29, 13]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]

Essensial at level 12 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {16, 17, 19, 22, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 13]


Solution : [0, 12, 1, 6, 2, 14, 31, 8, 13] has cost 68.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 31, 8, 13]

After backtrack at level 12
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Before backtrack at level 11
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]

After backtrack at level 11
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Before backtrack at level 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]

After backtrack at level 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Before backtrack at level 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]

After backtrack at level 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]


Before backtrack at level 8
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5]
 solution : [0, 12, 1, 6, 2, 14, 31, 8]

After backtrack at level 8
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31]


Before backtrack at level 7
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 8, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14, 31]

After backtrack at level 7
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 8, 18, 23, 28, 33, 4, 20, 30, 32, 7]
 solution : [0, 12, 1, 6, 2, 14, 31]


Invert decision for 31 at level 6


New level: 7
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 8, 18, 23, 28, 33, 4, 20, 30, 32, 7]
 solution : [0, 12, 1, 6, 2, 14]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 8, 18, 23, 28, 33, 4, 20, 30, 32, 7]
 solution : [0, 12, 1, 6, 2, 14]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, -1), (32, 128), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 8, 18, 23, 28, 33, 4, 20, 30, 32, 7]
 solution : [0, 12, 1, 6, 2, 14]


Solution : [0, 12, 1, 6, 2, 14] has cost 43.


Decide in level 7 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 8, 18, 23, 28, 33, 4, 20, 30, 32, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, -1), (32, 128), (33, 32)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 18, 23, 28, 33, 4, 20, 30, 32, 7]
 solution : [0, 12, 1, 6, 2, 14, 8]


New level: 8
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 18, 23, 28, 33, 4, 20, 30, 32, 7]
 solution : [0, 12, 1, 6, 2, 14, 8]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 18, 23, 28, 33, 4, 20, 30, 32, 7]
 solution : [0, 12, 1, 6, 2, 14, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 8), (17, 20), (18, 12), (19, 8), (20, 1), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 1), (31, -1), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, 0), (19, 2), (20, 1), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 1), (31, -1), (32, 1), (33, 0)]

Covered at level 8 : {33, 7, 18, 23, 28}

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, 0), (19, 2), (20, 1), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 1), (31, -1), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]


Solution : [0, 12, 1, 6, 2, 14, 8] has cost 49.


Decide in level 8 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 9, 5, 4, 20, 30, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Decide 9 with phase True at level 8

After decision at level 8
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 9]


New level: 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 9]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 9 : {32, 4, 5, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 9]


Solution : [0, 12, 1, 6, 2, 14, 8, 9] has cost 55.


Before backtrack at level 9
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 8, 9]

After backtrack at level 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 9]


Invert decision for 9 at level 8


New level: 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]


Solution : [0, 12, 1, 6, 2, 14, 8] has cost 49.


Decide in level 9 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 5, 4, 20, 30, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 5]


New level: 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 5]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 10 : {32, 4, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 5]


Solution : [0, 12, 1, 6, 2, 14, 8, 5] has cost 55.


Before backtrack at level 10
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 8, 5]

After backtrack at level 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]


Solution : [0, 12, 1, 6, 2, 14, 8] has cost 49.


Decide in level 10 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 4, 20, 30, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 4]


New level: 11
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 4]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 4]


Solution : [0, 12, 1, 6, 2, 14, 8, 4] has cost 62.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 8, 4]

After backtrack at level 11
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]


Solution : [0, 12, 1, 6, 2, 14, 8] has cost 49.


Decide in level 11 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Decide 13 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 13]


New level: 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 13]


Before reduction : 
 pending  : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 10, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 13]


Solution : [0, 12, 1, 6, 2, 14, 8, 13] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 8, 13]

After backtrack at level 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8, 13]


Invert decision for 13 at level 11


New level: 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]


Before reduction : 
 pending  : [16, 17, 19, 22, 24, 25, 26, 27, 29, 10, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 8, 10]


Solution : [0, 12, 1, 6, 2, 14, 8, 10] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 8, 10]

After backtrack at level 12
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]


Before backtrack at level 11
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 8]

After backtrack at level 11
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 8]


Before backtrack at level 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 8]

After backtrack at level 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4]
 solution : [0, 12, 1, 6, 2, 14, 8]


Before backtrack at level 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4]
 solution : [0, 12, 1, 6, 2, 14, 8]

After backtrack at level 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4, 5]
 solution : [0, 12, 1, 6, 2, 14, 8]


Before backtrack at level 8
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4, 5]
 solution : [0, 12, 1, 6, 2, 14, 8]

After backtrack at level 8
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4, 5, 18, 23, 28, 33, 7, 9]
 solution : [0, 12, 1, 6, 2, 14, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4, 5, 18, 23, 28, 33, 7, 9]
 solution : [0, 12, 1, 6, 2, 14]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4, 5, 18, 23, 28, 33, 7, 9]
 solution : [0, 12, 1, 6, 2, 14]

Essensial at level 8 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, 0), (19, 2), (20, 1), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 1), (31, -1), (32, 1), (33, 0)]

Covered at level 8 : {33, 18, 28, 23}

After reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, 0), (19, 2), (20, 1), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 1), (31, -1), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]


Solution : [0, 12, 1, 6, 2, 14, 7] has cost 49.


Decide in level 8 among pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 4, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Decide 4 with phase True at level 8

After decision at level 8
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 7, 4]


New level: 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 7, 4]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 7, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 9 : {32, 5, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 4]


Solution : [0, 12, 1, 6, 2, 14, 7, 4] has cost 62.


Before backtrack at level 9
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 7, 4]

After backtrack at level 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 7, 4]


Invert decision for 4 at level 8


New level: 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 5, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]


Solution : [0, 12, 1, 6, 2, 14, 7] has cost 49.


Decide in level 9 among pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 7, 5]


New level: 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 7, 5]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 7, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 10 : {32, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 5]


Solution : [0, 12, 1, 6, 2, 14, 7, 5] has cost 55.


Before backtrack at level 10
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 7, 5]

After backtrack at level 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 7, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]


Solution : [0, 12, 1, 6, 2, 14, 7] has cost 49.


Decide in level 10 among pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7, 9]


New level: 11
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7, 9]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 9]


Solution : [0, 12, 1, 6, 2, 14, 7, 9] has cost 55.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 7, 9]

After backtrack at level 11
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7]


Solution : [0, 12, 1, 6, 2, 14, 7] has cost 49.


Decide in level 11 among pending : [10, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7, 10]


New level: 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7, 10]


Before reduction : 
 pending  : [16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 10]


Solution : [0, 12, 1, 6, 2, 14, 7, 10] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 7, 10]

After backtrack at level 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7]


Before reduction : 
 pending  : [16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 13]
 solution : [0, 12, 1, 6, 2, 14, 7]

Essensial at level 12 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 14, 7, 13]


Solution : [0, 12, 1, 6, 2, 14, 7, 13] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 14, 7, 13]

After backtrack at level 12
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 7]


Before backtrack at level 11
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32]
 solution : [0, 12, 1, 6, 2, 14, 7]

After backtrack at level 11
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10]
 solution : [0, 12, 1, 6, 2, 14, 7]


Before backtrack at level 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10]
 solution : [0, 12, 1, 6, 2, 14, 7]

After backtrack at level 10
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]


Before backtrack at level 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9]
 solution : [0, 12, 1, 6, 2, 14, 7]

After backtrack at level 9
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5]
 solution : [0, 12, 1, 6, 2, 14, 7]


Before backtrack at level 8
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5]
 solution : [0, 12, 1, 6, 2, 14, 7]

After backtrack at level 8
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14]


Before backtrack at level 7
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4]
 solution : [0, 12, 1, 6, 2, 14]

After backtrack at level 7
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8]
 solution : [0, 12, 1, 6, 2, 14]


Before backtrack at level 6
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8]
 solution : [0, 12, 1, 6, 2, 14]

After backtrack at level 6
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 31]
 solution : [0, 12, 1, 6, 2, 14]


Before backtrack at level 5
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 31]
 solution : [0, 12, 1, 6, 2, 14]

After backtrack at level 5
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 31, 11, 15, 3]
 solution : [0, 12, 1, 6, 2, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 31, 11, 15, 3]
 solution : [0, 12, 1, 6, 2]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 31, 11, 15, 3]
 solution : [0, 12, 1, 6, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, 128), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 31, 11, 15, 3]
 solution : [0, 12, 1, 6, 2]


Solution : [0, 12, 1, 6, 2] has cost 38.


Decide in level 5 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 32, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 31, 11, 15, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, 128), (33, 32)]

Decide 32 with phase True at level 5

After decision at level 5
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 31, 11, 15, 3]
 solution : [0, 12, 1, 6, 2, 32]


New level: 6
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 31, 11, 15, 3]
 solution : [0, 12, 1, 6, 2, 32]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 31, 11, 15, 3]
 solution : [0, 12, 1, 6, 2, 32]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, 0), (32, -1), (33, 8)]

Covered at level 6 : {31}

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 11, 15, 3]
 solution : [0, 12, 1, 6, 2, 32]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 11, 15, 3]
 solution : [0, 12, 1, 6, 2, 32]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, 0), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 11, 15, 3]
 solution : [0, 12, 1, 6, 2, 32]


Solution : [0, 12, 1, 6, 2, 32] has cost 48.


Decide in level 6 among pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 10, 9, 5, 7, 18, 23, 28, 33, 4, 8, 11, 15, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Decide 9 with phase True at level 6

After decision at level 6
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 10, 5, 7, 18, 23, 28, 33, 4, 8, 11, 15, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]


New level: 7
 pending : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 10, 5, 7, 18, 23, 28, 33, 4, 8, 11, 15, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]


Before reduction : 
 pending  : [13, 16, 17, 19, 22, 24, 25, 26, 27, 29, 20, 30, 10, 5, 7, 18, 23, 28, 33, 4, 8, 11, 15, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 0), (5, 0), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 2), (18, 3), (19, 0), (20, 0), (21, -1), (22, 2), (23, 8), (24, 0), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, 0), (31, -1), (32, -1), (33, 8)]

Covered at level 7 : {4, 5, 10, 11, 13, 15, 16, 19, 20, 24, 30}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 7, 18, 23, 28, 33, 8, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 7, 18, 23, 28, 33, 8, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 0), (5, 0), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 2), (18, 3), (19, 0), (20, 0), (21, -1), (22, 2), (23, 8), (24, 0), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, 0), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 7, 18, 23, 28, 33, 8, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]


Solution : [0, 12, 1, 6, 2, 32, 9] has cost 54.


Decide in level 7 among pending : [17, 22, 25, 26, 27, 29, 7, 18, 23, 28, 33, 8, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 3]
 solution : [0, 12, 1, 6, 2, 32, 9, 7]


New level: 8
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 3]
 solution : [0, 12, 1, 6, 2, 32, 9, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 3]
 solution : [0, 12, 1, 6, 2, 32, 9, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 8 : {33, 3, 8, 17, 18, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 9, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 9, 7]


Solution : [0, 12, 1, 6, 2, 32, 9, 7] has cost 60.


Before backtrack at level 8
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 9, 7]

After backtrack at level 8
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 3]
 solution : [0, 12, 1, 6, 2, 32, 9, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]


Solution : [0, 12, 1, 6, 2, 32, 9] has cost 54.


Decide in level 8 among pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 3]
 solution : [0, 12, 1, 6, 2, 32, 9, 8]


New level: 9
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 3]
 solution : [0, 12, 1, 6, 2, 32, 9, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 3]
 solution : [0, 12, 1, 6, 2, 32, 9, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 9 : {33, 3, 17, 18, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 9, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 9, 8]


Solution : [0, 12, 1, 6, 2, 32, 9, 8] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 9, 8]

After backtrack at level 9
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 3]
 solution : [0, 12, 1, 6, 2, 32, 9, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 3]
 solution : [0, 12, 1, 6, 2, 32, 9]

Essensial at level 9 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 9 : {33, 17, 18, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 9, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 9, 3]


Solution : [0, 12, 1, 6, 2, 32, 9, 3] has cost 67.


Before backtrack at level 9
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 9, 3]

After backtrack at level 9
 pending : [3, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33]
 solution : [0, 12, 1, 6, 2, 32, 9]


Before backtrack at level 8
 pending : [3, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33]
 solution : [0, 12, 1, 6, 2, 32, 9]

After backtrack at level 8
 pending : [3, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 32, 9]


Before backtrack at level 7
 pending : [3, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 32, 9]

After backtrack at level 7
 pending : [3, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 7]
 solution : [0, 12, 1, 6, 2, 32, 9]


Invert decision for 9 at level 6


New level: 7
 pending : [3, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 7]
 solution : [0, 12, 1, 6, 2, 32]


Before reduction : 
 pending  : [3, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 7]
 solution : [0, 12, 1, 6, 2, 32]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [3, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 7]
 solution : [0, 12, 1, 6, 2, 32]


Solution : [0, 12, 1, 6, 2, 32] has cost 48.


Decide in level 7 among pending : [3, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 7]
 solution : [0, 12, 1, 6, 2, 32, 3]


New level: 8
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 7]
 solution : [0, 12, 1, 6, 2, 32, 3]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 7]
 solution : [0, 12, 1, 6, 2, 32, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 0), (8, 0), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, 0), (19, 2), (20, 1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, 1), (31, -1), (32, -1), (33, 0)]

Covered at level 8 : {33, 7, 8, 18, 23, 28}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 3]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 0), (8, 0), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, 0), (19, 2), (20, 1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, 1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 3]


Solution : [0, 12, 1, 6, 2, 32, 3] has cost 61.


Before backtrack at level 8
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 3]

After backtrack at level 8
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 18, 23, 28, 33, 8, 7]
 solution : [0, 12, 1, 6, 2, 32, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 18, 23, 28, 33, 8, 7]
 solution : [0, 12, 1, 6, 2, 32]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 18, 23, 28, 33, 8, 7]
 solution : [0, 12, 1, 6, 2, 32]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 18, 23, 28, 33, 8, 7]
 solution : [0, 12, 1, 6, 2, 32]


Solution : [0, 12, 1, 6, 2, 32] has cost 48.


Decide in level 8 among pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 5, 4, 11, 15, 18, 23, 28, 33, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 18, 23, 28, 33, 8, 7]
 solution : [0, 12, 1, 6, 2, 32, 5]


New level: 9
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 18, 23, 28, 33, 8, 7]
 solution : [0, 12, 1, 6, 2, 32, 5]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 18, 23, 28, 33, 8, 7]
 solution : [0, 12, 1, 6, 2, 32, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 2), (18, 3), (19, 0), (20, 0), (21, -1), (22, 2), (23, 8), (24, 0), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, 0), (31, -1), (32, -1), (33, 8)]

Covered at level 9 : {4, 10, 11, 13, 15, 16, 19, 20, 24, 30}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 7]
 solution : [0, 12, 1, 6, 2, 32, 5]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 7]
 solution : [0, 12, 1, 6, 2, 32, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 2), (18, 3), (19, 0), (20, 0), (21, -1), (22, 2), (23, 8), (24, 0), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, 0), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 7]
 solution : [0, 12, 1, 6, 2, 32, 5]


Solution : [0, 12, 1, 6, 2, 32, 5] has cost 54.


Decide in level 9 among pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 7]
 solution : [0, 12, 1, 6, 2, 32, 5, 8]


New level: 10
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 7]
 solution : [0, 12, 1, 6, 2, 32, 5, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 7]
 solution : [0, 12, 1, 6, 2, 32, 5, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 10 : {33, 7, 17, 18, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 5, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 5, 8]


Solution : [0, 12, 1, 6, 2, 32, 5, 8] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 5, 8]

After backtrack at level 10
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 7]
 solution : [0, 12, 1, 6, 2, 32, 5, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 7]
 solution : [0, 12, 1, 6, 2, 32, 5]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 7]
 solution : [0, 12, 1, 6, 2, 32, 5]

Essensial at level 10 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 10 : {33, 17, 18, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 5, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 5, 7]


Solution : [0, 12, 1, 6, 2, 32, 5, 7] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 5, 7]

After backtrack at level 10
 pending : [7, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33]
 solution : [0, 12, 1, 6, 2, 32, 5]


Before backtrack at level 9
 pending : [7, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33]
 solution : [0, 12, 1, 6, 2, 32, 5]

After backtrack at level 9
 pending : [7, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 8]
 solution : [0, 12, 1, 6, 2, 32, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [7, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 8]
 solution : [0, 12, 1, 6, 2, 32]


Before reduction : 
 pending  : [7, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 8]
 solution : [0, 12, 1, 6, 2, 32]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [7, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 8]
 solution : [0, 12, 1, 6, 2, 32]


Solution : [0, 12, 1, 6, 2, 32] has cost 48.


Decide in level 9 among pending : [7, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 8]
 solution : [0, 12, 1, 6, 2, 32, 7]


New level: 10
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 8]
 solution : [0, 12, 1, 6, 2, 32, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15, 8]
 solution : [0, 12, 1, 6, 2, 32, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, 0), (19, 2), (20, 1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, 1), (31, -1), (32, -1), (33, 0)]

Covered at level 10 : {33, 8, 18, 23, 28}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, 0), (19, 2), (20, 1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, 1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]


Solution : [0, 12, 1, 6, 2, 32, 7] has cost 54.


Decide in level 10 among pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 4, 11, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 4]


New level: 11
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 4]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {10, 11, 13, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 7, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 7, 4]


Solution : [0, 12, 1, 6, 2, 32, 7, 4] has cost 67.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 7, 4]

After backtrack at level 11
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 11, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]


Solution : [0, 12, 1, 6, 2, 32, 7] has cost 54.


Decide in level 11 among pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 11, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 11]


New level: 12
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, 0), (16, 2), (17, 4), (18, -1), (19, 2), (20, 0), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {20, 30, 15}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 10]
 solution : [0, 12, 1, 6, 2, 32, 7, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 10]
 solution : [0, 12, 1, 6, 2, 32, 7, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, 0), (16, 2), (17, 4), (18, -1), (19, 2), (20, 0), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 10]
 solution : [0, 12, 1, 6, 2, 32, 7, 11]


Solution : [0, 12, 1, 6, 2, 32, 7, 11] has cost 59.


Before backtrack at level 12
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 10]
 solution : [0, 12, 1, 6, 2, 32, 7, 11]

After backtrack at level 12
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]


Solution : [0, 12, 1, 6, 2, 32, 7] has cost 54.


Decide in level 12 among pending : [17, 22, 25, 26, 27, 29, 13, 16, 19, 24, 10, 20, 30, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 12

After decision at level 12
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 13]


New level: 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 13]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {10, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 7, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 7, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 7, 13]


Solution : [0, 12, 1, 6, 2, 32, 7, 13] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 7, 13]

After backtrack at level 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7, 13]


Invert decision for 13 at level 12


New level: 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]

Essensial at level 13 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 7, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 7, 10]


Solution : [0, 12, 1, 6, 2, 32, 7, 10] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 7, 10]

After backtrack at level 13
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]


Before backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 7]

After backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 32, 7]


Before backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 32, 7]

After backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 32, 7]


Before backtrack at level 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 32, 7]

After backtrack at level 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 18, 23, 28, 33, 8, 4]
 solution : [0, 12, 1, 6, 2, 32, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 18, 23, 28, 33, 8, 4]
 solution : [0, 12, 1, 6, 2, 32]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 18, 23, 28, 33, 8, 4]
 solution : [0, 12, 1, 6, 2, 32]

Essensial at level 10 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, 0), (19, 2), (20, 1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, 1), (31, -1), (32, -1), (33, 0)]

Covered at level 10 : {33, 18, 28, 23}

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 4]
 solution : [0, 12, 1, 6, 2, 32, 8]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 4]
 solution : [0, 12, 1, 6, 2, 32, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, 0), (19, 2), (20, 1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, 1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 4]
 solution : [0, 12, 1, 6, 2, 32, 8]


Solution : [0, 12, 1, 6, 2, 32, 8] has cost 54.


Decide in level 10 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 4]
 solution : [0, 12, 1, 6, 2, 32, 8, 11]


New level: 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 4]
 solution : [0, 12, 1, 6, 2, 32, 8, 11]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 4]
 solution : [0, 12, 1, 6, 2, 32, 8, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, 0), (16, 2), (17, 4), (18, -1), (19, 2), (20, 0), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {20, 30, 15}

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 4]
 solution : [0, 12, 1, 6, 2, 32, 8, 11]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 4]
 solution : [0, 12, 1, 6, 2, 32, 8, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, 0), (16, 2), (17, 4), (18, -1), (19, 2), (20, 0), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 4]
 solution : [0, 12, 1, 6, 2, 32, 8, 11]


Solution : [0, 12, 1, 6, 2, 32, 8, 11] has cost 59.


Before backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 4]
 solution : [0, 12, 1, 6, 2, 32, 8, 11]

After backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 4, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 4, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 4, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 4, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8]


Solution : [0, 12, 1, 6, 2, 32, 8] has cost 54.


Decide in level 11 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 4, 20, 30, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 11

After decision at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8, 4]


New level: 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8, 4]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {10, 13, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 8, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 8, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 8, 4]


Solution : [0, 12, 1, 6, 2, 32, 8, 4] has cost 67.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 8, 4]

After backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8, 4]


Invert decision for 4 at level 11


New level: 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8]


Solution : [0, 12, 1, 6, 2, 32, 8] has cost 54.


Decide in level 12 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 12

After decision at level 12
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8, 10]


New level: 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8, 10]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {13, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 8, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 8, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 8, 10]


Solution : [0, 12, 1, 6, 2, 32, 8, 10] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 8, 10]

After backtrack at level 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8, 10]


Invert decision for 10 at level 12


New level: 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8]

Essensial at level 13 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 8, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 8, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 32, 8, 13]


Solution : [0, 12, 1, 6, 2, 32, 8, 13] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 2, 32, 8, 13]

After backtrack at level 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8]


Before backtrack at level 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 32, 8]

After backtrack at level 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 32, 8]


Before backtrack at level 11
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 32, 8]

After backtrack at level 11
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4]
 solution : [0, 12, 1, 6, 2, 32, 8]


Before backtrack at level 10
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4]
 solution : [0, 12, 1, 6, 2, 32, 8]

After backtrack at level 10
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11]
 solution : [0, 12, 1, 6, 2, 32]


Before backtrack at level 9
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11]
 solution : [0, 12, 1, 6, 2, 32]

After backtrack at level 9
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7]
 solution : [0, 12, 1, 6, 2, 32]


Before backtrack at level 8
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7]
 solution : [0, 12, 1, 6, 2, 32]

After backtrack at level 8
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7, 5]
 solution : [0, 12, 1, 6, 2, 32]


Before backtrack at level 7
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7, 5]
 solution : [0, 12, 1, 6, 2, 32]

After backtrack at level 7
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7, 5, 3]
 solution : [0, 12, 1, 6, 2, 32]


Before backtrack at level 6
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7, 5, 3]
 solution : [0, 12, 1, 6, 2, 32]

After backtrack at level 6
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7, 5, 3, 31, 9]
 solution : [0, 12, 1, 6, 2, 32]


Invert decision for 32 at level 5


New level: 6
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7, 5, 3, 31, 9]
 solution : [0, 12, 1, 6, 2]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7, 5, 3, 31, 9]
 solution : [0, 12, 1, 6, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, -1), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7, 5, 3, 31, 9]
 solution : [0, 12, 1, 6, 2]


Solution : [0, 12, 1, 6, 2] has cost 38.


Decide in level 6 among pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 4, 8, 18, 23, 28, 33, 11, 7, 5, 3, 31, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, -1), (33, 32)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 8, 18, 23, 28, 33, 11, 7, 5, 3, 31, 9]
 solution : [0, 12, 1, 6, 2, 4]


New level: 7
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 8, 18, 23, 28, 33, 11, 7, 5, 3, 31, 9]
 solution : [0, 12, 1, 6, 2, 4]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 8, 18, 23, 28, 33, 11, 7, 5, 3, 31, 9]
 solution : [0, 12, 1, 6, 2, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 0), (6, -1), (7, 128), (8, 128), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 2), (17, 6), (18, 12), (19, 2), (20, 0), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, 0), (31, 128), (32, -1), (33, 32)]

Covered at level 7 : {5, 9, 10, 11, 13, 15, 20, 30}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 8, 18, 23, 28, 33, 7, 3, 31]
 solution : [0, 12, 1, 6, 2, 4]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 8, 18, 23, 28, 33, 7, 3, 31]
 solution : [0, 12, 1, 6, 2, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 0), (6, -1), (7, 128), (8, 128), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 2), (17, 6), (18, 12), (19, 2), (20, 0), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, 0), (31, 128), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 12), (19, 2), (20, -1), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, -1), (31, 128), (32, -1), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 8, 18, 23, 28, 33, 7, 3, 31]
 solution : [0, 12, 1, 6, 2, 4]


Solution : [0, 12, 1, 6, 2, 4] has cost 51.


Decide in level 7 among pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 8, 18, 23, 28, 33, 7, 3, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 12), (19, 2), (20, -1), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, -1), (31, 128), (32, -1), (33, 32)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 7, 3, 31]
 solution : [0, 12, 1, 6, 2, 4, 8]


New level: 8
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 7, 3, 31]
 solution : [0, 12, 1, 6, 2, 4, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 7, 3, 31]
 solution : [0, 12, 1, 6, 2, 4, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 12), (19, 2), (20, -1), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, -1), (31, 128), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 8 : {33, 3, 7, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 4, 8]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 4, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 4, 8]


Solution : [0, 12, 1, 6, 2, 4, 8] has cost 57.


Before backtrack at level 8
 pending : []
 solution : [0, 12, 1, 6, 2, 4, 8]

After backtrack at level 8
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 7, 3, 31]
 solution : [0, 12, 1, 6, 2, 4, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 7, 3, 31]
 solution : [0, 12, 1, 6, 2, 4]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 7, 3, 31]
 solution : [0, 12, 1, 6, 2, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 12), (19, 2), (20, -1), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 7, 3, 31]
 solution : [0, 12, 1, 6, 2, 4]


Solution : [0, 12, 1, 6, 2, 4] has cost 51.


Decide in level 8 among pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 7, 3, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 12), (19, 2), (20, -1), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, -1), (31, 32), (32, -1), (33, 32)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 3, 31]
 solution : [0, 12, 1, 6, 2, 4, 7]


New level: 9
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 3, 31]
 solution : [0, 12, 1, 6, 2, 4, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 3, 31]
 solution : [0, 12, 1, 6, 2, 4, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 12), (19, 2), (20, -1), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 3, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 4, 7]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 4, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 4, 7]


Solution : [0, 12, 1, 6, 2, 4, 7] has cost 57.


Before backtrack at level 9
 pending : []
 solution : [0, 12, 1, 6, 2, 4, 7]

After backtrack at level 9
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 3, 31]
 solution : [0, 12, 1, 6, 2, 4, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 3, 31]
 solution : [0, 12, 1, 6, 2, 4]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 3, 31]
 solution : [0, 12, 1, 6, 2, 4]

Essensial at level 9 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 4, 3]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 4, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 4, 3]


Solution : [0, 12, 1, 6, 2, 4, 3] has cost 64.


Before backtrack at level 9
 pending : []
 solution : [0, 12, 1, 6, 2, 4, 3]

After backtrack at level 9
 pending : [3, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31]
 solution : [0, 12, 1, 6, 2, 4]


Before backtrack at level 8
 pending : [3, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31]
 solution : [0, 12, 1, 6, 2, 4]

After backtrack at level 8
 pending : [3, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31, 7]
 solution : [0, 12, 1, 6, 2, 4]


Before backtrack at level 7
 pending : [3, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31, 7]
 solution : [0, 12, 1, 6, 2, 4]

After backtrack at level 7
 pending : [3, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31, 7, 13, 20, 30, 15, 10, 11, 5, 9, 8]
 solution : [0, 12, 1, 6, 2, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [3, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31, 7, 13, 20, 30, 15, 10, 11, 5, 9, 8]
 solution : [0, 12, 1, 6, 2]


Before reduction : 
 pending  : [3, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31, 7, 13, 20, 30, 15, 10, 11, 5, 9, 8]
 solution : [0, 12, 1, 6, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, -1), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [3, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31, 7, 13, 20, 30, 15, 10, 11, 5, 9, 8]
 solution : [0, 12, 1, 6, 2]


Solution : [0, 12, 1, 6, 2] has cost 38.


Decide in level 7 among pending : [3, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31, 7, 13, 20, 30, 15, 10, 11, 5, 9, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, -1), (33, 32)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31, 7, 13, 20, 30, 15, 10, 11, 5, 9, 8]
 solution : [0, 12, 1, 6, 2, 3]


New level: 8
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31, 7, 13, 20, 30, 15, 10, 11, 5, 9, 8]
 solution : [0, 12, 1, 6, 2, 3]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 31, 7, 13, 20, 30, 15, 10, 11, 5, 9, 8]
 solution : [0, 12, 1, 6, 2, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 0), (8, 0), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, 0), (19, 2), (20, 4), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 4), (31, 1), (32, -1), (33, 0)]

Covered at level 8 : {33, 7, 8, 18, 23, 28}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 15, 10, 11, 5, 9]
 solution : [0, 12, 1, 6, 2, 3]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 15, 10, 11, 5, 9]
 solution : [0, 12, 1, 6, 2, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 0), (8, 0), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, 0), (19, 2), (20, 4), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 4), (31, 1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 15, 10, 11, 5, 9]
 solution : [0, 12, 1, 6, 2, 3]


Solution : [0, 12, 1, 6, 2, 3] has cost 51.


Decide in level 8 among pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 15, 10, 11, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 15, 10, 5, 9]
 solution : [0, 12, 1, 6, 2, 3, 11]


New level: 9
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 15, 10, 5, 9]
 solution : [0, 12, 1, 6, 2, 3, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 15, 10, 5, 9]
 solution : [0, 12, 1, 6, 2, 3, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, 0), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, -1), (33, -1)]

Covered at level 9 : {15}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 5, 9]
 solution : [0, 12, 1, 6, 2, 3, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 5, 9]
 solution : [0, 12, 1, 6, 2, 3, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, 0), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 5, 9]
 solution : [0, 12, 1, 6, 2, 3, 11]


Solution : [0, 12, 1, 6, 2, 3, 11] has cost 56.


Before backtrack at level 9
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 5, 9]
 solution : [0, 12, 1, 6, 2, 3, 11]

After backtrack at level 9
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 5, 9, 15]
 solution : [0, 12, 1, 6, 2, 3, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 5, 9, 15]
 solution : [0, 12, 1, 6, 2, 3]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 5, 9, 15]
 solution : [0, 12, 1, 6, 2, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, 1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 5, 9, 15]
 solution : [0, 12, 1, 6, 2, 3]


Solution : [0, 12, 1, 6, 2, 3] has cost 51.


Decide in level 9 among pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 5, 9, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 9, 15]
 solution : [0, 12, 1, 6, 2, 3, 5]


New level: 10
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 9, 15]
 solution : [0, 12, 1, 6, 2, 3, 5]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 9, 15]
 solution : [0, 12, 1, 6, 2, 3, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 10 : {9, 10, 13, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 5]


Solution : [0, 12, 1, 6, 2, 3, 5] has cost 57.


Before backtrack at level 10
 pending : []
 solution : [0, 12, 1, 6, 2, 3, 5]

After backtrack at level 10
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 9, 15]
 solution : [0, 12, 1, 6, 2, 3, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 9, 15]
 solution : [0, 12, 1, 6, 2, 3]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 9, 15]
 solution : [0, 12, 1, 6, 2, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 9, 15]
 solution : [0, 12, 1, 6, 2, 3]


Solution : [0, 12, 1, 6, 2, 3] has cost 51.


Decide in level 10 among pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 9, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3, 9]


New level: 11
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3, 9]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 11 : {10, 13, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 9]


Solution : [0, 12, 1, 6, 2, 3, 9] has cost 57.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 2, 3, 9]

After backtrack at level 11
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3]


Solution : [0, 12, 1, 6, 2, 3] has cost 51.


Decide in level 11 among pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 13, 20, 30, 10, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

Decide 13 with phase True at level 11

After decision at level 11
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3, 13]


New level: 12
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3, 13]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, 1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 12 : {10, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 13]


Solution : [0, 12, 1, 6, 2, 3, 13] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 3, 13]

After backtrack at level 12
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3, 13]


Invert decision for 13 at level 11


New level: 12
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 3]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 12 : {15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 3, 10]


Solution : [0, 12, 1, 6, 2, 3, 10] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 3, 10]

After backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 3]


Before backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 3]

After backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 3]


Before backtrack at level 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 3]

After backtrack at level 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13, 9]
 solution : [0, 12, 1, 6, 2, 3]


Before backtrack at level 9
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13, 9]
 solution : [0, 12, 1, 6, 2, 3]

After backtrack at level 9
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13, 9, 5]
 solution : [0, 12, 1, 6, 2, 3]


Before backtrack at level 8
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13, 9, 5]
 solution : [0, 12, 1, 6, 2, 3]

After backtrack at level 8
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13, 9, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13, 9, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13, 9, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, -1), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13, 9, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2]


Solution : [0, 12, 1, 6, 2] has cost 38.


Decide in level 8 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 31, 20, 30, 15, 13, 9, 5, 18, 23, 28, 33, 7, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, -1), (33, 32)]

Decide 31 with phase True at level 8

After decision at level 8
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2, 31]


New level: 9
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2, 31]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2, 31]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, 128), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2, 31]


Solution : [0, 12, 1, 6, 2, 31] has cost 48.


Decide in level 9 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 5, 18, 23, 28, 33, 7, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2, 31, 9]


New level: 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2, 31, 9]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 18, 23, 28, 33, 7, 8, 11]
 solution : [0, 12, 1, 6, 2, 31, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 2), (18, 3), (19, 0), (20, 0), (21, -1), (22, 2), (23, 8), (24, 0), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, 0), (31, -1), (32, -1), (33, 8)]

Covered at level 10 : {5, 10, 11, 13, 15, 16, 19, 20, 24, 30}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 7, 8]
 solution : [0, 12, 1, 6, 2, 31, 9]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 7, 8]
 solution : [0, 12, 1, 6, 2, 31, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 2), (18, 3), (19, 0), (20, 0), (21, -1), (22, 2), (23, 8), (24, 0), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, 0), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 7, 8]
 solution : [0, 12, 1, 6, 2, 31, 9]


Solution : [0, 12, 1, 6, 2, 31, 9] has cost 54.


Decide in level 10 among pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 7, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 31, 9, 7]


New level: 11
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 31, 9, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 31, 9, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 3), (19, -1), (20, -1), (21, -1), (22, 2), (23, 8), (24, -1), (25, 2), (26, 2), (27, 2), (28, 3), (29, 2), (30, -1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 11 : {33, 8, 17, 18, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 9, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 9, 7]


Solution : [0, 12, 1, 6, 2, 31, 9, 7] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 2, 31, 9, 7]

After backtrack at level 11
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 31, 9, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 31, 9]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 31, 9]

Essensial at level 11 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 11 : {33, 17, 18, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 9, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 9, 8]


Solution : [0, 12, 1, 6, 2, 31, 9, 8] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 2, 31, 9, 8]

After backtrack at level 11
 pending : [8, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33]
 solution : [0, 12, 1, 6, 2, 31, 9]


Before backtrack at level 10
 pending : [8, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33]
 solution : [0, 12, 1, 6, 2, 31, 9]

After backtrack at level 10
 pending : [8, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11, 7]
 solution : [0, 12, 1, 6, 2, 31, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [8, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11, 7]
 solution : [0, 12, 1, 6, 2, 31]


Before reduction : 
 pending  : [8, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11, 7]
 solution : [0, 12, 1, 6, 2, 31]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [8, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11, 7]
 solution : [0, 12, 1, 6, 2, 31]


Solution : [0, 12, 1, 6, 2, 31] has cost 48.


Decide in level 10 among pending : [8, 17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11, 7]
 solution : [0, 12, 1, 6, 2, 31, 8]


New level: 11
 pending : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11, 7]
 solution : [0, 12, 1, 6, 2, 31, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 18, 23, 28, 33, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11, 7]
 solution : [0, 12, 1, 6, 2, 31, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 10), (18, 3), (19, 2), (20, 1), (21, -1), (22, 13), (23, 8), (24, 2), (25, 16), (26, 16), (27, 16), (28, 3), (29, 13), (30, 1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 0), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, 0), (19, 2), (20, 1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, 1), (31, -1), (32, -1), (33, 0)]

Covered at level 11 : {33, 7, 18, 23, 28}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11]
 solution : [0, 12, 1, 6, 2, 31, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11]
 solution : [0, 12, 1, 6, 2, 31, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 0), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, 0), (19, 2), (20, 1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, 1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11]
 solution : [0, 12, 1, 6, 2, 31, 8]


Solution : [0, 12, 1, 6, 2, 31, 8] has cost 54.


Decide in level 11 among pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 5, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 31, 8, 5]


New level: 12
 pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 31, 8, 5]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 31, 8, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {10, 11, 13, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 8, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 8, 5]


Solution : [0, 12, 1, 6, 2, 31, 8, 5] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 31, 8, 5]

After backtrack at level 12
 pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 31, 8, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 31, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 31, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 31, 8]


Solution : [0, 12, 1, 6, 2, 31, 8] has cost 54.


Decide in level 12 among pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 31, 8, 11]


New level: 13
 pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 31, 8, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 31, 8, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, 0), (16, 2), (17, 4), (18, -1), (19, 2), (20, 0), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {20, 30, 15}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 13]
 solution : [0, 12, 1, 6, 2, 31, 8, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 13]
 solution : [0, 12, 1, 6, 2, 31, 8, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, 0), (16, 2), (17, 4), (18, -1), (19, 2), (20, 0), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 13]
 solution : [0, 12, 1, 6, 2, 31, 8, 11]


Solution : [0, 12, 1, 6, 2, 31, 8, 11] has cost 59.


Before backtrack at level 13
 pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 13]
 solution : [0, 12, 1, 6, 2, 31, 8, 11]

After backtrack at level 13
 pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8]


Solution : [0, 12, 1, 6, 2, 31, 8] has cost 54.


Decide in level 13 among pending : [17, 22, 25, 26, 27, 29, 10, 16, 19, 24, 13, 20, 30, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8, 10]


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8, 10]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {13, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 8, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 8, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 8, 10]


Solution : [0, 12, 1, 6, 2, 31, 8, 10] has cost 63.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 31, 8, 10]

After backtrack at level 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 13, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8]

Essensial at level 14 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 8, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 8, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 8, 13]


Solution : [0, 12, 1, 6, 2, 31, 8, 13] has cost 63.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 31, 8, 13]

After backtrack at level 14
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8]


Before backtrack at level 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 8]

After backtrack at level 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 31, 8]


Before backtrack at level 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 31, 8]

After backtrack at level 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 11]
 solution : [0, 12, 1, 6, 2, 31, 8]


Before backtrack at level 11
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 11]
 solution : [0, 12, 1, 6, 2, 31, 8]

After backtrack at level 11
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 11, 18, 23, 28, 33, 7, 5]
 solution : [0, 12, 1, 6, 2, 31, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 11, 18, 23, 28, 33, 7, 5]
 solution : [0, 12, 1, 6, 2, 31]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 11, 18, 23, 28, 33, 7, 5]
 solution : [0, 12, 1, 6, 2, 31]

Essensial at level 11 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, 0), (19, 2), (20, 1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, 1), (31, -1), (32, -1), (33, 0)]

Covered at level 11 : {33, 18, 28, 23}

After reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 11, 5]
 solution : [0, 12, 1, 6, 2, 31, 7]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 11, 5]
 solution : [0, 12, 1, 6, 2, 31, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, 0), (19, 2), (20, 1), (21, -1), (22, 4), (23, 0), (24, 2), (25, 4), (26, 4), (27, 4), (28, 0), (29, 4), (30, 1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 11, 5]
 solution : [0, 12, 1, 6, 2, 31, 7]


Solution : [0, 12, 1, 6, 2, 31, 7] has cost 54.


Decide in level 11 among pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 11, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 5]
 solution : [0, 12, 1, 6, 2, 31, 7, 11]


New level: 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 5]
 solution : [0, 12, 1, 6, 2, 31, 7, 11]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10, 5]
 solution : [0, 12, 1, 6, 2, 31, 7, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, 0), (16, 2), (17, 4), (18, -1), (19, 2), (20, 0), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {20, 30, 15}

After reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 5]
 solution : [0, 12, 1, 6, 2, 31, 7, 11]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 5]
 solution : [0, 12, 1, 6, 2, 31, 7, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, 0), (16, 2), (17, 4), (18, -1), (19, 2), (20, 0), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 5]
 solution : [0, 12, 1, 6, 2, 31, 7, 11]


Solution : [0, 12, 1, 6, 2, 31, 7, 11] has cost 59.


Before backtrack at level 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 5]
 solution : [0, 12, 1, 6, 2, 31, 7, 11]

After backtrack at level 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 5, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 5, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 5, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, 2), (17, 4), (18, -1), (19, 2), (20, -1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 5, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7]


Solution : [0, 12, 1, 6, 2, 31, 7] has cost 54.


Decide in level 12 among pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 5, 20, 30, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 12

After decision at level 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7, 5]


New level: 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7, 5]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {10, 13, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 7, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 7, 5]


Solution : [0, 12, 1, 6, 2, 31, 7, 5] has cost 60.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 2, 31, 7, 5]

After backtrack at level 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7, 5]


Invert decision for 5 at level 12


New level: 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7]


Solution : [0, 12, 1, 6, 2, 31, 7] has cost 54.


Decide in level 13 among pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 13

After decision at level 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7, 13]


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7, 13]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 4), (18, -1), (19, 2), (20, 1), (21, -1), (22, 4), (23, -1), (24, 2), (25, 4), (26, 4), (27, 4), (28, -1), (29, 4), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {10, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 7, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 7, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 7, 13]


Solution : [0, 12, 1, 6, 2, 31, 7, 13] has cost 63.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 31, 7, 13]

After backtrack at level 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7, 13]


Invert decision for 13 at level 13


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 7, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 31, 7, 10]


Solution : [0, 12, 1, 6, 2, 31, 7, 10] has cost 63.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 31, 7, 10]

After backtrack at level 14
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7]


Before backtrack at level 13
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 31, 7]

After backtrack at level 13
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 31, 7]


Before backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 31, 7]

After backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5]
 solution : [0, 12, 1, 6, 2, 31, 7]


Before backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5]
 solution : [0, 12, 1, 6, 2, 31, 7]

After backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 7, 18, 23, 28, 33, 11]
 solution : [0, 12, 1, 6, 2, 31]


Before backtrack at level 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 7, 18, 23, 28, 33, 11]
 solution : [0, 12, 1, 6, 2, 31]

After backtrack at level 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 7, 18, 23, 28, 33, 11, 8]
 solution : [0, 12, 1, 6, 2, 31]


Before backtrack at level 9
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 7, 18, 23, 28, 33, 11, 8]
 solution : [0, 12, 1, 6, 2, 31]

After backtrack at level 9
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 7, 18, 23, 28, 33, 11, 8, 9]
 solution : [0, 12, 1, 6, 2, 31]


Invert decision for 31 at level 8


New level: 9
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 7, 18, 23, 28, 33, 11, 8, 9]
 solution : [0, 12, 1, 6, 2]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 7, 18, 23, 28, 33, 11, 8, 9]
 solution : [0, 12, 1, 6, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, -1), (32, -1), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 7, 18, 23, 28, 33, 11, 8, 9]
 solution : [0, 12, 1, 6, 2]


Solution : [0, 12, 1, 6, 2] has cost 38.


Decide in level 9 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 5, 7, 18, 23, 28, 33, 11, 8, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, -1), (32, -1), (33, 32)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 7, 18, 23, 28, 33, 11, 8, 9]
 solution : [0, 12, 1, 6, 2, 5]


New level: 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 7, 18, 23, 28, 33, 11, 8, 9]
 solution : [0, 12, 1, 6, 2, 5]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 7, 18, 23, 28, 33, 11, 8, 9]
 solution : [0, 12, 1, 6, 2, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, -1), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 2), (17, 6), (18, 12), (19, 2), (20, 0), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, 0), (31, -1), (32, -1), (33, 32)]

Covered at level 10 : {9, 10, 11, 13, 15, 20, 30}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 7, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 5]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 7, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 2), (17, 6), (18, 12), (19, 2), (20, 0), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, 0), (31, -1), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 12), (19, 2), (20, -1), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, -1), (31, -1), (32, -1), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 7, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 5]


Solution : [0, 12, 1, 6, 2, 5] has cost 44.


Decide in level 10 among pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 7, 18, 23, 28, 33, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 12), (19, 2), (20, -1), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, -1), (31, -1), (32, -1), (33, 32)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 5, 7]


New level: 11
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 5, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 5, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 12), (19, 2), (20, -1), (21, -1), (22, 6), (23, 32), (24, 2), (25, 6), (26, 6), (27, 6), (28, 12), (29, 7), (30, -1), (31, -1), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 11 : {33, 8, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 5, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 5, 7]


Solution : [0, 12, 1, 6, 2, 5, 7] has cost 50.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 2, 5, 7]

After backtrack at level 11
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 5, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 5]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 8]
 solution : [0, 12, 1, 6, 2, 5]

Essensial at level 11 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 11 : {33, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 5, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 5, 8]


Solution : [0, 12, 1, 6, 2, 5, 8] has cost 50.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 2, 5, 8]

After backtrack at level 11
 pending : [8, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33]
 solution : [0, 12, 1, 6, 2, 5]


Before backtrack at level 10
 pending : [8, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33]
 solution : [0, 12, 1, 6, 2, 5]

After backtrack at level 10
 pending : [8, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 10, 20, 30, 15, 13, 11, 9, 7]
 solution : [0, 12, 1, 6, 2, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [8, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 10, 20, 30, 15, 13, 11, 9, 7]
 solution : [0, 12, 1, 6, 2]


Before reduction : 
 pending  : [8, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 10, 20, 30, 15, 13, 11, 9, 7]
 solution : [0, 12, 1, 6, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, -1), (32, -1), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [8, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 10, 20, 30, 15, 13, 11, 9, 7]
 solution : [0, 12, 1, 6, 2]


Solution : [0, 12, 1, 6, 2] has cost 38.


Decide in level 10 among pending : [8, 17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 10, 20, 30, 15, 13, 11, 9, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, -1), (32, -1), (33, 32)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 10, 20, 30, 15, 13, 11, 9, 7]
 solution : [0, 12, 1, 6, 2, 8]


New level: 11
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 10, 20, 30, 15, 13, 11, 9, 7]
 solution : [0, 12, 1, 6, 2, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 18, 23, 28, 33, 10, 20, 30, 15, 13, 11, 9, 7]
 solution : [0, 12, 1, 6, 2, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 8), (17, 20), (18, 12), (19, 8), (20, 4), (21, -1), (22, 21), (23, 32), (24, 8), (25, 24), (26, 24), (27, 24), (28, 12), (29, 28), (30, 4), (31, -1), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, 0), (19, 2), (20, 4), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 4), (31, -1), (32, -1), (33, 0)]

Covered at level 11 : {33, 7, 18, 23, 28}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15, 13, 11, 9]
 solution : [0, 12, 1, 6, 2, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15, 13, 11, 9]
 solution : [0, 12, 1, 6, 2, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, 0), (19, 2), (20, 4), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 4), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15, 13, 11, 9]
 solution : [0, 12, 1, 6, 2, 8]


Solution : [0, 12, 1, 6, 2, 8] has cost 44.


Decide in level 11 among pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15, 13, 11, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15, 13, 9]
 solution : [0, 12, 1, 6, 2, 8, 11]


New level: 12
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15, 13, 9]
 solution : [0, 12, 1, 6, 2, 8, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 15, 13, 9]
 solution : [0, 12, 1, 6, 2, 8, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, 0), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {15}

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13, 9]
 solution : [0, 12, 1, 6, 2, 8, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13, 9]
 solution : [0, 12, 1, 6, 2, 8, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, 0), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13, 9]
 solution : [0, 12, 1, 6, 2, 8, 11]


Solution : [0, 12, 1, 6, 2, 8, 11] has cost 49.


Decide in level 12 among pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 12

After decision at level 12
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11, 9]


New level: 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11, 9]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {10, 13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 11, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 11, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 11, 9]


Solution : [0, 12, 1, 6, 2, 8, 11, 9] has cost 55.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 2, 8, 11, 9]

After backtrack at level 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11, 9]


Invert decision for 9 at level 12


New level: 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11]


Solution : [0, 12, 1, 6, 2, 8, 11] has cost 49.


Decide in level 13 among pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 10, 20, 30, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11, 10]


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11, 10]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 11, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 11, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 11, 10]


Solution : [0, 12, 1, 6, 2, 8, 11, 10] has cost 58.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 8, 11, 10]

After backtrack at level 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 8, 11]

Essensial at level 14 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 11, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 11, 13]


Solution : [0, 12, 1, 6, 2, 8, 11, 13] has cost 58.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 8, 11, 13]

After backtrack at level 14
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30]
 solution : [0, 12, 1, 6, 2, 8, 11]


Before backtrack at level 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30]
 solution : [0, 12, 1, 6, 2, 8, 11]

After backtrack at level 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10]
 solution : [0, 12, 1, 6, 2, 8, 11]


Before backtrack at level 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10]
 solution : [0, 12, 1, 6, 2, 8, 11]

After backtrack at level 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15, 9]
 solution : [0, 12, 1, 6, 2, 8, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15, 9]
 solution : [0, 12, 1, 6, 2, 8]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15, 9]
 solution : [0, 12, 1, 6, 2, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15, 9]
 solution : [0, 12, 1, 6, 2, 8]


Solution : [0, 12, 1, 6, 2, 8] has cost 44.


Decide in level 12 among pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 12

After decision at level 12
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8, 9]


New level: 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8, 9]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {10, 13, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 9]


Solution : [0, 12, 1, 6, 2, 8, 9] has cost 50.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 2, 8, 9]

After backtrack at level 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8, 9]


Invert decision for 9 at level 12


New level: 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8]


Solution : [0, 12, 1, 6, 2, 8] has cost 44.


Decide in level 13 among pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 13

After decision at level 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8, 13]


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8, 13]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {10, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 13]


Solution : [0, 12, 1, 6, 2, 8, 13] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 8, 13]

After backtrack at level 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8, 13]


Invert decision for 13 at level 13


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 10, 15]
 solution : [0, 12, 1, 6, 2, 8]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 8, 10]


Solution : [0, 12, 1, 6, 2, 8, 10] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 8, 10]

After backtrack at level 14
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 8]


Before backtrack at level 13
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 8]

After backtrack at level 13
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 8]


Before backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 8]

After backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9]
 solution : [0, 12, 1, 6, 2, 8]


Before backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9]
 solution : [0, 12, 1, 6, 2, 8]

After backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 18, 23, 28, 33, 7, 11]
 solution : [0, 12, 1, 6, 2, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 18, 23, 28, 33, 7, 11]
 solution : [0, 12, 1, 6, 2]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 18, 23, 28, 33, 7, 11]
 solution : [0, 12, 1, 6, 2]

Essensial at level 11 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, 0), (19, 2), (20, 4), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 4), (31, -1), (32, -1), (33, 0)]

Covered at level 11 : {33, 18, 28, 23}

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 11]
 solution : [0, 12, 1, 6, 2, 7]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 11]
 solution : [0, 12, 1, 6, 2, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, 0), (19, 2), (20, 4), (21, -1), (22, 5), (23, 0), (24, 2), (25, 5), (26, 5), (27, 5), (28, 0), (29, 7), (30, 4), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 11]
 solution : [0, 12, 1, 6, 2, 7]


Solution : [0, 12, 1, 6, 2, 7] has cost 44.


Decide in level 11 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 11

After decision at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 7, 9]


New level: 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 7, 9]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 7, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {10, 11, 13, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 9]


Solution : [0, 12, 1, 6, 2, 7, 9] has cost 50.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 2, 7, 9]

After backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 7, 9]


Invert decision for 9 at level 11


New level: 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 7]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 7]


Solution : [0, 12, 1, 6, 2, 7] has cost 44.


Decide in level 12 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 7, 11]


New level: 13
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 7, 11]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 7, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, 0), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {15}

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 7, 11]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 7, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, 0), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 7, 11]


Solution : [0, 12, 1, 6, 2, 7, 11] has cost 49.


Decide in level 13 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 7, 11, 10]


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 7, 11, 10]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 7, 11, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 2), (17, 6), (18, -1), (19, 2), (20, 1), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {13, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 11, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 11, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 11, 10]


Solution : [0, 12, 1, 6, 2, 7, 11, 10] has cost 58.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 7, 11, 10]

After backtrack at level 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 7, 11, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 7, 11]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13]
 solution : [0, 12, 1, 6, 2, 7, 11]

Essensial at level 14 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 11, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 11, 13]


Solution : [0, 12, 1, 6, 2, 7, 11, 13] has cost 58.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 7, 11, 13]

After backtrack at level 14
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30]
 solution : [0, 12, 1, 6, 2, 7, 11]


Before backtrack at level 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30]
 solution : [0, 12, 1, 6, 2, 7, 11]

After backtrack at level 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 7, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 7]


Before reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 7]


Solution : [0, 12, 1, 6, 2, 7] has cost 44.


Decide in level 13 among pending : [13, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 13

After decision at level 13
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 7, 13]


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 7, 13]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 7, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, 2), (17, 6), (18, -1), (19, 2), (20, 4), (21, -1), (22, 5), (23, -1), (24, 2), (25, 5), (26, 5), (27, 5), (28, -1), (29, 7), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {10, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 13]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 13]


Solution : [0, 12, 1, 6, 2, 7, 13] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 7, 13]

After backtrack at level 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 7, 13]


Invert decision for 13 at level 13


New level: 14
 pending : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 7]


Before reduction : 
 pending  : [17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 10]
 solution : [0, 12, 1, 6, 2, 7]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 2, 7, 10]


Solution : [0, 12, 1, 6, 2, 7, 10] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 2, 7, 10]

After backtrack at level 14
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 7]


Before backtrack at level 13
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15]
 solution : [0, 12, 1, 6, 2, 7]

After backtrack at level 13
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 7]


Before backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13]
 solution : [0, 12, 1, 6, 2, 7]

After backtrack at level 12
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 7]


Before backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11]
 solution : [0, 12, 1, 6, 2, 7]

After backtrack at level 11
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9]
 solution : [0, 12, 1, 6, 2]


Before backtrack at level 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9]
 solution : [0, 12, 1, 6, 2]

After backtrack at level 10
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8]
 solution : [0, 12, 1, 6, 2]


Before backtrack at level 9
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8]
 solution : [0, 12, 1, 6, 2]

After backtrack at level 9
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5]
 solution : [0, 12, 1, 6, 2]


Before backtrack at level 8
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5]
 solution : [0, 12, 1, 6, 2]

After backtrack at level 8
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31]
 solution : [0, 12, 1, 6, 2]


Before backtrack at level 7
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31]
 solution : [0, 12, 1, 6, 2]

After backtrack at level 7
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3]
 solution : [0, 12, 1, 6, 2]


Before backtrack at level 6
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3]
 solution : [0, 12, 1, 6, 2]

After backtrack at level 6
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4]
 solution : [0, 12, 1, 6, 2]


Before backtrack at level 5
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4]
 solution : [0, 12, 1, 6, 2]

After backtrack at level 5
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 2]


Before backtrack at level 4
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 2]

After backtrack at level 4
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 14]
 solution : [0, 12, 1, 6, 2]


Invert decision for 2 at level 3


New level: 4
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 14]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 14]
 solution : [0, 12, 1, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 14]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 4 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14]


New level: 5
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 15, 13, 11, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, 256), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, 0), (12, -1), (13, 16), (14, -1), (15, 0), (16, 192), (17, 66), (18, 192), (19, 208), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Covered at level 5 : {11, 15}

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, 0), (12, -1), (13, 16), (14, -1), (15, 0), (16, 192), (17, 66), (18, 192), (19, 208), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 192), (17, 66), (18, 192), (19, 208), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14]


Solution : [0, 12, 1, 6, 14] has cost 25.


Decide in level 5 among pending : [10, 17, 22, 25, 26, 27, 29, 16, 19, 24, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 192), (17, 66), (18, 192), (19, 208), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Decide 19 with phase True at level 5

After decision at level 5
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 24, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 19]


New level: 6
 pending : [10, 17, 22, 25, 26, 27, 29, 16, 24, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 19]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 16, 24, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 19]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 192), (17, 66), (18, 192), (19, 208), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 0), (17, 16), (18, 10), (19, -1), (20, 1), (21, -1), (22, 41), (23, 32), (24, 0), (25, 16), (26, 40), (27, 40), (28, 10), (29, 80), (30, 1), (31, 32), (32, 32), (33, 32)]

Covered at level 6 : {16, 24}

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 19]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 19]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 0), (17, 16), (18, 10), (19, -1), (20, 1), (21, -1), (22, 41), (23, 32), (24, 0), (25, 16), (26, 40), (27, 40), (28, 10), (29, 80), (30, 1), (31, 32), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 16), (18, 10), (19, -1), (20, 1), (21, -1), (22, 41), (23, 32), (24, -1), (25, 16), (26, 40), (27, 40), (28, 10), (29, 80), (30, 1), (31, 32), (32, 32), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 19]


Solution : [0, 12, 1, 6, 14, 19] has cost 59.


Before backtrack at level 6
 pending : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 19]

After backtrack at level 6
 pending : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14, 19]


Invert decision for 19 at level 5


New level: 6
 pending : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 16), (18, 10), (19, -1), (20, 1), (21, -1), (22, 41), (23, 32), (24, -1), (25, 16), (26, 40), (27, 40), (28, 10), (29, 80), (30, 1), (31, 32), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 192), (17, 66), (18, 192), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14]


Solution : [0, 12, 1, 6, 14] has cost 25.


Decide in level 6 among pending : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 18, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 192), (17, 66), (18, 192), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Decide 18 with phase True at level 6

After decision at level 6
 pending : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14, 18]


New level: 7
 pending : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14, 18]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 23, 28, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14, 18]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 192), (17, 66), (18, 192), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, 0), (29, 129), (30, 1), (31, 32), (32, 32), (33, 8)]

Covered at level 7 : {28}

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14, 18]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14, 18]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, 0), (29, 129), (30, 1), (31, 32), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, 129), (30, 1), (31, 32), (32, 32), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14, 18]


Solution : [0, 12, 1, 6, 14, 18] has cost 44.


Decide in level 7 among pending : [10, 17, 22, 25, 26, 27, 29, 20, 30, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, 129), (30, 1), (31, 32), (32, 32), (33, 8)]

Decide 29 with phase True at level 7

After decision at level 7
 pending : [10, 17, 22, 25, 26, 27, 20, 30, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 29]


New level: 8
 pending : [10, 17, 22, 25, 26, 27, 20, 30, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 29]


Before reduction : 
 pending  : [10, 17, 22, 25, 26, 27, 20, 30, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 29]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, 129), (30, 1), (31, 32), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 1), (5, 1), (6, -1), (7, 128), (8, 128), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 8), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 1), (32, 1), (33, 8)]

Covered at level 8 : {16, 17, 20, 22, 24, 25, 26, 27, 30}

After reduction : 
 pending  : [10, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 18, 29]


Before reduction : 
 pending  : [10, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 18, 29]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 1), (5, 1), (6, -1), (7, 128), (8, 128), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 8), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 1), (32, 1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 1), (5, 1), (6, -1), (7, 64), (8, 64), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 18, 29]


Solution : [0, 12, 1, 6, 14, 18, 29] has cost 78.


Before backtrack at level 8
 pending : [10, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32]
 solution : [0, 12, 1, 6, 14, 18, 29]

After backtrack at level 8
 pending : [10, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 29]


Invert decision for 29 at level 7


New level: 8
 pending : [10, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18]


Before reduction : 
 pending  : [10, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 1), (5, 1), (6, -1), (7, 64), (8, 64), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18]


Solution : [0, 12, 1, 6, 14, 18] has cost 44.


Decide in level 8 among pending : [10, 13, 7, 23, 33, 9, 8, 5, 31, 3, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [10, 13, 23, 33, 9, 8, 5, 31, 3, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


New level: 9
 pending : [10, 13, 23, 33, 9, 8, 5, 31, 3, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before reduction : 
 pending  : [10, 13, 23, 33, 9, 8, 5, 31, 3, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 0), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

Covered at level 9 : {8, 33, 3, 23}

After reduction : 
 pending  : [10, 13, 9, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before reduction : 
 pending  : [10, 13, 9, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 0), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 13, 9, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Solution : [0, 12, 1, 6, 14, 18, 7] has cost 50.


Decide in level 9 among pending : [10, 13, 9, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [10, 13, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 9]


New level: 10
 pending : [10, 13, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 9]


Before reduction : 
 pending  : [10, 13, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 10 : {32, 4, 5, 10, 13, 16, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 7, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 7, 9]


Solution : [0, 12, 1, 6, 14, 18, 7, 9] has cost 56.


Before backtrack at level 10
 pending : []
 solution : [0, 12, 1, 6, 14, 18, 7, 9]

After backtrack at level 10
 pending : [10, 13, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [10, 13, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before reduction : 
 pending  : [10, 13, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 13, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Solution : [0, 12, 1, 6, 14, 18, 7] has cost 50.


Decide in level 10 among pending : [10, 13, 5, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [10, 13, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 5]


New level: 11
 pending : [10, 13, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 5]


Before reduction : 
 pending  : [10, 13, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 11 : {32, 4, 10, 13, 16, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 7, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 7, 5]


Solution : [0, 12, 1, 6, 14, 18, 7, 5] has cost 56.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 14, 18, 7, 5]

After backtrack at level 11
 pending : [10, 13, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [10, 13, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before reduction : 
 pending  : [10, 13, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 13, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Solution : [0, 12, 1, 6, 14, 18, 7] has cost 50.


Decide in level 11 among pending : [10, 13, 31, 4, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 4 with phase True at level 11

After decision at level 11
 pending : [10, 13, 31, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 4]


New level: 12
 pending : [10, 13, 31, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 4]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 12 : {32, 10, 13, 16, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 7, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 7, 4]


Solution : [0, 12, 1, 6, 14, 18, 7, 4] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 14, 18, 7, 4]

After backtrack at level 12
 pending : [10, 13, 31, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 4]


Invert decision for 4 at level 11


New level: 12
 pending : [10, 13, 31, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Solution : [0, 12, 1, 6, 14, 18, 7] has cost 50.


Decide in level 12 among pending : [10, 13, 31, 32, 17, 22, 25, 26, 27, 20, 30, 16, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 22 with phase True at level 12

After decision at level 12
 pending : [10, 13, 31, 32, 17, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 22]


New level: 13
 pending : [10, 13, 31, 32, 17, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 22]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 22]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 13 : {32, 16, 17, 20, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 22]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 22]


Solution : [0, 12, 1, 6, 14, 18, 7, 22] has cost 84.


Before backtrack at level 13
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 22]

After backtrack at level 13
 pending : [10, 13, 31, 32, 17, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 22]


Invert decision for 22 at level 12


New level: 13
 pending : [10, 13, 31, 32, 17, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 26, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Solution : [0, 12, 1, 6, 14, 18, 7] has cost 50.


Decide in level 13 among pending : [10, 13, 31, 32, 17, 25, 26, 27, 20, 30, 16, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 26 with phase True at level 13

After decision at level 13
 pending : [10, 13, 31, 32, 17, 25, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 26]


New level: 14
 pending : [10, 13, 31, 32, 17, 25, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 26]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 26]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 14 : {32, 16, 17, 20, 24, 25, 27, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 26]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 26]


Solution : [0, 12, 1, 6, 14, 18, 7, 26] has cost 84.


Before backtrack at level 14
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 26]

After backtrack at level 14
 pending : [10, 13, 31, 32, 17, 25, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7, 26]


Invert decision for 26 at level 13


New level: 14
 pending : [10, 13, 31, 32, 17, 25, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 27, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]

Essensial at level 14 : {27}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 14 : {32, 16, 17, 20, 24, 25, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 27]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 27]


Solution : [0, 12, 1, 6, 14, 18, 7, 27] has cost 84.


Before backtrack at level 14
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 7, 27]

After backtrack at level 14
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before backtrack at level 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 7]

After backtrack at level 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before backtrack at level 12
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 7]

After backtrack at level 12
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before backtrack at level 11
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 18, 7]

After backtrack at level 11
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before backtrack at level 10
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 18, 7]

After backtrack at level 10
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 18, 7]


Before backtrack at level 9
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 18, 7]

After backtrack at level 9
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 23, 33, 8, 3, 9]
 solution : [0, 12, 1, 6, 14, 18, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 23, 33, 8, 3, 9]
 solution : [0, 12, 1, 6, 14, 18]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 23, 33, 8, 3, 9]
 solution : [0, 12, 1, 6, 14, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 23, 33, 8, 3, 9]
 solution : [0, 12, 1, 6, 14, 18]


Solution : [0, 12, 1, 6, 14, 18] has cost 44.


Decide in level 9 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 23, 33, 8, 3, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 23, 33, 3, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]


New level: 10
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 23, 33, 3, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 23, 33, 3, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

Covered at level 10 : {33, 3, 23}

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]


Solution : [0, 12, 1, 6, 14, 18, 8] has cost 50.


Decide in level 10 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 4, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 18, 8, 4]


New level: 11
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 18, 8, 4]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 18, 8, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 11 : {32, 5, 9, 10, 13, 16, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 8, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 8, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 8, 4]


Solution : [0, 12, 1, 6, 14, 18, 8, 4] has cost 63.


Before backtrack at level 11
 pending : []
 solution : [0, 12, 1, 6, 14, 18, 8, 4]

After backtrack at level 11
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 18, 8, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]


Solution : [0, 12, 1, 6, 14, 18, 8] has cost 50.


Decide in level 11 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 18, 8, 5]


New level: 12
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 18, 8, 5]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 18, 8, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 12 : {32, 9, 10, 13, 16, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 8, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 8, 5]


Solution : [0, 12, 1, 6, 14, 18, 8, 5] has cost 56.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 14, 18, 8, 5]

After backtrack at level 12
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 18, 8, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]


Solution : [0, 12, 1, 6, 14, 18, 8] has cost 50.


Decide in level 12 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 9 with phase True at level 12

After decision at level 12
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 18, 8, 9]


New level: 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 18, 8, 9]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 18, 8, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 13 : {32, 10, 13, 16, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 8, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 18, 8, 9]


Solution : [0, 12, 1, 6, 14, 18, 8, 9] has cost 56.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 14, 18, 8, 9]

After backtrack at level 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 18, 8, 9]


Invert decision for 9 at level 12


New level: 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 18, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 18, 8]


Solution : [0, 12, 1, 6, 14, 18, 8] has cost 50.


Decide in level 13 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 22 with phase True at level 13

After decision at level 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8, 22]


New level: 14
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8, 22]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8, 22]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 14 : {32, 16, 17, 20, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 22]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 22]


Solution : [0, 12, 1, 6, 14, 18, 8, 22] has cost 84.


Before backtrack at level 14
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 22]

After backtrack at level 14
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8, 22]


Invert decision for 22 at level 13


New level: 14
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8]


Solution : [0, 12, 1, 6, 14, 18, 8] has cost 50.


Decide in level 14 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 16, 24, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 27 with phase True at level 14

After decision at level 14
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8, 27]


New level: 15
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8, 27]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8, 27]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 15 : {32, 16, 17, 20, 24, 25, 26, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 27]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 27]


Solution : [0, 12, 1, 6, 14, 18, 8, 27] has cost 84.


Before backtrack at level 15
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 27]

After backtrack at level 15
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8, 27]


Invert decision for 27 at level 14


New level: 15
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 20, 30, 16, 24, 26]
 solution : [0, 12, 1, 6, 14, 18, 8]

Essensial at level 15 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 15 : {32, 16, 17, 20, 24, 25, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 26]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 26]


Solution : [0, 12, 1, 6, 14, 18, 8, 26] has cost 84.


Before backtrack at level 15
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 18, 8, 26]

After backtrack at level 15
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before backtrack at level 14
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24]
 solution : [0, 12, 1, 6, 14, 18, 8]

After backtrack at level 14
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before backtrack at level 13
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27]
 solution : [0, 12, 1, 6, 14, 18, 8]

After backtrack at level 13
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before backtrack at level 12
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 18, 8]

After backtrack at level 12
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before backtrack at level 11
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 18, 8]

After backtrack at level 11
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 18, 8]


Before backtrack at level 10
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 18, 8]

After backtrack at level 10
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 23, 33, 3, 4]
 solution : [0, 12, 1, 6, 14, 18, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 23, 33, 3, 4]
 solution : [0, 12, 1, 6, 14, 18]


Before reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 23, 33, 3, 4]
 solution : [0, 12, 1, 6, 14, 18]

Essensial at level 10 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

Covered at level 10 : {33, 23}

After reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 18, 3]


Before reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 18, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 18, 3]


Solution : [0, 12, 1, 6, 14, 18, 3] has cost 57.


Before backtrack at level 10
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 18, 3]

After backtrack at level 10
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33]
 solution : [0, 12, 1, 6, 14, 18]


Before backtrack at level 9
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33]
 solution : [0, 12, 1, 6, 14, 18]

After backtrack at level 9
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8]
 solution : [0, 12, 1, 6, 14, 18]


Before backtrack at level 8
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8]
 solution : [0, 12, 1, 6, 14, 18]

After backtrack at level 8
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7]
 solution : [0, 12, 1, 6, 14, 18]


Before backtrack at level 7
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7]
 solution : [0, 12, 1, 6, 14, 18]

After backtrack at level 7
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14, 18]


Invert decision for 18 at level 6


New level: 7
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 12), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 192), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14]


Solution : [0, 12, 1, 6, 14] has cost 25.


Decide in level 7 among pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 16, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 192), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14, 16]


New level: 8
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14, 16]


Before reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, 192), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, 1), (21, -1), (22, 41), (23, 32), (24, 0), (25, 16), (26, 40), (27, 40), (28, 10), (29, 80), (30, 1), (31, 128), (32, 128), (33, 32)]

Covered at level 8 : {24}

After reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14, 16]


Before reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, 1), (21, -1), (22, 41), (23, 32), (24, 0), (25, 16), (26, 40), (27, 40), (28, 10), (29, 80), (30, 1), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, 1), (21, -1), (22, 41), (23, 32), (24, -1), (25, 16), (26, 40), (27, 40), (28, 10), (29, 80), (30, 1), (31, 128), (32, 128), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14, 16]


Solution : [0, 12, 1, 6, 14, 16] has cost 59.


Before backtrack at level 8
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29]
 solution : [0, 12, 1, 6, 14, 16]

After backtrack at level 8
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29, 24]
 solution : [0, 12, 1, 6, 14, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29, 24]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29, 24]
 solution : [0, 12, 1, 6, 14]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, 1), (21, -1), (22, 41), (23, 32), (24, -1), (25, 16), (26, 40), (27, 40), (28, 10), (29, 80), (30, 1), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29, 24]
 solution : [0, 12, 1, 6, 14]


Solution : [0, 12, 1, 6, 14] has cost 25.


Decide in level 8 among pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 28, 29, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Decide 28 with phase True at level 8

After decision at level 8
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 29, 24]
 solution : [0, 12, 1, 6, 14, 28]


New level: 9
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 29, 24]
 solution : [0, 12, 1, 6, 14, 28]


Before reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 29, 24]
 solution : [0, 12, 1, 6, 14, 28]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, 129), (30, 1), (31, 32), (32, 32), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 29, 24]
 solution : [0, 12, 1, 6, 14, 28]


Solution : [0, 12, 1, 6, 14, 28] has cost 44.


Decide in level 9 among pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 29, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, 129), (30, 1), (31, 32), (32, 32), (33, 8)]

Decide 29 with phase True at level 9

After decision at level 9
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14, 28, 29]


New level: 10
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14, 28, 29]


Before reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 27, 22, 9, 5, 4, 3, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14, 28, 29]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, 129), (30, 1), (31, 32), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 1), (5, 1), (6, -1), (7, 64), (8, 64), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 8), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 1), (32, 1), (33, 8)]

Covered at level 10 : {17, 20, 22, 24, 25, 26, 27, 30}

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 3, 23, 33, 8, 7]
 solution : [0, 12, 1, 6, 14, 28, 29]


Before reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 3, 23, 33, 8, 7]
 solution : [0, 12, 1, 6, 14, 28, 29]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 1), (5, 1), (6, -1), (7, 64), (8, 64), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 8), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 1), (32, 1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 1), (5, 1), (6, -1), (7, 64), (8, 64), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 3, 23, 33, 8, 7]
 solution : [0, 12, 1, 6, 14, 28, 29]


Solution : [0, 12, 1, 6, 14, 28, 29] has cost 78.


Before backtrack at level 10
 pending : [10, 13, 31, 32, 9, 5, 4, 3, 23, 33, 8, 7]
 solution : [0, 12, 1, 6, 14, 28, 29]

After backtrack at level 10
 pending : [10, 13, 31, 32, 9, 5, 4, 3, 23, 33, 8, 7, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 29]


Invert decision for 29 at level 9


New level: 10
 pending : [10, 13, 31, 32, 9, 5, 4, 3, 23, 33, 8, 7, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28]


Before reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 3, 23, 33, 8, 7, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 1), (5, 1), (6, -1), (7, 64), (8, 64), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 3, 23, 33, 8, 7, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28]


Solution : [0, 12, 1, 6, 14, 28] has cost 44.


Decide in level 10 among pending : [10, 13, 31, 32, 9, 5, 4, 3, 23, 33, 8, 7, 26, 17, 25, 20, 30, 27, 22, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [10, 13, 31, 32, 9, 5, 4, 23, 33, 8, 7, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 3]


New level: 11
 pending : [10, 13, 31, 32, 9, 5, 4, 23, 33, 8, 7, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 3]


Before reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 23, 33, 8, 7, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 0), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

Covered at level 11 : {8, 33, 7, 23}

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 3]


Before reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 0), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 3]


Solution : [0, 12, 1, 6, 14, 28, 3] has cost 57.


Before backtrack at level 11
 pending : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 3]

After backtrack at level 11
 pending : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24, 23, 33, 8, 7]
 solution : [0, 12, 1, 6, 14, 28, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24, 23, 33, 8, 7]
 solution : [0, 12, 1, 6, 14, 28]


Before reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24, 23, 33, 8, 7]
 solution : [0, 12, 1, 6, 14, 28]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24, 23, 33, 8, 7]
 solution : [0, 12, 1, 6, 14, 28]


Solution : [0, 12, 1, 6, 14, 28] has cost 44.


Decide in level 11 among pending : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24, 23, 33, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24, 23, 33, 7]
 solution : [0, 12, 1, 6, 14, 28, 8]


New level: 12
 pending : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24, 23, 33, 7]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24, 23, 33, 7]
 solution : [0, 12, 1, 6, 14, 28, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 1), (21, -1), (22, 89), (23, 8), (24, 2), (25, 24), (26, 72), (27, 72), (28, -1), (29, -1), (30, 1), (31, 32), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

Covered at level 12 : {33, 7, 23}

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Solution : [0, 12, 1, 6, 14, 28, 8] has cost 50.


Decide in level 12 among pending : [10, 13, 31, 32, 9, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 9 with phase True at level 12

After decision at level 12
 pending : [10, 13, 31, 32, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 9]


New level: 13
 pending : [10, 13, 31, 32, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 9]


Before reduction : 
 pending  : [10, 13, 31, 32, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 13 : {32, 4, 5, 10, 13, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 8, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 8, 9]


Solution : [0, 12, 1, 6, 14, 28, 8, 9] has cost 56.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 14, 28, 8, 9]

After backtrack at level 13
 pending : [10, 13, 31, 32, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 9]


Invert decision for 9 at level 12


New level: 13
 pending : [10, 13, 31, 32, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before reduction : 
 pending  : [10, 13, 31, 32, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Solution : [0, 12, 1, 6, 14, 28, 8] has cost 50.


Decide in level 13 among pending : [10, 13, 31, 32, 5, 4, 26, 17, 25, 20, 30, 27, 22, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [10, 13, 31, 32, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 5]


New level: 14
 pending : [10, 13, 31, 32, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 5]


Before reduction : 
 pending  : [10, 13, 31, 32, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 14 : {32, 4, 10, 13, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 8, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 8, 5]


Solution : [0, 12, 1, 6, 14, 28, 8, 5] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 14, 28, 8, 5]

After backtrack at level 14
 pending : [10, 13, 31, 32, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [10, 13, 31, 32, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before reduction : 
 pending  : [10, 13, 31, 32, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 4, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Solution : [0, 12, 1, 6, 14, 28, 8] has cost 50.


Decide in level 14 among pending : [10, 13, 31, 32, 4, 26, 17, 25, 20, 30, 27, 22, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 4]


New level: 15
 pending : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 4]


Before reduction : 
 pending  : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 15 : {32, 10, 13, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 8, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 8, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 8, 4]


Solution : [0, 12, 1, 6, 14, 28, 8, 4] has cost 63.


Before backtrack at level 15
 pending : []
 solution : [0, 12, 1, 6, 14, 28, 8, 4]

After backtrack at level 15
 pending : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before reduction : 
 pending  : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Solution : [0, 12, 1, 6, 14, 28, 8] has cost 50.


Decide in level 15 among pending : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 22, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 22 with phase True at level 15

After decision at level 15
 pending : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 22]


New level: 16
 pending : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 22]


Before reduction : 
 pending  : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 16 : {32, 17, 20, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 22]


Solution : [0, 12, 1, 6, 14, 28, 8, 22] has cost 84.


Before backtrack at level 16
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 22]

After backtrack at level 16
 pending : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 22]


Invert decision for 22 at level 15


New level: 16
 pending : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before reduction : 
 pending  : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Solution : [0, 12, 1, 6, 14, 28, 8] has cost 50.


Decide in level 16 among pending : [10, 13, 31, 32, 26, 17, 25, 20, 30, 27, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 26 with phase True at level 16

After decision at level 16
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 26]


New level: 17
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 26]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 17, 20, 24, 25, 27, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 26]


Solution : [0, 12, 1, 6, 14, 28, 8, 26] has cost 84.


Before backtrack at level 17
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 26]

After backtrack at level 17
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8, 26]


Invert decision for 26 at level 16


New level: 17
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 20, 30, 27, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]

Essensial at level 17 : {27}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 17, 20, 24, 25, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 27]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 27]


Solution : [0, 12, 1, 6, 14, 28, 8, 27] has cost 84.


Before backtrack at level 17
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 8, 27]

After backtrack at level 17
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before backtrack at level 16
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24]
 solution : [0, 12, 1, 6, 14, 28, 8]

After backtrack at level 16
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before backtrack at level 15
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 8]

After backtrack at level 15
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before backtrack at level 14
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 28, 8]

After backtrack at level 14
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before backtrack at level 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 28, 8]

After backtrack at level 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 28, 8]


Before backtrack at level 12
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 28, 8]

After backtrack at level 12
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4, 5, 23, 33, 7, 9]
 solution : [0, 12, 1, 6, 14, 28, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4, 5, 23, 33, 7, 9]
 solution : [0, 12, 1, 6, 14, 28]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4, 5, 23, 33, 7, 9]
 solution : [0, 12, 1, 6, 14, 28]

Essensial at level 12 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

Covered at level 12 : {33, 23}

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, 0), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]


Solution : [0, 12, 1, 6, 14, 28, 7] has cost 50.


Decide in level 12 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 4, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 4 with phase True at level 12

After decision at level 12
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 28, 7, 4]


New level: 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 28, 7, 4]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 28, 7, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 13 : {32, 5, 9, 10, 13, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 7, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 7, 4]


Solution : [0, 12, 1, 6, 14, 28, 7, 4] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 14, 28, 7, 4]

After backtrack at level 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 28, 7, 4]


Invert decision for 4 at level 12


New level: 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]


Solution : [0, 12, 1, 6, 14, 28, 7] has cost 50.


Decide in level 13 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 28, 7, 5]


New level: 14
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 28, 7, 5]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 28, 7, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 14 : {32, 9, 10, 13, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 7, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 7, 5]


Solution : [0, 12, 1, 6, 14, 28, 7, 5] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 14, 28, 7, 5]

After backtrack at level 14
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 28, 7, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]


Solution : [0, 12, 1, 6, 14, 28, 7] has cost 50.


Decide in level 14 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 9 with phase True at level 14

After decision at level 14
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 28, 7, 9]


New level: 15
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 28, 7, 9]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 28, 7, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 15 : {32, 10, 13, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 7, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 28, 7, 9]


Solution : [0, 12, 1, 6, 14, 28, 7, 9] has cost 56.


Before backtrack at level 15
 pending : []
 solution : [0, 12, 1, 6, 14, 28, 7, 9]

After backtrack at level 15
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 28, 7, 9]


Invert decision for 9 at level 14


New level: 15
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 28, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 28, 7]


Solution : [0, 12, 1, 6, 14, 28, 7] has cost 50.


Decide in level 15 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 22 with phase True at level 15

After decision at level 15
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7, 22]


New level: 16
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7, 22]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, 26), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 16 : {32, 17, 20, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 22]


Solution : [0, 12, 1, 6, 14, 28, 7, 22] has cost 84.


Before backtrack at level 16
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 22]

After backtrack at level 16
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7, 22]


Invert decision for 22 at level 15


New level: 16
 pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7]


Solution : [0, 12, 1, 6, 14, 28, 7] has cost 50.


Decide in level 16 among pending : [10, 13, 27, 31, 32, 17, 25, 20, 30, 24, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

Decide 27 with phase True at level 16

After decision at level 16
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7, 27]


New level: 17
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7, 27]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7, 27]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, -1), (20, 1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 5), (26, 17), (27, 17), (28, -1), (29, -1), (30, 1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 17, 20, 24, 25, 26, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 27]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 27]


Solution : [0, 12, 1, 6, 14, 28, 7, 27] has cost 84.


Before backtrack at level 17
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 27]

After backtrack at level 17
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7, 27]


Invert decision for 27 at level 16


New level: 17
 pending : [10, 13, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before reduction : 
 pending  : [10, 13, 31, 32, 17, 25, 20, 30, 24, 26]
 solution : [0, 12, 1, 6, 14, 28, 7]

Essensial at level 17 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 17, 20, 24, 25, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 26]


Solution : [0, 12, 1, 6, 14, 28, 7, 26] has cost 84.


Before backtrack at level 17
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 28, 7, 26]

After backtrack at level 17
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before backtrack at level 16
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24]
 solution : [0, 12, 1, 6, 14, 28, 7]

After backtrack at level 16
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before backtrack at level 15
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27]
 solution : [0, 12, 1, 6, 14, 28, 7]

After backtrack at level 15
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before backtrack at level 14
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 28, 7]

After backtrack at level 14
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before backtrack at level 13
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 28, 7]

After backtrack at level 13
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 28, 7]


Before backtrack at level 12
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 28, 7]

After backtrack at level 12
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4]
 solution : [0, 12, 1, 6, 14, 28]


Before backtrack at level 11
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4]
 solution : [0, 12, 1, 6, 14, 28]

After backtrack at level 11
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8]
 solution : [0, 12, 1, 6, 14, 28]


Before backtrack at level 10
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8]
 solution : [0, 12, 1, 6, 14, 28]

After backtrack at level 10
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8, 3]
 solution : [0, 12, 1, 6, 14, 28]


Before backtrack at level 9
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8, 3]
 solution : [0, 12, 1, 6, 14, 28]

After backtrack at level 9
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8, 3, 29]
 solution : [0, 12, 1, 6, 14, 28]


Invert decision for 28 at level 8


New level: 9
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8, 3, 29]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8, 3, 29]
 solution : [0, 12, 1, 6, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8, 3, 29]
 solution : [0, 12, 1, 6, 14]


Solution : [0, 12, 1, 6, 14] has cost 25.


Decide in level 9 among pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8, 3, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

Decide 29 with phase True at level 9

After decision at level 9
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8, 3]
 solution : [0, 12, 1, 6, 14, 29]


New level: 10
 pending : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8, 3]
 solution : [0, 12, 1, 6, 14, 29]


Before reduction : 
 pending  : [10, 13, 26, 31, 32, 17, 25, 20, 30, 24, 27, 22, 9, 5, 7, 23, 33, 4, 8, 3]
 solution : [0, 12, 1, 6, 14, 29]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 8), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 1), (5, 1), (6, -1), (7, 64), (8, 64), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 32), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 1), (32, 1), (33, 32)]

Covered at level 10 : {17, 20, 22, 24, 25, 26, 27, 30}

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 7, 23, 33, 4, 8, 3]
 solution : [0, 12, 1, 6, 14, 29]


Before reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 7, 23, 33, 4, 8, 3]
 solution : [0, 12, 1, 6, 14, 29]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 1), (5, 1), (6, -1), (7, 64), (8, 64), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 32), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 1), (32, 1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 1), (5, 1), (6, -1), (7, 64), (8, 64), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 7, 23, 33, 4, 8, 3]
 solution : [0, 12, 1, 6, 14, 29]


Solution : [0, 12, 1, 6, 14, 29] has cost 59.


Before backtrack at level 10
 pending : [10, 13, 31, 32, 9, 5, 7, 23, 33, 4, 8, 3]
 solution : [0, 12, 1, 6, 14, 29]

After backtrack at level 10
 pending : [10, 13, 31, 32, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 20, 30, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 29]


Invert decision for 29 at level 9


New level: 10
 pending : [10, 13, 31, 32, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 20, 30, 24, 27, 22]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 20, 30, 24, 27, 22]
 solution : [0, 12, 1, 6, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 1), (5, 1), (6, -1), (7, 64), (8, 64), (9, 1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, 128), (32, 128), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 13, 31, 32, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 20, 30, 24, 27, 22]
 solution : [0, 12, 1, 6, 14]


Solution : [0, 12, 1, 6, 14] has cost 25.


Decide in level 10 among pending : [10, 13, 31, 32, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 20, 30, 24, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, 128), (32, 128), (33, 32)]

Decide 31 with phase True at level 10

After decision at level 10
 pending : [10, 13, 32, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 20, 30, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31]


New level: 11
 pending : [10, 13, 32, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 20, 30, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31]


Before reduction : 
 pending  : [10, 13, 32, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 20, 30, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 0), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 8)]

Covered at level 11 : {32, 20, 30}

After reduction : 
 pending  : [10, 13, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31]


Before reduction : 
 pending  : [10, 13, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 0), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, -1), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 13, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31]


Solution : [0, 12, 1, 6, 14, 31] has cost 35.


Decide in level 11 among pending : [10, 13, 9, 5, 7, 23, 33, 4, 8, 3, 26, 17, 25, 24, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, -1), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [10, 13, 9, 5, 23, 33, 4, 8, 3, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


New level: 12
 pending : [10, 13, 9, 5, 23, 33, 4, 8, 3, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before reduction : 
 pending  : [10, 13, 9, 5, 23, 33, 4, 8, 3, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, -1), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 0), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, 0), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 12 : {8, 33, 3, 23}

After reduction : 
 pending  : [10, 13, 9, 5, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before reduction : 
 pending  : [10, 13, 9, 5, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 0), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, 0), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 13, 9, 5, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


Solution : [0, 12, 1, 6, 14, 31, 7] has cost 41.


Decide in level 12 among pending : [10, 13, 9, 5, 4, 26, 17, 25, 24, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 12

After decision at level 12
 pending : [10, 13, 5, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 9]


New level: 13
 pending : [10, 13, 5, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 9]


Before reduction : 
 pending  : [10, 13, 5, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {4, 5, 10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 7, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 7, 9]


Solution : [0, 12, 1, 6, 14, 31, 7, 9] has cost 47.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 14, 31, 7, 9]

After backtrack at level 13
 pending : [10, 13, 5, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 9]


Invert decision for 9 at level 12


New level: 13
 pending : [10, 13, 5, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before reduction : 
 pending  : [10, 13, 5, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 5, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


Solution : [0, 12, 1, 6, 14, 31, 7] has cost 41.


Decide in level 13 among pending : [10, 13, 5, 4, 26, 17, 25, 24, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [10, 13, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 5]


New level: 14
 pending : [10, 13, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 5]


Before reduction : 
 pending  : [10, 13, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {4, 10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 7, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 7, 5]


Solution : [0, 12, 1, 6, 14, 31, 7, 5] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 14, 31, 7, 5]

After backtrack at level 14
 pending : [10, 13, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [10, 13, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before reduction : 
 pending  : [10, 13, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13, 4, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


Solution : [0, 12, 1, 6, 14, 31, 7] has cost 41.


Decide in level 14 among pending : [10, 13, 4, 26, 17, 25, 24, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 4]


New level: 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 4]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 7, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 7, 4]


Solution : [0, 12, 1, 6, 14, 31, 7, 4] has cost 54.


Before backtrack at level 15
 pending : []
 solution : [0, 12, 1, 6, 14, 31, 7, 4]

After backtrack at level 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


Solution : [0, 12, 1, 6, 14, 31, 7] has cost 41.


Decide in level 15 among pending : [10, 13, 26, 17, 25, 24, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 15

After decision at level 15
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7, 22]


New level: 16
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7, 22]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {17, 24, 25, 26, 27}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 22]


Solution : [0, 12, 1, 6, 14, 31, 7, 22] has cost 75.


Before backtrack at level 16
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 22]

After backtrack at level 16
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7, 22]


Invert decision for 22 at level 15


New level: 16
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7]


Solution : [0, 12, 1, 6, 14, 31, 7] has cost 41.


Decide in level 16 among pending : [10, 13, 26, 17, 25, 24, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 26 with phase True at level 16

After decision at level 16
 pending : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7, 26]


New level: 17
 pending : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7, 26]


Before reduction : 
 pending  : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {24, 17, 27, 25}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 26]


Solution : [0, 12, 1, 6, 14, 31, 7, 26] has cost 75.


Before backtrack at level 17
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 26]

After backtrack at level 17
 pending : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7, 26]


Invert decision for 26 at level 16


New level: 17
 pending : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before reduction : 
 pending  : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 7]

Essensial at level 17 : {27}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {24, 17, 25}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 27]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 27]


Solution : [0, 12, 1, 6, 14, 31, 7, 27] has cost 75.


Before backtrack at level 17
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 7, 27]

After backtrack at level 17
 pending : [10, 13, 27, 17, 25, 24]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before backtrack at level 16
 pending : [10, 13, 27, 17, 25, 24]
 solution : [0, 12, 1, 6, 14, 31, 7]

After backtrack at level 16
 pending : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before backtrack at level 15
 pending : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 7]

After backtrack at level 15
 pending : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before backtrack at level 14
 pending : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 31, 7]

After backtrack at level 14
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before backtrack at level 13
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 31, 7]

After backtrack at level 13
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 31, 7]


Before backtrack at level 12
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 31, 7]

After backtrack at level 12
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 8, 3, 9]
 solution : [0, 12, 1, 6, 14, 31, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 8, 3, 9]
 solution : [0, 12, 1, 6, 14, 31]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 8, 3, 9]
 solution : [0, 12, 1, 6, 14, 31]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, -1), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 8, 3, 9]
 solution : [0, 12, 1, 6, 14, 31]


Solution : [0, 12, 1, 6, 14, 31] has cost 35.


Decide in level 12 among pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 8, 3, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, -1), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 3, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]


New level: 13
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 3, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 3, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, -1), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, 0), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 13 : {33, 3, 23}

After reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, 0), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]


Solution : [0, 12, 1, 6, 14, 31, 8] has cost 41.


Decide in level 13 among pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 31, 8, 4]


New level: 14
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 31, 8, 4]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 31, 8, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {5, 9, 10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 8, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 8, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 8, 4]


Solution : [0, 12, 1, 6, 14, 31, 8, 4] has cost 54.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 14, 31, 8, 4]

After backtrack at level 14
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 31, 8, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]


Solution : [0, 12, 1, 6, 14, 31, 8] has cost 41.


Decide in level 14 among pending : [10, 13, 27, 17, 25, 24, 26, 22, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 14

After decision at level 14
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 31, 8, 5]


New level: 15
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 31, 8, 5]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 31, 8, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {9, 10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 8, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 8, 5]


Solution : [0, 12, 1, 6, 14, 31, 8, 5] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 12, 1, 6, 14, 31, 8, 5]

After backtrack at level 15
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 31, 8, 5]


Invert decision for 5 at level 14


New level: 15
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]


Solution : [0, 12, 1, 6, 14, 31, 8] has cost 41.


Decide in level 15 among pending : [10, 13, 27, 17, 25, 24, 26, 22, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 15

After decision at level 15
 pending : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 31, 8, 9]


New level: 16
 pending : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 31, 8, 9]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 31, 8, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 8, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 31, 8, 9]


Solution : [0, 12, 1, 6, 14, 31, 8, 9] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 12, 1, 6, 14, 31, 8, 9]

After backtrack at level 16
 pending : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 31, 8, 9]


Invert decision for 9 at level 15


New level: 16
 pending : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 31, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 31, 8]


Solution : [0, 12, 1, 6, 14, 31, 8] has cost 41.


Decide in level 16 among pending : [10, 13, 27, 17, 25, 24, 26, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 16

After decision at level 16
 pending : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8, 22]


New level: 17
 pending : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8, 22]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {17, 24, 25, 26, 27}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 22]


Solution : [0, 12, 1, 6, 14, 31, 8, 22] has cost 75.


Before backtrack at level 17
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 22]

After backtrack at level 17
 pending : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8, 22]


Invert decision for 22 at level 16


New level: 17
 pending : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8]


Solution : [0, 12, 1, 6, 14, 31, 8] has cost 41.


Decide in level 17 among pending : [10, 13, 27, 17, 25, 24, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 27 with phase True at level 17

After decision at level 17
 pending : [10, 13, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8, 27]


New level: 18
 pending : [10, 13, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8, 27]


Before reduction : 
 pending  : [10, 13, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8, 27]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {24, 17, 26, 25}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 27]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 27]


Solution : [0, 12, 1, 6, 14, 31, 8, 27] has cost 75.


Before backtrack at level 18
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 27]

After backtrack at level 18
 pending : [10, 13, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8, 27]


Invert decision for 27 at level 17


New level: 18
 pending : [10, 13, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before reduction : 
 pending  : [10, 13, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 31, 8]

Essensial at level 18 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {24, 17, 25}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 26]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 26]


Solution : [0, 12, 1, 6, 14, 31, 8, 26] has cost 75.


Before backtrack at level 18
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 31, 8, 26]

After backtrack at level 18
 pending : [10, 13, 26, 17, 25, 24]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before backtrack at level 17
 pending : [10, 13, 26, 17, 25, 24]
 solution : [0, 12, 1, 6, 14, 31, 8]

After backtrack at level 17
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before backtrack at level 16
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 31, 8]

After backtrack at level 16
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before backtrack at level 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 31, 8]

After backtrack at level 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before backtrack at level 14
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 31, 8]

After backtrack at level 14
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 31, 8]


Before backtrack at level 13
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 31, 8]

After backtrack at level 13
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 23, 33, 3, 4]
 solution : [0, 12, 1, 6, 14, 31, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 23, 33, 3, 4]
 solution : [0, 12, 1, 6, 14, 31]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 23, 33, 3, 4]
 solution : [0, 12, 1, 6, 14, 31]

Essensial at level 13 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, 0), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 13 : {33, 23}

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 31, 3]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 31, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, 0), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 31, 3]


Solution : [0, 12, 1, 6, 14, 31, 3] has cost 48.


Before backtrack at level 13
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 31, 3]

After backtrack at level 13
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 3, 23, 33]
 solution : [0, 12, 1, 6, 14, 31]


Before backtrack at level 12
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 3, 23, 33]
 solution : [0, 12, 1, 6, 14, 31]

After backtrack at level 12
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8]
 solution : [0, 12, 1, 6, 14, 31]


Before backtrack at level 11
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8]
 solution : [0, 12, 1, 6, 14, 31]

After backtrack at level 11
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 32, 20, 30, 7]
 solution : [0, 12, 1, 6, 14, 31]


Invert decision for 31 at level 10


New level: 11
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 32, 20, 30, 7]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 32, 20, 30, 7]
 solution : [0, 12, 1, 6, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, -1), (32, 128), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 32, 20, 30, 7]
 solution : [0, 12, 1, 6, 14]


Solution : [0, 12, 1, 6, 14] has cost 25.


Decide in level 11 among pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 3, 23, 33, 8, 32, 20, 30, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, -1), (32, 128), (33, 32)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 23, 33, 8, 32, 20, 30, 7]
 solution : [0, 12, 1, 6, 14, 3]


New level: 12
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 23, 33, 8, 32, 20, 30, 7]
 solution : [0, 12, 1, 6, 14, 3]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 23, 33, 8, 32, 20, 30, 7]
 solution : [0, 12, 1, 6, 14, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, -1), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 0), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, 0)]

Covered at level 12 : {8, 33, 7, 23}

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 0), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Solution : [0, 12, 1, 6, 14, 3] has cost 38.


Decide in level 12 among pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4, 32, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Decide 24 with phase True at level 12

After decision at level 12
 pending : [10, 13, 26, 17, 25, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 24]


New level: 13
 pending : [10, 13, 26, 17, 25, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 24]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 24]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, 4), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 24]


Solution : [0, 12, 1, 6, 14, 3, 24] has cost 48.


Before backtrack at level 13
 pending : [10, 13, 26, 17, 25, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 24]

After backtrack at level 13
 pending : [10, 13, 26, 17, 25, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 24]


Invert decision for 24 at level 12


New level: 13
 pending : [10, 13, 26, 17, 25, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 9, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Solution : [0, 12, 1, 6, 14, 3] has cost 38.


Decide in level 13 among pending : [10, 13, 26, 17, 25, 27, 22, 9, 5, 4, 32, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [10, 13, 26, 17, 25, 27, 22, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 9]


New level: 14
 pending : [10, 13, 26, 17, 25, 27, 22, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 9]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 14 : {32, 4, 5, 10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 3, 9]


Solution : [0, 12, 1, 6, 14, 3, 9] has cost 44.


Before backtrack at level 14
 pending : []
 solution : [0, 12, 1, 6, 14, 3, 9]

After backtrack at level 14
 pending : [10, 13, 26, 17, 25, 27, 22, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [10, 13, 26, 17, 25, 27, 22, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 5, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Solution : [0, 12, 1, 6, 14, 3] has cost 38.


Decide in level 14 among pending : [10, 13, 26, 17, 25, 27, 22, 5, 4, 32, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Decide 5 with phase True at level 14

After decision at level 14
 pending : [10, 13, 26, 17, 25, 27, 22, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 5]


New level: 15
 pending : [10, 13, 26, 17, 25, 27, 22, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 5]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 15 : {32, 4, 10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 3, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 3, 5]


Solution : [0, 12, 1, 6, 14, 3, 5] has cost 44.


Before backtrack at level 15
 pending : []
 solution : [0, 12, 1, 6, 14, 3, 5]

After backtrack at level 15
 pending : [10, 13, 26, 17, 25, 27, 22, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 5]


Invert decision for 5 at level 14


New level: 15
 pending : [10, 13, 26, 17, 25, 27, 22, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 4, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Solution : [0, 12, 1, 6, 14, 3] has cost 38.


Decide in level 15 among pending : [10, 13, 26, 17, 25, 27, 22, 4, 32, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Decide 4 with phase True at level 15

After decision at level 15
 pending : [10, 13, 26, 17, 25, 27, 22, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 4]


New level: 16
 pending : [10, 13, 26, 17, 25, 27, 22, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 4]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 16 : {32, 10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 3, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 3, 4]


Solution : [0, 12, 1, 6, 14, 3, 4] has cost 51.


Before backtrack at level 16
 pending : []
 solution : [0, 12, 1, 6, 14, 3, 4]

After backtrack at level 16
 pending : [10, 13, 26, 17, 25, 27, 22, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 4]


Invert decision for 4 at level 15


New level: 16
 pending : [10, 13, 26, 17, 25, 27, 22, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 22, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Solution : [0, 12, 1, 6, 14, 3] has cost 38.


Decide in level 16 among pending : [10, 13, 26, 17, 25, 27, 22, 32, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Decide 22 with phase True at level 16

After decision at level 16
 pending : [10, 13, 26, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 22]


New level: 17
 pending : [10, 13, 26, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 22]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 17 : {32, 17, 20, 25, 26, 27, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 22]


Solution : [0, 12, 1, 6, 14, 3, 22] has cost 72.


Before backtrack at level 17
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 22]

After backtrack at level 17
 pending : [10, 13, 26, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 22]


Invert decision for 22 at level 16


New level: 17
 pending : [10, 13, 26, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Solution : [0, 12, 1, 6, 14, 3] has cost 38.


Decide in level 17 among pending : [10, 13, 26, 17, 25, 27, 32, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

Decide 26 with phase True at level 17

After decision at level 17
 pending : [10, 13, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 26]


New level: 18
 pending : [10, 13, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 26]


Before reduction : 
 pending  : [10, 13, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 26]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 18 : {32, 17, 20, 25, 27, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 26]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 26]


Solution : [0, 12, 1, 6, 14, 3, 26] has cost 72.


Before backtrack at level 18
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 26]

After backtrack at level 18
 pending : [10, 13, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3, 26]


Invert decision for 26 at level 17


New level: 18
 pending : [10, 13, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Before reduction : 
 pending  : [10, 13, 17, 25, 27, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]

Essensial at level 18 : {27}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

Covered at level 18 : {32, 17, 20, 25, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 27]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 27]


Solution : [0, 12, 1, 6, 14, 3, 27] has cost 72.


Before backtrack at level 18
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 3, 27]

After backtrack at level 18
 pending : [10, 13, 27, 17, 25, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]


Before backtrack at level 17
 pending : [10, 13, 27, 17, 25, 32, 20, 30]
 solution : [0, 12, 1, 6, 14, 3]

After backtrack at level 17
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 3]


Before backtrack at level 16
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 3]

After backtrack at level 16
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 3]


Before backtrack at level 15
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 3]

After backtrack at level 15
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 3]


Before backtrack at level 14
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 3]

After backtrack at level 14
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 3]


Before backtrack at level 13
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 3]

After backtrack at level 13
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 3]


Before backtrack at level 12
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 3]

After backtrack at level 12
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, -1), (32, 128), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14]


Solution : [0, 12, 1, 6, 14] has cost 25.


Decide in level 12 among pending : [10, 13, 27, 17, 25, 32, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, -1), (32, 128), (33, 32)]

Decide 32 with phase True at level 12

After decision at level 12
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14, 32]


New level: 13
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14, 32]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14, 32]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, -1), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 0), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 8)]

Covered at level 13 : {20, 30}

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14, 32]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14, 32]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 0), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, -1), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]
 solution : [0, 12, 1, 6, 14, 32]


Solution : [0, 12, 1, 6, 14, 32] has cost 35.


Decide in level 13 among pending : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 23, 33, 8, 7, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, -1), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 23, 33, 7, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


New level: 14
 pending : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 23, 33, 7, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 23, 33, 7, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, -1), (21, -1), (22, 56), (23, 8), (24, 2), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, 0), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {33, 7, 23}

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, 0), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Solution : [0, 12, 1, 6, 14, 32, 8] has cost 41.


Decide in level 14 among pending : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [10, 13, 27, 17, 25, 26, 22, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 4]


New level: 15
 pending : [10, 13, 27, 17, 25, 26, 22, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 4]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {5, 9, 10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 8, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 8, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 8, 4]


Solution : [0, 12, 1, 6, 14, 32, 8, 4] has cost 54.


Before backtrack at level 15
 pending : []
 solution : [0, 12, 1, 6, 14, 32, 8, 4]

After backtrack at level 15
 pending : [10, 13, 27, 17, 25, 26, 22, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [10, 13, 27, 17, 25, 26, 22, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Solution : [0, 12, 1, 6, 14, 32, 8] has cost 41.


Decide in level 15 among pending : [10, 13, 27, 17, 25, 26, 22, 5, 9, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [10, 13, 27, 17, 25, 26, 22, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 5]


New level: 16
 pending : [10, 13, 27, 17, 25, 26, 22, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 5]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {9, 10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 8, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 8, 5]


Solution : [0, 12, 1, 6, 14, 32, 8, 5] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 12, 1, 6, 14, 32, 8, 5]

After backtrack at level 16
 pending : [10, 13, 27, 17, 25, 26, 22, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [10, 13, 27, 17, 25, 26, 22, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 9, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Solution : [0, 12, 1, 6, 14, 32, 8] has cost 41.


Decide in level 16 among pending : [10, 13, 27, 17, 25, 26, 22, 9, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 16

After decision at level 16
 pending : [10, 13, 27, 17, 25, 26, 22, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 9]


New level: 17
 pending : [10, 13, 27, 17, 25, 26, 22, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 9]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 8, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 8, 9]


Solution : [0, 12, 1, 6, 14, 32, 8, 9] has cost 47.


Before backtrack at level 17
 pending : []
 solution : [0, 12, 1, 6, 14, 32, 8, 9]

After backtrack at level 17
 pending : [10, 13, 27, 17, 25, 26, 22, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 9]


Invert decision for 9 at level 16


New level: 17
 pending : [10, 13, 27, 17, 25, 26, 22, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Solution : [0, 12, 1, 6, 14, 32, 8] has cost 41.


Decide in level 17 among pending : [10, 13, 27, 17, 25, 26, 22, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 17

After decision at level 17
 pending : [10, 13, 27, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 22]


New level: 18
 pending : [10, 13, 27, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 22]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {17, 24, 25, 26, 27}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 22]


Solution : [0, 12, 1, 6, 14, 32, 8, 22] has cost 75.


Before backtrack at level 18
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 22]

After backtrack at level 18
 pending : [10, 13, 27, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 22]


Invert decision for 22 at level 17


New level: 18
 pending : [10, 13, 27, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Solution : [0, 12, 1, 6, 14, 32, 8] has cost 41.


Decide in level 18 among pending : [10, 13, 27, 17, 25, 26, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 27 with phase True at level 18

After decision at level 18
 pending : [10, 13, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 27]


New level: 19
 pending : [10, 13, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 27]


Before reduction : 
 pending  : [10, 13, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 27]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {24, 17, 26, 25}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 27]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 27]


Solution : [0, 12, 1, 6, 14, 32, 8, 27] has cost 75.


Before backtrack at level 19
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 27]

After backtrack at level 19
 pending : [10, 13, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8, 27]


Invert decision for 27 at level 18


New level: 19
 pending : [10, 13, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before reduction : 
 pending  : [10, 13, 17, 25, 26, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]

Essensial at level 19 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {24, 17, 25}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 26]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 26]


Solution : [0, 12, 1, 6, 14, 32, 8, 26] has cost 75.


Before backtrack at level 19
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 8, 26]

After backtrack at level 19
 pending : [10, 13, 26, 17, 25, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before backtrack at level 18
 pending : [10, 13, 26, 17, 25, 24]
 solution : [0, 12, 1, 6, 14, 32, 8]

After backtrack at level 18
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before backtrack at level 17
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 8]

After backtrack at level 17
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before backtrack at level 16
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 32, 8]

After backtrack at level 16
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before backtrack at level 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 32, 8]

After backtrack at level 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 32, 8]


Before backtrack at level 14
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 32, 8]

After backtrack at level 14
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 23, 33, 7, 4]
 solution : [0, 12, 1, 6, 14, 32, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 23, 33, 7, 4]
 solution : [0, 12, 1, 6, 14, 32]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 23, 33, 7, 4]
 solution : [0, 12, 1, 6, 14, 32]

Essensial at level 14 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, 0), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {33, 23}

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, 0), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]


Solution : [0, 12, 1, 6, 14, 32, 7] has cost 41.


Decide in level 14 among pending : [10, 13, 26, 17, 25, 24, 27, 22, 9, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 14

After decision at level 14
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 32, 7, 9]


New level: 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 32, 7, 9]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 32, 7, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {4, 5, 10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 7, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 7, 9]


Solution : [0, 12, 1, 6, 14, 32, 7, 9] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 12, 1, 6, 14, 32, 7, 9]

After backtrack at level 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 32, 7, 9]


Invert decision for 9 at level 14


New level: 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]


Solution : [0, 12, 1, 6, 14, 32, 7] has cost 41.


Decide in level 15 among pending : [10, 13, 26, 17, 25, 24, 27, 22, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 32, 7, 5]


New level: 16
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 32, 7, 5]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 32, 7, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {4, 10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 7, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 7, 5]


Solution : [0, 12, 1, 6, 14, 32, 7, 5] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 12, 1, 6, 14, 32, 7, 5]

After backtrack at level 16
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 32, 7, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [10, 13, 26, 17, 25, 24, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]


Solution : [0, 12, 1, 6, 14, 32, 7] has cost 41.


Decide in level 16 among pending : [10, 13, 26, 17, 25, 24, 27, 22, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 16

After decision at level 16
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 32, 7, 4]


New level: 17
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 32, 7, 4]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 32, 7, 4]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {10, 13, 17, 22, 24, 25, 26, 27}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 7, 4]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 32, 7, 4]


Solution : [0, 12, 1, 6, 14, 32, 7, 4] has cost 54.


Before backtrack at level 17
 pending : []
 solution : [0, 12, 1, 6, 14, 32, 7, 4]

After backtrack at level 17
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 32, 7, 4]


Invert decision for 4 at level 16


New level: 17
 pending : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 32, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27, 22]
 solution : [0, 12, 1, 6, 14, 32, 7]


Solution : [0, 12, 1, 6, 14, 32, 7] has cost 41.


Decide in level 17 among pending : [10, 13, 26, 17, 25, 24, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 17

After decision at level 17
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7, 22]


New level: 18
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7, 22]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 18), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {17, 24, 25, 26, 27}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 22]


Solution : [0, 12, 1, 6, 14, 32, 7, 22] has cost 75.


Before backtrack at level 18
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 22]

After backtrack at level 18
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7, 22]


Invert decision for 22 at level 17


New level: 18
 pending : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7]


Solution : [0, 12, 1, 6, 14, 32, 7] has cost 41.


Decide in level 18 among pending : [10, 13, 26, 17, 25, 24, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 26 with phase True at level 18

After decision at level 18
 pending : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7, 26]


New level: 19
 pending : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7, 26]


Before reduction : 
 pending  : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7, 26]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, -1), (13, 8), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {24, 17, 27, 25}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 26]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 26]


Solution : [0, 12, 1, 6, 14, 32, 7, 26] has cost 75.


Before backtrack at level 19
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 26]

After backtrack at level 19
 pending : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7, 26]


Invert decision for 26 at level 18


New level: 19
 pending : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before reduction : 
 pending  : [10, 13, 17, 25, 24, 27]
 solution : [0, 12, 1, 6, 14, 32, 7]

Essensial at level 19 : {27}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {24, 17, 25}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 27]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 27]


Solution : [0, 12, 1, 6, 14, 32, 7, 27] has cost 75.


Before backtrack at level 19
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 32, 7, 27]

After backtrack at level 19
 pending : [10, 13, 27, 17, 25, 24]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before backtrack at level 18
 pending : [10, 13, 27, 17, 25, 24]
 solution : [0, 12, 1, 6, 14, 32, 7]

After backtrack at level 18
 pending : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before backtrack at level 17
 pending : [10, 13, 27, 17, 25, 24, 26]
 solution : [0, 12, 1, 6, 14, 32, 7]

After backtrack at level 17
 pending : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before backtrack at level 16
 pending : [10, 13, 27, 17, 25, 24, 26, 22]
 solution : [0, 12, 1, 6, 14, 32, 7]

After backtrack at level 16
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before backtrack at level 15
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 32, 7]

After backtrack at level 15
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 32, 7]


Before backtrack at level 14
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 32, 7]

After backtrack at level 14
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 7, 23, 33, 9]
 solution : [0, 12, 1, 6, 14, 32]


Before backtrack at level 13
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 7, 23, 33, 9]
 solution : [0, 12, 1, 6, 14, 32]

After backtrack at level 13
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 7, 23, 33, 9, 20, 30, 8]
 solution : [0, 12, 1, 6, 14, 32]


Invert decision for 32 at level 12


New level: 13
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 7, 23, 33, 9, 20, 30, 8]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 7, 23, 33, 9, 20, 30, 8]
 solution : [0, 12, 1, 6, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 7, 23, 33, 9, 20, 30, 8]
 solution : [0, 12, 1, 6, 14]


Solution : [0, 12, 1, 6, 14] has cost 25.


Decide in level 13 among pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 7, 23, 33, 9, 20, 30, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 32)]

Decide 7 with phase True at level 13

After decision at level 13
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 9, 20, 30, 8]
 solution : [0, 12, 1, 6, 14, 7]


New level: 14
 pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 9, 20, 30, 8]
 solution : [0, 12, 1, 6, 14, 7]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 23, 33, 9, 20, 30, 8]
 solution : [0, 12, 1, 6, 14, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 128), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 66), (18, -1), (19, -1), (20, 8), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 0), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {8, 33, 23}

After reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 0), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7]


Solution : [0, 12, 1, 6, 14, 7] has cost 31.


Decide in level 14 among pending : [10, 13, 27, 17, 25, 24, 26, 22, 4, 5, 9, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 24 with phase True at level 14

After decision at level 14
 pending : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


New level: 15
 pending : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Solution : [0, 12, 1, 6, 14, 7, 24] has cost 41.


Decide in level 15 among pending : [10, 13, 27, 17, 25, 26, 22, 4, 5, 9, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 15

After decision at level 15
 pending : [10, 13, 27, 17, 25, 26, 22, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 4]


New level: 16
 pending : [10, 13, 27, 17, 25, 26, 22, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 4]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {5, 9, 10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 24, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 24, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 24, 4]


Solution : [0, 12, 1, 6, 14, 7, 24, 4] has cost 54.


Before backtrack at level 16
 pending : []
 solution : [0, 12, 1, 6, 14, 7, 24, 4]

After backtrack at level 16
 pending : [10, 13, 27, 17, 25, 26, 22, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 4]


Invert decision for 4 at level 15


New level: 16
 pending : [10, 13, 27, 17, 25, 26, 22, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 5, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Solution : [0, 12, 1, 6, 14, 7, 24] has cost 41.


Decide in level 16 among pending : [10, 13, 27, 17, 25, 26, 22, 5, 9, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [10, 13, 27, 17, 25, 26, 22, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 5]


New level: 17
 pending : [10, 13, 27, 17, 25, 26, 22, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 5]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {9, 10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 24, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 24, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 24, 5]


Solution : [0, 12, 1, 6, 14, 7, 24, 5] has cost 47.


Before backtrack at level 17
 pending : []
 solution : [0, 12, 1, 6, 14, 7, 24, 5]

After backtrack at level 17
 pending : [10, 13, 27, 17, 25, 26, 22, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [10, 13, 27, 17, 25, 26, 22, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 9, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Solution : [0, 12, 1, 6, 14, 7, 24] has cost 41.


Decide in level 17 among pending : [10, 13, 27, 17, 25, 26, 22, 9, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 17

After decision at level 17
 pending : [10, 13, 27, 17, 25, 26, 22, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 9]


New level: 18
 pending : [10, 13, 27, 17, 25, 26, 22, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 9]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 9]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 24, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 24, 9]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 24, 9]


Solution : [0, 12, 1, 6, 14, 7, 24, 9] has cost 47.


Before backtrack at level 18
 pending : []
 solution : [0, 12, 1, 6, 14, 7, 24, 9]

After backtrack at level 18
 pending : [10, 13, 27, 17, 25, 26, 22, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 9]


Invert decision for 9 at level 17


New level: 18
 pending : [10, 13, 27, 17, 25, 26, 22, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 22, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Solution : [0, 12, 1, 6, 14, 7, 24] has cost 41.


Decide in level 18 among pending : [10, 13, 27, 17, 25, 26, 22, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 18

After decision at level 18
 pending : [10, 13, 27, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 22]


New level: 19
 pending : [10, 13, 27, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 22]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {17, 20, 25, 26, 27, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 22]


Solution : [0, 12, 1, 6, 14, 7, 24, 22] has cost 75.


Before backtrack at level 19
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 22]

After backtrack at level 19
 pending : [10, 13, 27, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 22]


Invert decision for 22 at level 18


New level: 19
 pending : [10, 13, 27, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Solution : [0, 12, 1, 6, 14, 7, 24] has cost 41.


Decide in level 19 among pending : [10, 13, 27, 17, 25, 26, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Decide 27 with phase True at level 19

After decision at level 19
 pending : [10, 13, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 27]


New level: 20
 pending : [10, 13, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 27]


Before reduction : 
 pending  : [10, 13, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 27]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {17, 20, 25, 26, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 27]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 27]


Solution : [0, 12, 1, 6, 14, 7, 24, 27] has cost 75.


Before backtrack at level 20
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 27]

After backtrack at level 20
 pending : [10, 13, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24, 27]


Invert decision for 27 at level 19


New level: 20
 pending : [10, 13, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before reduction : 
 pending  : [10, 13, 17, 25, 26, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]

Essensial at level 20 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {17, 20, 25, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 26]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 26]


Solution : [0, 12, 1, 6, 14, 7, 24, 26] has cost 75.


Before backtrack at level 20
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 24, 26]

After backtrack at level 20
 pending : [10, 13, 26, 17, 25, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before backtrack at level 19
 pending : [10, 13, 26, 17, 25, 20, 30]
 solution : [0, 12, 1, 6, 14, 7, 24]

After backtrack at level 19
 pending : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before backtrack at level 18
 pending : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7, 24]

After backtrack at level 18
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before backtrack at level 17
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 7, 24]

After backtrack at level 17
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before backtrack at level 16
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 7, 24]

After backtrack at level 16
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 7, 24]


Before backtrack at level 15
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 7, 24]

After backtrack at level 15
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 7, 24]


Invert decision for 24 at level 14


New level: 15
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 7]


Solution : [0, 12, 1, 6, 14, 7] has cost 31.


Decide in level 15 among pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 15

After decision at level 15
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 7, 9]


New level: 16
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 7, 9]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 7, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {4, 5, 10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 9]


Solution : [0, 12, 1, 6, 14, 7, 9] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 12, 1, 6, 14, 7, 9]

After backtrack at level 16
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 7, 9]


Invert decision for 9 at level 15


New level: 16
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 5, 4]
 solution : [0, 12, 1, 6, 14, 7]


Solution : [0, 12, 1, 6, 14, 7] has cost 31.


Decide in level 16 among pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 7, 5]


New level: 17
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 7, 5]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 7, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {4, 10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 5]


Solution : [0, 12, 1, 6, 14, 7, 5] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 12, 1, 6, 14, 7, 5]

After backtrack at level 17
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 7, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 4]
 solution : [0, 12, 1, 6, 14, 7]


Solution : [0, 12, 1, 6, 14, 7] has cost 31.


Decide in level 17 among pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 17

After decision at level 17
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 7, 4]


New level: 18
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 7, 4]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 7, 4]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 4]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 7, 4]


Solution : [0, 12, 1, 6, 14, 7, 4] has cost 44.


Before backtrack at level 18
 pending : []
 solution : [0, 12, 1, 6, 14, 7, 4]

After backtrack at level 18
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 7, 4]


Invert decision for 4 at level 17


New level: 18
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 7]


Solution : [0, 12, 1, 6, 14, 7] has cost 31.


Decide in level 18 among pending : [10, 13, 26, 17, 25, 20, 30, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 18

After decision at level 18
 pending : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7, 22]


New level: 19
 pending : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7, 22]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {17, 20, 25, 26, 27, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 22]


Solution : [0, 12, 1, 6, 14, 7, 22] has cost 65.


Before backtrack at level 19
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 22]

After backtrack at level 19
 pending : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7, 22]


Invert decision for 22 at level 18


New level: 19
 pending : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7]


Solution : [0, 12, 1, 6, 14, 7] has cost 31.


Decide in level 19 among pending : [10, 13, 26, 17, 25, 20, 30, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 26 with phase True at level 19

After decision at level 19
 pending : [10, 13, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7, 26]


New level: 20
 pending : [10, 13, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7, 26]


Before reduction : 
 pending  : [10, 13, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7, 26]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {17, 20, 25, 27, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 26]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 26]


Solution : [0, 12, 1, 6, 14, 7, 26] has cost 65.


Before backtrack at level 20
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 26]

After backtrack at level 20
 pending : [10, 13, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7, 26]


Invert decision for 26 at level 19


New level: 20
 pending : [10, 13, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7]


Before reduction : 
 pending  : [10, 13, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 7]

Essensial at level 20 : {27}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {17, 20, 25, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 27]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 27]


Solution : [0, 12, 1, 6, 14, 7, 27] has cost 65.


Before backtrack at level 20
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 7, 27]

After backtrack at level 20
 pending : [10, 13, 27, 17, 25, 20, 30]
 solution : [0, 12, 1, 6, 14, 7]


Before backtrack at level 19
 pending : [10, 13, 27, 17, 25, 20, 30]
 solution : [0, 12, 1, 6, 14, 7]

After backtrack at level 19
 pending : [10, 13, 27, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 7]


Before backtrack at level 18
 pending : [10, 13, 27, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 7]

After backtrack at level 18
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 7]


Before backtrack at level 17
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 7]

After backtrack at level 17
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 7]


Before backtrack at level 16
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4]
 solution : [0, 12, 1, 6, 14, 7]

After backtrack at level 16
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 7]


Before backtrack at level 15
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5]
 solution : [0, 12, 1, 6, 14, 7]

After backtrack at level 15
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 7]


Before backtrack at level 14
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 7]

After backtrack at level 14
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 24]
 solution : [0, 12, 1, 6, 14, 7]


Invert decision for 7 at level 13


New level: 14
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 24]
 solution : [0, 12, 1, 6, 14]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9, 23, 33, 8, 24]
 solution : [0, 12, 1, 6, 14]

Essensial at level 14 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {33, 23}

After reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9, 24]
 solution : [0, 12, 1, 6, 14, 8]


Solution : [0, 12, 1, 6, 14, 8] has cost 31.


Decide in level 14 among pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 24 with phase True at level 14

After decision at level 14
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 8, 24]


New level: 15
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 8, 24]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 8, 24]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 8, 24]


Solution : [0, 12, 1, 6, 14, 8, 24] has cost 41.


Before backtrack at level 15
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 8, 24]

After backtrack at level 15
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 8, 24]


Invert decision for 24 at level 14


New level: 15
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]
 solution : [0, 12, 1, 6, 14, 8]


Solution : [0, 12, 1, 6, 14, 8] has cost 31.


Decide in level 15 among pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 4, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 15

After decision at level 15
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 8, 4]


New level: 16
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 8, 4]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 8, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {5, 9, 10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 8, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 8, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 8, 4]


Solution : [0, 12, 1, 6, 14, 8, 4] has cost 44.


Before backtrack at level 16
 pending : []
 solution : [0, 12, 1, 6, 14, 8, 4]

After backtrack at level 16
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 8, 4]


Invert decision for 4 at level 15


New level: 16
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 5, 9]
 solution : [0, 12, 1, 6, 14, 8]


Solution : [0, 12, 1, 6, 14, 8] has cost 31.


Decide in level 16 among pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 5, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 8, 5]


New level: 17
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 8, 5]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 8, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {9, 10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 8, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 8, 5]


Solution : [0, 12, 1, 6, 14, 8, 5] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 12, 1, 6, 14, 8, 5]

After backtrack at level 17
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 8, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22, 9]
 solution : [0, 12, 1, 6, 14, 8]


Solution : [0, 12, 1, 6, 14, 8] has cost 31.


Decide in level 17 among pending : [10, 13, 27, 17, 25, 20, 30, 26, 22, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 17

After decision at level 17
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 8, 9]


New level: 18
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 8, 9]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 8, 9]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {10, 13, 17, 20, 22, 25, 26, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 8, 9]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 14, 8, 9]


Solution : [0, 12, 1, 6, 14, 8, 9] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 12, 1, 6, 14, 8, 9]

After backtrack at level 18
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 8, 9]


Invert decision for 9 at level 17


New level: 18
 pending : [10, 13, 27, 17, 25, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 8]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 14, 8]


Solution : [0, 12, 1, 6, 14, 8] has cost 31.


Decide in level 18 among pending : [10, 13, 27, 17, 25, 20, 30, 26, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 18

After decision at level 18
 pending : [10, 13, 27, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8, 22]


New level: 19
 pending : [10, 13, 27, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8, 22]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {17, 20, 25, 26, 27, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 22]


Solution : [0, 12, 1, 6, 14, 8, 22] has cost 65.


Before backtrack at level 19
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 22]

After backtrack at level 19
 pending : [10, 13, 27, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8, 22]


Invert decision for 22 at level 18


New level: 19
 pending : [10, 13, 27, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8]


Solution : [0, 12, 1, 6, 14, 8] has cost 31.


Decide in level 19 among pending : [10, 13, 27, 17, 25, 20, 30, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 27 with phase True at level 19

After decision at level 19
 pending : [10, 13, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8, 27]


New level: 20
 pending : [10, 13, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8, 27]


Before reduction : 
 pending  : [10, 13, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8, 27]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {17, 20, 25, 26, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 27]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 27]


Solution : [0, 12, 1, 6, 14, 8, 27] has cost 65.


Before backtrack at level 20
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 27]

After backtrack at level 20
 pending : [10, 13, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8, 27]


Invert decision for 27 at level 19


New level: 20
 pending : [10, 13, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8]


Before reduction : 
 pending  : [10, 13, 17, 25, 20, 30, 26]
 solution : [0, 12, 1, 6, 14, 8]

Essensial at level 20 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {17, 20, 25, 30}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 26]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 26]


Solution : [0, 12, 1, 6, 14, 8, 26] has cost 65.


Before backtrack at level 20
 pending : [10, 13]
 solution : [0, 12, 1, 6, 14, 8, 26]

After backtrack at level 20
 pending : [10, 13, 26, 17, 25, 20, 30]
 solution : [0, 12, 1, 6, 14, 8]


Before backtrack at level 19
 pending : [10, 13, 26, 17, 25, 20, 30]
 solution : [0, 12, 1, 6, 14, 8]

After backtrack at level 19
 pending : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 8]


Before backtrack at level 18
 pending : [10, 13, 26, 17, 25, 20, 30, 27]
 solution : [0, 12, 1, 6, 14, 8]

After backtrack at level 18
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 8]


Before backtrack at level 17
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 14, 8]

After backtrack at level 17
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 8]


Before backtrack at level 16
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9]
 solution : [0, 12, 1, 6, 14, 8]

After backtrack at level 16
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 8]


Before backtrack at level 15
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5]
 solution : [0, 12, 1, 6, 14, 8]

After backtrack at level 15
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 8]


Before backtrack at level 14
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4]
 solution : [0, 12, 1, 6, 14, 8]

After backtrack at level 14
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24]
 solution : [0, 12, 1, 6, 14]


Before backtrack at level 13
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24]
 solution : [0, 12, 1, 6, 14]

After backtrack at level 13
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7]
 solution : [0, 12, 1, 6, 14]


Before backtrack at level 12
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7]
 solution : [0, 12, 1, 6, 14]

After backtrack at level 12
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32]
 solution : [0, 12, 1, 6, 14]


Before backtrack at level 11
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32]
 solution : [0, 12, 1, 6, 14]

After backtrack at level 11
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3]
 solution : [0, 12, 1, 6, 14]


Before backtrack at level 10
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3]
 solution : [0, 12, 1, 6, 14]

After backtrack at level 10
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31]
 solution : [0, 12, 1, 6, 14]


Before backtrack at level 9
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31]
 solution : [0, 12, 1, 6, 14]

After backtrack at level 9
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29]
 solution : [0, 12, 1, 6, 14]


Before backtrack at level 8
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29]
 solution : [0, 12, 1, 6, 14]

After backtrack at level 8
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28]
 solution : [0, 12, 1, 6, 14]


Before backtrack at level 7
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28]
 solution : [0, 12, 1, 6, 14]

After backtrack at level 7
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16]
 solution : [0, 12, 1, 6, 14]


Before backtrack at level 6
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16]
 solution : [0, 12, 1, 6, 14]

After backtrack at level 6
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16, 18]
 solution : [0, 12, 1, 6, 14]


Before backtrack at level 5
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16, 18]
 solution : [0, 12, 1, 6, 14]

After backtrack at level 5
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16, 18, 15, 11, 19]
 solution : [0, 12, 1, 6, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16, 18, 15, 11, 19]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16, 18, 15, 11, 19]
 solution : [0, 12, 1, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16, 18, 15, 11, 19]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 5 among pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16, 18, 15, 11, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Decide 19 with phase True at level 5

After decision at level 5
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16, 18, 15, 11]
 solution : [0, 12, 1, 6, 19]


New level: 6
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16, 18, 15, 11]
 solution : [0, 12, 1, 6, 19]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 24, 7, 32, 3, 31, 29, 28, 16, 18, 15, 11]
 solution : [0, 12, 1, 6, 19]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 192), (17, 66), (18, 192), (19, 208), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 0), (17, 16), (18, 10), (19, -1), (20, 4), (21, -1), (22, 41), (23, 32), (24, 0), (25, 16), (26, 40), (27, 40), (28, 10), (29, 48), (30, 4), (31, 32), (32, 32), (33, 32)]

Covered at level 6 : {24, 16}

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 28, 18, 15, 11]
 solution : [0, 12, 1, 6, 19]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 28, 18, 15, 11]
 solution : [0, 12, 1, 6, 19]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 0), (17, 16), (18, 10), (19, -1), (20, 4), (21, -1), (22, 41), (23, 32), (24, 0), (25, 16), (26, 40), (27, 40), (28, 10), (29, 48), (30, 4), (31, 32), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 16), (18, 10), (19, -1), (20, 4), (21, -1), (22, 41), (23, 32), (24, -1), (25, 16), (26, 40), (27, 40), (28, 10), (29, 48), (30, 4), (31, 32), (32, 32), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 28, 18, 15, 11]
 solution : [0, 12, 1, 6, 19]


Solution : [0, 12, 1, 6, 19] has cost 54.


Before backtrack at level 6
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 28, 18, 15, 11]
 solution : [0, 12, 1, 6, 19]

After backtrack at level 6
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 28, 18, 15, 11, 24, 16]
 solution : [0, 12, 1, 6, 19]


Invert decision for 19 at level 5


New level: 6
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 28, 18, 15, 11, 24, 16]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 28, 18, 15, 11, 24, 16]
 solution : [0, 12, 1, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 16), (18, 10), (19, -1), (20, 4), (21, -1), (22, 41), (23, 32), (24, -1), (25, 16), (26, 40), (27, 40), (28, 10), (29, 48), (30, 4), (31, 32), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 192), (17, 66), (18, 192), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 28, 18, 15, 11, 24, 16]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 6 among pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 28, 18, 15, 11, 24, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 192), (17, 66), (18, 192), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Decide 28 with phase True at level 6

After decision at level 6
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 18, 15, 11, 24, 16]
 solution : [0, 12, 1, 6, 28]


New level: 7
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 18, 15, 11, 24, 16]
 solution : [0, 12, 1, 6, 28]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 18, 15, 11, 24, 16]
 solution : [0, 12, 1, 6, 28]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 192), (17, 66), (18, 192), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, 192), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 48), (17, 18), (18, 0), (19, -1), (20, 32), (21, -1), (22, 89), (23, 8), (24, 16), (25, 24), (26, 72), (27, 72), (28, -1), (29, 97), (30, 32), (31, 32), (32, 32), (33, 8)]

Covered at level 7 : {18}

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 16]
 solution : [0, 12, 1, 6, 28]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 16]
 solution : [0, 12, 1, 6, 28]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 48), (17, 18), (18, 0), (19, -1), (20, 32), (21, -1), (22, 89), (23, 8), (24, 16), (25, 24), (26, 72), (27, 72), (28, -1), (29, 97), (30, 32), (31, 32), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 48), (17, 18), (18, -1), (19, -1), (20, 32), (21, -1), (22, 89), (23, 8), (24, 16), (25, 24), (26, 72), (27, 72), (28, -1), (29, 97), (30, 32), (31, 32), (32, 32), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 16]
 solution : [0, 12, 1, 6, 28]


Solution : [0, 12, 1, 6, 28] has cost 39.


Before backtrack at level 7
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 16]
 solution : [0, 12, 1, 6, 28]

After backtrack at level 7
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 16, 18]
 solution : [0, 12, 1, 6, 28]


Invert decision for 28 at level 6


New level: 7
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 16, 18]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 16, 18]
 solution : [0, 12, 1, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 48), (17, 18), (18, -1), (19, -1), (20, 32), (21, -1), (22, 89), (23, 8), (24, 16), (25, 24), (26, 72), (27, 72), (28, -1), (29, 97), (30, 32), (31, 32), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 192), (17, 66), (18, 192), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 16, 18]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 7 among pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 16, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 192), (17, 66), (18, 192), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 18]
 solution : [0, 12, 1, 6, 16]


New level: 8
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 18]
 solution : [0, 12, 1, 6, 16]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24, 18]
 solution : [0, 12, 1, 6, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, 192), (17, 66), (18, 192), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 16), (18, 10), (19, -1), (20, 4), (21, -1), (22, 41), (23, 32), (24, 0), (25, 16), (26, 40), (27, 40), (28, -1), (29, 48), (30, 4), (31, 128), (32, 128), (33, 32)]

Covered at level 8 : {24}

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 18]
 solution : [0, 12, 1, 6, 16]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 18]
 solution : [0, 12, 1, 6, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 16), (18, 10), (19, -1), (20, 4), (21, -1), (22, 41), (23, 32), (24, 0), (25, 16), (26, 40), (27, 40), (28, -1), (29, 48), (30, 4), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 16), (18, 10), (19, -1), (20, 4), (21, -1), (22, 41), (23, 32), (24, -1), (25, 16), (26, 40), (27, 40), (28, -1), (29, 48), (30, 4), (31, 128), (32, 128), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 18]
 solution : [0, 12, 1, 6, 16]


Solution : [0, 12, 1, 6, 16] has cost 54.


Before backtrack at level 8
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 18]
 solution : [0, 12, 1, 6, 16]

After backtrack at level 8
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 18, 24]
 solution : [0, 12, 1, 6, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 18, 24]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 18, 24]
 solution : [0, 12, 1, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 16), (18, 10), (19, -1), (20, 4), (21, -1), (22, 41), (23, 32), (24, -1), (25, 16), (26, 40), (27, 40), (28, -1), (29, 48), (30, 4), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, 192), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 18, 24]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 8 among pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 18, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, 192), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24]
 solution : [0, 12, 1, 6, 18]


New level: 9
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24]
 solution : [0, 12, 1, 6, 18]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24]
 solution : [0, 12, 1, 6, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, 192), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 18), (18, -1), (19, -1), (20, 32), (21, -1), (22, 89), (23, 8), (24, 16), (25, 24), (26, 72), (27, 72), (28, -1), (29, 97), (30, 32), (31, 32), (32, 32), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24]
 solution : [0, 12, 1, 6, 18]


Solution : [0, 12, 1, 6, 18] has cost 39.


Before backtrack at level 9
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24]
 solution : [0, 12, 1, 6, 18]

After backtrack at level 9
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24]
 solution : [0, 12, 1, 6, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24]
 solution : [0, 12, 1, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 18), (18, -1), (19, -1), (20, 32), (21, -1), (22, 89), (23, 8), (24, 16), (25, 24), (26, 72), (27, 72), (28, -1), (29, 97), (30, 32), (31, 32), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 9 among pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 29, 15, 11, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

Decide 29 with phase True at level 9

After decision at level 9
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24]
 solution : [0, 12, 1, 6, 29]


New level: 10
 pending : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24]
 solution : [0, 12, 1, 6, 29]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 20, 30, 27, 22, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24]
 solution : [0, 12, 1, 6, 29]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, 136), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 128), (6, -1), (7, 64), (8, 64), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 0), (18, -1), (19, -1), (20, 8), (21, -1), (22, 0), (23, 32), (24, 2), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 8), (31, 1), (32, 1), (33, 32)]

Covered at level 10 : {17, 22, 25, 26, 27}

After reduction : 
 pending  : [10, 13, 20, 30, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24]
 solution : [0, 12, 1, 6, 29]


Before reduction : 
 pending  : [10, 13, 20, 30, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24]
 solution : [0, 12, 1, 6, 29]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 128), (6, -1), (7, 64), (8, 64), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 0), (18, -1), (19, -1), (20, 8), (21, -1), (22, 0), (23, 32), (24, 2), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 8), (31, 1), (32, 1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 128), (6, -1), (7, 64), (8, 64), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, 32), (24, 2), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 1), (32, 1), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 13, 20, 30, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24]
 solution : [0, 12, 1, 6, 29]


Solution : [0, 12, 1, 6, 29] has cost 54.


Before backtrack at level 10
 pending : [10, 13, 20, 30, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24]
 solution : [0, 12, 1, 6, 29]

After backtrack at level 10
 pending : [10, 13, 20, 30, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 29]


Invert decision for 29 at level 9


New level: 10
 pending : [10, 13, 20, 30, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [10, 13, 20, 30, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 128), (6, -1), (7, 64), (8, 64), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, 32), (24, 2), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 1), (32, 1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 13, 20, 30, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 10 among pending : [10, 13, 20, 30, 9, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24, 26, 17, 25, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, 128), (33, 32)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [10, 13, 20, 30, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]


New level: 11
 pending : [10, 13, 20, 30, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]


Before reduction : 
 pending  : [10, 13, 20, 30, 5, 4, 8, 23, 33, 7, 32, 3, 31, 15, 11, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 0), (5, 0), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, -1), (17, 16), (18, -1), (19, -1), (20, 0), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, 0), (31, 128), (32, 128), (33, 32)]

Covered at level 11 : {4, 5, 10, 11, 13, 15, 20, 30}

After reduction : 
 pending  : [8, 23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]


Before reduction : 
 pending  : [8, 23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 0), (5, 0), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, -1), (17, 16), (18, -1), (19, -1), (20, 0), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, 0), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, -1), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, -1), (31, 128), (32, 128), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [8, 23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]


Solution : [0, 12, 1, 6, 9] has cost 26.


Decide in level 11 among pending : [8, 23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, -1), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, -1), (31, 128), (32, 128), (33, 32)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9, 8]


New level: 12
 pending : [23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9, 8]


Before reduction : 
 pending  : [23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, -1), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, -1), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 7, 17, 22, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 9, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 9, 8]


Solution : [0, 12, 1, 6, 9, 8] has cost 32.


Before backtrack at level 12
 pending : []
 solution : [0, 12, 1, 6, 9, 8]

After backtrack at level 12
 pending : [23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]


Before reduction : 
 pending  : [23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, -1), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, -1), (31, 32), (32, 32), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]


Solution : [0, 12, 1, 6, 9] has cost 26.


Decide in level 12 among pending : [23, 33, 7, 32, 3, 31, 24, 26, 17, 25, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, -1), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, -1), (31, 32), (32, 32), (33, 32)]

Decide 7 with phase True at level 12

After decision at level 12
 pending : [23, 33, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9, 7]


New level: 13
 pending : [23, 33, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9, 7]


Before reduction : 
 pending  : [23, 33, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, -1), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, -1), (31, 32), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 3, 17, 22, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 9, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 9, 7]


Solution : [0, 12, 1, 6, 9, 7] has cost 32.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 9, 7]

After backtrack at level 13
 pending : [23, 33, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9, 7]


Invert decision for 7 at level 12


New level: 13
 pending : [23, 33, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]


Before reduction : 
 pending  : [23, 33, 32, 3, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]

Essensial at level 13 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 17, 22, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 9, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 9, 3]


Solution : [0, 12, 1, 6, 9, 3] has cost 39.


Before backtrack at level 13
 pending : []
 solution : [0, 12, 1, 6, 9, 3]

After backtrack at level 13
 pending : [3, 23, 33, 32, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]


Before backtrack at level 12
 pending : [3, 23, 33, 32, 31, 24, 26, 17, 25, 27, 22]
 solution : [0, 12, 1, 6, 9]

After backtrack at level 12
 pending : [3, 23, 33, 32, 31, 24, 26, 17, 25, 27, 22, 7]
 solution : [0, 12, 1, 6, 9]


Before backtrack at level 11
 pending : [3, 23, 33, 32, 31, 24, 26, 17, 25, 27, 22, 7]
 solution : [0, 12, 1, 6, 9]

After backtrack at level 11
 pending : [3, 23, 33, 32, 31, 24, 26, 17, 25, 27, 22, 7, 10, 13, 20, 30, 5, 4, 15, 11, 8]
 solution : [0, 12, 1, 6, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [3, 23, 33, 32, 31, 24, 26, 17, 25, 27, 22, 7, 10, 13, 20, 30, 5, 4, 15, 11, 8]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [3, 23, 33, 32, 31, 24, 26, 17, 25, 27, 22, 7, 10, 13, 20, 30, 5, 4, 15, 11, 8]
 solution : [0, 12, 1, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 23, 33, 32, 31, 24, 26, 17, 25, 27, 22, 7, 10, 13, 20, 30, 5, 4, 15, 11, 8]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 11 among pending : [3, 23, 33, 32, 31, 24, 26, 17, 25, 27, 22, 7, 10, 13, 20, 30, 5, 4, 15, 11, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, 128), (33, 32)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [23, 33, 32, 31, 24, 26, 17, 25, 27, 22, 7, 10, 13, 20, 30, 5, 4, 15, 11, 8]
 solution : [0, 12, 1, 6, 3]


New level: 12
 pending : [23, 33, 32, 31, 24, 26, 17, 25, 27, 22, 7, 10, 13, 20, 30, 5, 4, 15, 11, 8]
 solution : [0, 12, 1, 6, 3]


Before reduction : 
 pending  : [23, 33, 32, 31, 24, 26, 17, 25, 27, 22, 7, 10, 13, 20, 30, 5, 4, 15, 11, 8]
 solution : [0, 12, 1, 6, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 0), (8, 0), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, 8), (33, 0)]

Covered at level 12 : {8, 33, 7, 23}

After reduction : 
 pending  : [32, 31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11]
 solution : [0, 12, 1, 6, 3]


Before reduction : 
 pending  : [32, 31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11]
 solution : [0, 12, 1, 6, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 0), (8, 0), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, 8), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, 8), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [32, 31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11]
 solution : [0, 12, 1, 6, 3]


Solution : [0, 12, 1, 6, 3] has cost 33.


Before backtrack at level 12
 pending : [32, 31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11]
 solution : [0, 12, 1, 6, 3]

After backtrack at level 12
 pending : [32, 31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [32, 31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [32, 31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, 128), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [32, 31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 12 among pending : [32, 31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, 128), (33, 32)]

Decide 32 with phase True at level 12

After decision at level 12
 pending : [31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32]


New level: 13
 pending : [31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32]


Before reduction : 
 pending  : [31, 24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, 128), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 18), (18, -1), (19, -1), (20, 8), (21, -1), (22, 56), (23, 8), (24, 16), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 8), (31, 0), (32, -1), (33, 8)]

Covered at level 13 : {31}

After reduction : 
 pending  : [24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32]


Before reduction : 
 pending  : [24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 18), (18, -1), (19, -1), (20, 8), (21, -1), (22, 56), (23, 8), (24, 16), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 8), (31, 0), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 18), (18, -1), (19, -1), (20, 8), (21, -1), (22, 56), (23, 8), (24, 16), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32]


Solution : [0, 12, 1, 6, 32] has cost 30.


Decide in level 13 among pending : [24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 5, 4, 15, 11, 23, 33, 7, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 18), (18, -1), (19, -1), (20, 8), (21, -1), (22, 56), (23, 8), (24, 16), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 8)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32, 5]


New level: 14
 pending : [24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32, 5]


Before reduction : 
 pending  : [24, 26, 17, 25, 27, 22, 10, 13, 20, 30, 4, 15, 11, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 18), (18, -1), (19, -1), (20, 8), (21, -1), (22, 56), (23, 8), (24, 16), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, -1), (17, 4), (18, -1), (19, -1), (20, 0), (21, -1), (22, 10), (23, 8), (24, 0), (25, 4), (26, 8), (27, 8), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 8)]

Covered at level 14 : {4, 10, 11, 13, 15, 20, 24, 30}

After reduction : 
 pending  : [26, 17, 25, 27, 22, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32, 5]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, -1), (17, 4), (18, -1), (19, -1), (20, 0), (21, -1), (22, 10), (23, 8), (24, 0), (25, 4), (26, 8), (27, 8), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 10), (23, 8), (24, -1), (25, 4), (26, 8), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32, 5]


Solution : [0, 12, 1, 6, 32, 5] has cost 36.


Before backtrack at level 14
 pending : [26, 17, 25, 27, 22, 23, 33, 7, 8]
 solution : [0, 12, 1, 6, 32, 5]

After backtrack at level 14
 pending : [26, 17, 25, 27, 22, 23, 33, 7, 8, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [26, 17, 25, 27, 22, 23, 33, 7, 8, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 23, 33, 7, 8, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, 10), (23, 8), (24, -1), (25, 4), (26, 8), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 18), (18, -1), (19, -1), (20, 8), (21, -1), (22, 56), (23, 8), (24, 16), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 23, 33, 7, 8, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32]


Solution : [0, 12, 1, 6, 32] has cost 30.


Decide in level 14 among pending : [26, 17, 25, 27, 22, 23, 33, 7, 8, 24, 10, 13, 20, 30, 4, 15, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 18), (18, -1), (19, -1), (20, 8), (21, -1), (22, 56), (23, 8), (24, 16), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 8)]

Decide 7 with phase True at level 14

After decision at level 14
 pending : [26, 17, 25, 27, 22, 23, 33, 8, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 7]


New level: 15
 pending : [26, 17, 25, 27, 22, 23, 33, 8, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 7]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 23, 33, 8, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 18), (18, -1), (19, -1), (20, 8), (21, -1), (22, 56), (23, 8), (24, 16), (25, 32), (26, 64), (27, 64), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 4), (18, -1), (19, -1), (20, 8), (21, -1), (22, 18), (23, 0), (24, 16), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 0)]

Covered at level 15 : {8, 33, 23}

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 7]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 4), (18, -1), (19, -1), (20, 8), (21, -1), (22, 18), (23, 0), (24, 16), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 4), (18, -1), (19, -1), (20, 8), (21, -1), (22, 18), (23, -1), (24, 16), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 7]


Solution : [0, 12, 1, 6, 32, 7] has cost 36.


Before backtrack at level 15
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 7]

After backtrack at level 15
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 23, 33, 8]
 solution : [0, 12, 1, 6, 32, 7]


Invert decision for 7 at level 14


New level: 15
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 23, 33, 8]
 solution : [0, 12, 1, 6, 32]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 23, 33, 8]
 solution : [0, 12, 1, 6, 32]

Essensial at level 15 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 4), (18, -1), (19, -1), (20, 8), (21, -1), (22, 18), (23, -1), (24, 16), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 4), (18, -1), (19, -1), (20, 8), (21, -1), (22, 18), (23, 0), (24, 16), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 0)]

Covered at level 15 : {33, 23}

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 8]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 4), (18, -1), (19, -1), (20, 8), (21, -1), (22, 18), (23, 0), (24, 16), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 4), (18, -1), (19, -1), (20, 8), (21, -1), (22, 18), (23, -1), (24, 16), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 8]


Solution : [0, 12, 1, 6, 32, 8] has cost 36.


Before backtrack at level 15
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11]
 solution : [0, 12, 1, 6, 32, 8]

After backtrack at level 15
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 8, 23, 33]
 solution : [0, 12, 1, 6, 32]


Before backtrack at level 14
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 8, 23, 33]
 solution : [0, 12, 1, 6, 32]

After backtrack at level 14
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 8, 23, 33, 7]
 solution : [0, 12, 1, 6, 32]


Before backtrack at level 13
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 8, 23, 33, 7]
 solution : [0, 12, 1, 6, 32]

After backtrack at level 13
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 8, 23, 33, 7, 31, 5]
 solution : [0, 12, 1, 6, 32]


Invert decision for 32 at level 12


New level: 13
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 8, 23, 33, 7, 31, 5]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 8, 23, 33, 7, 31, 5]
 solution : [0, 12, 1, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 4), (18, -1), (19, -1), (20, 8), (21, -1), (22, 18), (23, -1), (24, 16), (25, 4), (26, 16), (27, 16), (28, -1), (29, -1), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, -1), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 8, 23, 33, 7, 31, 5]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 13 among pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 4, 15, 11, 8, 23, 33, 7, 31, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, -1), (33, 32)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 15, 11, 8, 23, 33, 7, 31, 5]
 solution : [0, 12, 1, 6, 4]


New level: 14
 pending : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 15, 11, 8, 23, 33, 7, 31, 5]
 solution : [0, 12, 1, 6, 4]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 10, 13, 20, 30, 15, 11, 8, 23, 33, 7, 31, 5]
 solution : [0, 12, 1, 6, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, -1), (17, 16), (18, -1), (19, -1), (20, 0), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, 0), (31, 32), (32, -1), (33, 32)]

Covered at level 14 : {5, 10, 11, 13, 15, 20, 30}

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 8, 23, 33, 7, 31]
 solution : [0, 12, 1, 6, 4]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 8, 23, 33, 7, 31]
 solution : [0, 12, 1, 6, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 128), (8, 128), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, -1), (17, 16), (18, -1), (19, -1), (20, 0), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, 0), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, -1), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 8, 23, 33, 7, 31]
 solution : [0, 12, 1, 6, 4]


Solution : [0, 12, 1, 6, 4] has cost 33.


Before backtrack at level 14
 pending : [26, 17, 25, 27, 22, 24, 8, 23, 33, 7, 31]
 solution : [0, 12, 1, 6, 4]

After backtrack at level 14
 pending : [26, 17, 25, 27, 22, 24, 8, 23, 33, 7, 31, 10, 13, 20, 30, 15, 11, 5]
 solution : [0, 12, 1, 6, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [26, 17, 25, 27, 22, 24, 8, 23, 33, 7, 31, 10, 13, 20, 30, 15, 11, 5]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 8, 23, 33, 7, 31, 10, 13, 20, 30, 15, 11, 5]
 solution : [0, 12, 1, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, -1), (20, -1), (21, -1), (22, 25), (23, 32), (24, 4), (25, 16), (26, 20), (27, 20), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, -1), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 8, 23, 33, 7, 31, 10, 13, 20, 30, 15, 11, 5]
 solution : [0, 12, 1, 6]


Solution : [0, 12, 1, 6] has cost 20.


Decide in level 14 among pending : [26, 17, 25, 27, 22, 24, 8, 23, 33, 7, 31, 10, 13, 20, 30, 15, 11, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, -1), (33, 32)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [26, 17, 25, 27, 22, 24, 23, 33, 7, 31, 10, 13, 20, 30, 15, 11, 5]
 solution : [0, 12, 1, 6, 8]


New level: 15
 pending : [26, 17, 25, 27, 22, 24, 23, 33, 7, 31, 10, 13, 20, 30, 15, 11, 5]
 solution : [0, 12, 1, 6, 8]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 23, 33, 7, 31, 10, 13, 20, 30, 15, 11, 5]
 solution : [0, 12, 1, 6, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 66), (18, -1), (19, -1), (20, 32), (21, -1), (22, 113), (23, 32), (24, 64), (25, 52), (26, 98), (27, 80), (28, -1), (29, -1), (30, 32), (31, 128), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 0), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, 0)]

Covered at level 15 : {33, 7, 23}

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 15, 11, 5]
 solution : [0, 12, 1, 6, 8]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 15, 11, 5]
 solution : [0, 12, 1, 6, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 0), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 15, 11, 5]
 solution : [0, 12, 1, 6, 8]


Solution : [0, 12, 1, 6, 8] has cost 26.


Decide in level 15 among pending : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 15, 11, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

Decide 11 with phase True at level 15

After decision at level 15
 pending : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 15, 5]
 solution : [0, 12, 1, 6, 8, 11]


New level: 16
 pending : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 15, 5]
 solution : [0, 12, 1, 6, 8, 11]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 15, 5]
 solution : [0, 12, 1, 6, 8, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, 0), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 16 : {15}

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, 0), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11]


Solution : [0, 12, 1, 6, 8, 11] has cost 31.


Decide in level 16 among pending : [26, 17, 25, 27, 22, 24, 31, 10, 13, 20, 30, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 24 with phase True at level 16

After decision at level 16
 pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11, 24]


New level: 17
 pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11, 24]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11, 24]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11, 24]


Solution : [0, 12, 1, 6, 8, 11, 24] has cost 41.


Before backtrack at level 17
 pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11, 24]

After backtrack at level 17
 pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11, 24]


Invert decision for 24 at level 16


New level: 17
 pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30, 5]
 solution : [0, 12, 1, 6, 8, 11]


Solution : [0, 12, 1, 6, 8, 11] has cost 31.


Decide in level 17 among pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 5 with phase True at level 17

After decision at level 17
 pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 5]


New level: 18
 pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 5]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 18 : {10, 13, 17, 20, 22, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 8, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 8, 11, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 8, 11, 5]


Solution : [0, 12, 1, 6, 8, 11, 5] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 12, 1, 6, 8, 11, 5]

After backtrack at level 18
 pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 5]


Invert decision for 5 at level 17


New level: 18
 pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30]
 solution : [0, 12, 1, 6, 8, 11]


Before reduction : 
 pending  : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30]
 solution : [0, 12, 1, 6, 8, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30]
 solution : [0, 12, 1, 6, 8, 11]


Solution : [0, 12, 1, 6, 8, 11] has cost 31.


Decide in level 18 among pending : [26, 17, 25, 27, 22, 31, 10, 13, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 22 with phase True at level 18

After decision at level 18
 pending : [26, 17, 25, 27, 31, 10, 13, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 22]


New level: 19
 pending : [26, 17, 25, 27, 31, 10, 13, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 22]


Before reduction : 
 pending  : [26, 17, 25, 27, 31, 10, 13, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {17, 20, 25, 26, 27, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 22]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 22]


Solution : [0, 12, 1, 6, 8, 11, 22] has cost 65.


Before backtrack at level 19
 pending : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 22]

After backtrack at level 19
 pending : [10, 13, 26, 17, 25, 27, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 22]


Invert decision for 22 at level 18


New level: 19
 pending : [10, 13, 26, 17, 25, 27, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11]


Before reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 13, 26, 17, 25, 27, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11]


Solution : [0, 12, 1, 6, 8, 11] has cost 31.


Decide in level 19 among pending : [10, 13, 26, 17, 25, 27, 31, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 26 with phase True at level 19

After decision at level 19
 pending : [10, 13, 17, 25, 27, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 26]


New level: 20
 pending : [10, 13, 17, 25, 27, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 26]


Before reduction : 
 pending  : [10, 13, 17, 25, 27, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 26]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 20 : {17, 20, 25, 27, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 26]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 26]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 26]


Solution : [0, 12, 1, 6, 8, 11, 26] has cost 65.


Before backtrack at level 20
 pending : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 26]

After backtrack at level 20
 pending : [10, 13, 17, 25, 27, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11, 26]


Invert decision for 26 at level 19


New level: 20
 pending : [10, 13, 17, 25, 27, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11]


Before reduction : 
 pending  : [10, 13, 17, 25, 27, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11]

Essensial at level 20 : {27}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 20 : {17, 20, 25, 30, 31}

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 27]


Before reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 27]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 27]


Solution : [0, 12, 1, 6, 8, 11, 27] has cost 65.


Before backtrack at level 20
 pending : [10, 13]
 solution : [0, 12, 1, 6, 8, 11, 27]

After backtrack at level 20
 pending : [10, 13, 27, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11]


Before backtrack at level 19
 pending : [10, 13, 27, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 11]

After backtrack at level 19
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26]
 solution : [0, 12, 1, 6, 8, 11]


Before backtrack at level 18
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26]
 solution : [0, 12, 1, 6, 8, 11]

After backtrack at level 18
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 11]


Before backtrack at level 17
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 11]

After backtrack at level 17
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 5]
 solution : [0, 12, 1, 6, 8, 11]


Before backtrack at level 16
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 5]
 solution : [0, 12, 1, 6, 8, 11]

After backtrack at level 16
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 5, 15, 24]
 solution : [0, 12, 1, 6, 8, 11]


Invert decision for 11 at level 15


New level: 16
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 5, 15, 24]
 solution : [0, 12, 1, 6, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 5, 15, 24]
 solution : [0, 12, 1, 6, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 5, 15, 24]
 solution : [0, 12, 1, 6, 8]


Solution : [0, 12, 1, 6, 8] has cost 26.


Decide in level 16 among pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 5, 15, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 15, 24]
 solution : [0, 12, 1, 6, 8, 5]


New level: 17
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 15, 24]
 solution : [0, 12, 1, 6, 8, 5]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 15, 24]
 solution : [0, 12, 1, 6, 8, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 17 : {10, 13, 15, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 8, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 8, 5]


Solution : [0, 12, 1, 6, 8, 5] has cost 32.


Before backtrack at level 17
 pending : []
 solution : [0, 12, 1, 6, 8, 5]

After backtrack at level 17
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 15, 24]
 solution : [0, 12, 1, 6, 8, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 15, 24]
 solution : [0, 12, 1, 6, 8]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 15, 24]
 solution : [0, 12, 1, 6, 8]

Essensial at level 17 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 24]
 solution : [0, 12, 1, 6, 8, 15]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 24]
 solution : [0, 12, 1, 6, 8, 15]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 24]
 solution : [0, 12, 1, 6, 8, 15]


Solution : [0, 12, 1, 6, 8, 15] has cost 28.


Decide in level 17 among pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 24 with phase True at level 17

After decision at level 17
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 24]


New level: 18
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 24]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 24]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 24]


Solution : [0, 12, 1, 6, 8, 15, 24] has cost 38.


Before backtrack at level 18
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 24]

After backtrack at level 18
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 24]


Invert decision for 24 at level 17


New level: 18
 pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15]


Before reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15]


Solution : [0, 12, 1, 6, 8, 15] has cost 28.


Decide in level 18 among pending : [10, 13, 27, 17, 25, 31, 20, 30, 26, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 10 with phase True at level 18

After decision at level 18
 pending : [13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 10]


New level: 19
 pending : [13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 10]


Before reduction : 
 pending  : [13, 27, 17, 25, 31, 20, 30, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 10]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 8), (23, -1), (24, -1), (25, 0), (26, 8), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {13, 17, 20, 25, 30, 31}

After reduction : 
 pending  : [27, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 10]


Before reduction : 
 pending  : [27, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 10]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 8), (23, -1), (24, -1), (25, 0), (26, 8), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [27, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 10]


Solution : [0, 12, 1, 6, 8, 15, 10] has cost 37.


Before backtrack at level 19
 pending : [27, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 10]

After backtrack at level 19
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 15, 10]


Invert decision for 10 at level 18


New level: 19
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 15]


Before reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 15]

Essensial at level 19 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 8), (23, -1), (24, -1), (25, 0), (26, 8), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {17, 20, 25, 30, 31}

After reduction : 
 pending  : [27, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 13]


Before reduction : 
 pending  : [27, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 13]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 8), (23, -1), (24, -1), (25, 0), (26, 8), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [27, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 13]


Solution : [0, 12, 1, 6, 8, 15, 13] has cost 37.


Before backtrack at level 19
 pending : [27, 26, 22]
 solution : [0, 12, 1, 6, 8, 15, 13]

After backtrack at level 19
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 15]


Before backtrack at level 18
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 8, 15]

After backtrack at level 18
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 8, 15]


Before backtrack at level 17
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 8, 15]

After backtrack at level 17
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24]
 solution : [0, 12, 1, 6, 8]


Before backtrack at level 16
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24]
 solution : [0, 12, 1, 6, 8]

After backtrack at level 16
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 5]
 solution : [0, 12, 1, 6, 8]


Before backtrack at level 15
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 5]
 solution : [0, 12, 1, 6, 8]

After backtrack at level 15
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 5, 23, 33, 7, 11]
 solution : [0, 12, 1, 6, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 5, 23, 33, 7, 11]
 solution : [0, 12, 1, 6]


Before reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 5, 23, 33, 7, 11]
 solution : [0, 12, 1, 6]

Essensial at level 15 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, 0)]

Covered at level 15 : {33, 23}

After reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 5, 11]
 solution : [0, 12, 1, 6, 7]


Before reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 5, 11]
 solution : [0, 12, 1, 6, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, 0), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 5, 11]
 solution : [0, 12, 1, 6, 7]


Solution : [0, 12, 1, 6, 7] has cost 26.


Decide in level 15 among pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 5, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 11]
 solution : [0, 12, 1, 6, 7, 5]


New level: 16
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 11]
 solution : [0, 12, 1, 6, 7, 5]


Before reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 11]
 solution : [0, 12, 1, 6, 7, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 16 : {10, 11, 13, 15, 17, 20, 22, 24, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 7, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 6, 7, 5]


Solution : [0, 12, 1, 6, 7, 5] has cost 32.


Before backtrack at level 16
 pending : []
 solution : [0, 12, 1, 6, 7, 5]

After backtrack at level 16
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 11]
 solution : [0, 12, 1, 6, 7, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 11]
 solution : [0, 12, 1, 6, 7]


Before reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 11]
 solution : [0, 12, 1, 6, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 11]
 solution : [0, 12, 1, 6, 7]


Solution : [0, 12, 1, 6, 7] has cost 26.


Decide in level 16 among pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

Decide 11 with phase True at level 16

After decision at level 16
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24]
 solution : [0, 12, 1, 6, 7, 11]


New level: 17
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24]
 solution : [0, 12, 1, 6, 7, 11]


Before reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 15, 24]
 solution : [0, 12, 1, 6, 7, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, -1), (13, 64), (14, -1), (15, 64), (16, -1), (17, 12), (18, -1), (19, -1), (20, 32), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 32), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, 0), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 17 : {15}

After reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 24]
 solution : [0, 12, 1, 6, 7, 11]


Before reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 24]
 solution : [0, 12, 1, 6, 7, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, 0), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 24]
 solution : [0, 12, 1, 6, 7, 11]


Solution : [0, 12, 1, 6, 7, 11] has cost 31.


Decide in level 17 among pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 24 with phase True at level 17

After decision at level 17
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11, 24]


New level: 18
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11, 24]


Before reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11, 24]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11, 24]


Solution : [0, 12, 1, 6, 7, 11, 24] has cost 41.


Before backtrack at level 18
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11, 24]

After backtrack at level 18
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11, 24]


Invert decision for 24 at level 17


New level: 18
 pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11]


Before reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11]


Solution : [0, 12, 1, 6, 7, 11] has cost 31.


Decide in level 18 among pending : [27, 26, 22, 13, 17, 25, 31, 20, 30, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 22 with phase True at level 18

After decision at level 18
 pending : [27, 26, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11, 22]


New level: 19
 pending : [27, 26, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11, 22]


Before reduction : 
 pending  : [27, 26, 13, 17, 25, 31, 20, 30, 10]
 solution : [0, 12, 1, 6, 7, 11, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {17, 20, 25, 26, 27, 30, 31}

After reduction : 
 pending  : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 22]


Before reduction : 
 pending  : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 22]


Solution : [0, 12, 1, 6, 7, 11, 22] has cost 65.


Before backtrack at level 19
 pending : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 22]

After backtrack at level 19
 pending : [13, 10, 27, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11, 22]


Invert decision for 22 at level 18


New level: 19
 pending : [13, 10, 27, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11]


Before reduction : 
 pending  : [13, 10, 27, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [13, 10, 27, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11]


Solution : [0, 12, 1, 6, 7, 11] has cost 31.


Decide in level 19 among pending : [13, 10, 27, 26, 17, 25, 31, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 27 with phase True at level 19

After decision at level 19
 pending : [13, 10, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11, 27]


New level: 20
 pending : [13, 10, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11, 27]


Before reduction : 
 pending  : [13, 10, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11, 27]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, -1), (13, 16), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 20 : {17, 20, 25, 26, 30, 31}

After reduction : 
 pending  : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 27]


Before reduction : 
 pending  : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 27]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 27]


Solution : [0, 12, 1, 6, 7, 11, 27] has cost 65.


Before backtrack at level 20
 pending : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 27]

After backtrack at level 20
 pending : [13, 10, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11, 27]


Invert decision for 27 at level 19


New level: 20
 pending : [13, 10, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11]


Before reduction : 
 pending  : [13, 10, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11]

Essensial at level 20 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 20 : {17, 20, 25, 30, 31}

After reduction : 
 pending  : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 26]


Before reduction : 
 pending  : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 26]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 26]


Solution : [0, 12, 1, 6, 7, 11, 26] has cost 65.


Before backtrack at level 20
 pending : [13, 10]
 solution : [0, 12, 1, 6, 7, 11, 26]

After backtrack at level 20
 pending : [13, 10, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11]


Before backtrack at level 19
 pending : [13, 10, 26, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 11]

After backtrack at level 19
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27]
 solution : [0, 12, 1, 6, 7, 11]


Before backtrack at level 18
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27]
 solution : [0, 12, 1, 6, 7, 11]

After backtrack at level 18
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 11]


Before backtrack at level 17
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 11]

After backtrack at level 17
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22, 15, 24]
 solution : [0, 12, 1, 6, 7, 11]


Invert decision for 11 at level 16


New level: 17
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22, 15, 24]
 solution : [0, 12, 1, 6, 7]


Before reduction : 
 pending  : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22, 15, 24]
 solution : [0, 12, 1, 6, 7]

Essensial at level 17 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 7, 15]


Before reduction : 
 pending  : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 7, 15]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22, 24]
 solution : [0, 12, 1, 6, 7, 15]


Solution : [0, 12, 1, 6, 7, 15] has cost 28.


Decide in level 17 among pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 24 with phase True at level 17

After decision at level 17
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 24]


New level: 18
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 24]


Before reduction : 
 pending  : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 24]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, 64), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 24]


Solution : [0, 12, 1, 6, 7, 15, 24] has cost 38.


Before backtrack at level 18
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 24]

After backtrack at level 18
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 24]


Invert decision for 24 at level 17


New level: 18
 pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15]


Before reduction : 
 pending  : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, 4), (21, -1), (22, 21), (23, -1), (24, -1), (25, 6), (26, 18), (27, 18), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15]


Solution : [0, 12, 1, 6, 7, 15] has cost 28.


Decide in level 18 among pending : [13, 10, 26, 17, 25, 31, 20, 30, 27, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Decide 13 with phase True at level 18

After decision at level 18
 pending : [10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 13]


New level: 19
 pending : [10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 13]


Before reduction : 
 pending  : [10, 26, 17, 25, 31, 20, 30, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 13]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, -1), (17, 12), (18, -1), (19, -1), (20, 8), (21, -1), (22, 26), (23, -1), (24, -1), (25, 10), (26, 18), (27, 18), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 8), (23, -1), (24, -1), (25, 0), (26, 8), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {10, 17, 20, 25, 30, 31}

After reduction : 
 pending  : [26, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 13]


Before reduction : 
 pending  : [26, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 13]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 8), (23, -1), (24, -1), (25, 0), (26, 8), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [26, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 13]


Solution : [0, 12, 1, 6, 7, 15, 13] has cost 37.


Before backtrack at level 19
 pending : [26, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 13]

After backtrack at level 19
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 15, 13]


Invert decision for 13 at level 18


New level: 19
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 15]


Before reduction : 
 pending  : [26, 27, 22, 10, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 15]

Essensial at level 19 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 8), (23, -1), (24, -1), (25, 0), (26, 8), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {17, 20, 25, 30, 31}

After reduction : 
 pending  : [26, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 10]


Before reduction : 
 pending  : [26, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 10]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, -1), (22, 8), (23, -1), (24, -1), (25, 0), (26, 8), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [26, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 10]


Solution : [0, 12, 1, 6, 7, 15, 10] has cost 37.


Before backtrack at level 19
 pending : [26, 27, 22]
 solution : [0, 12, 1, 6, 7, 15, 10]

After backtrack at level 19
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 15]


Before backtrack at level 18
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30]
 solution : [0, 12, 1, 6, 7, 15]

After backtrack at level 18
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13]
 solution : [0, 12, 1, 6, 7, 15]


Before backtrack at level 17
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13]
 solution : [0, 12, 1, 6, 7, 15]

After backtrack at level 17
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24]
 solution : [0, 12, 1, 6, 7]


Before backtrack at level 16
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24]
 solution : [0, 12, 1, 6, 7]

After backtrack at level 16
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11]
 solution : [0, 12, 1, 6, 7]


Before backtrack at level 15
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11]
 solution : [0, 12, 1, 6, 7]

After backtrack at level 15
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5]
 solution : [0, 12, 1, 6]


Before backtrack at level 14
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5]
 solution : [0, 12, 1, 6]

After backtrack at level 14
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8]
 solution : [0, 12, 1, 6]


Before backtrack at level 13
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8]
 solution : [0, 12, 1, 6]

After backtrack at level 13
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4]
 solution : [0, 12, 1, 6]


Before backtrack at level 12
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4]
 solution : [0, 12, 1, 6]

After backtrack at level 12
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32]
 solution : [0, 12, 1, 6]


Before backtrack at level 11
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32]
 solution : [0, 12, 1, 6]

After backtrack at level 11
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3]
 solution : [0, 12, 1, 6]


Before backtrack at level 10
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3]
 solution : [0, 12, 1, 6]

After backtrack at level 10
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9]
 solution : [0, 12, 1, 6]


Before backtrack at level 9
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9]
 solution : [0, 12, 1, 6]

After backtrack at level 9
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29]
 solution : [0, 12, 1, 6]


Before backtrack at level 8
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29]
 solution : [0, 12, 1, 6]

After backtrack at level 8
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18]
 solution : [0, 12, 1, 6]


Before backtrack at level 7
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18]
 solution : [0, 12, 1, 6]

After backtrack at level 7
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16]
 solution : [0, 12, 1, 6]


Before backtrack at level 6
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16]
 solution : [0, 12, 1, 6]

After backtrack at level 6
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28]
 solution : [0, 12, 1, 6]


Before backtrack at level 5
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28]
 solution : [0, 12, 1, 6]

After backtrack at level 5
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19]
 solution : [0, 12, 1, 6]


Before backtrack at level 4
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19]
 solution : [0, 12, 1, 6]

After backtrack at level 4
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14]
 solution : [0, 12, 1, 6]


Before backtrack at level 3
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14]
 solution : [0, 12, 1, 6]

After backtrack at level 3
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21, 2]
 solution : [0, 12, 1, 6]


Invert decision for 6 at level 2


New level: 3
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21, 2]
 solution : [0, 12, 1]


Before reduction : 
 pending  : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21, 2]
 solution : [0, 12, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, 544), (20, 128), (21, 128), (22, 456), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21, 2]
 solution : [0, 12, 1]


Solution : [0, 12, 1] has cost 10.


Decide in level 3 among pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21, 2]

Coverage : [(0, -1), (1, -1), (2, 576), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, 544), (20, 128), (21, 128), (22, 456), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

Decide 2 with phase True at level 3

After decision at level 3
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21]
 solution : [0, 12, 1, 2]


New level: 4
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21]
 solution : [0, 12, 1, 2]


Before reduction : 
 pending  : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21]
 solution : [0, 12, 1, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, 544), (20, 128), (21, 128), (22, 456), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 16), (17, 44), (18, 48), (19, 72), (20, 128), (21, 128), (22, 136), (23, 128), (24, 16), (25, 26), (26, 24), (27, 48), (28, 24), (29, 76), (30, 256), (31, 256), (32, 128), (33, 64)]

Covered at level 4 : set()

After reduction : 
 pending  : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21]
 solution : [0, 12, 1, 2]


Solution : [0, 12, 1, 2] has cost 28.


Decide in level 4 among pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 5, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 16), (17, 44), (18, 48), (19, 72), (20, 128), (21, 128), (22, 136), (23, 128), (24, 16), (25, 26), (26, 24), (27, 48), (28, 24), (29, 76), (30, 256), (31, 256), (32, 128), (33, 64)]

Decide 5 with phase True at level 4

After decision at level 4
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21]
 solution : [0, 12, 1, 2, 5]


New level: 5
 pending : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21]
 solution : [0, 12, 1, 2, 5]


Before reduction : 
 pending  : [26, 27, 22, 10, 17, 25, 31, 20, 30, 13, 15, 24, 11, 7, 23, 33, 8, 4, 32, 3, 9, 29, 18, 16, 28, 19, 14, 21]
 solution : [0, 12, 1, 2, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 16), (17, 44), (18, 48), (19, 72), (20, 128), (21, 128), (22, 136), (23, 128), (24, 16), (25, 26), (26, 24), (27, 48), (28, 24), (29, 76), (30, 256), (31, 256), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 0), (5, -1), (6, -1), (7, 128), (8, 512), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 4), (17, 12), (18, 48), (19, 18), (20, 2), (21, 32), (22, 36), (23, 128), (24, 4), (25, 8), (26, 6), (27, 12), (28, 24), (29, 19), (30, 8), (31, 256), (32, 128), (33, 64)]

Covered at level 5 : {4, 9, 10, 11, 13, 14, 15}

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 24, 7, 23, 33, 8, 32, 3, 29, 18, 16, 28, 19, 21]
 solution : [0, 12, 1, 2, 5]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 24, 7, 23, 33, 8, 32, 3, 29, 18, 16, 28, 19, 21]
 solution : [0, 12, 1, 2, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 0), (5, -1), (6, -1), (7, 128), (8, 512), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 4), (17, 12), (18, 48), (19, 18), (20, 2), (21, 32), (22, 36), (23, 128), (24, 4), (25, 8), (26, 6), (27, 12), (28, 24), (29, 19), (30, 8), (31, 256), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, -1), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 12), (18, 48), (19, 18), (20, 2), (21, 32), (22, 36), (23, 128), (24, 4), (25, 8), (26, 6), (27, 12), (28, 24), (29, 19), (30, 8), (31, 256), (32, 128), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 24, 7, 23, 33, 8, 32, 3, 29, 18, 16, 28, 19, 21]
 solution : [0, 12, 1, 2, 5]


Solution : [0, 12, 1, 2, 5] has cost 34.


Before backtrack at level 5
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 7, 23, 33, 8, 32, 3, 29, 18, 16, 28, 19, 21]
 solution : [0, 12, 1, 2, 5]

After backtrack at level 5
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 7, 23, 33, 8, 32, 3, 29, 18, 16, 28, 19, 21, 10, 13, 15, 11, 4, 9, 14]
 solution : [0, 12, 1, 2, 5]


Invert decision for 5 at level 4


New level: 5
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 7, 23, 33, 8, 32, 3, 29, 18, 16, 28, 19, 21, 10, 13, 15, 11, 4, 9, 14]
 solution : [0, 12, 1, 2]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 24, 7, 23, 33, 8, 32, 3, 29, 18, 16, 28, 19, 21, 10, 13, 15, 11, 4, 9, 14]
 solution : [0, 12, 1, 2]

Essensial at level 5 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, -1), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 12), (18, 48), (19, 18), (20, 2), (21, 32), (22, 36), (23, 128), (24, 4), (25, 8), (26, 6), (27, 12), (28, 24), (29, 19), (30, 8), (31, 256), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 320), (5, -1), (6, -1), (7, 0), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 4), (17, 12), (18, 0), (19, 18), (20, 128), (21, 32), (22, 32), (23, 0), (24, 4), (25, 5), (26, 5), (27, 10), (28, 0), (29, 19), (30, 256), (31, 8), (32, 4), (33, 0)]

Covered at level 5 : {33, 3, 7, 18, 23, 28}

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14]
 solution : [0, 12, 1, 2, 8]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14]
 solution : [0, 12, 1, 2, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 320), (5, -1), (6, -1), (7, 0), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 4), (17, 12), (18, 0), (19, 18), (20, 128), (21, 32), (22, 32), (23, 0), (24, 4), (25, 5), (26, 5), (27, 10), (28, 0), (29, 19), (30, 256), (31, 8), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 4), (17, 12), (18, -1), (19, 18), (20, 128), (21, 32), (22, 32), (23, -1), (24, 4), (25, 5), (26, 5), (27, 10), (28, -1), (29, 19), (30, 256), (31, 8), (32, 4), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14]
 solution : [0, 12, 1, 2, 8]


Solution : [0, 12, 1, 2, 8] has cost 34.


Before backtrack at level 5
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14]
 solution : [0, 12, 1, 2, 8]

After backtrack at level 5
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28]
 solution : [0, 12, 1, 2]


Before backtrack at level 4
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28]
 solution : [0, 12, 1, 2]

After backtrack at level 4
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1, 2]


Invert decision for 2 at level 3


New level: 4
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 4), (17, 12), (18, -1), (19, 18), (20, 128), (21, 32), (22, 32), (23, -1), (24, 4), (25, 5), (26, 5), (27, 10), (28, -1), (29, 19), (30, 256), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, 544), (20, 128), (21, 128), (22, 456), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

Covered at level 4 : set()

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1]


Solution : [0, 12, 1] has cost 10.


Decide in level 4 among pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 19, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, 544), (20, 128), (21, 128), (22, 456), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

Decide 19 with phase True at level 4

After decision at level 4
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1, 19]


New level: 5
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1, 19]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 24, 32, 29, 16, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, 544), (20, 128), (21, 128), (22, 456), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 272), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 0), (17, 32), (18, 20), (19, -1), (20, 16), (21, 32), (22, 168), (23, 128), (24, 0), (25, 16), (26, 40), (27, 80), (28, 10), (29, 96), (30, 64), (31, 64), (32, 32), (33, 64)]

Covered at level 5 : {24, 16}

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1, 19]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 272), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 0), (17, 32), (18, 20), (19, -1), (20, 16), (21, 32), (22, 168), (23, 128), (24, 0), (25, 16), (26, 40), (27, 80), (28, 10), (29, 96), (30, 64), (31, 64), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 272), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, -1), (17, 32), (18, 20), (19, -1), (20, 16), (21, 32), (22, 168), (23, 128), (24, -1), (25, 16), (26, 40), (27, 80), (28, 10), (29, 96), (30, 64), (31, 64), (32, 32), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1, 19]


Solution : [0, 12, 1, 19] has cost 44.


Before backtrack at level 5
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5]
 solution : [0, 12, 1, 19]

After backtrack at level 5
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5, 24, 16]
 solution : [0, 12, 1, 19]


Invert decision for 19 at level 4


New level: 5
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5, 24, 16]
 solution : [0, 12, 1]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5, 24, 16]
 solution : [0, 12, 1]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 272), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, -1), (17, 32), (18, 20), (19, -1), (20, 16), (21, 32), (22, 168), (23, 128), (24, -1), (25, 16), (26, 40), (27, 80), (28, 10), (29, 96), (30, 64), (31, 64), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, -1), (20, 128), (21, 128), (22, 456), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5, 24, 16]
 solution : [0, 12, 1]


Solution : [0, 12, 1] has cost 10.


Decide in level 5 among pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 8, 7, 23, 33, 3, 18, 28, 5, 24, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, -1), (20, 128), (21, 128), (22, 456), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

Decide 8 with phase True at level 5

After decision at level 5
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 7, 23, 33, 3, 18, 28, 5, 24, 16]
 solution : [0, 12, 1, 8]


New level: 6
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 7, 23, 33, 3, 18, 28, 5, 24, 16]
 solution : [0, 12, 1, 8]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 7, 23, 33, 3, 18, 28, 5, 24, 16]
 solution : [0, 12, 1, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 320), (4, 320), (5, 512), (6, -1), (7, 128), (8, 512), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 132), (18, 384), (19, -1), (20, 128), (21, 128), (22, 456), (23, 128), (24, 64), (25, 64), (26, 106), (27, 160), (28, 192), (29, 280), (30, 256), (31, 256), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 320), (5, 512), (6, -1), (7, 0), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 24), (18, 12), (19, -1), (20, 128), (21, 32), (22, 104), (23, 0), (24, 64), (25, 10), (26, 18), (27, 36), (28, 6), (29, 53), (30, 256), (31, 32), (32, 16), (33, 0)]

Covered at level 6 : {33, 3, 23, 7}

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 5, 24, 16]
 solution : [0, 12, 1, 8]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 5, 24, 16]
 solution : [0, 12, 1, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 320), (5, 512), (6, -1), (7, 0), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 24), (18, 12), (19, -1), (20, 128), (21, 32), (22, 104), (23, 0), (24, 64), (25, 10), (26, 18), (27, 36), (28, 6), (29, 53), (30, 256), (31, 32), (32, 16), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 512), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 24), (18, 12), (19, -1), (20, 128), (21, 32), (22, 104), (23, -1), (24, 64), (25, 10), (26, 18), (27, 36), (28, 6), (29, 53), (30, 256), (31, 32), (32, 16), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 5, 24, 16]
 solution : [0, 12, 1, 8]


Solution : [0, 12, 1, 8] has cost 16.


Decide in level 6 among pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 5, 24, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 512), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 24), (18, 12), (19, -1), (20, 128), (21, 32), (22, 104), (23, -1), (24, 64), (25, 10), (26, 18), (27, 36), (28, 6), (29, 53), (30, 256), (31, 32), (32, 16), (33, -1)]

Decide 5 with phase True at level 6

After decision at level 6
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8, 5]


New level: 7
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8, 5]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 512), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 24), (18, 12), (19, -1), (20, 128), (21, 32), (22, 104), (23, -1), (24, 64), (25, 10), (26, 18), (27, 36), (28, 6), (29, 53), (30, 256), (31, 32), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 7 : {4, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 8, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 8, 5]


Solution : [0, 12, 1, 8, 5] has cost 22.


Before backtrack at level 7
 pending : []
 solution : [0, 12, 1, 8, 5]

After backtrack at level 7
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8, 5]


Invert decision for 5 at level 6


New level: 7
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 24), (18, 12), (19, -1), (20, 128), (21, 32), (22, 104), (23, -1), (24, 64), (25, 10), (26, 18), (27, 36), (28, 6), (29, 53), (30, 256), (31, 32), (32, 16), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8]


Solution : [0, 12, 1, 8] has cost 16.


Decide in level 7 among pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 4, 9, 14, 18, 28, 24, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 24), (18, 12), (19, -1), (20, 128), (21, 32), (22, 104), (23, -1), (24, 64), (25, 10), (26, 18), (27, 36), (28, 6), (29, 53), (30, 256), (31, 32), (32, 16), (33, -1)]

Decide 4 with phase True at level 7

After decision at level 7
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8, 4]


New level: 8
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8, 4]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 64), (11, 128), (12, -1), (13, 128), (14, 256), (15, 64), (16, 192), (17, 24), (18, 12), (19, -1), (20, 128), (21, 32), (22, 104), (23, -1), (24, 64), (25, 10), (26, 18), (27, 36), (28, 6), (29, 53), (30, 256), (31, 32), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 8 : {9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 8, 4]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 8, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 8, 4]


Solution : [0, 12, 1, 8, 4] has cost 29.


Before backtrack at level 8
 pending : []
 solution : [0, 12, 1, 8, 4]

After backtrack at level 8
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8, 4]


Invert decision for 4 at level 7


New level: 8
 pending : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8]


Before reduction : 
 pending  : [26, 27, 22, 17, 25, 31, 20, 30, 32, 29, 21, 10, 13, 15, 11, 9, 14, 18, 28, 24, 16]
 solution : [0, 12, 1, 8]

Essensial at level 8 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 0), (11, 8), (12, -1), (13, -1), (14, 64), (15, 1), (16, 8), (17, 0), (18, 0), (19, -1), (20, 2), (21, 16), (22, 66), (23, -1), (24, 0), (25, 0), (26, 8), (27, 16), (28, 0), (29, 34), (30, 16), (31, 0), (32, 0), (33, -1)]

Covered at level 8 : {32, 10, 17, 18, 24, 25, 28, 31}

After reduction : 
 pending  : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16]
 solution : [0, 12, 1, 8, 13]


Before reduction : 
 pending  : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16]
 solution : [0, 12, 1, 8, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, 0), (11, 8), (12, -1), (13, -1), (14, 64), (15, 1), (16, 8), (17, 0), (18, 0), (19, -1), (20, 2), (21, 16), (22, 66), (23, -1), (24, 0), (25, 0), (26, 8), (27, 16), (28, 0), (29, 34), (30, 16), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, 8), (12, -1), (13, -1), (14, 64), (15, 1), (16, 8), (17, -1), (18, -1), (19, -1), (20, 2), (21, 16), (22, 66), (23, -1), (24, -1), (25, -1), (26, 8), (27, 16), (28, -1), (29, 34), (30, 16), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16]
 solution : [0, 12, 1, 8, 13]


Solution : [0, 12, 1, 8, 13] has cost 25.


Before backtrack at level 8
 pending : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16]
 solution : [0, 12, 1, 8, 13]

After backtrack at level 8
 pending : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24]
 solution : [0, 12, 1, 8]


Before backtrack at level 7
 pending : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24]
 solution : [0, 12, 1, 8]

After backtrack at level 7
 pending : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4]
 solution : [0, 12, 1, 8]


Before backtrack at level 6
 pending : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4]
 solution : [0, 12, 1, 8]

After backtrack at level 6
 pending : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 3, 5]
 solution : [0, 12, 1, 8]


Invert decision for 8 at level 5


New level: 6
 pending : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 3, 5]
 solution : [0, 12, 1]


Before reduction : 
 pending  : [26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 3, 5]
 solution : [0, 12, 1]

Essensial at level 6 : {3, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, 8), (12, -1), (13, -1), (14, 64), (15, 1), (16, 8), (17, -1), (18, -1), (19, -1), (20, 2), (21, 16), (22, 66), (23, -1), (24, -1), (25, -1), (26, 8), (27, 16), (28, -1), (29, 34), (30, 16), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {4, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 12, 1, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 12, 1, 3, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 12, 1, 3, 5]


Solution : [0, 12, 1, 3, 5] has cost 29.


Before backtrack at level 6
 pending : []
 solution : [0, 12, 1, 3, 5]

After backtrack at level 6
 pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33]
 solution : [0, 12, 1]


Before backtrack at level 5
 pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33]
 solution : [0, 12, 1]

After backtrack at level 5
 pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8]
 solution : [0, 12, 1]


Before backtrack at level 4
 pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8]
 solution : [0, 12, 1]

After backtrack at level 4
 pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19]
 solution : [0, 12, 1]


Before backtrack at level 3
 pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19]
 solution : [0, 12, 1]

After backtrack at level 3
 pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19, 2]
 solution : [0, 12, 1]


Before backtrack at level 2
 pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19, 2]
 solution : [0, 12, 1]

After backtrack at level 2
 pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19, 2, 6]
 solution : [0, 12, 1]


Invert decision for 1 at level 1


New level: 2
 pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19, 2, 6]
 solution : [0, 12]


Before reduction : 
 pending  : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19, 2, 6]
 solution : [0, 12]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, 768), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 576), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 256), (26, 424), (27, 320), (28, 384), (29, 560), (30, 256), (31, 256), (32, 256), (33, 128)]

Covered at level 2 : set()

After reduction : 
 pending  : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19, 2, 6]
 solution : [0, 12]


Solution : [0, 12] has cost 7.


Decide in level 2 among pending : [3, 5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19, 2, 6]

Coverage : [(0, -1), (1, -1), (2, 576), (3, 768), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 576), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 256), (26, 424), (27, 320), (28, 384), (29, 560), (30, 256), (31, 256), (32, 256), (33, 128)]

Decide 3 with phase True at level 2

After decision at level 2
 pending : [5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19, 2, 6]
 solution : [0, 12, 3]


New level: 3
 pending : [5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19, 2, 6]
 solution : [0, 12, 3]


Before reduction : 
 pending  : [5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 33, 8, 19, 2, 6]
 solution : [0, 12, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, 768), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 576), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 256), (26, 424), (27, 320), (28, 384), (29, 560), (30, 256), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, 768), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, 0)]

Covered at level 3 : {33}

After reduction : 
 pending  : [5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 8, 19, 2, 6]
 solution : [0, 12, 3]


Before reduction : 
 pending  : [5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 8, 19, 2, 6]
 solution : [0, 12, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, 768), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, 768), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 8, 19, 2, 6]
 solution : [0, 12, 3]


Solution : [0, 12, 3] has cost 20.


Decide in level 3 among pending : [5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 4, 7, 23, 8, 19, 2, 6]

Coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, 768), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6]
 solution : [0, 12, 3, 4]


New level: 4
 pending : [5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6]
 solution : [0, 12, 3, 4]


Before reduction : 
 pending  : [5, 26, 27, 22, 20, 30, 29, 21, 15, 11, 9, 14, 16, 13, 17, 25, 31, 32, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6]
 solution : [0, 12, 3, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, 768), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 64), (6, 64), (7, 128), (8, 64), (9, 128), (10, 64), (11, 1), (12, -1), (13, 0), (14, 0), (15, 256), (16, 5), (17, 0), (18, 66), (19, 66), (20, 0), (21, 16), (22, 18), (23, 16), (24, 2), (25, 9), (26, 16), (27, 0), (28, 5), (29, 0), (30, 16), (31, 16), (32, 0), (33, -1)]

Covered at level 4 : {32, 13, 14, 17, 20, 27, 29}

After reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6]
 solution : [0, 12, 3, 4]


Before reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6]
 solution : [0, 12, 3, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 64), (6, 64), (7, 128), (8, 64), (9, 128), (10, 64), (11, 1), (12, -1), (13, 0), (14, 0), (15, 256), (16, 5), (17, 0), (18, 66), (19, 66), (20, 0), (21, 16), (22, 18), (23, 16), (24, 2), (25, 9), (26, 16), (27, 0), (28, 5), (29, 0), (30, 16), (31, 16), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 64), (6, 64), (7, 128), (8, 64), (9, 128), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, 128), (16, 5), (17, -1), (18, 66), (19, 66), (20, -1), (21, 16), (22, 18), (23, 16), (24, 2), (25, 9), (26, 16), (27, -1), (28, 5), (29, -1), (30, 16), (31, 16), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6]
 solution : [0, 12, 3, 4]


Solution : [0, 12, 3, 4] has cost 33.


Before backtrack at level 4
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6]
 solution : [0, 12, 3, 4]

After backtrack at level 4
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3]


Before reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 64), (6, 64), (7, 128), (8, 64), (9, 128), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, 128), (16, 5), (17, -1), (18, 66), (19, 66), (20, -1), (21, 16), (22, 18), (23, 16), (24, 2), (25, 9), (26, 16), (27, -1), (28, 5), (29, -1), (30, 16), (31, 16), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3]


Solution : [0, 12, 3] has cost 20.


Decide in level 4 among pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 2, 6, 27, 20, 29, 14, 13, 17, 32]

Coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 2 with phase True at level 4

After decision at level 4
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3, 2]


New level: 5
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3, 2]


Before reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 28, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 264), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 16), (17, 42), (18, 6), (19, 34), (20, 256), (21, 64), (22, 66), (23, 32), (24, 16), (25, 40), (26, 40), (27, 48), (28, 0), (29, 68), (30, 256), (31, 128), (32, 16), (33, -1)]

Covered at level 5 : {28}

After reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3, 2]


Before reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 264), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 16), (17, 42), (18, 6), (19, 34), (20, 256), (21, 64), (22, 66), (23, 32), (24, 16), (25, 40), (26, 40), (27, 48), (28, 0), (29, 68), (30, 256), (31, 128), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 264), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 16), (17, 42), (18, 6), (19, 34), (20, 256), (21, 64), (22, 66), (23, 32), (24, 16), (25, 40), (26, 40), (27, 48), (28, -1), (29, 68), (30, 256), (31, 128), (32, 16), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3, 2]


Solution : [0, 12, 3, 2] has cost 38.


Before backtrack at level 5
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32]
 solution : [0, 12, 3, 2]

After backtrack at level 5
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 2]


Invert decision for 2 at level 4


New level: 5
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3]


Before reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 264), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 16), (17, 42), (18, 6), (19, 34), (20, 256), (21, 64), (22, 66), (23, 32), (24, 16), (25, 40), (26, 40), (27, 48), (28, -1), (29, 68), (30, 256), (31, 128), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3]


Solution : [0, 12, 3] has cost 20.


Decide in level 5 among pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 19, 6, 27, 20, 29, 14, 13, 17, 32, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 19 with phase True at level 5

After decision at level 5
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 19]


New level: 6
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 19]


Before reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 18, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 19]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, 544), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 260), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 24), (17, 34), (18, 0), (19, -1), (20, 32), (21, 16), (22, 74), (23, 8), (24, 16), (25, 80), (26, 144), (27, 144), (28, 5), (29, 96), (30, 64), (31, 32), (32, 8), (33, -1)]

Covered at level 6 : {18}

After reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 19]


Before reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 19]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 260), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 24), (17, 34), (18, 0), (19, -1), (20, 32), (21, 16), (22, 74), (23, 8), (24, 16), (25, 80), (26, 144), (27, 144), (28, 5), (29, 96), (30, 64), (31, 32), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 260), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 24), (17, 34), (18, -1), (19, -1), (20, 32), (21, 16), (22, 74), (23, 8), (24, 16), (25, 80), (26, 144), (27, 144), (28, 5), (29, 96), (30, 64), (31, 32), (32, 8), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 19]


Solution : [0, 12, 3, 19] has cost 54.


Before backtrack at level 6
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 19]

After backtrack at level 6
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28, 18]
 solution : [0, 12, 3, 19]


Invert decision for 19 at level 5


New level: 6
 pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28, 18]
 solution : [0, 12, 3]


Before reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28, 18]
 solution : [0, 12, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 260), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 24), (17, 34), (18, -1), (19, -1), (20, 32), (21, 16), (22, 74), (23, 8), (24, 16), (25, 80), (26, 144), (27, 144), (28, 5), (29, 96), (30, 64), (31, 32), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28, 18]
 solution : [0, 12, 3]


Solution : [0, 12, 3] has cost 20.


Decide in level 6 among pending : [5, 26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 5 with phase True at level 6

After decision at level 6
 pending : [26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28, 18]
 solution : [0, 12, 3, 5]


New level: 7
 pending : [26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28, 18]
 solution : [0, 12, 3, 5]


Before reduction : 
 pending  : [26, 22, 30, 21, 15, 11, 9, 16, 25, 31, 10, 24, 7, 23, 8, 6, 27, 20, 29, 14, 13, 17, 32, 28, 18]
 solution : [0, 12, 3, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 128), (8, 0), (9, 512), (10, 256), (11, 512), (12, -1), (13, 64), (14, 64), (15, 512), (16, 384), (17, 6), (18, 0), (19, -1), (20, 16), (21, 0), (22, 0), (23, 0), (24, 128), (25, 80), (26, 144), (27, 5), (28, 48), (29, 25), (30, 0), (31, 0), (32, 8), (33, -1)]

Covered at level 7 : {6, 8, 18, 21, 22, 23, 30, 31}

After reduction : 
 pending  : [26, 15, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 5]


Before reduction : 
 pending  : [26, 15, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 128), (8, 0), (9, 512), (10, 256), (11, 512), (12, -1), (13, 64), (14, 64), (15, 512), (16, 384), (17, 6), (18, 0), (19, -1), (20, 16), (21, 0), (22, 0), (23, 0), (24, 128), (25, 80), (26, 144), (27, 5), (28, 48), (29, 25), (30, 0), (31, 0), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 512), (10, 256), (11, 512), (12, -1), (13, 64), (14, 64), (15, 512), (16, 384), (17, 6), (18, -1), (19, -1), (20, 16), (21, -1), (22, -1), (23, -1), (24, 128), (25, 80), (26, 144), (27, 5), (28, 48), (29, 25), (30, -1), (31, -1), (32, 8), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [26, 15, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 5]


Solution : [0, 12, 3, 5] has cost 26.


Before backtrack at level 7
 pending : [26, 15, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28]
 solution : [0, 12, 3, 5]

After backtrack at level 7
 pending : [26, 15, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 5]


Invert decision for 5 at level 6


New level: 7
 pending : [26, 15, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3]


Before reduction : 
 pending  : [26, 15, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 512), (10, 256), (11, 512), (12, -1), (13, 64), (14, 64), (15, 512), (16, 384), (17, 6), (18, -1), (19, -1), (20, 16), (21, -1), (22, -1), (23, -1), (24, 128), (25, 80), (26, 144), (27, 5), (28, 48), (29, 25), (30, -1), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [26, 15, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3]


Solution : [0, 12, 3] has cost 20.


Decide in level 7 among pending : [26, 15, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 15 with phase True at level 7

After decision at level 7
 pending : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15]


New level: 8
 pending : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15]


Before reduction : 
 pending  : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, 512), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15]


Solution : [0, 12, 3, 15] has cost 22.


Decide in level 8 among pending : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 14, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, 512), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 14]


New level: 9
 pending : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 14]


Before reduction : 
 pending  : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, 512), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 130), (7, 2), (8, 64), (9, 256), (10, 128), (11, 1), (12, -1), (13, 64), (14, -1), (15, -1), (16, 384), (17, 22), (18, 96), (19, -1), (20, 16), (21, 32), (22, 197), (23, 16), (24, 128), (25, 20), (26, 36), (27, 36), (28, 6), (29, 161), (30, 128), (31, 128), (32, 16), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 14]


Solution : [0, 12, 3, 15, 14] has cost 27.


Before backtrack at level 9
 pending : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 14]

After backtrack at level 9
 pending : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15]


Before reduction : 
 pending  : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 130), (7, 2), (8, 64), (9, 256), (10, 128), (11, 1), (12, -1), (13, 64), (14, -1), (15, -1), (16, 384), (17, 22), (18, 96), (19, -1), (20, 16), (21, 32), (22, 197), (23, 16), (24, 128), (25, 20), (26, 36), (27, 36), (28, 6), (29, 161), (30, 128), (31, 128), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15]


Solution : [0, 12, 3, 15] has cost 22.


Decide in level 9 among pending : [26, 11, 9, 16, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 16 with phase True at level 9

After decision at level 9
 pending : [26, 11, 9, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 16]


New level: 10
 pending : [26, 11, 9, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 16]


Before reduction : 
 pending  : [26, 11, 9, 25, 10, 24, 7, 27, 20, 29, 13, 17, 32, 28, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 16]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 264), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 32), (18, 10), (19, -1), (20, 32), (21, 64), (22, 178), (23, 32), (24, 0), (25, 6), (26, 18), (27, 80), (28, 0), (29, 258), (30, 256), (31, 128), (32, 16), (33, -1)]

Covered at level 10 : {24, 28}

After reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 29, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 16]


Before reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 29, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 16]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 264), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 32), (18, 10), (19, -1), (20, 32), (21, 64), (22, 178), (23, 32), (24, 0), (25, 6), (26, 18), (27, 80), (28, 0), (29, 258), (30, 256), (31, 128), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 264), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 32), (18, 10), (19, -1), (20, 32), (21, 64), (22, 178), (23, 32), (24, -1), (25, 6), (26, 18), (27, 80), (28, -1), (29, 258), (30, 256), (31, 128), (32, 16), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 29, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 16]


Solution : [0, 12, 3, 15, 16] has cost 56.


Before backtrack at level 10
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 29, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18]
 solution : [0, 12, 3, 15, 16]

After backtrack at level 10
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 29, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18, 24, 28]
 solution : [0, 12, 3, 15, 16]


Invert decision for 16 at level 9


New level: 10
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 29, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18, 24, 28]
 solution : [0, 12, 3, 15]


Before reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 29, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18, 24, 28]
 solution : [0, 12, 3, 15]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 264), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 32), (18, 10), (19, -1), (20, 32), (21, 64), (22, 178), (23, 32), (24, -1), (25, 6), (26, 18), (27, 80), (28, -1), (29, 258), (30, 256), (31, 128), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 29, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18, 24, 28]
 solution : [0, 12, 3, 15]


Solution : [0, 12, 3, 15] has cost 22.


Decide in level 10 among pending : [26, 11, 9, 25, 10, 7, 27, 20, 29, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18, 24, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 29 with phase True at level 10

After decision at level 10
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18, 24, 28]
 solution : [0, 12, 3, 15, 29]


New level: 11
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18, 24, 28]
 solution : [0, 12, 3, 15, 29]


Before reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 32, 22, 30, 21, 31, 23, 8, 6, 18, 24, 28]
 solution : [0, 12, 3, 15, 29]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 102), (23, 32), (24, 128), (25, 5), (26, 5), (27, 160), (28, 0), (29, -1), (30, 256), (31, 128), (32, 0), (33, -1)]

Covered at level 11 : {32, 28}

After reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 6, 18, 24]
 solution : [0, 12, 3, 15, 29]


Before reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 6, 18, 24]
 solution : [0, 12, 3, 15, 29]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 102), (23, 32), (24, 128), (25, 5), (26, 5), (27, 160), (28, 0), (29, -1), (30, 256), (31, 128), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 102), (23, 32), (24, 128), (25, 5), (26, 5), (27, 160), (28, -1), (29, -1), (30, 256), (31, 128), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 6, 18, 24]
 solution : [0, 12, 3, 15, 29]


Solution : [0, 12, 3, 15, 29] has cost 56.


Before backtrack at level 11
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 6, 18, 24]
 solution : [0, 12, 3, 15, 29]

After backtrack at level 11
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 6, 18, 24, 32, 28]
 solution : [0, 12, 3, 15, 29]


Invert decision for 29 at level 10


New level: 11
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 6, 18, 24, 32, 28]
 solution : [0, 12, 3, 15]


Before reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 6, 18, 24, 32, 28]
 solution : [0, 12, 3, 15]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 102), (23, 32), (24, 128), (25, 5), (26, 5), (27, 160), (28, -1), (29, -1), (30, 256), (31, 128), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, -1), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 6, 18, 24, 32, 28]
 solution : [0, 12, 3, 15]


Solution : [0, 12, 3, 15] has cost 22.


Decide in level 11 among pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 6, 18, 24, 32, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, -1), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 18, 24, 32, 28]
 solution : [0, 12, 3, 15, 6]


New level: 12
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 18, 24, 32, 28]
 solution : [0, 12, 3, 15, 6]


Before reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 21, 31, 23, 8, 18, 24, 32, 28]
 solution : [0, 12, 3, 15, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 2), (8, 128), (9, 256), (10, 128), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 20), (26, 36), (27, 160), (28, 6), (29, -1), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2), (8, 0), (9, 256), (10, 128), (11, 4), (12, -1), (13, 64), (14, -1), (15, -1), (16, -1), (17, 22), (18, 6), (19, -1), (20, 16), (21, 0), (22, 26), (23, 0), (24, 128), (25, 20), (26, 36), (27, 36), (28, 6), (29, -1), (30, 8), (31, 8), (32, 8), (33, -1)]

Covered at level 12 : {8, 21, 23}

After reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 31, 18, 24, 32, 28]
 solution : [0, 12, 3, 15, 6]


Before reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 31, 18, 24, 32, 28]
 solution : [0, 12, 3, 15, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2), (8, 0), (9, 256), (10, 128), (11, 4), (12, -1), (13, 64), (14, -1), (15, -1), (16, -1), (17, 22), (18, 6), (19, -1), (20, 16), (21, 0), (22, 26), (23, 0), (24, 128), (25, 20), (26, 36), (27, 36), (28, 6), (29, -1), (30, 8), (31, 8), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2), (8, -1), (9, 256), (10, 128), (11, 4), (12, -1), (13, 64), (14, -1), (15, -1), (16, -1), (17, 22), (18, 6), (19, -1), (20, 16), (21, -1), (22, 26), (23, -1), (24, 128), (25, 20), (26, 36), (27, 36), (28, 6), (29, -1), (30, 8), (31, 8), (32, 8), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 31, 18, 24, 32, 28]
 solution : [0, 12, 3, 15, 6]


Solution : [0, 12, 3, 15, 6] has cost 32.


Before backtrack at level 12
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 31, 18, 24, 32, 28]
 solution : [0, 12, 3, 15, 6]

After backtrack at level 12
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 31, 18, 24, 32, 28, 21, 23, 8]
 solution : [0, 12, 3, 15, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 31, 18, 24, 32, 28, 21, 23, 8]
 solution : [0, 12, 3, 15]


Before reduction : 
 pending  : [26, 11, 9, 25, 10, 7, 27, 20, 13, 17, 22, 30, 31, 18, 24, 32, 28, 21, 23, 8]
 solution : [0, 12, 3, 15]

Essensial at level 12 : {8, 13, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2), (8, -1), (9, 256), (10, 128), (11, 4), (12, -1), (13, 64), (14, -1), (15, -1), (16, -1), (17, 22), (18, 6), (19, -1), (20, 16), (21, -1), (22, 26), (23, -1), (24, 128), (25, 20), (26, 36), (27, 36), (28, 6), (29, -1), (30, 8), (31, 8), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2), (8, -1), (9, 2), (10, 2), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 12 : {32, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31}

After reduction : 
 pending  : [11, 9, 10, 7]
 solution : [0, 12, 3, 15, 8, 13, 22]


Before reduction : 
 pending  : [11, 9, 10, 7]
 solution : [0, 12, 3, 15, 8, 13, 22]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2), (8, -1), (9, 2), (10, 2), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2), (8, -1), (9, 2), (10, 2), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [11, 9, 10, 7]
 solution : [0, 12, 3, 15, 8, 13, 22]


Solution : [0, 12, 3, 15, 8, 13, 22] has cost 71.


Before backtrack at level 12
 pending : [11, 9, 10, 7]
 solution : [0, 12, 3, 15, 8, 13, 22]

After backtrack at level 12
 pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23]
 solution : [0, 12, 3, 15]


Before backtrack at level 11
 pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23]
 solution : [0, 12, 3, 15]

After backtrack at level 11
 pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6]
 solution : [0, 12, 3, 15]


Before backtrack at level 10
 pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6]
 solution : [0, 12, 3, 15]

After backtrack at level 10
 pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29]
 solution : [0, 12, 3, 15]


Before backtrack at level 9
 pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29]
 solution : [0, 12, 3, 15]

After backtrack at level 9
 pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16]
 solution : [0, 12, 3, 15]


Before backtrack at level 8
 pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16]
 solution : [0, 12, 3, 15]

After backtrack at level 8
 pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 15]


Invert decision for 15 at level 7


New level: 8
 pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3]


Before reduction : 
 pending  : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2), (8, -1), (9, 2), (10, 2), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3]


Solution : [0, 12, 3] has cost 20.


Decide in level 8 among pending : [11, 9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 11]


New level: 9
 pending : [9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 11]


Before reduction : 
 pending  : [9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, 64), (8, 128), (9, 256), (10, 128), (11, -1), (12, -1), (13, 128), (14, 128), (15, -1), (16, 384), (17, 100), (18, 96), (19, -1), (20, 128), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 132), (27, 160), (28, 48), (29, 53), (30, 256), (31, 128), (32, 16), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 11]


Solution : [0, 12, 3, 11] has cost 25.


Before backtrack at level 9
 pending : [9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 11]

After backtrack at level 9
 pending : [9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3]


Before reduction : 
 pending  : [9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, 64), (8, 128), (9, 256), (10, 128), (11, -1), (12, -1), (13, 128), (14, 128), (15, -1), (16, 384), (17, 100), (18, 96), (19, -1), (20, 128), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 132), (27, 160), (28, 48), (29, 53), (30, 256), (31, 128), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, -1), (12, -1), (13, 256), (14, 512), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3]


Solution : [0, 12, 3] has cost 20.


Decide in level 9 among pending : [9, 10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, -1), (12, -1), (13, 256), (14, 512), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 9]


New level: 10
 pending : [10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 9]


Before reduction : 
 pending  : [10, 7, 13, 22, 8, 26, 25, 27, 20, 17, 30, 31, 18, 24, 32, 28, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 272), (7, 128), (8, 128), (9, 512), (10, 256), (11, -1), (12, -1), (13, 256), (14, 512), (15, -1), (16, 384), (17, 104), (18, 96), (19, -1), (20, 256), (21, 64), (22, 210), (23, 32), (24, 128), (25, 80), (26, 144), (27, 160), (28, 48), (29, 274), (30, 256), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, 0), (8, 128), (9, -1), (10, 0), (11, -1), (12, -1), (13, 64), (14, 512), (15, -1), (16, 12), (17, 16), (18, 96), (19, -1), (20, 64), (21, 64), (22, 210), (23, 32), (24, 4), (25, 0), (26, 0), (27, 20), (28, 0), (29, 10), (30, 256), (31, 128), (32, 2), (33, -1)]

Covered at level 10 : {7, 10, 25, 26, 28}

After reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 9]


Before reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, 0), (8, 128), (9, -1), (10, 0), (11, -1), (12, -1), (13, 64), (14, 512), (15, -1), (16, 12), (17, 16), (18, 96), (19, -1), (20, 64), (21, 64), (22, 210), (23, 32), (24, 4), (25, 0), (26, 0), (27, 20), (28, 0), (29, 10), (30, 256), (31, 128), (32, 2), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 64), (14, 512), (15, -1), (16, 12), (17, 16), (18, 96), (19, -1), (20, 64), (21, 64), (22, 210), (23, 32), (24, 4), (25, -1), (26, -1), (27, 20), (28, -1), (29, 10), (30, 256), (31, 128), (32, 2), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 9]


Solution : [0, 12, 3, 9] has cost 26.


Before backtrack at level 10
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 14]
 solution : [0, 12, 3, 9]

After backtrack at level 10
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 14, 10, 7, 26, 25, 28]
 solution : [0, 12, 3, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 14, 10, 7, 26, 25, 28]
 solution : [0, 12, 3]


Before reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 14, 10, 7, 26, 25, 28]
 solution : [0, 12, 3]

Essensial at level 10 : {14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 64), (14, 512), (15, -1), (16, 12), (17, 16), (18, 96), (19, -1), (20, 64), (21, 64), (22, 210), (23, 32), (24, 4), (25, -1), (26, -1), (27, 20), (28, -1), (29, 10), (30, 256), (31, 128), (32, 2), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 130), (7, 128), (8, 64), (9, -1), (10, 256), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 384), (17, 22), (18, 96), (19, -1), (20, 32), (21, 32), (22, 197), (23, 16), (24, 128), (25, 80), (26, 144), (27, 36), (28, 48), (29, 273), (30, 128), (31, 128), (32, 64), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28]
 solution : [0, 12, 3, 14]


Before reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28]
 solution : [0, 12, 3, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 130), (7, 128), (8, 64), (9, -1), (10, 256), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 384), (17, 22), (18, 96), (19, -1), (20, 32), (21, 32), (22, 197), (23, 16), (24, 128), (25, 80), (26, 144), (27, 36), (28, 48), (29, 273), (30, 128), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 130), (7, 128), (8, 64), (9, -1), (10, 256), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 384), (17, 22), (18, 96), (19, -1), (20, 32), (21, 32), (22, 197), (23, 16), (24, 128), (25, 80), (26, 144), (27, 36), (28, 48), (29, 273), (30, 128), (31, 128), (32, 64), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28]
 solution : [0, 12, 3, 14]


Solution : [0, 12, 3, 14] has cost 25.


Before backtrack at level 10
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28]
 solution : [0, 12, 3, 14]

After backtrack at level 10
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14]
 solution : [0, 12, 3]


Before backtrack at level 9
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14]
 solution : [0, 12, 3]

After backtrack at level 9
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9]
 solution : [0, 12, 3]


Before backtrack at level 8
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9]
 solution : [0, 12, 3]

After backtrack at level 8
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11]
 solution : [0, 12, 3]


Before backtrack at level 7
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11]
 solution : [0, 12, 3]

After backtrack at level 7
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15]
 solution : [0, 12, 3]


Before backtrack at level 6
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15]
 solution : [0, 12, 3]

After backtrack at level 6
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15, 5]
 solution : [0, 12, 3]


Before backtrack at level 5
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15, 5]
 solution : [0, 12, 3]

After backtrack at level 5
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15, 5, 19]
 solution : [0, 12, 3]


Before backtrack at level 4
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15, 5, 19]
 solution : [0, 12, 3]

After backtrack at level 4
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2]
 solution : [0, 12, 3]


Before backtrack at level 3
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2]
 solution : [0, 12, 3]

After backtrack at level 3
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2, 33, 4]
 solution : [0, 12, 3]


Invert decision for 3 at level 2


New level: 3
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2, 33, 4]
 solution : [0, 12]


Before reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 7, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2, 33, 4]
 solution : [0, 12]

Essensial at level 3 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 130), (7, 128), (8, 64), (9, -1), (10, 256), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 384), (17, 22), (18, 96), (19, -1), (20, 32), (21, 32), (22, 197), (23, 16), (24, 128), (25, 80), (26, 144), (27, 36), (28, 48), (29, 273), (30, 128), (31, 128), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, 768), (5, 512), (6, 640), (7, -1), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 516), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 112), (26, 204), (27, 320), (28, 96), (29, 212), (30, 256), (31, 256), (32, 128), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2, 33, 4]
 solution : [0, 12, 7]


Before reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2, 33, 4]
 solution : [0, 12, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, 768), (5, 512), (6, 640), (7, -1), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 516), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 112), (26, 204), (27, 320), (28, 96), (29, 212), (30, 256), (31, 256), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, 768), (5, 512), (6, 640), (7, -1), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 516), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 112), (26, 204), (27, 320), (28, 96), (29, 212), (30, 256), (31, 256), (32, 128), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2, 33, 4]
 solution : [0, 12, 7]


Solution : [0, 12, 7] has cost 13.


Decide in level 3 among pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2, 33, 4]

Coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, 768), (5, 512), (6, 640), (7, -1), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 516), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 112), (26, 204), (27, 320), (28, 96), (29, 212), (30, 256), (31, 256), (32, 128), (33, 64)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2, 33]
 solution : [0, 12, 7, 4]


New level: 4
 pending : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2, 33]
 solution : [0, 12, 7, 4]


Before reduction : 
 pending  : [13, 22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 10, 26, 25, 28, 14, 9, 11, 15, 5, 19, 2, 33]
 solution : [0, 12, 7, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, 768), (5, 512), (6, 640), (7, -1), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 516), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 112), (26, 204), (27, 320), (28, 96), (29, 212), (30, 256), (31, 256), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 64), (6, 288), (7, -1), (8, 512), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 2), (17, 6), (18, 256), (19, 193), (20, 2), (21, 64), (22, 200), (23, 128), (24, 2), (25, 2), (26, 0), (27, 6), (28, 24), (29, 27), (30, 64), (31, 128), (32, 32), (33, 32)]

Covered at level 4 : {9, 10, 11, 13, 14, 15, 26}

After reduction : 
 pending  : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 25, 28, 5, 19, 2, 33]
 solution : [0, 12, 7, 4]


Before reduction : 
 pending  : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 25, 28, 5, 19, 2, 33]
 solution : [0, 12, 7, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 64), (6, 288), (7, -1), (8, 512), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 2), (17, 6), (18, 256), (19, 193), (20, 2), (21, 64), (22, 200), (23, 128), (24, 2), (25, 2), (26, 0), (27, 6), (28, 24), (29, 27), (30, 64), (31, 128), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 64), (6, 288), (7, -1), (8, 512), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 256), (19, 193), (20, 2), (21, 64), (22, 200), (23, 128), (24, 2), (25, 2), (26, -1), (27, 6), (28, 24), (29, 27), (30, 64), (31, 128), (32, 32), (33, 32)]

Covered at level 4 : set()

After reduction : 
 pending  : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 25, 28, 5, 19, 2, 33]
 solution : [0, 12, 7, 4]


Solution : [0, 12, 7, 4] has cost 26.


Before backtrack at level 4
 pending : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 25, 28, 5, 19, 2, 33]
 solution : [0, 12, 7, 4]

After backtrack at level 4
 pending : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 25, 28, 5, 19, 2, 33, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 25, 28, 5, 19, 2, 33, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7]


Before reduction : 
 pending  : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 25, 28, 5, 19, 2, 33, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 64), (6, 288), (7, -1), (8, 512), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 256), (19, 193), (20, 2), (21, 64), (22, 200), (23, 128), (24, 2), (25, 2), (26, -1), (27, 6), (28, 24), (29, 27), (30, 64), (31, 128), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 512), (6, 640), (7, -1), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 516), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 112), (26, 204), (27, 320), (28, 96), (29, 212), (30, 256), (31, 256), (32, 128), (33, 64)]

Covered at level 4 : set()

After reduction : 
 pending  : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 25, 28, 5, 19, 2, 33, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7]


Solution : [0, 12, 7] has cost 13.


Decide in level 4 among pending : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 6, 29, 16, 25, 28, 5, 19, 2, 33, 13, 10, 26, 14, 9, 11, 15]

Coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 512), (6, 640), (7, -1), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 516), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 112), (26, 204), (27, 320), (28, 96), (29, 212), (30, 256), (31, 256), (32, 128), (33, 64)]

Decide 6 with phase True at level 4

After decision at level 4
 pending : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 29, 16, 25, 28, 5, 19, 2, 33, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7, 6]


New level: 5
 pending : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 29, 16, 25, 28, 5, 19, 2, 33, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7, 6]


Before reduction : 
 pending  : [22, 8, 27, 20, 17, 30, 31, 18, 24, 32, 21, 23, 29, 16, 25, 28, 5, 19, 2, 33, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 512), (6, 640), (7, -1), (8, 512), (9, 512), (10, 256), (11, 512), (12, -1), (13, 256), (14, 512), (15, 512), (16, 384), (17, 272), (18, 384), (19, 516), (20, 256), (21, 128), (22, 520), (23, 128), (24, 128), (25, 112), (26, 204), (27, 320), (28, 96), (29, 212), (30, 256), (31, 256), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 0), (9, 512), (10, 256), (11, 512), (12, -1), (13, 128), (14, 512), (15, 512), (16, 384), (17, 22), (18, 6), (19, 193), (20, 64), (21, 0), (22, 26), (23, 0), (24, 128), (25, 40), (26, 72), (27, 36), (28, 12), (29, 52), (30, 32), (31, 8), (32, 16), (33, 0)]

Covered at level 5 : {8, 33, 21, 23}

After reduction : 
 pending  : [22, 27, 20, 17, 30, 31, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7, 6]


Before reduction : 
 pending  : [22, 27, 20, 17, 30, 31, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 0), (9, 512), (10, 256), (11, 512), (12, -1), (13, 128), (14, 512), (15, 512), (16, 384), (17, 22), (18, 6), (19, 193), (20, 64), (21, 0), (22, 26), (23, 0), (24, 128), (25, 40), (26, 72), (27, 36), (28, 12), (29, 52), (30, 32), (31, 8), (32, 16), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 512), (10, 256), (11, 512), (12, -1), (13, 128), (14, 512), (15, 512), (16, 384), (17, 22), (18, 6), (19, 193), (20, 64), (21, -1), (22, 26), (23, -1), (24, 128), (25, 40), (26, 72), (27, 36), (28, 12), (29, 52), (30, 32), (31, 8), (32, 16), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [22, 27, 20, 17, 30, 31, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7, 6]


Solution : [0, 12, 7, 6] has cost 23.


Before backtrack at level 5
 pending : [22, 27, 20, 17, 30, 31, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 13, 10, 26, 14, 9, 11, 15]
 solution : [0, 12, 7, 6]

After backtrack at level 5
 pending : [22, 27, 20, 17, 30, 31, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 13, 10, 26, 14, 9, 11, 15, 8, 21, 23, 33]
 solution : [0, 12, 7, 6]


Invert decision for 6 at level 4


New level: 5
 pending : [22, 27, 20, 17, 30, 31, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 13, 10, 26, 14, 9, 11, 15, 8, 21, 23, 33]
 solution : [0, 12, 7]


Before reduction : 
 pending  : [22, 27, 20, 17, 30, 31, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 13, 10, 26, 14, 9, 11, 15, 8, 21, 23, 33]
 solution : [0, 12, 7]

Essensial at level 5 : {8, 13}

Before removed
 coverage : [(0, -1), (1, -1), (2, 576), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 512), (10, 256), (11, 512), (12, -1), (13, 128), (14, 512), (15, 512), (16, 384), (17, 22), (18, 6), (19, 193), (20, 64), (21, -1), (22, 26), (23, -1), (24, 128), (25, 40), (26, 72), (27, 36), (28, 12), (29, 52), (30, 32), (31, 8), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, -1), (5, 512), (6, -1), (7, -1), (8, -1), (9, 512), (10, 8), (11, 128), (12, -1), (13, -1), (14, 128), (15, 512), (16, 272), (17, 4), (18, 2), (19, 321), (20, 128), (21, 32), (22, 130), (23, 0), (24, 2), (25, 4), (26, 36), (27, 128), (28, 16), (29, 133), (30, 32), (31, 0), (32, 16), (33, 8)]

Covered at level 5 : {23, 31}

After reduction : 
 pending  : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33]
 solution : [0, 12, 7, 8, 13]


Before reduction : 
 pending  : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33]
 solution : [0, 12, 7, 8, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, -1), (5, 512), (6, -1), (7, -1), (8, -1), (9, 512), (10, 8), (11, 128), (12, -1), (13, -1), (14, 128), (15, 512), (16, 272), (17, 4), (18, 2), (19, 321), (20, 128), (21, 32), (22, 130), (23, 0), (24, 2), (25, 4), (26, 36), (27, 128), (28, 16), (29, 133), (30, 32), (31, 0), (32, 16), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, -1), (5, 512), (6, -1), (7, -1), (8, -1), (9, 512), (10, 8), (11, 128), (12, -1), (13, -1), (14, 128), (15, 512), (16, 272), (17, 4), (18, 2), (19, 321), (20, 128), (21, 32), (22, 130), (23, -1), (24, 2), (25, 4), (26, 36), (27, 128), (28, 16), (29, 133), (30, 32), (31, -1), (32, 16), (33, 8)]

Covered at level 5 : set()

After reduction : 
 pending  : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33]
 solution : [0, 12, 7, 8, 13]


Solution : [0, 12, 7, 8, 13] has cost 28.


Before backtrack at level 5
 pending : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33]
 solution : [0, 12, 7, 8, 13]

After backtrack at level 5
 pending : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33, 13, 8, 31, 23]
 solution : [0, 12, 7]


Before backtrack at level 4
 pending : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33, 13, 8, 31, 23]
 solution : [0, 12, 7]

After backtrack at level 4
 pending : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33, 13, 8, 31, 23, 6]
 solution : [0, 12, 7]


Before backtrack at level 3
 pending : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33, 13, 8, 31, 23, 6]
 solution : [0, 12, 7]

After backtrack at level 3
 pending : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33, 13, 8, 31, 23, 6, 7, 4]
 solution : [0, 12]


Before backtrack at level 2
 pending : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33, 13, 8, 31, 23, 6, 7, 4]
 solution : [0, 12]

After backtrack at level 2
 pending : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33, 13, 8, 31, 23, 6, 7, 4, 3]
 solution : [0, 12]


Before backtrack at level 1
 pending : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33, 13, 8, 31, 23, 6, 7, 4, 3]
 solution : [0, 12]

After backtrack at level 1
 pending : [22, 27, 20, 17, 30, 18, 24, 32, 29, 16, 25, 28, 5, 19, 2, 10, 26, 14, 9, 11, 15, 21, 33, 13, 8, 31, 23, 6, 7, 4, 3, 1]
 solution : [0, 12]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=3]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 22

[MIN NOTE]: maximum branch and bound depth: 20

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 12, 1, 8, 5] (length = 5)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_12] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 5

invariant [invar_1] forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0) # qcost: 3

invariant [invar_8] forall NODE1,NODE0. ~sent(NODE0,NODE1) | allowed_in(NODE1) | allowed_in(NODE0) | NODE0 = NODE1 # qcost: 6

invariant [invar_5] forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE0) | internal(NODE1) | NODE0 = NODE1 # qcost: 6




[QRM NOTE]: Time elapsed since start: 4.245 seconds

[QRM NOTE]: Time elapsed since last: 2.400 seconds

[QRM NOTE]: Peak memory: 2144515 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=3]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_12
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_8
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_12 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_8 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_12 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_8 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_12 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_8 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))) & (forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)) & (forall NODE1,NODE0. ~sent(NODE0,NODE1) | allowed_in(NODE1) | allowed_in(NODE0) | NODE0 = NODE1) & (forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE0) | internal(NODE1) | NODE0 = NODE1))

[QRM NOTE]: Time elapsed since start: 6.410 seconds

[QRM NOTE]: Time elapsed since last: 2.166 seconds

[QRM NOTE]: Peak memory: 1146040 bytes


***************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/firewall: node=3

***************************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.node_3.0.ivy -s node=4 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/firewall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=4]

================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 24

[FW NOTE]: number of branching actions: 32

ivy_to_cpp target=qrm firewall.node_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_4.finite.cpp firewall.node_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_4.finite.o firewall.node_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 8.639 seconds

[QRM NOTE]: Time elapsed since last: 8.639 seconds

[QRM NOTE]: Peak memory: 1185736 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 8

[FW NOTE]: number of total reachable states:        1352

[FW NOTE]: number of dfs representative states:     80

[FW NOTE]: number of dfs non-representative states: 1272


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=4]

=======================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
predicate: internal('node',)
predicate: allowed_in('node',)
predicate: sent('node', 'node')
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'allowed_in(node3)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'internal(node3)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node0,node3)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node1,node3)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)', 'sent(node2,node3)', 'sent(node3,node0)', 'sent(node3,node1)', 'sent(node3,node2)', 'sent(node3,node3)']
representative states : 0, 983040, 458752, 65536, 196608, 1966096, 1966352, 1970448, 1970450, 1970454, 1970462, 1966354, 1966358, 1966366, 1966362, 1966360, 1966098, 1966102, 1966110, 1966100, 1966108, 1179664, 3408640, 7892992, 7893000, 7893128, 7895176, 3408644, 3408708, 1179666, 1441808, 3932928, 3937024, 3945216, 3945220, 3945228, 3945292, 3945420, 3945284, 3945288, 3937028, 3937036, 3937100, 3937228, 3937164, 3937092, 3937220, 3937156, 3937032, 3937096, 3937224, 3937160, 3937088, 3937216, 3937152, 3932932, 3932940, 3933004, 3933132, 3933068, 3932996, 3933000, 3932936, 3933064, 1442064, 1442066, 1442070, 3936768, 3936776, 3936780, 3936908, 3936972, 3936844, 3936836, 3936840, 3936772, 3936900, 1441810, 1441814, 1441812


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000
lex min decimal: 0
states:
000000000000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000011110000000000000000
lex min decimal: 983040
states:
000011110000000000000000




=== State Orbit 2 =====================
size : 4
repr state: 000011010000000000000000
lex min decimal: 458752
states:
000011100000000000000000
000001110000000000000000
000011010000000000000000
000010110000000000000000




=== State Orbit 3 =====================
size : 4
repr state: 000000010000000000000000
lex min decimal: 65536
states:
000000010000000000000000
000010000000000000000000
000001000000000000000000
000000100000000000000000




=== State Orbit 4 =====================
size : 6
repr state: 000000110000000000000000
lex min decimal: 196608
states:
000010100000000000000000
000011000000000000000000
000010010000000000000000
000001100000000000000000
000001010000000000000000
000000110000000000000000




=== State Orbit 5 =====================
size : 12
repr state: 001011010010000000000000
lex min decimal: 1966096
states:
100001110000000000001000
010010110100000000000000
001011010000001000000000
010010110000000000000100
100001110000100000000000
000111100000000000010000
000111100001000000000000
100001110000000010000000
001011010010000000000000
001011010000000000000010
000111100000000100000000
010010110000000001000000




=== State Orbit 6 =====================
size : 12
repr state: 001011010010001000000000
lex min decimal: 1966352
states:
000111100001000100000000
100001110000000010001000
010010110100000000000100
100001110000100010000000
000111100001000000010000
010010110000000001000100
000111100000000100010000
001011010000001000000010
010010110100000001000000
100001110000100000001000
001011010010001000000000
001011010010000000000010




=== State Orbit 7 =====================
size : 4
repr state: 001011010010001000000010
lex min decimal: 1970448
states:
000111100001000100010000
100001110000100010001000
010010110100000001000100
001011010010001000000010




=== State Orbit 8 =====================
size : 12
repr state: 001011010010001010000010
lex min decimal: 1970450
states:
010010110100000101000100
001011010010001001000010
100001110001100010001000
000111100001000100011000
100001110100100010001000
010010110100001001000100
000111100001000100010010
001011010010001010000010
001011010010001000010010
100001110010100010001000
010010110100100001000100
000111100001000100010100




=== State Orbit 9 =====================
size : 12
repr state: 001011010010001011000010
lex min decimal: 1970454
states:
010010110100101001000100
000111100001000100010110
000111100001000100011100
100001110011100010001000
000111100001000100011010
001011010010001010010010
001011010010001001010010
010010110100100101000100
100001110110100010001000
010010110100001101000100
100001110101100010001000
001011010010001011000010




=== State Orbit 10 =====================
size : 4
repr state: 001011010010001011010010
lex min decimal: 1970462
states:
000111100001000100011110
001011010010001011010010
010010110100101101000100
100001110111100010001000




=== State Orbit 11 =====================
size : 24
repr state: 001011010010001010000000
lex min decimal: 1966354
states:
100001110100100000001000
001011010010001010000000
000111100001000100000100
000111100000000100010100
000111100000000100010010
010010110100100001000000
001011010000001001000010
001011010010000010000010
001011010010000000010010
100001110001000010001000
010010110000000101000100
010010110100001001000000
001011010000001000010010
000111100001000000011000
010010110100000100000100
010010110100100000000100
100001110010100010000000
000111100001000000010010
010010110000001001000100
100001110100100010000000
001011010010001001000000
100001110010000010001000
100001110001100000001000
000111100001000100001000




=== State Orbit 12 =====================
size : 12
repr state: 001011010010001011000000
lex min decimal: 1966358
states:
000111100001000000011010
010010110100100100000100
000111100001000100001100
001011010010001011000000
100001110110100010000000
001011010000001001010010
010010110000001101000100
100001110101100000001000
010010110100101001000000
000111100000000100010110
100001110011000010001000
001011010010000010010010




=== State Orbit 13 =====================
size : 12
repr state: 001011010010001011010000
lex min decimal: 1966366
states:
001011010010000011010010
010010110100101101000000
010010110000101101000100
001011010010001011010000
100001110111100000001000
010010110100101100000100
001011010000001011010010
100001110111000010001000
000111100001000000011110
000111100001000100001110
100001110111100010000000
000111100000000100011110




=== State Orbit 14 =====================
size : 24
repr state: 001011010010001010010000
lex min decimal: 1966362
states:
000111100001000100001010
001011010000001010010010
010010110100001101000000
100001110110000010001000
000111100001000000010110
100001110101000010001000
010010110100001100000100
100001110011100010000000
100001110110100000001000
001011010010000011000010
001011010000001011000010
010010110000101001000100
010010110000100101000100
001011010010001010010000
000111100000000100011010
001011010010001001010000
000111100000000100011100
000111100001000000011100
100001110101100010000000
001011010010000001010010
000111100001000100000110
010010110100101000000100
010010110100100101000000
100001110011100000001000




=== State Orbit 15 =====================
size : 12
repr state: 001011010010001000010000
lex min decimal: 1966360
states:
100001110010100000001000
010010110100000101000000
001011010010001000010000
001011010010000001000010
010010110100001000000100
000111100001000000010100
100001110100000010001000
100001110001100010000000
001011010000001010000010
000111100001000100000010
000111100000000100011000
010010110000100001000100




=== State Orbit 16 =====================
size : 12
repr state: 001011010010000010000000
lex min decimal: 1966098
states:
100001110010000010000000
010010110000000100000100
001011010000000000010010
100001110001000000001000
001011010000001001000000
001011010010000010000000
100001110100100000000000
000111100001000000001000
010010110000001001000000
000111100000000000010010
000111100000000100000100
010010110100100000000000




=== State Orbit 17 =====================
size : 24
repr state: 001011010010000011000000
lex min decimal: 1966102
states:
001011010000001001010000
000111100001000000001100
001011010000001011000000
010010110000001101000000
010010110100101000000000
000111100001000000001010
010010110000101001000000
001011010000000010010010
001011010010000011000000
100001110110100000000000
000111100000000100000110
100001110011000000001000
100001110101100000000000
100001110110000010000000
000111100000000000010110
001011010010000010010000
010010110000100100000100
010010110000001100000100
000111100000000100001100
100001110101000000001000
010010110100100100000000
001011010000000001010010
000111100000000000011010
100001110011000010000000




=== State Orbit 18 =====================
size : 12
repr state: 001011010010000011010000
lex min decimal: 1966110
states:
100001110111000010000000
010010110100101100000000
001011010000000011010010
100001110111100000000000
000111100001000000001110
001011010010000011010000
100001110111000000001000
010010110000101100000100
001011010000001011010000
000111100000000100001110
010010110000101101000000
000111100000000000011110




=== State Orbit 19 =====================
size : 24
repr state: 001011010010000001000000
lex min decimal: 1966100
states:
100001110001100000000000
001011010000001000010000
010010110100000100000000
000111100001000000000010
100001110001000010000000
001011010010000001000000
100001110100000000001000
010010110000000101000000
010010110000100000000100
100001110010100000000000
010010110000001000000100
001011010000001010000000
100001110010000000001000
010010110100001000000000
000111100000000000011000
010010110000100001000000
001011010000000001000010
001011010010000000010000
100001110100000010000000
000111100000000000010100
000111100000000100000010
000111100000000100001000
001011010000000010000010
000111100001000000000100




=== State Orbit 20 =====================
size : 12
repr state: 001011010010000001010000
lex min decimal: 1966108
states:
010010110100001100000000
100001110011100000000000
010010110000101000000100
000111100000000000011100
001011010000000011000010
000111100001000000000110
100001110101000010000000
010010110000100101000000
001011010000001010010000
001011010010000001010000
100001110110000000001000
000111100000000100001010




=== State Orbit 21 =====================
size : 12
repr state: 100000010000000000001000
lex min decimal: 1179664
states:
000101000000000100000000
000110000001000000000000
100001000000100000000000
001001000000001000000000
010000100000000001000000
010010000100000000000000
100000010000000000001000
100000100000000010000000
001010000010000000000000
001000010000000000000010
000100100000000000010000
010000010000000000000100




=== State Orbit 22 =====================
size : 12
repr state: 110000010000000000001100
lex min decimal: 3408640
states:
101000010000000000001010
101001000000101000000000
011010000110000000000000
001101000000001100000000
100100100000000010010000
011000010000000000000110
010110000101000000000000
100101000000100100000000
001110000011000000000000
110000010000000000001100
010100100000000001010000
110000100000000011000000




=== State Orbit 23 =====================
size : 4
repr state: 111000010000000000001110
lex min decimal: 7892992
states:
111000010000000000001110
101101000000101100000000
011110000111000000000000
110100100000000011010000




=== State Orbit 24 =====================
size : 12
repr state: 111000010001000000001110
lex min decimal: 7893000
states:
110100100010000011010000
110100100000000011010010
111000010000000100001110
110100100000001011010000
101101000000101101000000
011110000111100000000000
111000010000000000011110
101101000100101100000000
011110000111000010000000
111000010001000000001110
011110000111000000001000
101101000000101100000100




=== State Orbit 25 =====================
size : 12
repr state: 111000010001000100001110
lex min decimal: 7893128
states:
110100100010000011010010
111000010000000100011110
101101000000101101000100
011110000111100000001000
011110000111000010001000
110100100000001011010010
011110000111100010000000
111000010001000100001110
101101000100101100000100
101101000100101101000000
111000010001000000011110
110100100010001011010000




=== State Orbit 26 =====================
size : 4
repr state: 111000010001000100011110
lex min decimal: 7895176
states:
110100100010001011010010
101101000100101101000100
011110000111100010001000
111000010001000100011110




=== State Orbit 27 =====================
size : 24
repr state: 110000010001000000001100
lex min decimal: 3408644
states:
011010000110000010000000
101001000100101000000000
110000100000001011000000
100101000000100100000100
101001000000101001000000
100101000100100100000000
001110000011000000001000
100100100000000010010010
101000010001000000001010
011010000110100000000000
010110000101000000001000
110000100010000011000000
110000010001000000001100
110000010000000100001100
001101000000001100000100
001110000011000010000000
101000010000000000011010
011000010000000000010110
001101000000001101000000
011000010000000100000110
010100100000000001010010
010100100000001001010000
010110000101100000000000
100100100010000010010000




=== State Orbit 28 =====================
size : 12
repr state: 110000010001000100001100
lex min decimal: 3408708
states:
010100100000001001010010
001110000011000010001000
100101000100100100000100
010110000101100000001000
110000100010001011000000
011010000110100010000000
001101000000001101000100
101000010001000000011010
110000010001000100001100
101001000100101001000000
011000010000000100010110
100100100010000010010010




=== State Orbit 29 =====================
size : 12
repr state: 100000010001000000001000
lex min decimal: 1179666
states:
100000100010000010000000
010000100000001001000000
001000010000000000010010
000110000001000000001000
000101000000000100000100
010000010000000100000100
001010000010000010000000
000100100000000000010010
100001000100100000000000
010010000100100000000000
100000010001000000001000
001001000000001001000000




=== State Orbit 30 =====================
size : 24
repr state: 100000110000000010000000
lex min decimal: 1441808
states:
000101100000000000010000
000110100001000000000000
010000110000000001000000
000111000000000100000000
100001010000100000000000
001001010000001000000000
100001100000100000000000
001010010010000000000000
010010010000000000000100
010010100100000000000000
000111000001000000000000
001011000010000000000000
001010010000000000000010
010010100000000001000000
100001100000000010000000
100000110000000010000000
010010010100000000000000
000110100000000000010000
100001010000000000001000
000101100000000100000000
100000110000000000001000
001001010000000000000010
010000110000000000000100
001011000000001000000000




=== State Orbit 31 =====================
size : 12
repr state: 110000110000000011000000
lex min decimal: 3932928
states:
011010010000000000000110
101001010000101000000000
011010010110000000000000
010110100101000000000000
010110100000000001010000
101001010000000000001010
110000110000000000001100
100101100000100100000000
001111000011000000000000
100101100000000010010000
001111000000001100000000
110000110000000011000000




=== State Orbit 32 =====================
size : 24
repr state: 110000110000000011001000
lex min decimal: 3937024
states:
100101100000100100010000
101001010000100000001010
101001010000101000000010
001111000011000100000000
110000110000000001001100
011010010110000000000010
001111000010001100000000
110000110000000011001000
100101100000100110000000
100101100000100010010000
010110100101000001000000
101001010000001000001010
010110100101000000010000
011010010100000000000110
101001010000101000001000
010110100100000001010000
001111000011001000000000
001111000001001100000000
010110100001000001010000
011010010010000000000110
110000110000000010001100
110000110000000011000100
011010010110000000000100
100101100000000110010000




=== State Orbit 33 =====================
size : 6
repr state: 110000110000000011001100
lex min decimal: 3945216
states:
010110100101000001010000
100101100000100110010000
110000110000000011001100
101001010000101000001010
011010010110000000000110
001111000011001100000000




=== State Orbit 34 =====================
size : 24
repr state: 110000110010000011001100
lex min decimal: 3945220
states:
001111000011001100000100
101001010100101000001010
100101100000100110010010
110000110000001011001100
010110100101000001011000
100101100000100110010100
100101100100100110010000
100101100010100110010000
011010010110000000010110
010110100101000001010010
010110100101001001010000
101001010000101000011010
110000110001000011001100
011010010110000010000110
101001010001101000001010
001111000011001100001000
110000110010000011001100
001111000011001110000000
101001010000101001001010
011010010110000100000110
110000110000000111001100
011010010110100000000110
001111000011001101000000
010110100101100001010000




=== State Orbit 35 =====================
size : 12
repr state: 110000110011000011001100
lex min decimal: 3945228
states:
001111000011001111000000
010110100101101001010000
100101100000100110010110
101001010000101001011010
101001010101101000001010
010110100101000001011010
110000110000001111001100
011010010110100100000110
011010010110000010010110
001111000011001100001100
100101100110100110010000
110000110011000011001100




=== State Orbit 36 =====================
size : 24
repr state: 110000110011001011001100
lex min decimal: 3945292
states:
010110100101001001011010
100101100010100110010110
110000110010001111001100
101001010101101000011010
011010010110100100010110
101001010001101001011010
001111000011001110001100
011010010110100010010110
010110100101101001011000
100101100110100110010100
011010010110000110010110
101001010101101001001010
001111000011001101001100
001111000011001111001000
010110100101100001011010
011010010110100110000110
110000110001001111001100
110000110011000111001100
001111000011001111000100
100101100110100110010010
100101100100100110010110
010110100101101001010010
110000110011001011001100
101001010100101001011010




=== State Orbit 37 =====================
size : 6
repr state: 110000110011001111001100
lex min decimal: 3945420
states:
100101100110100110010110
001111000011001111001100
011010010110100110010110
110000110011001111001100
101001010101101001011010
010110100101101001011010




=== State Orbit 38 =====================
size : 12
repr state: 110000110010001011001100
lex min decimal: 3945284
states:
001111000011001101000100
100101100010100110010010
011010010110000100010110
011010010110100010000110
010110100101100001011000
110000110001000111001100
100101100100100110010100
010110100101001001010010
101001010100101001001010
110000110010001011001100
101001010001101000011010
001111000011001110001000




=== State Orbit 39 =====================
size : 12
repr state: 110000110010000111001100
lex min decimal: 3945288
states:
101001010100101000011010
010110100101100001010010
001111000011001101001000
101001010001101001001010
001111000011001110000100
100101100010100110010100
100101100100100110010010
011010010110100000010110
110000110001001011001100
110000110010000111001100
010110100101001001011000
011010010110000110000110




=== State Orbit 40 =====================
size : 24
repr state: 110000110010000011001000
lex min decimal: 3937028
states:
001111000011001010000000
010110100101100001000000
110000110001000010001100
010110100101000000011000
100101100100100110000000
011010010110100000000100
110000110010000011001000
001111000001001100000100
101001010000101001000010
001111000010001101000000
100101100000100100010100
001111000011000100001000
101001010100101000001000
010110100001000001010010
011010010010000000010110
010110100100001001010000
110000110000000101001100
100101100010100010010000
100101100000000110010010
101001010001100000001010
110000110000001011000100
101001010000001000011010
011010010110000010000010
011010010100000100000110




=== State Orbit 41 =====================
size : 24
repr state: 110000110011000011001000
lex min decimal: 3937036
states:
110000110000001101001100
100101100110100010010000
010110100101101001000000
001111000010001111000000
001111000011000100001100
010110100100101001010000
010110100101000000011010
011010010010000010010110
001111000001001100001100
001111000011001011000000
101001010101101000001000
100101100000000110010110
101001010000101001010010
101001010101100000001010
011010010100100100000110
100101100000100100010110
110000110000001111000100
011010010110000010010010
010110100001000001011010
101001010000001001011010
110000110011000010001100
110000110011000011001000
011010010110100100000100
100101100110100110000000




=== State Orbit 42 =====================
size : 24
repr state: 110000110011001011001000
lex min decimal: 3937100
states:
011010010110100110000100
011010010110100010010010
001111000010001111000100
001111000011000110001100
110000110011001011001000
110000110001001101001100
101001010001001001011010
100101100110100010010010
101001010101100000011010
110000110010001111000100
101001010100101001010010
100101100110100110000100
010110100001001001011010
001111000011001011001000
110000110011000110001100
010110100101100000011010
010110100101101001001000
011010010010000110010110
101001010101101001001000
001111000001001101001100
010110100100101001010010
011010010100100100010110
100101100100100100010110
100101100010000110010110




=== State Orbit 43 =====================
size : 24
repr state: 110000110011001111001000
lex min decimal: 3937228
states:
100101100110000110010110
100101100110100010010110
010110100101101001001010
011010010110100110010010
101001010101101001010010
010110100100101001011010
001111000011000111001100
101001010101100001011010
100101100110100100010110
001111000010001111001100
001111000011001011001100
010110100101101000011010
001111000001001111001100
011010010010100110010110
110000110011001101001100
110000110011001111001000
011010010100100110010110
101001010101101001011000
010110100001101001011010
011010010110100110010100
110000110011001110001100
100101100110100110000110
101001010101001001011010
110000110011001111000100




=== State Orbit 44 =====================
size : 24
repr state: 110000110011000111001000
lex min decimal: 3937164
states:
010110100001100001011010
011010010010100010010110
011010010100100110000110
010110100101001000011010
100101100110100010010100
011010010110000110010010
101001010100001001011010
101001010101100001001010
001111000001001110001100
010110100101101001000010
110000110010001101001100
100101100010100100010110
010110100100101001011000
011010010110100100010100
110000110011000111001000
110000110001001111000100
001111000010001111001000
001111000011001011000100
100101100100000110010110
101001010001101001010010
101001010101101000011000
110000110011001010001100
001111000011000101001100
100101100110100110000010




=== State Orbit 45 =====================
size : 24
repr state: 110000110010001011001000
lex min decimal: 3937092
states:
010110100101100001001000
010110100100001001010010
110000110010001011000100
010110100001001001010010
011010010010000100010110
011010010100000100010110
001111000010001101000100
110000110001000101001100
011010010110100010000100
101001010100101001001000
101001010100101001000010
010110100101100000011000
101001010001100000011010
101001010001001000011010
100101100010000110010010
100101100010100010010010
100101100100100100010100
001111000001001101000100
110000110010001011001000
001111000011001010001000
110000110001000110001100
100101100100100110000100
001111000011000110001000
011010010110100010000010




=== State Orbit 46 =====================
size : 24
repr state: 110000110010001111001000
lex min decimal: 3937220
states:
010110100100001001011010
100101100110100100010100
011010010100000110010110
100101100100100110000110
101001010101101001000010
010110100001101001010010
101001010101001000011010
001111000011000111001000
011010010110100110000010
001111000010001101001100
101001010001100001011010
110000110011001011000100
011010010010100100010110
010110100101101000011000
001111000001001111000100
010110100101100001001010
100101100110000110010010
011010010110100010010100
100101100010100010010110
110000110011000101001100
110000110001001110001100
001111000011001010001100
101001010100101001011000
110000110010001111001000




=== State Orbit 47 =====================
size : 24
repr state: 110000110010000111001000
lex min decimal: 3937156
states:
101001010001101001000010
010110100001100001010010
100101100100100110000010
010110100101001000011000
010110100100001001011000
110000110010000111001000
011010010010100000010110
110000110010000101001100
001111000001001110000100
110000110001001011000100
011010010110100000010100
011010010110000110000010
100101100100000110010010
001111000010001101001000
011010010100000110000110
100101100010100100010100
001111000011001010000100
010110100101100001000010
001111000011000101001000
101001010100101000011000
110000110001001010001100
101001010001100001001010
100101100010100010010100
101001010100001000011010




=== State Orbit 48 =====================
size : 24
repr state: 110000110001000011001000
lex min decimal: 3937032
states:
100101100010100110000000
110000110010000010001100
011010010110000100000100
101001010000101000010010
011010010110000000010010
010110100101001001000000
010110100101000000010010
100101100000000110010100
110000110000000111000100
001111000010001110000000
001111000001001100001000
101001010001101000001000
100101100100100010010000
110000110001000011001000
001111000011001001000000
110000110000001001001100
101001010100100000001010
010110100001000001011000
001111000011000100000100
011010010100100000000110
010110100100100001010000
101001010000001001001010
100101100000100100010010
011010010010000010000110




=== State Orbit 49 =====================
size : 24
repr state: 110000110001001011001000
lex min decimal: 3937096
states:
001111000010001110000100
101001010001101001001000
001111000011001001001000
110000110010000110001100
011010010110000110000100
011010010110100000010010
100101100100100010010010
001111000001001101001000
010110100101001001001000
110000110001001001001100
001111000011000110000100
011010010100100000010110
011010010010000110000110
100101100010100110000100
110000110010000111000100
101001010001001001001010
010110100001001001011000
100101100100100100010010
100101100010000110010100
101001010100100000011010
010110100100100001010010
110000110001001011001000
010110100101100000010010
101001010100101000010010




=== State Orbit 50 =====================
size : 24
repr state: 110000110001001111001000
lex min decimal: 3937224
states:
101001010100100001011010
011010010010100110000110
101001010001101001011000
100101100100100010010110
110000110001001111001000
011010010110100100010010
001111000011001001001100
110000110011001001001100
001111000011000111000100
010110100101101000010010
011010010110000110010100
010110100100100001011010
001111000010001110001100
110000110010001110001100
110000110011000111000100
001111000001001111001000
010110100101001001001010
101001010101001001001010
100101100110100100010010
010110100001101001011000
011010010100100010010110
100101100110000110010100
101001010101101000010010
100101100010100110000110




=== State Orbit 51 =====================
size : 24
repr state: 110000110001000111001000
lex min decimal: 3937160
states:
010110100001100001011000
110000110001000111001000
101001010100100001001010
010110100100100001011000
001111000010001110001000
110000110010001010001100
011010010110000100010010
110000110010001001001100
001111000011001001000100
011010010110000100010100
010110100101001001000010
101001010001101000011000
110000110001000111000100
101001010100001001001010
010110100101001000010010
001111000011000101000100
100101100100100010010100
100101100010100110000010
001111000001001110001000
101001010001101000010010
100101100010100100010010
011010010010100010000110
011010010100100010000110
100101100100000110010100




=== State Orbit 52 =====================
size : 24
repr state: 110000110000001011001000
lex min decimal: 3937088
states:
100101100000100010010010
110000110001000001001100
011010010100000000010110
011010010110000010000100
010110100101100000010000
100101100010000110010000
101001010001001000001010
001111000011001000001000
100101100000100110000100
001111000010001100000100
010110100101000001001000
100101100100100100010000
101001010100101000000010
011010010110100000000010
101001010000101001001000
110000110000000110001100
001111000011000110000000
110000110000001011001000
010110100100000001010010
110000110010000011000100
011010010010000100000110
010110100001001001010000
101001010000100000011010
001111000001001101000000




=== State Orbit 53 =====================
size : 24
repr state: 110000110000001111001000
lex min decimal: 3937216
states:
010110100101101000010000
110000110011000011000100
010110100001101001010000
001111000011000111000000
011010010110000010010100
110000110011000001001100
001111000001001111000000
100101100000100110000110
001111000010001100001100
101001010101001000001010
101001010000101001011000
011010010010100100000110
110000110000001110001100
010110100101000001001010
001111000011001000001100
011010010110100100000010
101001010000100001011010
100101100110100100010000
110000110000001111001000
100101100110000110010000
101001010101101000000010
010110100100000001011010
011010010100000010010110
100101100000100010010110




=== State Orbit 54 =====================
size : 24
repr state: 110000110000000111001000
lex min decimal: 3937152
states:
011010010110000000010100
100101100000100110000010
101001010001101000000010
010110100101001000010000
101001010000101000011000
100101100000100010010100
010110100100000001011000
010110100101000001000010
101001010000100001001010
011010010010100000000110
110000110001000011000100
001111000011001000000100
001111000011000101000000
011010010110000100000010
110000110000001010001100
101001010100001000001010
001111000001001110000000
011010010100000010000110
010110100001100001010000
100101100010100100010000
110000110000000111001000
001111000010001100001000
110000110010000001001100
100101100100000110010000




=== State Orbit 55 =====================
size : 24
repr state: 110000110010000011000000
lex min decimal: 3932932
states:
001111000000001101000000
010110100101000000001000
010110100000000001010010
101001010000000000011010
011010010110100000000000
110000110000000100001100
101001010000101001000000
110000110000001011000000
010110100101100000000000
101001010100101000000000
010110100000001001010000
100101100000000010010010
110000110001000000001100
001111000011000010000000
110000110010000011000000
100101100000100100000100
011010010110000010000000
011010010000000000010110
001111000011000000001000
001111000000001100000100
100101100010000010010000
101001010001000000001010
100101100100100100000000
011010010000000100000110




=== State Orbit 56 =====================
size : 24
repr state: 110000110011000011000000
lex min decimal: 3932940
states:
101001010000000001011010
011010010000100100000110
010110100000101001010000
001111000011000000001100
101001010101000000001010
110000110000001100001100
100101100110100100000000
010110100000000001011010
101001010101101000000000
001111000000001111000000
010110100101000000001010
101001010000101001010000
110000110000001111000000
110000110011000000001100
011010010000000010010110
110000110011000011000000
100101100110000010010000
100101100000000010010110
001111000011000011000000
001111000000001100001100
010110100101101000000000
100101100000100100000110
011010010110100100000000
011010010110000010010000




=== State Orbit 57 =====================
size : 24
repr state: 110000110011001011000000
lex min decimal: 3933004
states:
011010010110100110000000
100101100100100100000110
110000110011001011000000
011010010000100100010110
101001010100101001010000
101001010001000001011010
100101100110000010010010
100101100010000010010110
101001010101101001000000
101001010101000000011010
110000110011000100001100
001111000000001111000100
011010010110100010010000
001111000000001101001100
010110100101100000001010
110000110010001111000000
010110100000001001011010
001111000011000010001100
011010010000000110010110
010110100000101001010010
100101100110100100000100
010110100101101000001000
001111000011000011001000
110000110001001100001100




=== State Orbit 58 =====================
size : 12
repr state: 110000110011001111000000
lex min decimal: 3933132
states:
101001010101000001011010
110000110011001100001100
001111000000001111001100
011010010000100110010110
100101100110100100000110
011010010110100110010000
100101100110000010010110
101001010101101001010000
010110100101101000001010
110000110011001111000000
010110100000101001011010
001111000011000011001100




=== State Orbit 59 =====================
size : 24
repr state: 110000110011000111000000
lex min decimal: 3933068
states:
010110100101001000001010
001111000011000011000100
011010010110000110010000
001111000011000001001100
100101100110000010010100
100101100100000010010110
100101100010100100000110
010110100101101000000010
011010010110100100010000
101001010100000001011010
010110100000100001011010
101001010101000001001010
101001010001101001010000
110000110010001100001100
001111000000001110001100
011010010000100110000110
011010010000100010010110
101001010101101000010000
110000110011000111000000
110000110011001000001100
110000110001001111000000
100101100110100100000010
001111000000001111001000
010110100000101001011000




=== State Orbit 60 =====================
size : 12
repr state: 110000110010001011000000
lex min decimal: 3932996
states:
110000110010001011000000
001111000000001101000100
101001010100101001000000
100101100100100100000100
010110100101100000001000
110000110001000100001100
010110100000001001010010
100101100010000010010010
011010010110100010000000
011010010000000100010110
101001010001000000011010
001111000011000010001000




=== State Orbit 61 =====================
size : 24
repr state: 110000110010000111000000
lex min decimal: 3933000
states:
101001010100000000011010
001111000000001110000100
011010010000100000010110
110000110001001000001100
010110100101001000001000
101001010001000001001010
001111000011000010000100
110000110010000100001100
100101100100000010010010
100101100010000010010100
011010010110000110000000
101001010100101000010000
001111000011000001001000
010110100101100000000010
011010010000000110000110
101001010001101001000000
100101100100100100000010
001111000000001101001000
010110100000100001010010
110000110010000111000000
100101100010100100000100
110000110001001011000000
011010010110100000010000
010110100000001001011000




=== State Orbit 62 =====================
size : 24
repr state: 110000110001000011000000
lex min decimal: 3932936
states:
001111000011000000000100
110000110010000000001100
010110100000000001011000
011010010110000100000000
010110100101001000000000
101001010000101000010000
010110100000100001010000
011010010000100000000110
101001010000000001001010
101001010100000000001010
001111000011000001000000
100101100000100100000010
001111000000001110000000
011010010110000000010000
001111000000001100001000
110000110000001000001100
110000110001000011000000
011010010000000010000110
100101100000000010010100
100101100100000010010000
110000110000000111000000
100101100010100100000000
010110100101000000000010
101001010001101000000000




=== State Orbit 63 =====================
size : 12
repr state: 110000110001000111000000
lex min decimal: 3933064
states:
110000110010001000001100
001111000000001110001000
101001010100000001001010
010110100000100001011000
100101100010100100000010
011010010110000100010000
100101100100000010010100
110000110001000111000000
001111000011000001000100
010110100101001000000010
011010010000100010000110
101001010001101000010000




=== State Orbit 64 =====================
size : 12
repr state: 100000110000000010001000
lex min decimal: 1442064
states:
100001010000100000001000
000110100001000000010000
010010010100000000000100
010010100100000001000000
001001010000001000000010
000101100000000100010000
000111000001000100000000
100000110000000010001000
010000110000000001000100
100001100000100010000000
001011000010001000000000
001010010010000000000010




=== State Orbit 65 =====================
size : 24
repr state: 100000110010000010001000
lex min decimal: 1442066
states:
100000110010000010001000
001010010010000000010010
000101100000000100010100
000110100001000000010010
100001100100100010000000
001001010000001000010010
100001010001100000001000
000101100000000100010010
010010010100100000000100
001001010000001001000010
010000110000001001000100
001010010010000010000010
100001100010100010000000
000111000001000100001000
001011000010001001000000
010010100100001001000000
010010010100000100000100
001011000010001010000000
010000110000000101000100
000110100001000000011000
010010100100100001000000
100000110001000010001000
000111000001000100000100
100001010100100000001000




=== State Orbit 66 =====================
size : 12
repr state: 100000110011000010001000
lex min decimal: 1442070
states:
000101100000000100010110
000111000001000100001100
100001010101100000001000
001011000010001011000000
100001100110100010000000
000110100001000000011010
001010010010000010010010
010010010100100100000100
100000110011000010001000
010010100100101001000000
010000110000001101000100
001001010000001001010010




=== State Orbit 67 =====================
size : 12
repr state: 110000110000000010000100
lex min decimal: 3936768
states:
100101100000100000010000
010110100001000001000000
100101100000000110000000
011010010100000000000010
011010010010000000000100
101001010000100000000010
101001010000001000001000
001111000010000100000000
110000110000000001001000
001111000001001000000000
010110100100000000010000
110000110000000010000100




=== State Orbit 68 =====================
size : 24
repr state: 110000110010000010000100
lex min decimal: 3936776
states:
011010010010000100000100
101001010001001000001000
110000110010000010000100
100101100100100000010000
110000110000001001001000
110000110000000110000100
010110100001001001000000
011010010010000010000100
100101100000000110000100
001111000010000110000000
001111000001001000001000
110000110001000001001000
001111000010000100000100
101001010100100000000010
010110100001000001001000
101001010000100000010010
010110100100000000010010
011010010100100000000010
010110100100100000010000
100101100010000110000000
100101100000100000010010
101001010000001001001000
011010010100000000010010
001111000001001001000000




=== State Orbit 69 =====================
size : 24
repr state: 110000110011000010000100
lex min decimal: 3936780
states:
110000110011000010000100
101001010000100001010010
011010010100000010010010
110000110011000001001000
100101100000100000010110
100101100110000110000000
010110100100101000010000
011010010010000010010100
001111000001001000001100
100101100000000110000110
100101100110100000010000
010110100001000001001010
010110100100000000011010
101001010101001000001000
110000110000001110000100
101001010101100000000010
110000110000001101001000
101001010000001001011000
001111000010000100001100
010110100001101001000000
011010010010100100000100
011010010100100100000010
001111000001001011000000
001111000010000111000000




=== State Orbit 70 =====================
size : 24
repr state: 110000110011001010000100
lex min decimal: 3936908
states:
101001010001100001010010
110000110011000101001000
100101100010100000010110
010110100001101001000010
100101100110100000010100
011010010100000110010010
001111000010000101001100
011010010010100100010100
110000110010001101001000
110000110011001010000100
011010010010100010010100
010110100100101000011000
001111000010000111001000
100101100110000110000010
101001010101001000011000
101001010100001001011000
001111000001001010001100
011010010100100110000010
110000110001001110000100
010110100100001000011010
010110100001100001001010
100101100100000110000110
001111000001001011000100
101001010101100001000010




=== State Orbit 71 =====================
size : 12
repr state: 110000110011001110000100
lex min decimal: 3936972
states:
011010010100100110010010
110000110011001110000100
101001010101100001010010
001111000010000111001100
001111000001001011001100
010110100100101000011010
100101100110000110000110
110000110011001101001000
100101100110100000010110
011010010010100110010100
010110100001101001001010
101001010101001001011000




=== State Orbit 72 =====================
size : 24
repr state: 110000110011000110000100
lex min decimal: 3936844
states:
001111000010000110001100
001111000001001001001100
010110100001101001001000
100101100110000110000100
011010010010000110010100
110000110001001101001000
101001010100100001010010
110000110011001001001000
010110100100101000010010
011010010010100110000100
010110100100100000011010
100101100010000110000110
011010010100100100010010
001111000001001011001000
011010010100100010010010
100101100100100000010110
010110100001001001001010
100101100110100000010010
101001010101001001001000
110000110010001110000100
110000110011000110000100
101001010001001001011000
001111000010000111000100
101001010101100000010010




=== State Orbit 73 =====================
size : 24
repr state: 110000110010001010000100
lex min decimal: 3936836
states:
110000110010001001001000
100101100010000110000010
101001010001001000011000
010110100001100001001000
011010010100000100010010
110000110010001010000100
101001010100100001000010
001111000010000110001000
011010010010100010000100
010110100001001001000010
100101100010100000010010
010110100100100000011000
101001010001100000010010
001111000001001001000100
001111000001001010001000
101001010100001001001000
100101100100000110000100
110000110001000101001000
010110100100001000010010
011010010010000100010100
001111000010000101000100
100101100100100000010100
011010010100100010000010
110000110001000110000100




=== State Orbit 74 =====================
size : 12
repr state: 110000110010000110000100
lex min decimal: 3936840
states:
001111000001001001001000
110000110010000110000100
001111000010000110000100
110000110001001001001000
011010010100100000010010
011010010010000110000100
010110100100100000010010
010110100001001001001000
101001010001001001001000
101001010100100000010010
100101100100100000010010
100101100010000110000100




=== State Orbit 75 =====================
size : 24
repr state: 110000110001000010000100
lex min decimal: 3936772
states:
110000110000001010000100
110000110010000001001000
101001010000100001000010
010110100100001000010000
001111000010000101000000
100101100000100000010100
110000110000000101001000
001111000001001010000000
011010010010100000000100
101001010001100000000010
100101100100000110000000
010110100100000000011000
101001010000001000011000
110000110001000010000100
011010010010000000010100
001111000001001000000100
100101100000000110000010
011010010100000100000010
100101100010100000010000
010110100001100001000000
010110100001000001000010
011010010100000010000010
001111000010000100001000
101001010100001000001000




=== State Orbit 76 =====================
size : 12
repr state: 110000110001001010000100
lex min decimal: 3936900
states:
110000110010000101001000
010110100001100001000010
011010010100000110000010
110000110001001010000100
100101100100000110000010
100101100010100000010100
011010010010100000010100
001111000010000101001000
001111000001001010000100
101001010001100001000010
101001010100001000011000
010110100100001000011000




=== State Orbit 77 =====================
size : 24
repr state: 100000110010000010000000
lex min decimal: 1441810
states:
010000110000000100000100
000110100000000000010010
000101100000000100000100
001011000000001001000000
001001010000001001000000
010000110000001001000000
001001010000000000010010
010010100100100000000000
010010100000001001000000
100001100010000010000000
010010010000000100000100
000111000001000000001000
100001010001000000001000
001011000010000010000000
000101100000000000010010
001010010000000000010010
010010010100100000000000
100000110001000000001000
100001100100100000000000
100001010100100000000000
000110100001000000001000
000111000000000100000100
100000110010000010000000
001010010010000010000000




=== State Orbit 78 =====================
size : 24
repr state: 100000110011000010000000
lex min decimal: 1441814
states:
001001010000001001010000
000101100000000100000110
100001010101100000000000
010010010100100100000000
100001100110000010000000
000101100000000000010110
100001010101000000001000
001010010000000010010010
010010010000100100000100
100000110011000000001000
001011000010000011000000
010010100100101000000000
000110100000000000011010
100001100110100000000000
001010010010000010010000
001011000000001011000000
000111000000000100001100
001001010000000001010010
010000110000001100000100
000111000001000000001100
010010100000101001000000
000110100001000000001010
010000110000001101000000
100000110011000010000000




=== State Orbit 79 =====================
size : 24
repr state: 100000110001000010000000
lex min decimal: 1441812
states:
010010010100000100000000
100000110010000000001000
000111000000000100001000
001011000010000001000000
000110100000000000011000
000110100001000000000010
000101100000000000010100
010010010000100000000100
001010010010000000010000
100001010100000000001000
010010100000100001000000
010000110000001000000100
100001100100000010000000
100001010001100000000000
010010100100001000000000
100001100010100000000000
000101100000000100000010
001001010000000001000010
001010010000000010000010
100000110001000010000000
001011000000001010000000
000111000001000000000100
010000110000000101000000
001001010000001000010000



[QRM NOTE]: Time elapsed since start: 9.489 seconds

[QRM NOTE]: Time elapsed since last: 0.849 seconds

[QRM NOTE]: Peak memory: 1626162 bytes


============================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/firewall: node=4]

============================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 10.043 seconds

[QRM NOTE]: Time elapsed since last: 0.554 seconds

[QRM NOTE]: Peak memory: 599227 bytes

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_12
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_8
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_12 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_8 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_12 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_8 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_12 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_8 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS


********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/firewall.node_3.0.ivy']

[CUTOFF]: node=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 68.272 seconds

[QRM NOTE]: Time elapsed since last: 68.272 seconds

