
**********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/naive_consensus.ivy

**********************************************************************


**********************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1

**********************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.ivy -s node=2,value=1 -f 1 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1]

======================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm naive_consensus.node_2_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_2_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_2_value_1.finite.cpp naive_consensus.node_2_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_2_value_1.finite.o naive_consensus.node_2_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 4

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: number of branching actions: 4

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.290 seconds

[QRM NOTE]: Time elapsed since last: 6.290 seconds

[QRM NOTE]: Peak memory: 1174785 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        6

[FW NOTE]: number of dfs representative states:     5

[FW NOTE]: number of dfs non-representative states: 1


=============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1]

=============================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0']
sort: quorum=['quorum__node0_node1']
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: decide('quorum', 'value')
predicate: decision('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decision(value0)', 'vote(node0,value0)', 'vote(node1,value0)']
representative states : 3, 7, 15, 47, 63


=== State Orbit 0 =====================
size : 1
repr state: 0000
lex min decimal: 3
states:
0000




=== State Orbit 1 =====================
size : 2
repr state: 0010
lex min decimal: 7
states:
0010
0001




=== State Orbit 2 =====================
size : 1
repr state: 0011
lex min decimal: 15
states:
0011




=== State Orbit 3 =====================
size : 1
repr state: 1011
lex min decimal: 47
states:
1011




=== State Orbit 4 =====================
size : 1
repr state: 1111
lex min decimal: 63
states:
1111



[QRM NOTE]: Time elapsed since start: 6.369 seconds

[QRM NOTE]: Time elapsed since last: 0.079 seconds

[QRM NOTE]: Peak memory: 1203284 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.373 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 153075 bytes


=============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1]

=============================================================================================================


========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1]

========================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : 1--0
0     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
1     : 1-0-
1     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-0
2     : ['decision(value0)', '~vote(node1,value0)']
3     : -10-
3     : ['decision(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01--
4     : ['decision(value0)', '~decide(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 3

[PRIME NOTE]: number of orbits before merging: 3

[PRIME NOTE]: number of primes: 5

[QRM NOTE]: Time elapsed since start: 6.383 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 1213561 bytes


==================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1]

==================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2]
 solution : []


Before reduction : 
 pending  : [0, 1, 2]
 solution : []

Essensial at level 0 : {0, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1)]

Covered at level 0 : {1}

After reduction : 
 pending  : []
 solution : [0, 2]


Before reduction : 
 pending  : []
 solution : [0, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 2]

[QRM NOTE]: Time elapsed since start: 6.386 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 167529 bytes


======================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1]

======================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : 1--0
0     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
1     : 1-0-
1     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'0$decide': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), Const('value0', EnumeratedSort('value', ('value0',))))], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))): [quorum$0$decide$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decide$1$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0, node$0$member$0$0]}

sig2const: {'quorum$0$decide$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), 'value$0$decide$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0',)): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0',)): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$0$member$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$decide$0$0; quorum$0$member$1$0', 'value$0$decide$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('quorum', ('quorum__node0_node1',)), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',))), 'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'member': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('quorum', ('quorum__node0_node1',)))}

sign_func_name2count:  {'0$decide': 1, '1$vote': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0',)): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0',)): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$0$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$decide$0; quorum$0$member$1': [quorum$0$decide$0$0; quorum$0$member$1$0]}

	identical_single_classes: {'quorum$0$decide$0; quorum$0$member$1': quorum$0$decide$0$0; quorum$0$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decide$1; value$1$vote$1': [value$0$decide$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decide$1; value$1$vote$1': value$0$decide$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decide(QUORUM0,VALUE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0)


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01--
4     : ['decision(value0)', '~decide(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~decide(quorum__node0_node1,value0)', 'decision(value0)']

sign_func_name2args: {'1$decide': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))): [quorum$1$decide$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$decide$1$0, value$0$decision$0$0]}

sig2const: {'quorum$1$decide$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), 'value$1$decide$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$decide$0$0], EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$decide$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$decide$0$0, EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$decide$1$0}

part_sig: ('quorum$1$decide$0$0', 'value$0$decision$0$0; value$1$decide$1$0')


---------- SigGenerator ----------

terms:  ['~decide(quorum__node0_node1,value0)', 'decision(value0)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',))), 'decision': (EnumeratedSort('value', ('value0',)),)}

sign_func_name2count:  {'1$decide': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$decide$0$0], EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$decide$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$decide$0$0, EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$decide$1$0}

	sort: quorum

	identical_classes: {'quorum$1$decide$0': [quorum$1$decide$0$0]}

	identical_single_classes: {'quorum$1$decide$0': quorum$1$decide$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$decide$1': [value$0$decision$0$0; value$1$decide$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$decide$1': value$0$decision$0$0; value$1$decide$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~decide(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0. ~decision(VALUE0) | decide(QUORUM0,VALUE0)


================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1]

================================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : 1--0
0     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
1     : 1-0-
1     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0)
qcost : 6




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01--
4     : ['decision(value0)', '~decide(quorum__node0_node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,QUORUM0. ~decision(VALUE0) | decide(QUORUM0,VALUE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 6.444 seconds

[QRM NOTE]: Time elapsed since last: 0.057 seconds

[QRM NOTE]: Peak memory: 1832909 bytes


===============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1]

===============================================================================================


New level: 1
 pending : []
 solution : [0, 2]


Before reduction : 
 pending  : []
 solution : [0, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 2]


Solution : [0, 2] has cost 10.


Before backtrack at level 1
 pending : []
 solution : [0, 2]

After backtrack at level 1
 pending : []
 solution : [0, 2]


==============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1]

==============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 10

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 2] (length = 2)

invariant [invar_0] forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) # qcost: 6

invariant [invar_2] forall VALUE0,QUORUM0. ~decision(VALUE0) | decide(QUORUM0,VALUE0) # qcost: 4




[QRM NOTE]: Time elapsed since start: 6.478 seconds

[QRM NOTE]: Time elapsed since last: 0.034 seconds

[QRM NOTE]: Peak memory: 1821974 bytes


==================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1]

==================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 12: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 46: invar_0
        ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 47: invar_2

    The following action implementations are present:
        ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 20: implementation of cast_vote
        ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 25: implementation of collect_votes
        ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 30: implementation of learn_value

    The following initializers are present:
        ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 14: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 46: invar_0 ... PASS
        ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 47: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 47: invar_2 ... PASS
        (internal) ext:collect_votes
            ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 47: invar_2 ... PASS
        (internal) ext:learn_value
            ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 47: invar_2 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 21: assumption
        in action collect_votes when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 26: assumption
        in action learn_value when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: line 31: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 8.209 seconds

[QRM NOTE]: Time elapsed since last: 1.732 seconds

[QRM NOTE]: Peak memory: 823721 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/naive_consensus: node=2,value=1

*************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=1]

======================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm naive_consensus.node_3_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_3_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_3_value_1.finite.cpp naive_consensus.node_3_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_3_value_1.finite.o naive_consensus.node_3_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 7

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 9

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 6.060 seconds

[QRM NOTE]: Time elapsed since last: 6.060 seconds

[QRM NOTE]: Peak memory: 1180103 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 7

[FW NOTE]: number of total reachable states:        28

[FW NOTE]: number of dfs representative states:     12

[FW NOTE]: number of dfs non-representative states: 16


=============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=1]

=============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: member('node', 'quorum')
predicate: decide('quorum', 'value')
predicate: vote('node', 'value')
predicate: decision('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node2,value0)', 'decide(quorum__node1_node2,value0)', 'decision(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)']
representative states : 427, 939, 1963, 4011, 12203, 28587, 61355, 65451, 32683, 16299, 10155, 14251


=== State Orbit 0 =====================
size : 1
repr state: 0000000
lex min decimal: 427
states:
0000000




=== State Orbit 1 =====================
size : 3
repr state: 0000100
lex min decimal: 939
states:
0000001
0000100
0000010




=== State Orbit 2 =====================
size : 3
repr state: 0000110
lex min decimal: 1963
states:
0000101
0000110
0000011




=== State Orbit 3 =====================
size : 1
repr state: 0000111
lex min decimal: 4011
states:
0000111




=== State Orbit 4 =====================
size : 3
repr state: 1000111
lex min decimal: 12203
states:
0100111
0010111
1000111




=== State Orbit 5 =====================
size : 3
repr state: 1100111
lex min decimal: 28587
states:
1010111
0110111
1100111




=== State Orbit 6 =====================
size : 1
repr state: 1110111
lex min decimal: 61355
states:
1110111




=== State Orbit 7 =====================
size : 1
repr state: 1111111
lex min decimal: 65451
states:
1111111




=== State Orbit 8 =====================
size : 3
repr state: 1101111
lex min decimal: 32683
states:
0111111
1011111
1101111




=== State Orbit 9 =====================
size : 3
repr state: 1001111
lex min decimal: 16299
states:
1001111
0101111
0011111




=== State Orbit 10 =====================
size : 3
repr state: 1000110
lex min decimal: 10155
states:
0010011
0100101
1000110




=== State Orbit 11 =====================
size : 3
repr state: 1001110
lex min decimal: 14251
states:
1001110
0011011
0101101



[QRM NOTE]: Time elapsed since start: 6.147 seconds

[QRM NOTE]: Time elapsed since last: 0.087 seconds

[QRM NOTE]: Peak memory: 1218782 bytes


==================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=1]

==================================================================================================================================

Representatitive states in reachability not in Rmin

{32683, 16299, 14251}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.218 seconds

[QRM NOTE]: Time elapsed since last: 0.072 seconds

[QRM NOTE]: Peak memory: 201128 bytes

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy -s node=2,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=2]

======================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm naive_consensus.node_2_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_2_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_2_value_2.finite.cpp naive_consensus.node_2_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_2_value_2.finite.o naive_consensus.node_2_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 8

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: number of branching actions: 8

[FW NOTE]: symmetric group order: 4

[QRM NOTE]: Time elapsed since start: 6.190 seconds

[QRM NOTE]: Time elapsed since last: 6.190 seconds

[QRM NOTE]: Peak memory: 1176352 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        13

[FW NOTE]: number of dfs representative states:     6

[FW NOTE]: number of dfs non-representative states: 7


=============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=2]

=============================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1']
predicate: member('node', 'quorum')
predicate: decide('quorum', 'value')
predicate: decision('value',)
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)', 'decision(value0)', 'decision(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)']
representative states : 3, 7, 23, 279, 343, 27


=== State Orbit 0 =====================
size : 1
repr state: 00000000
lex min decimal: 3
states:
00000000




=== State Orbit 1 =====================
size : 4
repr state: 00001000
lex min decimal: 7
states:
00000010
00001000
00000001
00000100




=== State Orbit 2 =====================
size : 2
repr state: 00001010
lex min decimal: 23
states:
00001010
00000101




=== State Orbit 3 =====================
size : 2
repr state: 10001010
lex min decimal: 279
states:
01000101
10001010




=== State Orbit 4 =====================
size : 2
repr state: 10101010
lex min decimal: 343
states:
10101010
01010101




=== State Orbit 5 =====================
size : 2
repr state: 00001001
lex min decimal: 27
states:
00000110
00001001



[QRM NOTE]: Time elapsed since start: 6.273 seconds

[QRM NOTE]: Time elapsed since last: 0.084 seconds

[QRM NOTE]: Peak memory: 1206873 bytes


==================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus: node=2,value=2]

==================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 1023, binary: 11111111

Found a representative state in Rmin not in reachability: decimal: 895, binary: 11011111

Found a representative state in Rmin not in reachability: decimal: 383, binary: 01011111

Found a representative state in Rmin not in reachability: decimal: 831, binary: 11001111

Found a representative state in Rmin not in reachability: decimal: 319, binary: 01001111

Found a representative state in Rmin not in reachability: decimal: 63, binary: 00001111

Found a representative state in Rmin not in reachability: decimal: 31, binary: 00000111

Found a representative state in Rmin not in reachability: decimal: 351, binary: 01010111

Found a representative state in Rmin not in reachability: decimal: 287, binary: 01000111

Found a representative state in Rmin not in reachability: decimal: 15, binary: 00000011

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.296 seconds

[QRM NOTE]: Time elapsed since last: 0.023 seconds

[QRM NOTE]: Peak memory: 165293 bytes

next size: node=3,value=2


**********************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2

**********************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.ivy -s node=3,value=2 -f 1 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2]

======================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm naive_consensus.node_3_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_3_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_3_value_2.finite.cpp naive_consensus.node_3_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_3_value_2.finite.o naive_consensus.node_3_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 14

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 18

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 6.393 seconds

[QRM NOTE]: Time elapsed since last: 6.393 seconds

[QRM NOTE]: Peak memory: 1183014 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 7

[FW NOTE]: number of total reachable states:        79

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 63


=============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2]

=============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decide('quorum', 'value')
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: decision('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value1)', 'decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value1)', 'decision(value0)', 'decision(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)']
representative states : 427, 939, 2987, 11179, 142251, 666539, 2763691, 2796459, 699307, 175019, 11691, 150443, 183211, 134059, 166827, 3499


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000
lex min decimal: 427
states:
00000000000000




=== State Orbit 1 =====================
size : 6
repr state: 00000000100000
lex min decimal: 939
states:
00000000000001
00000000100000
00000000000100
00000000000010
00000000001000
00000000010000




=== State Orbit 2 =====================
size : 6
repr state: 00000000101000
lex min decimal: 2987
states:
00000000001010
00000000101000
00000000100010
00000000010001
00000000000101
00000000010100




=== State Orbit 3 =====================
size : 2
repr state: 00000000101010
lex min decimal: 11179
states:
00000000101010
00000000010101




=== State Orbit 4 =====================
size : 6
repr state: 10000000101010
lex min decimal: 142251
states:
01000000010101
00000100010101
00100000101010
10000000101010
00001000101010
00010000010101




=== State Orbit 5 =====================
size : 6
repr state: 10100000101010
lex min decimal: 666539
states:
10100000101010
01010000010101
10001000101010
01000100010101
00010100010101
00101000101010




=== State Orbit 6 =====================
size : 2
repr state: 10101000101010
lex min decimal: 2763691
states:
10101000101010
01010100010101




=== State Orbit 7 =====================
size : 2
repr state: 10101010101010
lex min decimal: 2796459
states:
01010101010101
10101010101010




=== State Orbit 8 =====================
size : 6
repr state: 10100010101010
lex min decimal: 699307
states:
10001010101010
00010101010101
00101010101010
01000101010101
01010001010101
10100010101010




=== State Orbit 9 =====================
size : 6
repr state: 10000010101010
lex min decimal: 175019
states:
00100010101010
10000010101010
00001010101010
00010001010101
00000101010101
01000001010101




=== State Orbit 10 =====================
size : 6
repr state: 00000000101001
lex min decimal: 11691
states:
00000000011001
00000000100110
00000000101001
00000000100101
00000000010110
00000000011010




=== State Orbit 11 =====================
size : 6
repr state: 10000000101001
lex min decimal: 150443
states:
10000000101001
01000000010110
00100000100110
00010000011001
00000100100101
00001000011010




=== State Orbit 12 =====================
size : 6
repr state: 10000010101001
lex min decimal: 183211
states:
00001010011010
01000001010110
00010001011001
10000010101001
00000101100101
00100010100110




=== State Orbit 13 =====================
size : 6
repr state: 10000000101000
lex min decimal: 134059
states:
10000000101000
00100000100010
00001000001010
00010000010001
00000100000101
01000000010100




=== State Orbit 14 =====================
size : 6
repr state: 10000010101000
lex min decimal: 166827
states:
10000010101000
00100010100010
00000101000101
00010001010001
00001010001010
01000001010100




=== State Orbit 15 =====================
size : 6
repr state: 00000000100100
lex min decimal: 3499
states:
00000000010010
00000000000110
00000000011000
00000000001001
00000000100100
00000000100001



[QRM NOTE]: Time elapsed since start: 6.522 seconds

[QRM NOTE]: Time elapsed since last: 0.129 seconds

[QRM NOTE]: Peak memory: 1245212 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.523 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 207599 bytes


=============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2]

=============================================================================================================


========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2]

========================================================================================================


=== Prime Orbit 0 =====================
size : 6
num_suborbits: 1
0 (*) : -1----1-------
0     : ['decide(quorum__node0_node1,value1)', 'decision(value0)']
1     : 1------1------
1     : ['decide(quorum__node0_node1,value0)', 'decision(value1)']
2     : ---1--1-------
2     : ['decide(quorum__node0_node2,value1)', 'decision(value0)']
3     : --1----1------
3     : ['decide(quorum__node0_node2,value0)', 'decision(value1)']
4     : -----11-------
4     : ['decide(quorum__node1_node2,value1)', 'decision(value0)']
5     : ----1--1------
5     : ['decide(quorum__node1_node2,value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
6 (*) : ------11------
6     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 1
7 (*) : --1---------0-
7     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
8     : ---1---------0
8     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
9     : 1---------0---
9     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
10     : -1---------0--
10     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
11     : ----1-------0-
11     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
12     : -----1-------0
12     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
13     : 1-------0-----
13     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
14     : -1-------0----
14     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
15     : ----1-----0---
15     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
16     : -----1-----0--
16     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
17     : --1-----0-----
17     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
18     : ---1-----0----
18     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 9
num_suborbits: 2
19 (*) : -11-----------
19     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node2,value0)']
20     : 1--1----------
20     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node2,value1)']
21     : -1--1---------
21     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node1_node2,value0)']
22     : 1----1--------
22     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node1_node2,value1)']
23     : ---11---------
23     : ['decide(quorum__node0_node2,value1)', 'decide(quorum__node1_node2,value0)']
24     : --1--1--------
24     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node1_node2,value1)']
37 (*) : --11----------
37     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value1)']
38     : 11------------
38     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)']
39     : ----11--------
39     : ['decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
25 (*) : --1----------1
25     : ['decide(quorum__node0_node2,value0)', 'vote(node2,value1)']
26     : ---1--------1-
26     : ['decide(quorum__node0_node2,value1)', 'vote(node2,value0)']
27     : 1----------1--
27     : ['decide(quorum__node0_node1,value0)', 'vote(node1,value1)']
28     : -1--------1---
28     : ['decide(quorum__node0_node1,value1)', 'vote(node1,value0)']
29     : ----1--------1
29     : ['decide(quorum__node1_node2,value0)', 'vote(node2,value1)']
30     : -----1------1-
30     : ['decide(quorum__node1_node2,value1)', 'vote(node2,value0)']
31     : 1--------1----
31     : ['decide(quorum__node0_node1,value0)', 'vote(node0,value1)']
32     : -1------1-----
32     : ['decide(quorum__node0_node1,value1)', 'vote(node0,value0)']
33     : ----1------1--
33     : ['decide(quorum__node1_node2,value0)', 'vote(node1,value1)']
34     : -----1----1---
34     : ['decide(quorum__node1_node2,value1)', 'vote(node1,value0)']
35     : --1------1----
35     : ['decide(quorum__node0_node2,value0)', 'vote(node0,value1)']
36     : ---1----1-----
36     : ['decide(quorum__node0_node2,value1)', 'vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
40 (*) : ------------11
40     : ['vote(node2,value0)', 'vote(node2,value1)']
41     : ----------11--
41     : ['vote(node1,value0)', 'vote(node1,value1)']
42     : --------11----
42     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
43 (*) : -0-----1----1-
43     : ['decision(value1)', 'vote(node2,value0)', '~decide(quorum__node0_node1,value1)']
44     : 0-----1------1
44     : ['decision(value0)', 'vote(node2,value1)', '~decide(quorum__node0_node1,value0)']
45     : ---0---1--1---
45     : ['decision(value1)', 'vote(node1,value0)', '~decide(quorum__node0_node2,value1)']
46     : --0---1----1--
46     : ['decision(value0)', 'vote(node1,value1)', '~decide(quorum__node0_node2,value0)']
47     : -----0-11-----
47     : ['decision(value1)', 'vote(node0,value0)', '~decide(quorum__node1_node2,value1)']
48     : ----0-1--1----
48     : ['decision(value0)', 'vote(node0,value1)', '~decide(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 1
49 (*) : -------1---01-
49     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
50     : ------1---0--1
50     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
51     : -------1--1--0
51     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
52     : ------1----10-
52     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
53     : -------1-0--1-
53     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
54     : ------1-0----1
54     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
55     : -------11----0
55     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
56     : ------1--1--0-
56     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
57     : -------1-01---
57     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
58     : ------1-0--1--
58     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
59     : -------11--0--
59     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
60     : ------1--10---
60     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
61 (*) : -------1-0-0--
61     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
62     : ------1-0-0---
62     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
63     : -------1-0---0
63     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
64     : ------1-0---0-
64     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
65     : -------1---0-0
65     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
66     : ------1---0-0-
66     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
67 (*) : -----0-1-0----
67     : ['decision(value1)', '~decide(quorum__node1_node2,value1)', '~vote(node0,value1)']
68     : ----0-1-0-----
68     : ['decision(value0)', '~decide(quorum__node1_node2,value0)', '~vote(node0,value0)']
69     : ---0---1---0--
69     : ['decision(value1)', '~decide(quorum__node0_node2,value1)', '~vote(node1,value1)']
70     : --0---1---0---
70     : ['decision(value0)', '~decide(quorum__node0_node2,value0)', '~vote(node1,value0)']
71     : -0-----1-----0
71     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~vote(node2,value1)']
72     : 0-----1-----0-
72     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
73 (*) : -------1--1-1-
73     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
74     : ------1----1-1
74     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
75     : -------11---1-
75     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
76     : ------1--1---1
76     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
77     : -------11-1---
77     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
78     : ------1--1-1--
78     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
79 (*) : 0-0-0-1-------
79     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
80     : -0-0-0-1------
80     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 12

[PRIME NOTE]: number of orbits before merging: 13

[PRIME NOTE]: number of primes: 81

[QRM NOTE]: Time elapsed since start: 6.549 seconds

[QRM NOTE]: Time elapsed since last: 0.025 seconds

[QRM NOTE]: Peak memory: 1375918 bytes


==================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2]

==================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 solution : []

Essensial at level 0 : {2, 11, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

After removed
 coverage : [(0, 0), (1, 0), (2, -1), (3, 0), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1)]

Covered at level 0 : {0, 1, 3, 4, 6, 7, 8, 9, 10}

After reduction : 
 pending  : []
 solution : [2, 11, 5]


Before reduction : 
 pending  : []
 solution : [2, 11, 5]

Essensial at level 0 : set()

Before removed
 coverage : [(0, 0), (1, 0), (2, -1), (3, 0), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [2, 11, 5]

[QRM NOTE]: Time elapsed since start: 6.582 seconds

[QRM NOTE]: Time elapsed since last: 0.033 seconds

[QRM NOTE]: Peak memory: 345498 bytes


======================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2]

======================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 1
7 (*) : --1---------0-
7     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
8     : ---1---------0
8     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
9     : 1---------0---
9     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
10     : -1---------0--
10     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
11     : ----1-------0-
11     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
12     : -----1-------0
12     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
13     : 1-------0-----
13     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
14     : -1-------0----
14     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
15     : ----1-----0---
15     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
16     : -----1-----0--
16     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
17     : --1-----0-----
17     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
18     : ---1-----0----
18     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'0$decide': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$decide$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decide$1$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$member$0$0]}

sig2const: {'quorum$0$decide$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$decide$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$decide$0$0; quorum$0$member$1$0', 'value$0$decide$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decide': 1, '1$vote': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$decide$0; quorum$0$member$1': [quorum$0$decide$0$0; quorum$0$member$1$0]}

	identical_single_classes: {'quorum$0$decide$0; quorum$0$member$1': quorum$0$decide$0$0; quorum$0$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decide$1; value$1$vote$1': [value$0$decide$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decide$1; value$1$vote$1': value$0$decide$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decide(QUORUM0,VALUE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. vote(NODE0,VALUE0) | ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0)


=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
79 (*) : 0-0-0-1-------
79     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
80     : -0-0-0-1------
80     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)', 'decision(value0)']

sign_func_name2args: {'1$decide': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$decide$1$0, value$1$decide$1$1, value$1$decide$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$2]}

sig2const: {'quorum$1$decide$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$decide$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$decide$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$2': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

part_sig: ('quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2', 'value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2')


---------- SigGenerator ----------

terms:  ['~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)', 'decision(value0)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'1$decide': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

	sort: quorum

	identical_classes: {'quorum$1$decide$0': [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$decide$0': [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$decide$1; value$1$decide$1; value$1$decide$1': [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$decide$1; value$1$decide$1; value$1$decide$1': value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~decide(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | decide(QUORUM0,VALUE0))


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
40 (*) : ------------11
40     : ['vote(node2,value0)', 'vote(node2,value1)']
41     : ----------11--
41     : ['vote(node1,value0)', 'vote(node1,value1)']
42     : --------11----
42     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', 'vote(node2,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2]

================================================================================================================


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 1
7 (*) : --1---------0-
7     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
8     : ---1---------0
8     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
9     : 1---------0---
9     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
10     : -1---------0--
10     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
11     : ----1-------0-
11     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
12     : -----1-------0
12     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
13     : 1-------0-----
13     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
14     : -1-------0----
14     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
15     : ----1-----0---
15     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
16     : -----1-----0--
16     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
17     : --1-----0-----
17     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
18     : ---1-----0----
18     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,QUORUM0,NODE0. vote(NODE0,VALUE0) | ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0)
qcost : 6




=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
79 (*) : 0-0-0-1-------
79     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
80     : -0-0-0-1------
80     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | decide(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
40 (*) : ------------11
40     : ['vote(node2,value0)', 'vote(node2,value1)']
41     : ----------11--
41     : ['vote(node1,value0)', 'vote(node1,value1)']
42     : --------11----
42     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3



[QRM NOTE]: Time elapsed since start: 6.648 seconds

[QRM NOTE]: Time elapsed since last: 0.066 seconds

[QRM NOTE]: Peak memory: 2013867 bytes


===============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2]

===============================================================================================


New level: 1
 pending : []
 solution : [2, 11, 5]


Before reduction : 
 pending  : []
 solution : [2, 11, 5]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [2, 11, 5]


Solution : [2, 11, 5] has cost 13.


Before backtrack at level 1
 pending : []
 solution : [2, 11, 5]

After backtrack at level 1
 pending : []
 solution : [2, 11, 5]


==============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2]

==============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 13

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [2, 11, 5] (length = 3)

invariant [invar_2] forall VALUE0,QUORUM0,NODE0. vote(NODE0,VALUE0) | ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) # qcost: 6

invariant [invar_11] forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | decide(QUORUM0,VALUE0)) # qcost: 4

invariant [invar_5] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3




[QRM NOTE]: Time elapsed since start: 6.687 seconds

[QRM NOTE]: Time elapsed since last: 0.039 seconds

[QRM NOTE]: Peak memory: 1998488 bytes


==================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2]

==================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 12: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 46: invar_2
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 47: invar_11
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 48: invar_5

    The following action implementations are present:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 20: implementation of cast_vote
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 25: implementation of collect_votes
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 30: implementation of learn_value

    The following initializers are present:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 14: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 46: invar_2 ... PASS
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 47: invar_11 ... PASS
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 48: invar_5 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 48: invar_5 ... FAIL
        (internal) ext:collect_votes
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 48: invar_5 ... PASS
        (internal) ext:learn_value
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 48: invar_5 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 21: assumption
        in action collect_votes when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 26: assumption
        in action learn_value when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: line 31: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 8.419 seconds

[QRM NOTE]: Time elapsed since last: 1.732 seconds

[QRM NOTE]: Peak memory: 999880 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/naive_consensus: node=3,value=2

*************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy -s node=4,value=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=4,value=2]

======================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm naive_consensus.node_4_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_4_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_4_value_2.finite.cpp naive_consensus.node_4_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_4_value_2.finite.o naive_consensus.node_4_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 18

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: number of branching actions: 24

[FW NOTE]: symmetric group order: 48

[QRM NOTE]: Time elapsed since start: 6.391 seconds

[QRM NOTE]: Time elapsed since last: 6.391 seconds

[QRM NOTE]: Peak memory: 1188354 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 9

[FW NOTE]: number of total reachable states:        173

[FW NOTE]: number of dfs representative states:     21

[FW NOTE]: number of dfs non-representative states: 152


=============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=4,value=2]

=============================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: decision('value',)
predicate: vote('node', 'value')
predicate: decide('quorum', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['decide(quorum__node0_node1_node2,value0)', 'decide(quorum__node0_node1_node2,value1)', 'decide(quorum__node0_node1_node3,value0)', 'decide(quorum__node0_node1_node3,value1)', 'decide(quorum__node0_node2_node3,value0)', 'decide(quorum__node0_node2_node3,value1)', 'decide(quorum__node1_node2_node3,value0)', 'decide(quorum__node1_node2_node3,value1)', 'decision(value0)', 'decision(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)']
representative states : 60855, 126391, 388535, 1437111, 5631415, 72740279, 341175735, 1414917559, 5709884855, 5726662071, 1431694775, 357952951, 89517495, 5696951, 76934583, 93711799, 68545975, 85323191, 1502647, 5959095, 454071


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000
lex min decimal: 60855
states:
000000000000000000




=== State Orbit 1 =====================
size : 8
repr state: 000000000010000000
lex min decimal: 126391
states:
000000000000001000
000000000000000100
000000000010000000
000000000000000010
000000000000000001
000000000000100000
000000000001000000
000000000000010000




=== State Orbit 2 =====================
size : 12
repr state: 000000000010100000
lex min decimal: 388535
states:
000000000000001010
000000000000101000
000000000010000010
000000000010001000
000000000000010100
000000000000010001
000000000000100010
000000000000000101
000000000001010000
000000000001000001
000000000001000100
000000000010100000




=== State Orbit 3 =====================
size : 8
repr state: 000000000010101000
lex min decimal: 1437111
states:
000000000010101000
000000000001010001
000000000001010100
000000000000010101
000000000000101010
000000000001000101
000000000010001010
000000000010100010




=== State Orbit 4 =====================
size : 2
repr state: 000000000010101010
lex min decimal: 5631415
states:
000000000001010101
000000000010101010




=== State Orbit 5 =====================
size : 8
repr state: 100000000010101010
lex min decimal: 72740279
states:
000000010001010101
100000000010101010
000000100010101010
010000000001010101
000100000001010101
001000000010101010
000001000001010101
000010000010101010




=== State Orbit 6 =====================
size : 12
repr state: 101000000010101010
lex min decimal: 341175735
states:
000100010001010101
000001010001010101
010100000001010101
100000100010101010
001000100010101010
100010000010101010
001010000010101010
000101000001010101
000010100010101010
010001000001010101
101000000010101010
010000010001010101




=== State Orbit 7 =====================
size : 8
repr state: 101010000010101010
lex min decimal: 1414917559
states:
100010100010101010
010100010001010101
101000100010101010
101010000010101010
010001010001010101
000101010001010101
010101000001010101
001010100010101010




=== State Orbit 8 =====================
size : 2
repr state: 101010100010101010
lex min decimal: 5709884855
states:
010101010001010101
101010100010101010




=== State Orbit 9 =====================
size : 2
repr state: 101010101010101010
lex min decimal: 5726662071
states:
101010101010101010
010101010101010101




=== State Orbit 10 =====================
size : 8
repr state: 101010001010101010
lex min decimal: 1431694775
states:
001010101010101010
010001010101010101
010101000101010101
000101010101010101
100010101010101010
010100010101010101
101000101010101010
101010001010101010




=== State Orbit 11 =====================
size : 12
repr state: 101000001010101010
lex min decimal: 357952951
states:
000001010101010101
000100010101010101
100010001010101010
010001000101010101
100000101010101010
000101000101010101
101000001010101010
010000010101010101
001000101010101010
010100000101010101
000010101010101010
001010001010101010




=== State Orbit 12 =====================
size : 8
repr state: 100000001010101010
lex min decimal: 89517495
states:
000010001010101010
000000101010101010
000100000101010101
000000010101010101
100000001010101010
000001000101010101
001000001010101010
010000000101010101




=== State Orbit 13 =====================
size : 8
repr state: 000000000010101001
lex min decimal: 5696951
states:
000000000001100101
000000000010100110
000000000001010110
000000000010010101
000000000010101001
000000000001101010
000000000010011010
000000000001011001




=== State Orbit 14 =====================
size : 8
repr state: 100000000010101001
lex min decimal: 76934583
states:
000001000001100101
000000100001101010
010000000001010110
000100000001011001
001000000010100110
100000000010101001
000000010010010101
000010000010011010




=== State Orbit 15 =====================
size : 8
repr state: 100000001010101001
lex min decimal: 93711799
states:
000000101001101010
000100000101011001
000000010110010101
000010001010011010
000001000101100101
100000001010101001
010000000101010110
001000001010100110




=== State Orbit 16 =====================
size : 8
repr state: 100000000010101000
lex min decimal: 68545975
states:
000100000001010001
000001000001000101
100000000010101000
001000000010100010
000000010000010101
010000000001010100
000000100000101010
000010000010001010




=== State Orbit 17 =====================
size : 8
repr state: 100000001010101000
lex min decimal: 85323191
states:
000000010100010101
000100000101010001
000001000101000101
000010001010001010
000000101000101010
100000001010101000
010000000101010100
001000001010100010




=== State Orbit 18 =====================
size : 24
repr state: 000000000010100100
lex min decimal: 1502647
states:
000000000010100100
000000000000011010
000000000001011000
000000000010100001
000000000000101001
000000000000011001
000000000001010010
000000000000100110
000000000010010100
000000000010010001
000000000001001001
000000000000010110
000000000001100001
000000000010010010
000000000001001010
000000000001101000
000000000010011000
000000000010001001
000000000001000110
000000000001100010
000000000000100101
000000000001100100
000000000010000101
000000000010000110




=== State Orbit 19 =====================
size : 6
repr state: 000000000010100101
lex min decimal: 5959095
states:
000000000001100110
000000000010011001
000000000001101001
000000000010100101
000000000001011010
000000000010010110




=== State Orbit 20 =====================
size : 12
repr state: 000000000010010000
lex min decimal: 454071
states:
000000000000000110
000000000010000100
000000000000100100
000000000001100000
000000000000011000
000000000010010000
000000000010000001
000000000001001000
000000000000010010
000000000000001001
000000000001000010
000000000000100001



[QRM NOTE]: Time elapsed since start: 6.735 seconds

[QRM NOTE]: Time elapsed since last: 0.344 seconds

[QRM NOTE]: Peak memory: 1277496 bytes


==================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus: node=4,value=2]

==================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.109 seconds

[QRM NOTE]: Time elapsed since last: 0.374 seconds

[QRM NOTE]: Peak memory: 320961 bytes

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

======================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm naive_consensus.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_3_value_3.finite.cpp naive_consensus.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_3_value_3.finite.o naive_consensus.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 21

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 27

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 6.691 seconds

[QRM NOTE]: Time elapsed since last: 6.691 seconds

[QRM NOTE]: Peak memory: 1185738 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 7

[FW NOTE]: number of total reachable states:        160

[FW NOTE]: number of dfs representative states:     17

[FW NOTE]: number of dfs non-representative states: 143


=============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

=============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: vote('node', 'value')
predicate: decision('value',)
predicate: member('node', 'quorum')
predicate: decide('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node1,value2)', 'decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value1)', 'decide(quorum__node0_node2,value2)', 'decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value1)', 'decide(quorum__node1_node2,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)']
representative states : 427, 939, 5035, 37803, 2134955, 18912171, 153129899, 153392043, 19174315, 2397099, 38315, 2167723, 2429867, 2102187, 2364331, 5547, 43435


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000
lex min decimal: 427
states:
000000000000000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000100000000
lex min decimal: 939
states:
000000000000000000100
000000000000010000000
000000000000000000010
000000000000000000001
000000000000000001000
000000000000001000000
000000000000000100000
000000000000100000000
000000000000000010000




=== State Orbit 2 =====================
size : 9
repr state: 000000000000100100000
lex min decimal: 5035
states:
000000000000001000001
000000000000000001001
000000000000010010000
000000000000000010010
000000000000000100100
000000000000001001000
000000000000100000100
000000000000100100000
000000000000010000010




=== State Orbit 3 =====================
size : 3
repr state: 000000000000100100100
lex min decimal: 37803
states:
000000000000100100100
000000000000001001001
000000000000010010010




=== State Orbit 4 =====================
size : 9
repr state: 100000000000100100100
lex min decimal: 2134955
states:
000000100000100100100
010000000000010010010
000010000000010010010
000001000000001001001
001000000000001001001
100000000000100100100
000000001000001001001
000000010000010010010
000100000000100100100




=== State Orbit 5 =====================
size : 9
repr state: 100100000000100100100
lex min decimal: 18912171
states:
000001001000001001001
010000010000010010010
000010010000010010010
010010000000010010010
100100000000100100100
001000001000001001001
100000100000100100100
001001000000001001001
000100100000100100100




=== State Orbit 6 =====================
size : 3
repr state: 100100100000100100100
lex min decimal: 153129899
states:
100100100000100100100
001001001000001001001
010010010000010010010




=== State Orbit 7 =====================
size : 3
repr state: 100100100100100100100
lex min decimal: 153392043
states:
100100100100100100100
001001001001001001001
010010010010010010010




=== State Orbit 8 =====================
size : 9
repr state: 100100000100100100100
lex min decimal: 19174315
states:
000100100100100100100
100100000100100100100
100000100100100100100
001001000001001001001
001000001001001001001
000001001001001001001
000010010010010010010
010010000010010010010
010000010010010010010




=== State Orbit 9 =====================
size : 9
repr state: 100000000100100100100
lex min decimal: 2397099
states:
000100000100100100100
000001000001001001001
000010000010010010010
000000100100100100100
000000010010010010010
000000001001001001001
010000000010010010010
001000000001001001001
100000000100100100100




=== State Orbit 10 =====================
size : 18
repr state: 000000000000100100010
lex min decimal: 38315
states:
000000000000010010100
000000000000010001010
000000000000100010100
000000000000010100010
000000000000001001010
000000000000001100001
000000000000100100001
000000000000001010001
000000000000001001100
000000000000001100100
000000000000100010010
000000000000001010010
000000000000100001001
000000000000010100100
000000000000100001100
000000000000010001001
000000000000100100010
000000000000010010001




=== State Orbit 11 =====================
size : 18
repr state: 100000000000100100010
lex min decimal: 2167723
states:
001000000000001001010
100000000000100100010
000000001000100001001
000100000000100010100
000001000000001100001
000000010000100010010
010000000000010010001
000001000000001010001
001000000000001001100
000000100000010100100
000100000000100001100
000000001000010001001
000010000000010001010
000000010000001010010
100000000000100100001
000000100000001100100
010000000000010010100
000010000000010100010




=== State Orbit 12 =====================
size : 18
repr state: 100000000100100100010
lex min decimal: 2429867
states:
010000000010010010100
000010000010010001010
000100000100100001100
100000000100100100001
000000100100010100100
001000000001001001010
000010000010010100010
000000001001100001001
000000010010100010010
010000000010010010001
100000000100100100010
001000000001001001100
000100000100100010100
000001000001001010001
000000100100001100100
000000010010001010010
000001000001001100001
000000001001010001001




=== State Orbit 13 =====================
size : 9
repr state: 100000000000100100000
lex min decimal: 2102187
states:
000000100000000100100
001000000000001001000
100000000000100100000
000100000000100000100
000000001000000001001
000000010000000010010
000010000000010000010
010000000000010010000
000001000000001000001




=== State Orbit 14 =====================
size : 9
repr state: 100000000100100100000
lex min decimal: 2364331
states:
000000010010000010010
010000000010010010000
100000000100100100000
001000000001001001000
000000100100000100100
000001000001001000001
000010000010010000010
000100000100100000100
000000001001000001001




=== State Orbit 15 =====================
size : 18
repr state: 000000000000100010000
lex min decimal: 5547
states:
000000000000100001000
000000000000100000010
000000000000001100000
000000000000001000010
000000000000000100010
000000000000010001000
000000000000000010001
000000000000010100000
000000000000000001100
000000000000010000001
000000000000000001010
000000000000010000100
000000000000000100001
000000000000000010100
000000000000100000001
000000000000001010000
000000000000100010000
000000000000001000100




=== State Orbit 16 =====================
size : 6
repr state: 000000000000100010001
lex min decimal: 43435
states:
000000000000010100001
000000000000100010001
000000000000010001100
000000000000100001010
000000000000001010100
000000000000001100010



[QRM NOTE]: Time elapsed since start: 6.954 seconds

[QRM NOTE]: Time elapsed since last: 0.263 seconds

[QRM NOTE]: Peak memory: 1265331 bytes


==================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

==================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 460175275, binary: 011011011011011011011

Found a representative state in Rmin not in reachability: decimal: 459650987, binary: 011011011001011011011

Found a representative state in Rmin not in reachability: decimal: 191215531, binary: 001011011001011011011

Found a representative state in Rmin not in reachability: decimal: 157661099, binary: 001001011001011011011

Found a representative state in Rmin not in reachability: decimal: 153466795, binary: 001001001001011011011

Found a representative state in Rmin not in reachability: decimal: 157398955, binary: 001001011000011011011

Found a representative state in Rmin not in reachability: decimal: 190953387, binary: 001011011000011011011

Found a representative state in Rmin not in reachability: decimal: 174176171, binary: 001010011000011011011

Found a representative state in Rmin not in reachability: decimal: 23181227, binary: 000001011000011011011

Found a representative state in Rmin not in reachability: decimal: 18986923, binary: 000001001000011011011

Found a representative state in Rmin not in reachability: decimal: 155301803, binary: 001001010000011011011

Found a representative state in Rmin not in reachability: decimal: 153204651, binary: 001001001000011011011

Found a representative state in Rmin not in reachability: decimal: 2209707, binary: 000000001000011011011

Found a representative state in Rmin not in reachability: decimal: 21084075, binary: 000001010000011011011

Found a representative state in Rmin not in reachability: decimal: 6404011, binary: 000000011000011011011

Found a representative state in Rmin not in reachability: decimal: 56735659, binary: 000011011000011011011

Found a representative state in Rmin not in reachability: decimal: 459388843, binary: 011011011000011011011

Found a representative state in Rmin not in reachability: decimal: 112555, binary: 000000000000011011011

Found a representative state in Rmin not in reachability: decimal: 157333419, binary: 001001011000001011011

Found a representative state in Rmin not in reachability: decimal: 157726635, binary: 001001011001101011011

Found a representative state in Rmin not in reachability: decimal: 153467819, binary: 001001001001011011101

Found a representative state in Rmin not in reachability: decimal: 23115691, binary: 000001011000001011011

Found a representative state in Rmin not in reachability: decimal: 6338475, binary: 000000011000001011011

Found a representative state in Rmin not in reachability: decimal: 18921387, binary: 000001001000001011011

Found a representative state in Rmin not in reachability: decimal: 2144171, binary: 000000001000001011011

Found a representative state in Rmin not in reachability: decimal: 153139115, binary: 001001001000001011011

Found a representative state in Rmin not in reachability: decimal: 18985899, binary: 000001001000011011001

Found a representative state in Rmin not in reachability: decimal: 2201515, binary: 000000001000011001011

Found a representative state in Rmin not in reachability: decimal: 47019, binary: 000000000000001011011

Found a representative state in Rmin not in reachability: decimal: 2176939, binary: 000000001000010011011

Found a representative state in Rmin not in reachability: decimal: 21018539, binary: 000001010000001011011

Found a representative state in Rmin not in reachability: decimal: 155236267, binary: 001001010000001011011

Found a representative state in Rmin not in reachability: decimal: 157595563, binary: 001001011001001011011

Found a representative state in Rmin not in reachability: decimal: 153401259, binary: 001001001001001011011

Found a representative state in Rmin not in reachability: decimal: 157464491, binary: 001001011000101011011

Found a representative state in Rmin not in reachability: decimal: 23246763, binary: 000001011000101011011

Found a representative state in Rmin not in reachability: decimal: 6469547, binary: 000000011000101011011

Found a representative state in Rmin not in reachability: decimal: 18995115, binary: 000001001000011101011

Found a representative state in Rmin not in reachability: decimal: 153205675, binary: 001001001000011011101

Found a representative state in Rmin not in reachability: decimal: 2218923, binary: 000000001000011101101

Found a representative state in Rmin not in reachability: decimal: 18987947, binary: 000001001000011011101

Found a representative state in Rmin not in reachability: decimal: 155367339, binary: 001001010000101011011

Found a representative state in Rmin not in reachability: decimal: 21096363, binary: 000001010000011110011

Found a representative state in Rmin not in reachability: decimal: 2210731, binary: 000000001000011011101

Found a representative state in Rmin not in reachability: decimal: 113579, binary: 000000000000011011101

Found a representative state in Rmin not in reachability: decimal: 2308011, binary: 000000001000110011011

Found a representative state in Rmin not in reachability: decimal: 2186155, binary: 000000001000010101101

Found a representative state in Rmin not in reachability: decimal: 60843, binary: 000000000000001110110

Found a representative state in Rmin not in reachability: decimal: 6436779, binary: 000000011000100011011

Found a representative state in Rmin not in reachability: decimal: 6305707, binary: 000000011000000011011

Found a representative state in Rmin not in reachability: decimal: 2111403, binary: 000000001000000011011

Found a representative state in Rmin not in reachability: decimal: 14251, binary: 000000000000000011011

Found a representative state in Rmin not in reachability: decimal: 2177963, binary: 000000001000010011101

Found a representative state in Rmin not in reachability: decimal: 48555, binary: 000000000000001011110

Found a representative state in Rmin not in reachability: decimal: 2299819, binary: 000000001000110001011

Found a representative state in Rmin not in reachability: decimal: 21030827, binary: 000001010000001110011

Found a representative state in Rmin not in reachability: decimal: 21014443, binary: 000001010000001010011

Found a representative state in Rmin not in reachability: decimal: 2168747, binary: 000000001000010001011

Found a representative state in Rmin not in reachability: decimal: 42923, binary: 000000000000001010011

Found a representative state in Rmin not in reachability: decimal: 6059, binary: 000000000000000001011

Found a representative state in Rmin not in reachability: decimal: 2103211, binary: 000000001000000001011

Found a representative state in Rmin not in reachability: decimal: 2169771, binary: 000000001000010001101

Found a representative state in Rmin not in reachability: decimal: 43947, binary: 000000000000001010101

Found a representative state in Rmin not in reachability: decimal: 2202539, binary: 000000001000011001101

Found a representative state in Rmin not in reachability: decimal: 18994091, binary: 000001001000011101001

Found a representative state in Rmin not in reachability: decimal: 18922411, binary: 000001001000001011101

Found a representative state in Rmin not in reachability: decimal: 153140139, binary: 001001001000001011101

Found a representative state in Rmin not in reachability: decimal: 2145195, binary: 000000001000001011101

Found a representative state in Rmin not in reachability: decimal: 48043, binary: 000000000000001011101

Found a representative state in Rmin not in reachability: decimal: 153402283, binary: 001001001001001011101

Found a representative state in Rmin not in reachability: decimal: 153393067, binary: 001001001001001001011

Found a representative state in Rmin not in reachability: decimal: 153130923, binary: 001001001000001001011

Found a representative state in Rmin not in reachability: decimal: 18913195, binary: 000001001000001001011

Found a representative state in Rmin not in reachability: decimal: 18920363, binary: 000001001000001011001

Found a representative state in Rmin not in reachability: decimal: 2135979, binary: 000000001000001001011

Found a representative state in Rmin not in reachability: decimal: 2200491, binary: 000000001000011001001

Found a representative state in Rmin not in reachability: decimal: 38827, binary: 000000000000001001011

Found a representative state in Rmin not in reachability: decimal: 2112427, binary: 000000001000000011101

Found a representative state in Rmin not in reachability: decimal: 176283051, binary: 001010100000011101110

Found a representative state in Rmin not in reachability: decimal: 21161899, binary: 000001010000101110011

Found a representative state in Rmin not in reachability: decimal: 15275, binary: 000000000000000011101

Found a representative state in Rmin not in reachability: decimal: 2309035, binary: 000000001000110011101

Found a representative state in Rmin not in reachability: decimal: 122283, binary: 000000000000011101110

Found a representative state in Rmin not in reachability: decimal: 7595, binary: 000000000000000001110

Found a representative state in Rmin not in reachability: decimal: 40363, binary: 000000000000001001110

Found a representative state in Rmin not in reachability: decimal: 2298795, binary: 000000001000110001001

Found a representative state in Rmin not in reachability: decimal: 1963, binary: 000000000000000000011

Found a representative state in Rmin not in reachability: decimal: 158250923, binary: 001001011011101011011

Found a representative state in Rmin not in reachability: decimal: 157988779, binary: 001001011010101011011

Found a representative state in Rmin not in reachability: decimal: 23771051, binary: 000001011010101011011

Found a representative state in Rmin not in reachability: decimal: 155891627, binary: 001001010010101011011

Found a representative state in Rmin not in reachability: decimal: 21358507, binary: 000001010001011110011

Found a representative state in Rmin not in reachability: decimal: 2570155, binary: 000000001001110011011

Found a representative state in Rmin not in reachability: decimal: 6764459, binary: 000000011001110011011

Found a representative state in Rmin not in reachability: decimal: 2561963, binary: 000000001001110001011

Found a representative state in Rmin not in reachability: decimal: 21292971, binary: 000001010001001110011

Found a representative state in Rmin not in reachability: decimal: 21424043, binary: 000001010001101110011

Found a representative state in Rmin not in reachability: decimal: 2571179, binary: 000000001001110011101

Found a representative state in Rmin not in reachability: decimal: 176545195, binary: 001010100001011101110

Found a representative state in Rmin not in reachability: decimal: 21407659, binary: 000001010001101010011

Found a representative state in Rmin not in reachability: decimal: 2440107, binary: 000000001001010011101

Found a representative state in Rmin not in reachability: decimal: 2430891, binary: 000000001001010001011

Found a representative state in Rmin not in reachability: decimal: 21276587, binary: 000001010001001010011

Found a representative state in Rmin not in reachability: decimal: 2439083, binary: 000000001001010011011

Found a representative state in Rmin not in reachability: decimal: 21342123, binary: 000001010001011010011

Found a representative state in Rmin not in reachability: decimal: 6633387, binary: 000000011001010011011

Found a representative state in Rmin not in reachability: decimal: 23639979, binary: 000001011010001011011

Found a representative state in Rmin not in reachability: decimal: 157857707, binary: 001001011010001011011

Found a representative state in Rmin not in reachability: decimal: 155760555, binary: 001001010010001011011

Found a representative state in Rmin not in reachability: decimal: 158119851, binary: 001001011011001011011

Found a representative state in Rmin not in reachability: decimal: 191739819, binary: 001011011011011011011

Found a representative state in Rmin not in reachability: decimal: 158185387, binary: 001001011011011011011

Found a representative state in Rmin not in reachability: decimal: 157923243, binary: 001001011010011011011

Found a representative state in Rmin not in reachability: decimal: 191477675, binary: 001011011010011011011

Found a representative state in Rmin not in reachability: decimal: 174438315, binary: 001010011001011011011

Found a representative state in Rmin not in reachability: decimal: 23705515, binary: 000001011010011011011

Found a representative state in Rmin not in reachability: decimal: 21346219, binary: 000001010001011011011

Found a representative state in Rmin not in reachability: decimal: 155563947, binary: 001001010001011011011

Found a representative state in Rmin not in reachability: decimal: 155826091, binary: 001001010010011011011

Found a representative state in Rmin not in reachability: decimal: 23443371, binary: 000001011001011011011

Found a representative state in Rmin not in reachability: decimal: 56997803, binary: 000011011001011011011

Found a representative state in Rmin not in reachability: decimal: 19249067, binary: 000001001001011011011

Found a representative state in Rmin not in reachability: decimal: 2471851, binary: 000000001001011011011

Found a representative state in Rmin not in reachability: decimal: 6666155, binary: 000000011001011011011

Found a representative state in Rmin not in reachability: decimal: 19248043, binary: 000001001001011011001

Found a representative state in Rmin not in reachability: decimal: 2463659, binary: 000000001001011001011

Found a representative state in Rmin not in reachability: decimal: 19183531, binary: 000001001001001011011

Found a representative state in Rmin not in reachability: decimal: 23377835, binary: 000001011001001011011

Found a representative state in Rmin not in reachability: decimal: 21280683, binary: 000001010001001011011

Found a representative state in Rmin not in reachability: decimal: 155498411, binary: 001001010001001011011

Found a representative state in Rmin not in reachability: decimal: 19257259, binary: 000001001001011101011

Found a representative state in Rmin not in reachability: decimal: 2472875, binary: 000000001001011011101

Found a representative state in Rmin not in reachability: decimal: 19250091, binary: 000001001001011011101

Found a representative state in Rmin not in reachability: decimal: 155629483, binary: 001001010001101011011

Found a representative state in Rmin not in reachability: decimal: 21411755, binary: 000001010001101011011

Found a representative state in Rmin not in reachability: decimal: 23508907, binary: 000001011001101011011

Found a representative state in Rmin not in reachability: decimal: 19184555, binary: 000001001001001011101

Found a representative state in Rmin not in reachability: decimal: 2407339, binary: 000000001001001011101

Found a representative state in Rmin not in reachability: decimal: 19175339, binary: 000001001001001001011

Found a representative state in Rmin not in reachability: decimal: 19182507, binary: 000001001001001011001

Found a representative state in Rmin not in reachability: decimal: 2398123, binary: 000000001001001001011

Found a representative state in Rmin not in reachability: decimal: 2406315, binary: 000000001001001011011

Found a representative state in Rmin not in reachability: decimal: 6600619, binary: 000000011001001011011

Found a representative state in Rmin not in reachability: decimal: 2373547, binary: 000000001001000011011

Found a representative state in Rmin not in reachability: decimal: 6567851, binary: 000000011001000011011

Found a representative state in Rmin not in reachability: decimal: 2365355, binary: 000000001001000001011

Found a representative state in Rmin not in reachability: decimal: 2374571, binary: 000000001001000011101

Found a representative state in Rmin not in reachability: decimal: 2431915, binary: 000000001001010001101

Found a representative state in Rmin not in reachability: decimal: 2448299, binary: 000000001001010101101

Found a representative state in Rmin not in reachability: decimal: 6698923, binary: 000000011001100011011

Found a representative state in Rmin not in reachability: decimal: 6731691, binary: 000000011001101011011

Found a representative state in Rmin not in reachability: decimal: 2481067, binary: 000000001001011101101

Found a representative state in Rmin not in reachability: decimal: 2464683, binary: 000000001001011001101

Found a representative state in Rmin not in reachability: decimal: 19256235, binary: 000001001001011101001

Found a representative state in Rmin not in reachability: decimal: 2462635, binary: 000000001001011001001

Found a representative state in Rmin not in reachability: decimal: 2560939, binary: 000000001001110001001

Found a representative state in Rmin not in reachability: decimal: 177069483, binary: 001010100011011101110

Found a representative state in Rmin not in reachability: decimal: 7092139, binary: 000000011011000011011

Found a representative state in Rmin not in reachability: decimal: 7223211, binary: 000000011011100011011

Found a representative state in Rmin not in reachability: decimal: 21948331, binary: 000001010011101110011

Found a representative state in Rmin not in reachability: decimal: 21817259, binary: 000001010011001110011

Found a representative state in Rmin not in reachability: decimal: 21882795, binary: 000001010011011110011

Found a representative state in Rmin not in reachability: decimal: 24033195, binary: 000001011011101011011

Found a representative state in Rmin not in reachability: decimal: 7255979, binary: 000000011011101011011

Found a representative state in Rmin not in reachability: decimal: 7124907, binary: 000000011011001011011

Found a representative state in Rmin not in reachability: decimal: 23902123, binary: 000001011011001011011

Found a representative state in Rmin not in reachability: decimal: 21800875, binary: 000001010011001010011

Found a representative state in Rmin not in reachability: decimal: 21804971, binary: 000001010011001011011

Found a representative state in Rmin not in reachability: decimal: 156153771, binary: 001001010011101011011

Found a representative state in Rmin not in reachability: decimal: 156022699, binary: 001001010011001011011

Found a representative state in Rmin not in reachability: decimal: 7190443, binary: 000000011011011011011

Found a representative state in Rmin not in reachability: decimal: 23967659, binary: 000001011011011011011

Found a representative state in Rmin not in reachability: decimal: 21870507, binary: 000001010011011011011

Found a representative state in Rmin not in reachability: decimal: 57522091, binary: 000011011011011011011

Found a representative state in Rmin not in reachability: decimal: 156088235, binary: 001001010011011011011

Found a representative state in Rmin not in reachability: decimal: 174962603, binary: 001010011011011011011

Found a representative state in Rmin not in reachability: decimal: 178118059, binary: 001010100111011101110

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 8.955 seconds

[QRM NOTE]: Time elapsed since last: 2.002 seconds

[QRM NOTE]: Peak memory: 288835 bytes

next size: node=3,value=3


**********************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3

**********************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.ivy -s node=3,value=3 -f 1 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.026 seconds

[QRM NOTE]: Time elapsed since last: 0.026 seconds

[QRM NOTE]: Peak memory: 57340 bytes


=============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

=============================================================================================================


========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

========================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ------------------11-
0     : ['vote(node2,value0)', 'vote(node2,value1)']
1     : ------------------1-1
1     : ['vote(node2,value0)', 'vote(node2,value2)']
2     : -------------------11
2     : ['vote(node2,value1)', 'vote(node2,value2)']
3     : ---------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ---------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : ----------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ------------11-------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : ----1-------------1--
9     : ['decide(quorum__node0_node2,value1)', 'vote(node2,value0)']
10     : -----1------------1--
10     : ['decide(quorum__node0_node2,value2)', 'vote(node2,value0)']
11     : ---1---------------1-
11     : ['decide(quorum__node0_node2,value0)', 'vote(node2,value1)']
12     : -----1-------------1-
12     : ['decide(quorum__node0_node2,value2)', 'vote(node2,value1)']
13     : ---1----------------1
13     : ['decide(quorum__node0_node2,value0)', 'vote(node2,value2)']
14     : ----1---------------1
14     : ['decide(quorum__node0_node2,value1)', 'vote(node2,value2)']
15     : -1-------------1-----
15     : ['decide(quorum__node0_node1,value1)', 'vote(node1,value0)']
16     : --1------------1-----
16     : ['decide(quorum__node0_node1,value2)', 'vote(node1,value0)']
17     : 1---------------1----
17     : ['decide(quorum__node0_node1,value0)', 'vote(node1,value1)']
18     : --1-------------1----
18     : ['decide(quorum__node0_node1,value2)', 'vote(node1,value1)']
19     : 1----------------1---
19     : ['decide(quorum__node0_node1,value0)', 'vote(node1,value2)']
20     : -1---------------1---
20     : ['decide(quorum__node0_node1,value1)', 'vote(node1,value2)']
21     : -------1----------1--
21     : ['decide(quorum__node1_node2,value1)', 'vote(node2,value0)']
22     : --------1---------1--
22     : ['decide(quorum__node1_node2,value2)', 'vote(node2,value0)']
23     : ------1------------1-
23     : ['decide(quorum__node1_node2,value0)', 'vote(node2,value1)']
24     : --------1----------1-
24     : ['decide(quorum__node1_node2,value2)', 'vote(node2,value1)']
25     : ------1-------------1
25     : ['decide(quorum__node1_node2,value0)', 'vote(node2,value2)']
26     : -------1------------1
26     : ['decide(quorum__node1_node2,value1)', 'vote(node2,value2)']
27     : -1----------1--------
27     : ['decide(quorum__node0_node1,value1)', 'vote(node0,value0)']
28     : --1---------1--------
28     : ['decide(quorum__node0_node1,value2)', 'vote(node0,value0)']
29     : 1------------1-------
29     : ['decide(quorum__node0_node1,value0)', 'vote(node0,value1)']
30     : --1----------1-------
30     : ['decide(quorum__node0_node1,value2)', 'vote(node0,value1)']
31     : 1-------------1------
31     : ['decide(quorum__node0_node1,value0)', 'vote(node0,value2)']
32     : -1------------1------
32     : ['decide(quorum__node0_node1,value1)', 'vote(node0,value2)']
33     : -------1-------1-----
33     : ['decide(quorum__node1_node2,value1)', 'vote(node1,value0)']
34     : --------1------1-----
34     : ['decide(quorum__node1_node2,value2)', 'vote(node1,value0)']
35     : ------1---------1----
35     : ['decide(quorum__node1_node2,value0)', 'vote(node1,value1)']
36     : --------1-------1----
36     : ['decide(quorum__node1_node2,value2)', 'vote(node1,value1)']
37     : ------1----------1---
37     : ['decide(quorum__node1_node2,value0)', 'vote(node1,value2)']
38     : -------1---------1---
38     : ['decide(quorum__node1_node2,value1)', 'vote(node1,value2)']
39     : ----1-------1--------
39     : ['decide(quorum__node0_node2,value1)', 'vote(node0,value0)']
40     : -----1------1--------
40     : ['decide(quorum__node0_node2,value2)', 'vote(node0,value0)']
41     : ---1---------1-------
41     : ['decide(quorum__node0_node2,value0)', 'vote(node0,value1)']
42     : -----1-------1-------
42     : ['decide(quorum__node0_node2,value2)', 'vote(node0,value1)']
43     : ---1----------1------
43     : ['decide(quorum__node0_node2,value0)', 'vote(node0,value2)']
44     : ----1---------1------
44     : ['decide(quorum__node0_node2,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 18
num_suborbits: 1
45 (*) : --1------1-----------
45     : ['decide(quorum__node0_node1,value2)', 'decision(value0)']
46     : -1-------1-----------
46     : ['decide(quorum__node0_node1,value1)', 'decision(value0)']
47     : --1-------1----------
47     : ['decide(quorum__node0_node1,value2)', 'decision(value1)']
48     : 1---------1----------
48     : ['decide(quorum__node0_node1,value0)', 'decision(value1)']
49     : -1---------1---------
49     : ['decide(quorum__node0_node1,value1)', 'decision(value2)']
50     : 1----------1---------
50     : ['decide(quorum__node0_node1,value0)', 'decision(value2)']
51     : -----1---1-----------
51     : ['decide(quorum__node0_node2,value2)', 'decision(value0)']
52     : ----1----1-----------
52     : ['decide(quorum__node0_node2,value1)', 'decision(value0)']
53     : -----1----1----------
53     : ['decide(quorum__node0_node2,value2)', 'decision(value1)']
54     : ---1------1----------
54     : ['decide(quorum__node0_node2,value0)', 'decision(value1)']
55     : ----1------1---------
55     : ['decide(quorum__node0_node2,value1)', 'decision(value2)']
56     : ---1-------1---------
56     : ['decide(quorum__node0_node2,value0)', 'decision(value2)']
57     : --------11-----------
57     : ['decide(quorum__node1_node2,value2)', 'decision(value0)']
58     : -------1-1-----------
58     : ['decide(quorum__node1_node2,value1)', 'decision(value0)']
59     : --------1-1----------
59     : ['decide(quorum__node1_node2,value2)', 'decision(value1)']
60     : ------1---1----------
60     : ['decide(quorum__node1_node2,value0)', 'decision(value1)']
61     : -------1---1---------
61     : ['decide(quorum__node1_node2,value1)', 'decision(value2)']
62     : ------1----1---------
62     : ['decide(quorum__node1_node2,value0)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
63 (*) : ---------1-1---------
63     : ['decision(value0)', 'decision(value2)']
64     : ---------11----------
64     : ['decision(value0)', 'decision(value1)']
65     : ----------11---------
65     : ['decision(value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 27
num_suborbits: 2
66 (*) : --1-1----------------
66     : ['decide(quorum__node0_node1,value2)', 'decide(quorum__node0_node2,value1)']
67     : -1---1---------------
67     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node2,value2)']
68     : --11-----------------
68     : ['decide(quorum__node0_node1,value2)', 'decide(quorum__node0_node2,value0)']
69     : 1----1---------------
69     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node2,value2)']
70     : -1-1-----------------
70     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node2,value0)']
71     : 1---1----------------
71     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node2,value1)']
72     : --1----1-------------
72     : ['decide(quorum__node0_node1,value2)', 'decide(quorum__node1_node2,value1)']
73     : -1------1------------
73     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node1_node2,value2)']
74     : --1---1--------------
74     : ['decide(quorum__node0_node1,value2)', 'decide(quorum__node1_node2,value0)']
75     : 1-------1------------
75     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node1_node2,value2)']
76     : -1----1--------------
76     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node1_node2,value0)']
77     : 1------1-------------
77     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node1_node2,value1)']
78     : -----1-1-------------
78     : ['decide(quorum__node0_node2,value2)', 'decide(quorum__node1_node2,value1)']
79     : ----1---1------------
79     : ['decide(quorum__node0_node2,value1)', 'decide(quorum__node1_node2,value2)']
80     : -----11--------------
80     : ['decide(quorum__node0_node2,value2)', 'decide(quorum__node1_node2,value0)']
81     : ---1----1------------
81     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node1_node2,value2)']
82     : ----1-1--------------
82     : ['decide(quorum__node0_node2,value1)', 'decide(quorum__node1_node2,value0)']
83     : ---1---1-------------
83     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node1_node2,value1)']
102 (*) : 1-1------------------
102     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value2)']
103     : 11-------------------
103     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)']
104     : -11------------------
104     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node1,value2)']
105     : ---1-1---------------
105     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value2)']
106     : ---11----------------
106     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value1)']
107     : ----11---------------
107     : ['decide(quorum__node0_node2,value1)', 'decide(quorum__node0_node2,value2)']
108     : ------1-1------------
108     : ['decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value2)']
109     : ------11-------------
109     : ['decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value1)']
110     : -------11------------
110     : ['decide(quorum__node1_node2,value1)', 'decide(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
84 (*) : --1-----------0------
84     : ['decide(quorum__node0_node1,value2)', '~vote(node0,value2)']
85     : -1-----------0-------
85     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
86     : 1-----------0--------
86     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
87     : -----1--------0------
87     : ['decide(quorum__node0_node2,value2)', '~vote(node0,value2)']
88     : ----1--------0-------
88     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
89     : ---1--------0--------
89     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
90     : --1--------------0---
90     : ['decide(quorum__node0_node1,value2)', '~vote(node1,value2)']
91     : -1--------------0----
91     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
92     : 1--------------0-----
92     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
93     : --------1--------0---
93     : ['decide(quorum__node1_node2,value2)', '~vote(node1,value2)']
94     : -------1--------0----
94     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
95     : ------1--------0-----
95     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
96     : -----1--------------0
96     : ['decide(quorum__node0_node2,value2)', '~vote(node2,value2)']
97     : ----1--------------0-
97     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
98     : ---1--------------0--
98     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
99     : --------1-----------0
99     : ['decide(quorum__node1_node2,value2)', '~vote(node2,value2)']
100     : -------1-----------0-
100     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
101     : ------1-----------0--
101     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 36
num_suborbits: 1
111 (*) : ----------1------1-0-
111     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
112     : -----------1----1---0
112     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
113     : ---------1-------10--
113     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
114     : -----------1---1----0
114     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
115     : ---------1------1-0--
115     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
116     : ----------1----1---0-
116     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
117     : ----------1-----0---1
117     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
118     : -----------1-----0-1-
118     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
119     : ---------1-----0----1
119     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
120     : -----------1-----01--
120     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
121     : ---------1-----0---1-
121     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
122     : ----------1-----0-1--
122     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
123     : ----------1---1----0-
123     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
124     : -----------1-1------0
124     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
125     : ---------1----1---0--
125     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
126     : -----------11-------0
126     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
127     : ---------1---1----0--
127     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
128     : ----------1-1------0-
128     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
129     : ----------1--0------1
129     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
130     : -----------1--0----1-
130     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
131     : ---------1--0-------1
131     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
132     : -----------1--0---1--
132     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
133     : ---------1--0------1-
133     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
134     : ----------1--0----1--
134     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
135     : ----------1---1-0----
135     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
136     : -----------1-1---0---
136     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
137     : ---------1----10-----
137     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
138     : -----------11----0---
138     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
139     : ---------1---1-0-----
139     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
140     : ----------1-1---0----
140     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
141     : ----------1--0---1---
141     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
142     : -----------1--0-1----
142     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
143     : ---------1--0----1---
143     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
144     : -----------1--01-----
144     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
145     : ---------1--0---1----
145     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
146     : ----------1--0-1-----
146     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 36
num_suborbits: 2
147 (*) : ----------1------1--1
147     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
148     : -----------1----1--1-
148     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
149     : ---------1-------1--1
149     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
150     : -----------1---1--1--
150     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
151     : ---------1------1--1-
151     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
152     : ----------1----1--1--
152     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
153     : ----------1---1-----1
153     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
154     : -----------1-1-----1-
154     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
155     : ---------1----1-----1
155     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
156     : -----------11-----1--
156     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
157     : ---------1---1-----1-
157     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
158     : ----------1-1-----1--
158     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
159     : ----------1---1--1---
159     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
160     : -----------1-1--1----
160     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
161     : ---------1----1--1---
161     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
162     : -----------11--1-----
162     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
163     : ---------1---1--1----
163     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
164     : ----------1-1--1-----
164     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
183 (*) : ----------1-1----1---
183     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
184     : -----------11---1----
184     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
185     : ---------1---1---1---
185     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
186     : -----------1-1-1-----
186     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
187     : ---------1----1-1----
187     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
188     : ----------1---11-----
188     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
189     : ----------1-1-------1
189     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
190     : -----------11------1-
190     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
191     : ---------1---1------1
191     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
192     : -----------1-1----1--
192     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
193     : ---------1----1----1-
193     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
194     : ----------1---1---1--
194     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
195     : ----------1----1----1
195     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
196     : -----------1---1---1-
196     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
197     : ---------1------1---1
197     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
198     : -----------1----1-1--
198     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
199     : ---------1-------1-1-
199     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
200     : ----------1------11--
200     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
165 (*) : ----0-----1------1---
165     : ['decision(value1)', 'vote(node1,value2)', '~decide(quorum__node0_node2,value1)']
166     : -----0-----1----1----
166     : ['decision(value2)', 'vote(node1,value1)', '~decide(quorum__node0_node2,value2)']
167     : ---0-----1-------1---
167     : ['decision(value0)', 'vote(node1,value2)', '~decide(quorum__node0_node2,value0)']
168     : -----0-----1---1-----
168     : ['decision(value2)', 'vote(node1,value0)', '~decide(quorum__node0_node2,value2)']
169     : ---0-----1------1----
169     : ['decision(value0)', 'vote(node1,value1)', '~decide(quorum__node0_node2,value0)']
170     : ----0-----1----1-----
170     : ['decision(value1)', 'vote(node1,value0)', '~decide(quorum__node0_node2,value1)']
171     : -0--------1---------1
171     : ['decision(value1)', 'vote(node2,value2)', '~decide(quorum__node0_node1,value1)']
172     : --0--------1-------1-
172     : ['decision(value2)', 'vote(node2,value1)', '~decide(quorum__node0_node1,value2)']
173     : 0--------1----------1
173     : ['decision(value0)', 'vote(node2,value2)', '~decide(quorum__node0_node1,value0)']
174     : --0--------1------1--
174     : ['decision(value2)', 'vote(node2,value0)', '~decide(quorum__node0_node1,value2)']
175     : 0--------1---------1-
175     : ['decision(value0)', 'vote(node2,value1)', '~decide(quorum__node0_node1,value0)']
176     : -0--------1-------1--
176     : ['decision(value1)', 'vote(node2,value0)', '~decide(quorum__node0_node1,value1)']
177     : -------0--1---1------
177     : ['decision(value1)', 'vote(node0,value2)', '~decide(quorum__node1_node2,value1)']
178     : --------0--1-1-------
178     : ['decision(value2)', 'vote(node0,value1)', '~decide(quorum__node1_node2,value2)']
179     : ------0--1----1------
179     : ['decision(value0)', 'vote(node0,value2)', '~decide(quorum__node1_node2,value0)']
180     : --------0--11--------
180     : ['decision(value2)', 'vote(node0,value0)', '~decide(quorum__node1_node2,value2)']
181     : ------0--1---1-------
181     : ['decision(value0)', 'vote(node0,value1)', '~decide(quorum__node1_node2,value0)']
182     : -------0--1-1--------
182     : ['decision(value1)', 'vote(node0,value0)', '~decide(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
201 (*) : ----------1--0--0----
201     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
202     : -----------1--0--0---
202     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
203     : ---------1--0--0-----
203     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
204     : ----------1--0-----0-
204     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
205     : -----------1--0-----0
205     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
206     : ---------1--0-----0--
206     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
207     : ----------1-----0--0-
207     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
208     : -----------1-----0--0
208     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
209     : ---------1-----0--0--
209     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
210 (*) : -------0--1--0-------
210     : ['decision(value1)', '~decide(quorum__node1_node2,value1)', '~vote(node0,value1)']
211     : --------0--1--0------
211     : ['decision(value2)', '~decide(quorum__node1_node2,value2)', '~vote(node0,value2)']
212     : ------0--1--0--------
212     : ['decision(value0)', '~decide(quorum__node1_node2,value0)', '~vote(node0,value0)']
213     : ----0-----1-----0----
213     : ['decision(value1)', '~decide(quorum__node0_node2,value1)', '~vote(node1,value1)']
214     : -----0-----1-----0---
214     : ['decision(value2)', '~decide(quorum__node0_node2,value2)', '~vote(node1,value2)']
215     : ---0-----1-----0-----
215     : ['decision(value0)', '~decide(quorum__node0_node2,value0)', '~vote(node1,value0)']
216     : -0--------1--------0-
216     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~vote(node2,value1)']
217     : --0--------1--------0
217     : ['decision(value2)', '~decide(quorum__node0_node1,value2)', '~vote(node2,value2)']
218     : 0--------1--------0--
218     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
219 (*) : --0--0--0--1---------
219     : ['decision(value2)', '~decide(quorum__node0_node1,value2)', '~decide(quorum__node0_node2,value2)', '~decide(quorum__node1_node2,value2)']
220     : -0--0--0--1----------
220     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
221     : 0--0--0--1-----------
221     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 12

[PRIME NOTE]: number of orbits before merging: 14

[PRIME NOTE]: number of primes: 222

[QRM NOTE]: Time elapsed since start: 0.091 seconds

[QRM NOTE]: Time elapsed since last: 0.066 seconds

[QRM NOTE]: Peak memory: 1387130 bytes


==================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

==================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 solution : []

Essensial at level 0 : {0, 11, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, 0), (3, 0), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1)]

Covered at level 0 : {1, 2, 3, 4, 6, 7, 8, 9, 10}

After reduction : 
 pending  : []
 solution : [0, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 5]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, 0), (3, 0), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 5]

[QRM NOTE]: Time elapsed since start: 0.124 seconds

[QRM NOTE]: Time elapsed since last: 0.033 seconds

[QRM NOTE]: Peak memory: 351693 bytes


======================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

======================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ------------------11-
0     : ['vote(node2,value0)', 'vote(node2,value1)']
1     : ------------------1-1
1     : ['vote(node2,value0)', 'vote(node2,value2)']
2     : -------------------11
2     : ['vote(node2,value1)', 'vote(node2,value2)']
3     : ---------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ---------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : ----------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ------------11-------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', 'vote(node2,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
219 (*) : --0--0--0--1---------
219     : ['decision(value2)', '~decide(quorum__node0_node1,value2)', '~decide(quorum__node0_node2,value2)', '~decide(quorum__node1_node2,value2)']
220     : -0--0--0--1----------
220     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
221     : 0--0--0--1-----------
221     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~decide(quorum__node0_node1,value2)', '~decide(quorum__node0_node2,value2)', '~decide(quorum__node1_node2,value2)', 'decision(value2)']

sign_func_name2args: {'1$decide': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$decide$1$0, value$1$decide$1$1, value$1$decide$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$2]}

sig2const: {'quorum$1$decide$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$decide$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$decide$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

part_sig: ('quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2', 'value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2')


---------- SigGenerator ----------

terms:  ['~decide(quorum__node0_node1,value2)', '~decide(quorum__node0_node2,value2)', '~decide(quorum__node1_node2,value2)', 'decision(value2)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$decide': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

	sort: quorum

	identical_classes: {'quorum$1$decide$0': [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$decide$0': [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$decide$1; value$1$decide$1; value$1$decide$1': [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$decide$1; value$1$decide$1; value$1$decide$1': value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~decide(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. decide(QUORUM0,VALUE0) | ~decision(VALUE0))


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
84 (*) : --1-----------0------
84     : ['decide(quorum__node0_node1,value2)', '~vote(node0,value2)']
85     : -1-----------0-------
85     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
86     : 1-----------0--------
86     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
87     : -----1--------0------
87     : ['decide(quorum__node0_node2,value2)', '~vote(node0,value2)']
88     : ----1--------0-------
88     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
89     : ---1--------0--------
89     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
90     : --1--------------0---
90     : ['decide(quorum__node0_node1,value2)', '~vote(node1,value2)']
91     : -1--------------0----
91     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
92     : 1--------------0-----
92     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
93     : --------1--------0---
93     : ['decide(quorum__node1_node2,value2)', '~vote(node1,value2)']
94     : -------1--------0----
94     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
95     : ------1--------0-----
95     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
96     : -----1--------------0
96     : ['decide(quorum__node0_node2,value2)', '~vote(node2,value2)']
97     : ----1--------------0-
97     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
98     : ---1--------------0--
98     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
99     : --------1-----------0
99     : ['decide(quorum__node1_node2,value2)', '~vote(node2,value2)']
100     : -------1-----------0-
100     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
101     : ------1-----------0--
101     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decide(quorum__node0_node1,value2)', '~vote(node0,value2)', 'member(node0,quorum__node0_node1)']

sign_func_name2args: {'0$decide': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$decide$0$0, quorum$0$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decide$1$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$member$0$0]}

sig2const: {'quorum$0$decide$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$decide$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$decide$0$0; quorum$0$member$1$0', 'value$0$decide$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decide(quorum__node0_node1,value2)', '~vote(node0,value2)', 'member(node0,quorum__node0_node1)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decide': 1, '1$vote': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$decide$0; quorum$0$member$1': [quorum$0$decide$0$0; quorum$0$member$1$0]}

	identical_single_classes: {'quorum$0$decide$0; quorum$0$member$1': quorum$0$decide$0$0; quorum$0$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decide$1; value$1$vote$1': [value$0$decide$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decide$1; value$1$vote$1': value$0$decide$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decide(QUORUM0,VALUE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0)


================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ------------------11-
0     : ['vote(node2,value0)', 'vote(node2,value1)']
1     : ------------------1-1
1     : ['vote(node2,value0)', 'vote(node2,value2)']
2     : -------------------11
2     : ['vote(node2,value1)', 'vote(node2,value2)']
3     : ---------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ---------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : ----------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ------------11-------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
219 (*) : --0--0--0--1---------
219     : ['decision(value2)', '~decide(quorum__node0_node1,value2)', '~decide(quorum__node0_node2,value2)', '~decide(quorum__node1_node2,value2)']
220     : -0--0--0--1----------
220     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
221     : 0--0--0--1-----------
221     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. decide(QUORUM0,VALUE0) | ~decision(VALUE0))
qcost : 4




=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
84 (*) : --1-----------0------
84     : ['decide(quorum__node0_node1,value2)', '~vote(node0,value2)']
85     : -1-----------0-------
85     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
86     : 1-----------0--------
86     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
87     : -----1--------0------
87     : ['decide(quorum__node0_node2,value2)', '~vote(node0,value2)']
88     : ----1--------0-------
88     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
89     : ---1--------0--------
89     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
90     : --1--------------0---
90     : ['decide(quorum__node0_node1,value2)', '~vote(node1,value2)']
91     : -1--------------0----
91     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
92     : 1--------------0-----
92     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
93     : --------1--------0---
93     : ['decide(quorum__node1_node2,value2)', '~vote(node1,value2)']
94     : -------1--------0----
94     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
95     : ------1--------0-----
95     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
96     : -----1--------------0
96     : ['decide(quorum__node0_node2,value2)', '~vote(node2,value2)']
97     : ----1--------------0-
97     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
98     : ---1--------------0--
98     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
99     : --------1-----------0
99     : ['decide(quorum__node1_node2,value2)', '~vote(node2,value2)']
100     : -------1-----------0-
100     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
101     : ------1-----------0--
101     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0)
qcost : 6



[QRM NOTE]: Time elapsed since start: 0.192 seconds

[QRM NOTE]: Time elapsed since last: 0.067 seconds

[QRM NOTE]: Peak memory: 2034635 bytes


===============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

===============================================================================================


New level: 1
 pending : []
 solution : [0, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 5]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 5]


Solution : [0, 11, 5] has cost 16.


Before backtrack at level 1
 pending : []
 solution : [0, 11, 5]

After backtrack at level 1
 pending : []
 solution : [0, 11, 5]


==============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

==============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 16

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 11, 5] (length = 3)

invariant [invar_0] forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_11] forall VALUE0. (exists QUORUM0. decide(QUORUM0,VALUE0) | ~decision(VALUE0)) # qcost: 4

invariant [invar_5] forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) # qcost: 6




[QRM NOTE]: Time elapsed since start: 0.279 seconds

[QRM NOTE]: Time elapsed since last: 0.087 seconds

[QRM NOTE]: Peak memory: 2014580 bytes


==================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3]

==================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 12: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_5

    The following action implementations are present:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 20: implementation of cast_vote
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 25: implementation of collect_votes
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 30: implementation of learn_value

    The following initializers are present:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 14: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_5 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_5 ... PASS
        (internal) ext:collect_votes
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_5 ... PASS
        (internal) ext:learn_value
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_5 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 21: assumption
        in action collect_votes when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 26: assumption
        in action learn_value when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 31: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall Q1,Q2. (exists N. (member(N,Q1) & member(N,Q2)))) & (forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1) & (forall VALUE0. (exists QUORUM0. decide(QUORUM0,VALUE0) | ~decision(VALUE0))) & (forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0)))

[QRM NOTE]: Time elapsed since start: 1.984 seconds

[QRM NOTE]: Time elapsed since last: 1.705 seconds

[QRM NOTE]: Peak memory: 1016185 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/naive_consensus: node=3,value=3

*************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy -s node=4,value=3 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=4,value=3]

======================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm naive_consensus.node_4_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_4_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_4_value_3.finite.cpp naive_consensus.node_4_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_4_value_3.finite.o naive_consensus.node_4_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 27

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: number of branching actions: 36

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 6.342 seconds

[QRM NOTE]: Time elapsed since last: 6.342 seconds

[QRM NOTE]: Peak memory: 1200815 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 9

[FW NOTE]: number of total reachable states:        418

[FW NOTE]: number of dfs representative states:     23

[FW NOTE]: number of dfs non-representative states: 395


=============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=4,value=3]

=============================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: decision('value',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: decide('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['decide(quorum__node0_node1_node2,value0)', 'decide(quorum__node0_node1_node2,value1)', 'decide(quorum__node0_node1_node2,value2)', 'decide(quorum__node0_node1_node3,value0)', 'decide(quorum__node0_node1_node3,value1)', 'decide(quorum__node0_node1_node3,value2)', 'decide(quorum__node0_node2_node3,value0)', 'decide(quorum__node0_node2_node3,value1)', 'decide(quorum__node0_node2_node3,value2)', 'decide(quorum__node1_node2_node3,value0)', 'decide(quorum__node1_node2_node3,value1)', 'decide(quorum__node1_node2_node3,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)']
representative states : 60855, 126391, 650679, 4844983, 38399415, 2185883063, 19365752247, 156804705719, 1256316333495, 1256584768951, 157073141175, 19634187703, 2454318519, 38464951, 2219437495, 2487872951, 2152328631, 2420764087, 4910519, 38989239, 39120311, 716215, 5565879


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000000
lex min decimal: 60855
states:
000000000000000000000000000




=== State Orbit 1 =====================
size : 12
repr state: 000000000000000100000000000
lex min decimal: 126391
states:
000000000000000100000000000
000000000000000000100000000
000000000000000000010000000
000000000000000010000000000
000000000000000000000100000
000000000000000000000001000
000000000000000000000000001
000000000000000000000010000
000000000000000000000000010
000000000000000000000000100
000000000000000001000000000
000000000000000000001000000




=== State Orbit 2 =====================
size : 18
repr state: 000000000000000100100000000
lex min decimal: 650679
states:
000000000000000010000000010
000000000000000000001000001
000000000000000010000010000
000000000000000001000001000
000000000000000000010010000
000000000000000001001000000
000000000000000100000000100
000000000000000000000100100
000000000000000010010000000
000000000000000000000010010
000000000000000000100100000
000000000000000100000100000
000000000000000000001001000
000000000000000100100000000
000000000000000000010000010
000000000000000000000001001
000000000000000001000000001
000000000000000000100000100




=== State Orbit 3 =====================
size : 12
repr state: 000000000000000100100100000
lex min decimal: 4844983
states:
000000000000000001000001001
000000000000000010010010000
000000000000000010010000010
000000000000000100100100000
000000000000000000100100100
000000000000000000010010010
000000000000000000001001001
000000000000000100000100100
000000000000000001001001000
000000000000000010000010010
000000000000000100100000100
000000000000000001001000001




=== State Orbit 4 =====================
size : 3
repr state: 000000000000000100100100100
lex min decimal: 38399415
states:
000000000000000001001001001
000000000000000100100100100
000000000000000010010010010




=== State Orbit 5 =====================
size : 12
repr state: 100000000000000100100100100
lex min decimal: 2185883063
states:
000100000000000100100100100
001000000000000001001001001
000001000000000001001001001
100000000000000100100100100
000000010000000010010010010
000000000100000100100100100
000010000000000010010010010
000000100000000100100100100
000000000010000010010010010
000000001000000001001001001
010000000000000010010010010
000000000001000001001001001




=== State Orbit 6 =====================
size : 18
repr state: 100100000000000100100100100
lex min decimal: 19365752247
states:
000000100100000100100100100
000001000001000001001001001
001000001000000001001001001
010000000010000010010010010
010010000000000010010010010
001000000001000001001001001
000010000010000010010010010
000000001001000001001001001
010000010000000010010010010
100100000000000100100100100
000001001000000001001001001
100000000100000100100100100
000000010010000010010010010
001001000000000001001001001
000100000100000100100100100
000010010000000010010010010
100000100000000100100100100
000100100000000100100100100




=== State Orbit 7 =====================
size : 12
repr state: 100100100000000100100100100
lex min decimal: 156804705719
states:
000010010010000010010010010
000100100100000100100100100
000001001001000001001001001
010010000010000010010010010
100100100000000100100100100
010000010010000010010010010
010010010000000010010010010
100000100100000100100100100
100100000100000100100100100
001000001001000001001001001
001001000001000001001001001
001001001000000001001001001




=== State Orbit 8 =====================
size : 3
repr state: 100100100100000100100100100
lex min decimal: 1256316333495
states:
001001001001000001001001001
100100100100000100100100100
010010010010000010010010010




=== State Orbit 9 =====================
size : 3
repr state: 100100100100100100100100100
lex min decimal: 1256584768951
states:
100100100100100100100100100
010010010010010010010010010
001001001001001001001001001




=== State Orbit 10 =====================
size : 12
repr state: 100100100000100100100100100
lex min decimal: 157073141175
states:
001001000001001001001001001
001000001001001001001001001
100000100100100100100100100
000001001001001001001001001
100100000100100100100100100
000100100100100100100100100
010010010000010010010010010
001001001000001001001001001
100100100000100100100100100
000010010010010010010010010
010010000010010010010010010
010000010010010010010010010




=== State Orbit 11 =====================
size : 18
repr state: 100100000000100100100100100
lex min decimal: 19634187703
states:
000010000010010010010010010
000001000001001001001001001
010000010000010010010010010
000001001000001001001001001
000100100000100100100100100
100000000100100100100100100
000100000100100100100100100
000000010010010010010010010
001001000000001001001001001
001000000001001001001001001
001000001000001001001001001
000000100100100100100100100
000010010000010010010010010
100100000000100100100100100
010000000010010010010010010
000000001001001001001001001
100000100000100100100100100
010010000000010010010010010




=== State Orbit 12 =====================
size : 12
repr state: 100000000000100100100100100
lex min decimal: 2454318519
states:
100000000000100100100100100
000001000000001001001001001
000000100000100100100100100
000000000100100100100100100
000000000010010010010010010
000000010000010010010010010
001000000000001001001001001
000010000000010010010010010
000100000000100100100100100
000000001000001001001001001
000000000001001001001001001
010000000000010010010010010




=== State Orbit 13 =====================
size : 24
repr state: 000000000000000100100100010
lex min decimal: 38464951
states:
000000000000000001001001100
000000000000000100100001100
000000000000000100001100100
000000000000000010010010001
000000000000000001100100100
000000000000000100001001001
000000000000000010100100100
000000000000000001001010001
000000000000000010010001010
000000000000000100010100100
000000000000000010100010010
000000000000000010010010100
000000000000000100010010010
000000000000000010001001001
000000000000000010010100010
000000000000000001001001010
000000000000000001010001001
000000000000000010001010010
000000000000000001001100001
000000000000000100100100001
000000000000000100100010100
000000000000000100100100010
000000000000000001010010010
000000000000000001100001001




=== State Orbit 14 =====================
size : 24
repr state: 100000000000000100100100010
lex min decimal: 2219437495
states:
000000001000000001100001001
000000100000000100010100100
000000000001000100001001001
000000001000000001010001001
000000000100000010100100100
000001000000000001001100001
010000000000000010010010001
010000000000000010010010100
000000000010000001010010010
000010000000000010010100010
000000000010000100010010010
000001000000000001001010001
100000000000000100100100010
000000000001000010001001001
000000100000000100001100100
000010000000000010010001010
100000000000000100100100001
001000000000000001001001010
000000010000000010100010010
000000010000000010001010010
000100000000000100100010100
001000000000000001001001100
000000000100000001100100100
000100000000000100100001100




=== State Orbit 15 =====================
size : 24
repr state: 100000000000100100100100010
lex min decimal: 2487872951
states:
000100000000100100100001100
000000000001001010001001001
000000001000001001100001001
100000000000100100100100010
000010000000010010010100010
000000000001001100001001001
001000000000001001001001010
000000000010010100010010010
000001000000001001001100001
000000100000100100001100100
000000010000010010100010010
000000001000001001010001001
000010000000010010010001010
000000000100100001100100100
100000000000100100100100001
000100000000100100100010100
000000010000010010001010010
001000000000001001001001100
010000000000010010010010001
010000000000010010010010100
000000100000100100010100100
000000000010010001010010010
000000000100100010100100100
000001000000001001001010001




=== State Orbit 16 =====================
size : 12
repr state: 100000000000000100100100000
lex min decimal: 2152328631
states:
000000000010000000010010010
001000000000000001001001000
000000010000000010000010010
000001000000000001001000001
000000000001000000001001001
000100000000000100100000100
000000001000000001000001001
000000100000000100000100100
010000000000000010010010000
100000000000000100100100000
000000000100000000100100100
000010000000000010010000010




=== State Orbit 17 =====================
size : 12
repr state: 100000000000100100100100000
lex min decimal: 2420764087
states:
000000000010010000010010010
000000000100100000100100100
000000010000010010000010010
001000000000001001001001000
000000001000001001000001001
000000000001001000001001001
000000100000100100000100100
000001000000001001001000001
010000000000010010010010000
100000000000100100100100000
000010000000010010010000010
000100000000100100100000100




=== State Orbit 18 =====================
size : 72
repr state: 000000000000000100100010000
lex min decimal: 4910519
states:
000000000000000100000001100
000000000000000010000100100
000000000000000001000001100
000000000000000100010010000
000000000000000010000001001
000000000000000001001100000
000000000000000010010000001
000000000000000100000100001
000000000000000000001010001
000000000000000010010100000
000000000000000001100000001
000000000000000000010010100
000000000000000001000010001
000000000000000001010000001
000000000000000000001100001
000000000000000100001000100
000000000000000100001100000
000000000000000010100100000
000000000000000001010010000
000000000000000000010010001
000000000000000001010000010
000000000000000100100010000
000000000000000010001010000
000000000000000001000100001
000000000000000010100000100
000000000000000100000001001
000000000000000000010100100
000000000000000000001100100
000000000000000010100010000
000000000000000000010001010
000000000000000100000010100
000000000000000100000010010
000000000000000010000010100
000000000000000001010001000
000000000000000000100100001
000000000000000010000100010
000000000000000100100000010
000000000000000100001000001
000000000000000000100010010
000000000000000010000010001
000000000000000000001010010
000000000000000001100001000
000000000000000000001001010
000000000000000001000010010
000000000000000010100000010
000000000000000001100100000
000000000000000001000001010
000000000000000010001000010
000000000000000000100001001
000000000000000001000100100
000000000000000100000100010
000000000000000100010000100
000000000000000010000001010
000000000000000010001000001
000000000000000100010000010
000000000000000000001001100
000000000000000001001010000
000000000000000100010100000
000000000000000100001001000
000000000000000000010001001
000000000000000100100000001
000000000000000001100000100
000000000000000000100001100
000000000000000000100100010
000000000000000010010001000
000000000000000100100001000
000000000000000010010000100
000000000000000001001000100
000000000000000010001001000
000000000000000000010100010
000000000000000001001000010
000000000000000000100010100




=== State Orbit 19 =====================
size : 18
repr state: 000000000000000100100010010
lex min decimal: 38989239
states:
000000000000000100010010100
000000000000000010100100010
000000000000000001100100001
000000000000000010001001010
000000000000000100100001001
000000000000000001100001100
000000000000000001010010001
000000000000000010010100100
000000000000000100001001100
000000000000000001001100100
000000000000000100001100001
000000000000000001010001010
000000000000000001001010010
000000000000000100100010010
000000000000000100010100010
000000000000000010001010001
000000000000000010010001001
000000000000000010100010100




=== State Orbit 20 =====================
size : 36
repr state: 000000000000000100100010001
lex min decimal: 39120311
states:
000000000000000010001010100
000000000000000010010100001
000000000000000001010100001
000000000000000010010001100
000000000000000100001010001
000000000000000010100001010
000000000000000010001100001
000000000000000001010100010
000000000000000100010001100
000000000000000100001010010
000000000000000100100001010
000000000000000100100010001
000000000000000001100100010
000000000000000010001100010
000000000000000100010001001
000000000000000001100010001
000000000000000100001100010
000000000000000010100001100
000000000000000100010010001
000000000000000100010100001
000000000000000001010010100
000000000000000010100010001
000000000000000001100010100
000000000000000001100010010
000000000000000010100001001
000000000000000001100001010
000000000000000010100100001
000000000000000001001100010
000000000000000100001001010
000000000000000100010001010
000000000000000100001010100
000000000000000010001001100
000000000000000001010001100
000000000000000001010100100
000000000000000001001010100
000000000000000010001100100




=== State Orbit 21 =====================
size : 36
repr state: 000000000000000100010000000
lex min decimal: 716215
states:
000000000000000000100010000
000000000000000000100001000
000000000000000010100000000
000000000000000100000001000
000000000000000010000000001
000000000000000100000000010
000000000000000000010000100
000000000000000001000000010
000000000000000000000001010
000000000000000000000010001
000000000000000000100000010
000000000000000000001000100
000000000000000001000000100
000000000000000000000010100
000000000000000010000100000
000000000000000001010000000
000000000000000000010001000
000000000000000010000001000
000000000000000000000100001
000000000000000000001100000
000000000000000001000100000
000000000000000000100000001
000000000000000100010000000
000000000000000100000000001
000000000000000100001000000
000000000000000000001000010
000000000000000001100000000
000000000000000000000100010
000000000000000000010100000
000000000000000010000000100
000000000000000100000010000
000000000000000000000001100
000000000000000000010000001
000000000000000000001010000
000000000000000010001000000
000000000000000001000010000




=== State Orbit 22 =====================
size : 24
repr state: 000000000000000100010001000
lex min decimal: 5565879
states:
000000000000000010001100000
000000000000000010100000001
000000000000000000100010001
000000000000000001010100000
000000000000000010000100001
000000000000000100010001000
000000000000000000010100001
000000000000000000100001010
000000000000000001000100010
000000000000000100001000010
000000000000000001000010100
000000000000000000001010100
000000000000000010100001000
000000000000000000001100010
000000000000000010001000100
000000000000000100010000001
000000000000000100000010001
000000000000000100000001010
000000000000000010000001100
000000000000000001010000100
000000000000000000010001100
000000000000000001100000010
000000000000000100001010000
000000000000000001100010000



[QRM NOTE]: Time elapsed since start: 7.654 seconds

[QRM NOTE]: Time elapsed since last: 1.312 seconds

[QRM NOTE]: Peak memory: 1356132 bytes


==================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus: node=4,value=3]

==================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.975 seconds

[QRM NOTE]: Time elapsed since last: 1.321 seconds

[QRM NOTE]: Peak memory: 457885 bytes

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=4]

======================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm naive_consensus.node_3_value_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_3_value_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_3_value_4.finite.cpp naive_consensus.node_3_value_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_3_value_4.finite.o naive_consensus.node_3_value_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 28

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 36

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 6.364 seconds

[QRM NOTE]: Time elapsed since last: 6.364 seconds

[QRM NOTE]: Peak memory: 1197114 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 7

[FW NOTE]: number of total reachable states:        277

[FW NOTE]: number of dfs representative states:     17

[FW NOTE]: number of dfs non-representative states: 260


=============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=4]

=============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decide('quorum', 'value')
predicate: member('node', 'quorum')
predicate: decision('value',)
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node1,value2)', 'decide(quorum__node0_node1,value3)', 'decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value1)', 'decide(quorum__node0_node2,value2)', 'decide(quorum__node0_node2,value3)', 'decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value1)', 'decide(quorum__node1_node2,value2)', 'decide(quorum__node1_node2,value3)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'decision(value3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)']
representative states : 427, 939, 9131, 140203, 33694635, 570565547, 9160500139, 9162597291, 572662699, 35791787, 140715, 33825707, 35922859, 33563563, 35660715, 9643, 149931


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000000000
lex min decimal: 427
states:
0000000000000000000000000000




=== State Orbit 1 =====================
size : 12
repr state: 0000000000000000100000000000
lex min decimal: 939
states:
0000000000000000010000000000
0000000000000000000000000010
0000000000000000000000001000
0000000000000000000001000000
0000000000000000000000000100
0000000000000000000000000001
0000000000000000000000010000
0000000000000000100000000000
0000000000000000000100000000
0000000000000000000000100000
0000000000000000001000000000
0000000000000000000010000000




=== State Orbit 2 =====================
size : 12
repr state: 0000000000000000100010000000
lex min decimal: 9131
states:
0000000000000000001000000010
0000000000000000010001000000
0000000000000000010000000100
0000000000000000001000100000
0000000000000000000001000100
0000000000000000000100010000
0000000000000000000000010001
0000000000000000000100000001
0000000000000000000010001000
0000000000000000100000001000
0000000000000000100010000000
0000000000000000000000100010




=== State Orbit 3 =====================
size : 4
repr state: 0000000000000000100010001000
lex min decimal: 140203
states:
0000000000000000010001000100
0000000000000000000100010001
0000000000000000001000100010
0000000000000000100010001000




=== State Orbit 4 =====================
size : 12
repr state: 1000000000000000100010001000
lex min decimal: 33694635
states:
0010000000000000001000100010
0000000010000000100010001000
0000000000010000000100010001
0000100000000000100010001000
0100000000000000010001000100
0001000000000000000100010001
0000010000000000010001000100
0000000000100000001000100010
0000001000000000001000100010
0000000100000000000100010001
0000000001000000010001000100
1000000000000000100010001000




=== State Orbit 5 =====================
size : 12
repr state: 1000100000000000100010001000
lex min decimal: 570565547
states:
0000001000100000001000100010
0100000001000000010001000100
0010001000000000001000100010
0000010001000000010001000100
0000000100010000000100010001
0010000000100000001000100010
0000100010000000100010001000
1000100000000000100010001000
0001000000010000000100010001
0100010000000000010001000100
0001000100000000000100010001
1000000010000000100010001000




=== State Orbit 6 =====================
size : 4
repr state: 1000100010000000100010001000
lex min decimal: 9160500139
states:
1000100010000000100010001000
0100010001000000010001000100
0010001000100000001000100010
0001000100010000000100010001




=== State Orbit 7 =====================
size : 4
repr state: 1000100010001000100010001000
lex min decimal: 9162597291
states:
0001000100010001000100010001
1000100010001000100010001000
0100010001000100010001000100
0010001000100010001000100010




=== State Orbit 8 =====================
size : 12
repr state: 1000100000001000100010001000
lex min decimal: 572662699
states:
0100010000000100010001000100
0010000000100010001000100010
0001000000010001000100010001
0100000001000100010001000100
0000100010001000100010001000
0000000100010001000100010001
0010001000000010001000100010
1000000010001000100010001000
0000001000100010001000100010
1000100000001000100010001000
0001000100000001000100010001
0000010001000100010001000100




=== State Orbit 9 =====================
size : 12
repr state: 1000000000001000100010001000
lex min decimal: 35791787
states:
0001000000000001000100010001
0000000000010001000100010001
0000000100000001000100010001
0000100000001000100010001000
0100000000000100010001000100
0000010000000100010001000100
1000000000001000100010001000
0010000000000010001000100010
0000001000000010001000100010
0000000001000100010001000100
0000000000100010001000100010
0000000010001000100010001000




=== State Orbit 10 =====================
size : 36
repr state: 0000000000000000100010000100
lex min decimal: 140715
states:
0000000000000000001001000100
0000000000000000000101000001
0000000000000000100000010001
0000000000000000001000010010
0000000000000000000100100010
0000000000000000010001000001
0000000000000000000100100001
0000000000000000010000100010
0000000000000000100001000100
0000000000000000010000100100
0000000000000000001000100001
0000000000000000001010001000
0000000000000000100001001000
0000000000000000010000010100
0000000000000000001000101000
0000000000000000100000100010
0000000000000000010001001000
0000000000000000100010000100
0000000000000000010010000100
0000000000000000001000010001
0000000000000000100000011000
0000000000000000000100010010
0000000000000000100000101000
0000000000000000001000100100
0000000000000000001010000010
0000000000000000000100010100
0000000000000000010001000010
0000000000000000100010000010
0000000000000000010000010001
0000000000000000000110001000
0000000000000000000100011000
0000000000000000001001000010
0000000000000000000101000100
0000000000000000010010001000
0000000000000000100010000001
0000000000000000000110000001




=== State Orbit 11 =====================
size : 36
repr state: 1000000000000000100010000100
lex min decimal: 33825707
states:
0000010000000000010000010100
0000001000000000001000010010
0000100000000000100000011000
0010000000000000001000101000
0000000010000000000110001000
0000000000100000100000100010
0010000000000000001000100100
0010000000000000001000100001
0000000001000000001001000100
0000000001000000000101000100
0000000010000000001010001000
0100000000000000010001001000
0001000000000000000100010010
0001000000000000000100010100
1000000000000000100010000001
0000000001000000100001000100
0000000010000000010010001000
0000100000000000100001001000
0000000100000000000110000001
0000000000010000100000010001
0000001000000000001001000010
1000000000000000100010000010
0100000000000000010001000010
0100000000000000010001000001
0000000100000000000100100001
0000000000100000010000100010
1000000000000000100010000100
0000001000000000001010000010
0000000000010000010000010001
0000000000010000001000010001
0000100000000000100000101000
0000000000100000000100100010
0000000100000000000101000001
0000010000000000010010000100
0001000000000000000100011000
0000010000000000010000100100




=== State Orbit 12 =====================
size : 36
repr state: 1000000000001000100010000100
lex min decimal: 35922859
states:
0000010000000100010000100100
0000000001000100000101000100
0010000000000010001000101000
1000000000001000100010000010
0000010000000100010000010100
0000001000000010001001000010
0000000100000001000101000001
0000000000010001100000010001
0000000010001000010010001000
0001000000000001000100010100
0000100000001000100000101000
0000000000100010010000100010
0001000000000001000100010010
0000100000001000100001001000
0000000001000100100001000100
0000100000001000100000011000
1000000000001000100010000100
0000000100000001000100100001
0100000000000100010001000010
0010000000000010001000100100
0000000010001000000110001000
0010000000000010001000100001
0100000000000100010001001000
0000000000010001010000010001
0000000000100010100000100010
0000001000000010001000010010
0000001000000010001010000010
0001000000000001000100011000
0000010000000100010010000100
0000000000100010000100100010
0000000100000001000110000001
0000000000010001001000010001
0100000000000100010001000001
0000000001000100001001000100
1000000000001000100010000001
0000000010001000001010001000




=== State Orbit 13 =====================
size : 12
repr state: 1000000000000000100010000000
lex min decimal: 33563563
states:
0000000000010000000000010001
0000100000000000100000001000
0000010000000000010000000100
0000000001000000000001000100
0100000000000000010001000000
1000000000000000100010000000
0000001000000000001000000010
0000000100000000000100000001
0010000000000000001000100000
0000000010000000000010001000
0001000000000000000100010000
0000000000100000000000100010




=== State Orbit 14 =====================
size : 12
repr state: 1000000000001000100010000000
lex min decimal: 35660715
states:
0000000000010001000000010001
0000000010001000000010001000
0010000000000010001000100000
0000010000000100010000000100
0000100000001000100000001000
0000000001000100000001000100
1000000000001000100010000000
0100000000000100010001000000
0000000000100010000000100010
0001000000000001000100010000
0000001000000010001000000010
0000000100000001000100000001




=== State Orbit 15 =====================
size : 36
repr state: 0000000000000000100001000000
lex min decimal: 9643
states:
0000000000000000001000010000
0000000000000000000001000001
0000000000000000000100000010
0000000000000000010000010000
0000000000000000100000000100
0000000000000000010000000001
0000000000000000000100000100
0000000000000000100000000010
0000000000000000100000010000
0000000000000000010000001000
0000000000000000000000010100
0000000000000000000000100001
0000000000000000100001000000
0000000000000000000000011000
0000000000000000000100100000
0000000000000000000010000010
0000000000000000000000101000
0000000000000000000000010010
0000000000000000010000100000
0000000000000000010010000000
0000000000000000000101000000
0000000000000000001000000001
0000000000000000001000001000
0000000000000000000010000100
0000000000000000000110000000
0000000000000000100000100000
0000000000000000000010000001
0000000000000000100000000001
0000000000000000000001000010
0000000000000000001001000000
0000000000000000000100001000
0000000000000000000000100100
0000000000000000000001001000
0000000000000000001010000000
0000000000000000001000000100
0000000000000000010000000010




=== State Orbit 16 =====================
size : 24
repr state: 0000000000000000100001000010
lex min decimal: 149931
states:
0000000000000000001001000001
0000000000000000010000011000
0000000000000000010010000001
0000000000000000001000010100
0000000000000000000100101000
0000000000000000100001000001
0000000000000000100000010010
0000000000000000100000100001
0000000000000000000110000010
0000000000000000000110000100
0000000000000000001001001000
0000000000000000010010000010
0000000000000000001010000100
0000000000000000000101000010
0000000000000000000101001000
0000000000000000100000100100
0000000000000000010000010010
0000000000000000010000101000
0000000000000000010000100001
0000000000000000001010000001
0000000000000000000100100100
0000000000000000100000010100
0000000000000000001000011000
0000000000000000100001000010



[QRM NOTE]: Time elapsed since start: 7.347 seconds

[QRM NOTE]: Time elapsed since last: 0.983 seconds

[QRM NOTE]: Peak memory: 1305906 bytes


==================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus: node=3,value=4]

==================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.291 seconds

[QRM NOTE]: Time elapsed since last: 0.944 seconds

[QRM NOTE]: Peak memory: 366475 bytes

ivy_check complete=fo ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 12: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_5

    The following action implementations are present:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 20: implementation of cast_vote
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 25: implementation of collect_votes
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 30: implementation of learn_value

    The following initializers are present:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 14: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_5 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_5 ... PASS
        (internal) ext:collect_votes
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_5 ... PASS
        (internal) ext:learn_value
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_5 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 21: assumption
        in action collect_votes when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 26: assumption
        in action learn_value when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 31: assumption

OK
[IVY_CHECK RESULT]: PASS


**********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/naive_consensus.ivy

**********************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy']

[CUTOFF]: node=3,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 91.540 seconds

[QRM NOTE]: Time elapsed since last: 91.540 seconds

