(declare-sort node 0)

(define-fun .node ((S node)) node (! S :sort 0))




(declare-fun __grant_msg (node) Bool)
(declare-fun __held () Bool)
(declare-fun __holds_lock (node) Bool)
(declare-fun __lock_msg (node) Bool)
(declare-fun __unlock_msg (node) Bool)
(declare-fun grant_msg (node) Bool)
(declare-fun held () Bool)
(declare-fun holds_lock (node) Bool)
(declare-fun lock_msg (node) Bool)
(declare-fun unlock_msg (node) Bool)

(define-fun .prop () Bool (! 
 (let (($v ((forall X,Y. (holds_lock(X) & holds_lock(Y)) -> X = Y))
 ))
 (and $v))
 :invar-property 0))

(define-fun .init () Bool (! 
 (let (($v ((forall V0. lock_msg(V0) <-> false) & (forall V0. unlock_msg(V0) <-> false) & (forall V0. grant_msg(V0) <-> false) & (forall V0. holds_lock(V0) <-> false) & (held <-> false))
 ))
 (and $v))
 :init true))

(define-fun .action_ext:lock () Bool (! 
 (let (($v exists V__fml:n. ((forall V0. lock_msg(V0) <-> (true if (V0 = V__fml:n) else __lock_msg(V0))))
 ))
 (and $v))
 :action ext:lock))

(define-fun .action_ext:recv_grant () Bool (! 
 (let (($v exists V__fml:n. ((forall V0. grant_msg(V0) <-> (false if (V0 = V__fml:n) else __grant_msg(V0))) & (forall V0. holds_lock(V0) <-> (true if (V0 = V__fml:n) else __holds_lock(V0))) & __grant_msg(V__fml:n))
 ))
 (and $v))
 :action ext:recv_grant))

(define-fun .action_ext:recv_lock () Bool (! 
 (let (($v exists V__fml:sender. ((held <-> true) & (forall V0. lock_msg(V0) <-> (false if (V0 = V__fml:sender) else __lock_msg(V0))) & (forall V0. grant_msg(V0) <-> (true if (V0 = V__fml:sender) else __grant_msg(V0))) & __lock_msg(V__fml:sender) & ~__held)
 ))
 (and $v))
 :action ext:recv_lock))

(define-fun .action_ext:recv_unlock () Bool (! 
 (let (($v exists V__fml:sender. ((forall V0. unlock_msg(V0) <-> (false if (V0 = V__fml:sender) else __unlock_msg(V0))) & (held <-> false) & __unlock_msg(V__fml:sender))
 ))
 (and $v))
 :action ext:recv_unlock))

(define-fun .action_ext:unlock () Bool (! 
 (let (($v exists V__fml:n. ((forall V0. holds_lock(V0) <-> (false if (V0 = V__fml:n) else __holds_lock(V0))) & (forall V0. unlock_msg(V0) <-> (true if (V0 = V__fml:n) else __unlock_msg(V0))) & __holds_lock(V__fml:n))
 ))
 (and $v))
 :action ext:unlock))

