(declare-sort node 0)

(define-fun .node ((S node)) node (! S :sort 0))




(declare-fun __holds (node) Bool)
(declare-fun __replied (node node) Bool)
(declare-fun __requested (node node) Bool)
(declare-fun holds (node) Bool)
(declare-fun replied (node node) Bool)
(declare-fun requested (node node) Bool)

(define-fun .prop () Bool (! 
 (let (($v ((forall N1,N2. (holds(N1) & holds(N2)) -> N1 = N2))
 ))
 (and $v))
 :invar-property 0))

(define-fun .init () Bool (! 
 (let (($v ((forall V0,V1. requested(V0,V1) <-> false) & (forall V0,V1. replied(V0,V1) <-> false) & (forall V0. holds(V0) <-> false))
 ))
 (and $v))
 :init true))

(define-fun .action_ext:enter () Bool (! 
 (let (($v exists V__fml:requester. ((forall V0. holds(V0) <-> (true if (V0 = V__fml:requester) else __holds(V0))) & (forall N. N:node ~= V__fml:requester -> replied(V__fml:requester,N)))
 ))
 (and $v))
 :action ext:enter))

(define-fun .action_ext:leave () Bool (! 
 (let (($v exists V__fml:requester. ((forall V0. holds(V0) <-> (false if (V0 = V__fml:requester) else __holds(V0))) & (forall V0,V1. replied(V0,V1) <-> (false if (V0 = V__fml:requester) else __replied(V0,V1))) & __holds(V__fml:requester))
 ))
 (and $v))
 :action ext:leave))

(define-fun .action_ext:reply () Bool (! 
 (let (($v exists V__fml:requester,V__fml:responder. ((forall V0,V1. requested(V0,V1) <-> (false if (V0 = V__fml:requester & V1 = V__fml:responder) else __requested(V0,V1))) & (forall V0,V1. replied(V0,V1) <-> (true if (V0 = V__fml:requester & V1 = V__fml:responder) else __replied(V0,V1))) & ~__replied(V__fml:requester,V__fml:responder) & ~holds(V__fml:responder) & ~__replied(V__fml:responder,V__fml:requester) & __requested(V__fml:requester,V__fml:responder) & V__fml:requester ~= V__fml:responder)
 ))
 (and $v))
 :action ext:reply))

(define-fun .action_ext:request () Bool (! 
 (let (($v exists V__fml:requester,V__fml:responder. ((forall V0,V1. requested(V0,V1) <-> (true if (V0 = V__fml:requester & V1 = V__fml:responder) else __requested(V0,V1))) & ~__requested(V__fml:requester,V__fml:responder) & V__fml:requester ~= V__fml:responder)
 ))
 (and $v))
 :action ext:request))

