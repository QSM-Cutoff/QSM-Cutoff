(declare-sort node 0)
(declare-sort quorum 0)
(declare-sort value 0)

(define-fun .node ((S node)) node (! S :sort 0))
(define-fun .quorum ((S quorum)) quorum (! S :sort 0))
(define-fun .value ((S value)) value (! S :sort 0))




(declare-fun __decide (quorum value) Bool)
(declare-fun __decision (value) Bool)
(declare-fun __vote (node value) Bool)
(declare-fun decide (quorum value) Bool)
(declare-fun decision (value) Bool)
(declare-fun member (node quorum) Bool)
(declare-fun vote (node value) Bool)

(define-fun .prop () Bool (! 
 (let (($v ((forall V1,V2. (decision(V1) & decision(V2)) -> V1 = V2))
 ))
 (and $v))
 :invar-property 0))

(define-fun .axiom () Bool (! 
 (let (($v ((forall Q1,Q2. (exists N. (member(N,Q1) & member(N,Q2)))))
 ))
 (and $v))
 :axiom true))

(define-fun .init () Bool (! 
 (let (($v ((forall V0,V1. vote(V0,V1) <-> false) & (forall V0,V1. decide(V0,V1) <-> false) & (forall V0. decision(V0) <-> false))
 ))
 (and $v))
 :init true))

(define-fun .action_ext:cast_vote () Bool (! 
 (let (($v exists V__fml:v,V__fml:n. ((forall V0,V1. vote(V0,V1) <-> (true if (V0 = V__fml:n & V1 = V__fml:v) else __vote(V0,V1))) & (forall V. ~__vote(V__fml:n,V)))
 ))
 (and $v))
 :action ext:cast_vote))

(define-fun .action_ext:collect_votes () Bool (! 
 (let (($v exists V__fml:v,V__fml:q. ((forall V0,V1. decide(V0,V1) <-> (true if (V0 = V__fml:q & V1 = V__fml:v) else __decide(V0,V1))) & (forall N. member(N,V__fml:q) -> vote(N,V__fml:v)))
 ))
 (and $v))
 :action ext:collect_votes))

(define-fun .action_ext:learn_value () Bool (! 
 (let (($v exists V__fml:v,V__fml:q. ((forall V0. decision(V0) <-> (true if (V0 = V__fml:v) else __decision(V0))) & decide(V__fml:q,V__fml:v))
 ))
 (and $v))
 :action ext:learn_value))

