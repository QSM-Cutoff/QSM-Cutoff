(declare-sort node 0)
(declare-sort quorum 0)
(declare-sort value 0)

(define-fun .node ((S node)) node (! S :sort 0))
(define-fun .quorum ((S quorum)) quorum (! S :sort 0))
(define-fun .value ((S value)) value (! S :sort 0))

(declare-fun __chosenAt (quorum value) Bool)
(declare-fun __decision (value) Bool)
(declare-fun __didNotVote (node) Bool)
(declare-fun __vote (node value) Bool)

(declare-fun chosenAt (quorum value) Bool)
(declare-fun decision (value) Bool)
(declare-fun didNotVote (node) Bool)
(declare-fun vote (node value) Bool)

(define-fun .chosenAt ((V0 quorum) (V1 value)) Bool (! (__chosenAt V0 V1) :next chosenAt))
(define-fun .decision ((V0 value)) Bool (! (__decision V0) :next decision))
(define-fun .didNotVote ((V0 node)) Bool (! (__didNotVote V0) :next didNotVote))
(define-fun .vote ((V0 node) (V1 value)) Bool (! (__vote V0 V1) :next vote))

(declare-fun member (node quorum) Bool)

(define-fun .member ((V0 node) (V1 quorum)) Bool (! (member V0 V1) :global true))

(define-fun .def___chosenAt () Bool (! 
 (let (($v forall V1,V0. __chosenAt(V0,V1) = (forall N. member(N,V0) -> __vote(N,V1))
 ))
 (and $v))
 :definition __chosenAt))

(define-fun .def___didNotVote () Bool (! 
 (let (($v forall V0. __didNotVote(V0) = (forall V. ~__vote(V0,V))
 ))
 (and $v))
 :definition __didNotVote))

(define-fun .def_chosenAt () Bool (! 
 (let (($v forall V1,V0. chosenAt(V0,V1) = (forall N. member(N,V0) -> vote(N,V1))
 ))
 (and $v))
 :definition chosenAt))

(define-fun .def_didNotVote () Bool (! 
 (let (($v forall V0. didNotVote(V0) = (forall V. ~vote(V0,V))
 ))
 (and $v))
 :definition didNotVote))

(define-fun .prop () Bool (! 
 (let (($v ((forall V1,V2. (__decision(V1) & __decision(V2)) -> V1 = V2))
 ))
 (and $v))
 :invar-property 0))

(define-fun .axiom () Bool (! 
 (let (($v ((forall Q2,Q1. (exists N. (member(N,Q1) & member(N,Q2)))))
 ))
 (and $v))
 :axiom true))

(define-fun .init () Bool (! 
 (let (($v ((forall V1,V0. __vote(V0,V1) <-> false) & (forall V0. __decision(V0) <-> false))
 ))
 (and $v))
 :init true))

(define-fun .action_ext:cast_vote () Bool (! 
 (let (($v exists V__fml:v,V__fml:n. ((forall V1,V0. vote(V0,V1) <-> (true if (V0 = V__fml:n & V1 = V__fml:v) else __vote(V0,V1))) & __didNotVote(V__fml:n))
 ))
 (and $v))
 :action ext:cast_vote))

(define-fun .action_ext:decide () Bool (! 
 (let (($v exists V__fml:q,V__fml:v. ((forall V0. decision(V0) <-> (true if (V0 = V__fml:v) else __decision(V0))) & __chosenAt(V__fml:q,V__fml:v))
 ))
 (and $v))
 :action ext:decide))

