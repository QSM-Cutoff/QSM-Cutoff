(declare-sort node 0)
(declare-sort quorum 0)
(declare-sort value 0)

(define-fun .node ((S node)) node (! S :sort 0))
(define-fun .quorum ((S quorum)) quorum (! S :sort 0))
(define-fun .value ((S value)) value (! S :sort 0))




(declare-fun __decided (value) Bool)
(declare-fun __vote (node value) Bool)
(declare-fun __voted (node) Bool)
(declare-fun chosenAt (quorum value) Bool)
(declare-fun decided (value) Bool)
(declare-fun member (node quorum) Bool)
(declare-fun vote (node value) Bool)
(declare-fun voted (node) Bool)

(define-fun .def_chosenAt () Bool (! 
 (let (($v forall V0,V1. chosenAt(V0,V1) = (forall N. member(N,V0) -> vote(N,V1))
 ))
 (and $v))
 :definition chosenAt))

(define-fun .def_chosenAt () Bool (! 
 (let (($v forall V0,V1. chosenAt(V0,V1) = (forall N. member(N,V0) -> vote(N,V1))
 ))
 (and $v))
 :definition chosenAt))

(define-fun .prop () Bool (! 
 (let (($v ((forall V1,V2. (decided(V1) & decided(V2)) -> V1 = V2))
 ))
 (and $v))
 :invar-property 0))

(define-fun .axiom () Bool (! 
 (let (($v ((forall Q2,Q1. (exists N. (member(N,Q1) & member(N,Q2)))))
 ))
 (and $v))
 :axiom true))

(define-fun .init () Bool (! 
 (let (($v ((forall V0. voted(V0) <-> false) & (forall V0,V1. vote(V0,V1) <-> false) & (forall V0. decided(V0) <-> false))
 ))
 (and $v))
 :init true))

(define-fun .action_ext:cast_vote () Bool (! 
 (let (($v exists V__fml:n,V__fml:v. ((forall V0,V1. vote(V0,V1) <-> (true if (V0 = V__fml:n & V1 = V__fml:v) else __vote(V0,V1))) & (forall V0. voted(V0) <-> (true if (V0 = V__fml:n) else __voted(V0))) & ~__voted(V__fml:n))
 ))
 (and $v))
 :action ext:cast_vote))

(define-fun .action_ext:decide () Bool (! 
 (let (($v exists V__fml:q,V__fml:v. ((forall V0. decided(V0) <-> (true if (V0 = V__fml:v) else __decided(V0))) & chosenAt(V__fml:q,V__fml:v))
 ))
 (and $v))
 :action ext:decide))

