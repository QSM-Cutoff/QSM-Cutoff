(declare-sort db_request_id 0)
(declare-sort node 0)
(declare-sort request 0)
(declare-sort response 0)

(define-fun .db_request_id ((S db_request_id)) db_request_id (! S :sort 0))
(define-fun .node ((S node)) node (! S :sort 0))
(define-fun .request ((S request)) request (! S :sort 0))
(define-fun .response ((S response)) response (! S :sort 0))

(declare-fun __db_request_sent (db_request_id request) Bool)
(declare-fun __db_response_sent (db_request_id response) Bool)
(declare-fun __noneWithId (db_request_id) Bool)
(declare-fun __request_sent (node request) Bool)
(declare-fun __responseMatched (node response) Bool)
(declare-fun __response_received (node response) Bool)
(declare-fun __response_sent (node response) Bool)
(declare-fun __t (db_request_id node) Bool)

(declare-fun db_request_sent (db_request_id request) Bool)
(declare-fun db_response_sent (db_request_id response) Bool)
(declare-fun noneWithId (db_request_id) Bool)
(declare-fun request_sent (node request) Bool)
(declare-fun responseMatched (node response) Bool)
(declare-fun response_received (node response) Bool)
(declare-fun response_sent (node response) Bool)
(declare-fun t (db_request_id node) Bool)

(define-fun .db_request_sent ((V0 db_request_id) (V1 request)) Bool (! (__db_request_sent V0 V1) :next db_request_sent))
(define-fun .db_response_sent ((V0 db_request_id) (V1 response)) Bool (! (__db_response_sent V0 V1) :next db_response_sent))
(define-fun .noneWithId ((V0 db_request_id)) Bool (! (__noneWithId V0) :next noneWithId))
(define-fun .request_sent ((V0 node) (V1 request)) Bool (! (__request_sent V0 V1) :next request_sent))
(define-fun .responseMatched ((V0 node) (V1 response)) Bool (! (__responseMatched V0 V1) :next responseMatched))
(define-fun .response_received ((V0 node) (V1 response)) Bool (! (__response_received V0 V1) :next response_received))
(define-fun .response_sent ((V0 node) (V1 response)) Bool (! (__response_sent V0 V1) :next response_sent))
(define-fun .t ((V0 db_request_id) (V1 node)) Bool (! (__t V0 V1) :next t))

(declare-fun match (request response) Bool)

(define-fun .match ((V0 request) (V1 response)) Bool (! (match V0 V1) :global true))

(define-fun .def___noneWithId () Bool (! 
 (let (($v forall V0. __noneWithId(V0) = (forall N. ~__t(V0,N))
 ))
 (and $v))
 :definition __noneWithId))

(define-fun .def___responseMatched () Bool (! 
 (let (($v forall V0,V1. __responseMatched(V0,V1) = (exists R. (__request_sent(V0,R) & match(R,V1)))
 ))
 (and $v))
 :definition __responseMatched))

(define-fun .def_noneWithId () Bool (! 
 (let (($v forall V0. noneWithId(V0) = (forall N. ~t(V0,N))
 ))
 (and $v))
 :definition noneWithId))

(define-fun .def_responseMatched () Bool (! 
 (let (($v forall V0,V1. responseMatched(V0,V1) = (exists R. (request_sent(V0,R) & match(R,V1)))
 ))
 (and $v))
 :definition responseMatched))

(define-fun .prop () Bool (! 
 (let (($v ((forall N,P. __response_received(N,P) -> __responseMatched(N,P)))
 ))
 (and $v))
 :invar-property 0))

(define-fun .init () Bool (! 
 (let (($v ((forall V0,V1. __request_sent(V0,V1) <-> false) & (forall V0,V1. __response_sent(V0,V1) <-> false) & (forall V0,V1. __response_received(V0,V1) <-> false) & (forall V0,V1. __db_request_sent(V0,V1) <-> false) & (forall V0,V1. __db_response_sent(V0,V1) <-> false) & (forall V0,V1. __t(V0,V1) <-> false))
 ))
 (and $v))
 :init true))

(define-fun .action_ext:db_process_request () Bool (! 
 (let (($v exists V__fml:p,V__fml:r,V__fml:i. ((forall V0,V1. db_response_sent(V0,V1) <-> (true if (V0 = V__fml:i & V1 = V__fml:p) else __db_response_sent(V0,V1))) & __db_request_sent(V__fml:i,V__fml:r) & match(V__fml:r,V__fml:p))
 ))
 (and $v))
 :action ext:db_process_request))

(define-fun .action_ext:new_request () Bool (! 
 (let (($v exists V__fml:n,V__fml:r. ((forall V0,V1. request_sent(V0,V1) <-> (true if (V0 = V__fml:n & V1 = V__fml:r) else __request_sent(V0,V1))))
 ))
 (and $v))
 :action ext:new_request))

(define-fun .action_ext:receive_response () Bool (! 
 (let (($v exists V__fml:p,V__fml:n. ((forall V0,V1. response_received(V0,V1) <-> (true if (V0 = V__fml:n & V1 = V__fml:p) else __response_received(V0,V1))) & __response_sent(V__fml:n,V__fml:p))
 ))
 (and $v))
 :action ext:receive_response))

(define-fun .action_ext:server_process_db_response () Bool (! 
 (let (($v exists V__fml:p,V__fml:n,V__fml:i. ((forall V0,V1. response_sent(V0,V1) <-> (true if (V0 = V__fml:n & V1 = V__fml:p) else __response_sent(V0,V1))) & __db_response_sent(V__fml:i,V__fml:p) & __t(V__fml:i,V__fml:n))
 ))
 (and $v))
 :action ext:server_process_db_response))

(define-fun .action_ext:server_process_request () Bool (! 
 (let (($v exists V__fml:n,V__fml:i,V__fml:r. ((forall V0,V1. t(V0,V1) <-> (true if (V0 = V__fml:i & V1 = V__fml:n) else __t(V0,V1))) & (forall V0,V1. db_request_sent(V0,V1) <-> (true if (V0 = V__fml:i & V1 = V__fml:r) else __db_request_sent(V0,V1))) & __request_sent(V__fml:n,V__fml:r) & __noneWithId(V__fml:i))
 ))
 (and $v))
 :action ext:server_process_request))

