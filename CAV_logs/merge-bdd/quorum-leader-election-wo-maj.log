
************************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy

************************************************************************************


**********************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

**********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy -s node=2 -f 1 -g -w -r -b -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 7

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.035 seconds

[QRM NOTE]: Time elapsed since last: 0.035 seconds

[QRM NOTE]: Peak memory: 47723 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: vote(fml:v,fml:n)

building bdd for action: become_leader(fml:n,fml:s)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 6


===================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj: node=2]

===================================================================================================================

sort: node=['node0', 'node1']
sort: nset=['nset__node0_node1']
predicate: isleader('node',)
predicate: quorum=('nset',)
predicate: voted('node', 'node')
predicate: member('node', 'nset')
interpreted atoms: {'member(node0,nset__node0_node1)': '1', 'member(node1,nset__node0_node1)': '1'}
state atoms: ['isleader(node0)', 'isleader(node1)', '(quorum=nset__node0_node1)', 'voted(node0,node0)', 'voted(node0,node1)', 'voted(node1,node0)', 'voted(node1,node1)']

0010-0-
0010-10
001100-
0011010
0110101
1011010

[QRM NOTE]: Time elapsed since start: 0.255 seconds

[QRM NOTE]: Time elapsed since last: 0.220 seconds

[QRM NOTE]: Peak memory: 1137036 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.258 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 87175 bytes


=======================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

=======================================================================================================================


==================================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : --0----
0     : ['~(quorum=nset__node0_node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -----11
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : ---11--
2     : ['voted(node0,node0)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 4
num_suborbits: 2
3 (*) : -1---1-
3     : ['isleader(node1)', 'voted(node1,node0)']
4     : 1---1--
4     : ['isleader(node0)', 'voted(node0,node1)']
10 (*) : -1-1---
10     : ['isleader(node1)', 'voted(node0,node0)']
11     : 1-----1
11     : ['isleader(node0)', 'voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
5 (*) : 11-----
5     : ['isleader(node0)', 'isleader(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 4
num_suborbits: 2
6 (*) : -1----0
6     : ['isleader(node1)', '~voted(node1,node1)']
7     : 1--0---
7     : ['isleader(node0)', '~voted(node0,node0)']
8 (*) : -1--0--
8     : ['isleader(node1)', '~voted(node0,node1)']
9     : 1----0-
9     : ['isleader(node0)', '~voted(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 5

[PRIME NOTE]: number of orbits before merging: 7

[PRIME NOTE]: number of primes: 12

[QRM NOTE]: Time elapsed since start: 0.272 seconds

[QRM NOTE]: Time elapsed since last: 0.014 seconds

[QRM NOTE]: Peak memory: 1165436 bytes


============================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

============================================================================================================

definition primes: {0}


New level: 0
 pending : [1, 2, 3, 4]
 solution : []


Before reduction : 
 pending  : [1, 2, 3, 4]
 solution : []

Essensial at level 0 : {1, 4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1)]

Covered at level 0 : {2, 3}

After reduction : 
 pending  : []
 solution : [1, 4]


Before reduction : 
 pending  : []
 solution : [1, 4]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [1, 4]

[QRM NOTE]: Time elapsed since start: 0.276 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 119643 bytes


================================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

================================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -----11
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : ---11--
2     : ['voted(node0,node0)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['voted(node1,node0)', 'voted(node1,node1)']

sign_func_name2args: {'0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$voted$1$0]}

sig2const: {'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0}

part_sig: ('node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['voted(node1,node0)', 'voted(node1,node1)']

func_name2symbol:  {'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'voted': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0}

	sort: node

	identical_classes: {'node$0$voted$0; node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1], 'node$0$voted$1': [node$0$voted$1$0]}

	identical_single_classes: {'node$0$voted$0; node$0$voted$0; node$0$voted$1': node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1, 'node$0$voted$1': node$0$voted$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0,NODE1)', 'voted(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1


=== Prime Orbit 4 =====================
size : 4
num_suborbits: 2
6 (*) : -1----0
6     : ['isleader(node1)', '~voted(node1,node1)']
7     : 1--0---
7     : ['isleader(node0)', '~voted(node0,node0)']
8 (*) : -1--0--
8     : ['isleader(node1)', '~voted(node0,node1)']
9     : 1----0-
9     : ['isleader(node0)', '~voted(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node1,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node0,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$isleader$0$0; node$1$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', '~voted(node1,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$isleader$0$0; node$1$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~isleader(NODE0) | voted(NODE1,NODE0)


==========================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

==========================================================================================================================


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -----11
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : ---11--
2     : ['voted(node0,node0)', 'voted(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE1,NODE0. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 4 =====================
size : 4
num_suborbits: 2
6 (*) : -1----0
6     : ['isleader(node1)', '~voted(node1,node1)']
7     : 1--0---
7     : ['isleader(node0)', '~voted(node0,node0)']
8 (*) : -1--0--
8     : ['isleader(node1)', '~voted(node0,node1)']
9     : 1----0-
9     : ['isleader(node0)', '~voted(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE1,NODE0. ~isleader(NODE0) | voted(NODE1,NODE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 0.472 seconds

[QRM NOTE]: Time elapsed since last: 0.196 seconds

[QRM NOTE]: Peak memory: 1886050 bytes


=========================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

=========================================================================================================


New level: 1
 pending : []
 solution : [1, 4]


Before reduction : 
 pending  : []
 solution : [1, 4]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [1, 4]


Solution : [1, 4] has cost 9.


Before backtrack at level 1
 pending : []
 solution : [1, 4]

After backtrack at level 1
 pending : []
 solution : [1, 4]


========================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

========================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 9

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [1, 4]

[MIN NOTE]: solution length: 2

invariant [invar_1] forall NODE1,NODE0. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_4] forall NODE1,NODE0. ~isleader(NODE0) | voted(NODE1,NODE0) # qcost: 4

[MIN NOTE]: number of total invariants: 2

[MIN NOTE]: total qCost: 9




[QRM NOTE]: Time elapsed since start: 0.762 seconds

[QRM NOTE]: Time elapsed since last: 0.290 seconds

[QRM NOTE]: Peak memory: 1871270 bytes


*************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

*************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_2.0.ivy -s node=3 -f 2 -g -w -r -b -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_2.0.ivy: node=3]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 0.102 seconds

[QRM NOTE]: Time elapsed since last: 0.102 seconds

[QRM NOTE]: Peak memory: 169137 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: vote(fml:v,fml:n)

building bdd for action: become_leader(fml:n,fml:s)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 108


===================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj: node=3]

===================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: nset=['nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2']
predicate: voted('node', 'node')
predicate: isleader('node',)
predicate: quorum=('nset',)
predicate: member('node', 'nset')
interpreted atoms: {'member(node0,nset__node0_node1)': '1', 'member(node0,nset__node0_node2)': '1', 'member(node0,nset__node1_node2)': '0', 'member(node1,nset__node0_node1)': '1', 'member(node1,nset__node0_node2)': '0', 'member(node1,nset__node1_node2)': '1', 'member(node2,nset__node0_node1)': '0', 'member(node2,nset__node0_node2)': '1', 'member(node2,nset__node1_node2)': '1'}
state atoms: ['isleader(node0)', 'isleader(node1)', 'isleader(node2)', '(quorum=nset__node0_node1)', '(quorum=nset__node0_node2)', '(quorum=nset__node1_node2)', 'voted(node0,node0)', 'voted(node0,node1)', 'voted(node0,node2)', 'voted(node1,node0)', 'voted(node1,node1)', 'voted(node1,node2)', 'voted(node2,node0)', 'voted(node2,node1)', 'voted(node2,node2)']

00000100-00-00-
00000100-00-010
00000100-00-100
00000100-01000-
00000100-010010
00000100-010100
00000100-10000-
00000100-100010
00000100-100100
00000101000-00-
00000101000-010
00000101000-100
00000101001000-
000001010010010
000001010010100
00000101010000-
000001010100010
000001010100100
00000110000-00-
00000110000-010
00000110000-100
00000110001000-
000001100010010
000001100010100
00000110010000-
000001100100010
000001100100100
00001000-00-00-
00001000-00-010
00001000-00-100
00001000-01000-
00001000-010010
00001000-010100
00001000-10000-
00001000-100010
00001000-100100
00001001000-00-
00001001000-010
00001001000-100
00001001001000-
000010010010010
000010010010100
00001001010000-
000010010100010
000010010100100
00001010000-00-
00001010000-010
00001010000-100
00001010001000-
000010100010010
000010100010100
00001010010000-
000010100100010
000010100100100
00010000-00-00-
00010000-00-010
00010000-00-100
00010000-01000-
00010000-010010
00010000-010100
00010000-10000-
00010000-100010
00010000-100100
00010001000-00-
00010001000-010
00010001000-100
00010001001000-
000100010010010
000100010010100
00010001010000-
000100010100010
000100010100100
00010010000-00-
00010010000-010
00010010000-100
00010010001000-
000100100010010
000100100010100
00010010010000-
000100100100010
000100100100100
00100100-001001
001001010001001
001001100001001
00101000100-001
001010001010001
001010001100001
00110000100100-
001100001001010
001100001001100
01000100-010010
010001010010010
010001100010010
01001001000-010
010010010010010
010010010100010
01010001001000-
010100010010010
010100010010100
10000100-100100
100001010100100
100001100100100
10001010000-100
100010100010100
100010100100100
10010010010000-
100100100100010
100100100100100

[QRM NOTE]: Time elapsed since start: 1.054 seconds

[QRM NOTE]: Time elapsed since last: 0.953 seconds

[QRM NOTE]: Peak memory: 1385732 bytes


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_2.0.ivy: node=3]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 1.682 seconds

[QRM NOTE]: Time elapsed since last: 0.627 seconds

[QRM NOTE]: Peak memory: 1036621 bytes

next size: node=3


**********************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

**********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy -s node=3 -f 1 -g -w -r -b -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.030 seconds

[QRM NOTE]: Time elapsed since last: 0.030 seconds

[QRM NOTE]: Peak memory: 30956 bytes


=======================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

=======================================================================================================================


==================================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 2
0 (*) : ------------1-1
0     : ['voted(node2,node0)', 'voted(node2,node2)']
1     : ---------11----
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : -------------11
2     : ['voted(node2,node1)', 'voted(node2,node2)']
3     : ------11-------
3     : ['voted(node0,node0)', 'voted(node0,node1)']
4     : ----------11---
4     : ['voted(node1,node1)', 'voted(node1,node2)']
5     : ------1-1------
5     : ['voted(node0,node0)', 'voted(node0,node2)']
6 (*) : ------------11-
6     : ['voted(node2,node0)', 'voted(node2,node1)']
7     : ---------1-1---
7     : ['voted(node1,node0)', 'voted(node1,node2)']
8     : -------11------
8     : ['voted(node0,node1)', 'voted(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
9 (*) : -11------------
9     : ['isleader(node1)', 'isleader(node2)']
10     : 1-1------------
10     : ['isleader(node0)', 'isleader(node2)']
11     : 11-------------
11     : ['isleader(node0)', 'isleader(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
12 (*) : ----11---------
12     : ['(quorum=nset__node0_node2)', '(quorum=nset__node1_node2)']
13     : ---1-1---------
13     : ['(quorum=nset__node0_node1)', '(quorum=nset__node1_node2)']
14     : ---11----------
14     : ['(quorum=nset__node0_node1)', '(quorum=nset__node0_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 36
num_suborbits: 6
15 (*) : 1--------0---1-
15     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node1,node0)']
16     : 1----------10--
16     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node2,node0)']
17     : -1-----0----1--
17     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node0,node1)']
18     : -1------1----0-
18     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node2,node1)']
19     : --1-----01-----
19     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node0,node2)']
20     : --1----1---0---
20     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node1,node2)']
30 (*) : 1-----0------1-
30     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node0,node0)']
31     : 1-----0----1---
31     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node0,node0)']
32     : -1--------0-1--
32     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node1,node1)']
33     : -1------1-0----
33     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node1,node1)']
34     : --1------1----0
34     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node2,node2)']
35     : --1----1------0
35     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node2,node2)']
54 (*) : --1-----0----1-
54     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node0,node2)']
55     : -1-----0---1---
55     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node0,node1)']
56     : --1--------01--
56     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node1,node2)']
57     : 1-------10-----
57     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node1,node0)']
58     : -1-------1---0-
58     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node2,node1)']
59     : 1------1----0--
59     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node2,node0)']
60 (*) : --1--------0-1-
60     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node1,node2)']
61     : -1---------1-0-
61     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node2,node1)']
62     : --1-----0---1--
62     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node0,node2)']
63     : 1-------1---0--
63     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node2,node0)']
64     : -1-----0-1-----
64     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node0,node1)']
65     : 1------1-0-----
65     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']
147 (*) : -1-----0------1
147     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node0,node1)']
148     : --1-----0-1----
148     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node0,node2)']
149     : 1--------0----1
149     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node1,node0)']
150     : --1---1----0---
150     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node1,node2)']
151     : 1---------1-0--
151     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node2,node0)']
152     : -1----1------0-
152     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node2,node1)']
159 (*) : -1--------0---1
159     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node1,node1)']
160     : --1-------1---0
160     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node2,node2)']
161     : 1-----0-------1
161     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node0,node0)']
162     : --1---1-------0
162     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node2,node2)']
163     : 1-----0---1----
163     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node0,node0)']
164     : -1----1---0----
164     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 3
21 (*) : 1--0---------1-
21     : ['isleader(node0)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
22     : 1---0------1---
22     : ['isleader(node0)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
23     : -1-0--------1--
23     : ['isleader(node1)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
24     : -1---0--1------
24     : ['isleader(node1)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
25     : --1-0----1-----
25     : ['isleader(node2)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
26     : --1--0-1-------
26     : ['isleader(node2)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
84 (*) : --10---------1-
84     : ['isleader(node2)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
85     : -1--0------1---
85     : ['isleader(node1)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
86     : --10--------1--
86     : ['isleader(node2)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
87     : 1----0--1------
87     : ['isleader(node0)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
88     : -1--0----1-----
88     : ['isleader(node1)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
89     : 1----0-1-------
89     : ['isleader(node0)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
153 (*) : -1-0----------1
153     : ['isleader(node1)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
154     : --1-0-----1----
154     : ['isleader(node2)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
155     : 1--0----------1
155     : ['isleader(node0)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
156     : --1--01--------
156     : ['isleader(node2)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
157     : 1---0-----1----
157     : ['isleader(node0)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
158     : -1---01--------
158     : ['isleader(node1)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 36
num_suborbits: 7
27 (*) : 1----------1-1-
27     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']
28     : -1------1---1--
28     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node0)']
29     : --1----1-1-----
29     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node0)']
36 (*) : 1-------1----1-
36     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']
37     : 1------1---1---
37     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']
38     : -1---------11--
38     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node0)']
39     : -1------11-----
39     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node0)']
40     : --1------1---1-
40     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node1)']
41     : --1----1----1--
41     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node0)']
42 (*) : 1------1-----1-
42     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']
43     : 1-------1--1---
43     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']
44     : -1-------1--1--
44     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node0)']
45     : -1------1--1---
45     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node2)']
46     : --1------1--1--
46     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node0)']
47     : --1----1-----1-
47     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node1)']
48 (*) : 1---------1--1-
48     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']
49     : 1----------1--1
49     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node2)']
50     : -1----1-----1--
50     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node0)']
51     : -1------1-----1
51     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node2)']
52     : --1---1--1-----
52     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node0)']
53     : --1----1--1----
53     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node1)']
66 (*) : --1-------1--1-
66     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']
67     : -1---------1--1
67     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node2)']
68     : --1---1-----1--
68     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node0)']
69     : 1-------1-----1
69     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node2)']
70     : -1----1--1-----
70     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node0)']
71     : 1------1--1----
71     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']
72 (*) : --1---1------1-
72     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']
73     : -1----1----1---
73     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node2)']
74     : --1-------1-1--
74     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node0)']
75     : 1-------1-1----
75     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node1)']
76     : -1-------1----1
76     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node2)']
77     : 1------1------1
77     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node2)']
174 (*) : -1----1-------1
174     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']
175     : --1---1---1----
175     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node1)']
176     : 1---------1---1
176     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 36
num_suborbits: 6
78 (*) : --1--1-------1-
78     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node1)']
79     : -1---1-----1---
79     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node2)']
80     : --1-1-------1--
80     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node0)']
81     : 1---1---1------
81     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node2)']
82     : -1-1-----1-----
82     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node0)']
83     : 1--1---1-------
83     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node1)']
90 (*) : 1----1-------1-
90     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node1)']
91     : 1----1-----1---
91     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node2)']
92     : -1--1-------1--
92     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node0)']
93     : -1--1---1------
93     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node2)']
94     : --11-----1-----
94     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node0)']
95     : --11---1-------
95     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node1)']
96 (*) : 1---1--------1-
96     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node1)']
97     : 1--1-------1---
97     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node2)']
98     : -1---1------1--
98     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node0)']
99     : -1-1----1------
99     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node2)']
100     : --1--1---1-----
100     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node0)']
101     : --1-1--1-------
101     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node1)']
102 (*) : --1-1--------1-
102     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node1)']
103     : -1-1-------1---
103     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node2)']
104     : --1--1------1--
104     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node0)']
105     : 1--1----1------
105     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node2)']
106     : -1---1---1-----
106     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node0)']
107     : 1---1--1-------
107     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node1)']
114 (*) : -1--1---------1
114     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node2)']
115     : --11------1----
115     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node1)']
116     : 1----1--------1
116     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node2)']
117     : --11--1--------
117     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node0)']
118     : 1----1----1----
118     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node1)']
119     : -1--1-1--------
119     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node0)']
126 (*) : -1---1--------1
126     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node2)']
127     : --1--1----1----
127     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node1)']
128     : 1---1---------1
128     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node2)']
129     : --1-1-1--------
129     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node0)']
130     : 1--1------1----
130     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node1)']
131     : -1-1--1--------
131     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 18
num_suborbits: 3
108 (*) : -1--1--------0-
108     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node2,node1)']
109     : --11-------0---
109     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node1,node2)']
110     : 1----1------0--
110     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node2,node0)']
111     : --11----0------
111     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node0,node2)']
112     : 1----1---0-----
112     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node1,node0)']
113     : -1--1--0-------
113     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node0,node1)']
120 (*) : -1---1-------0-
120     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node2,node1)']
121     : --1--1-----0---
121     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node1,node2)']
122     : 1---1-------0--
122     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node2,node0)']
123     : --1-1---0------
123     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node0,node2)']
124     : 1--1-----0-----
124     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node1,node0)']
125     : -1-1---0-------
125     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node0,node1)']
132 (*) : -1---1----0----
132     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node1,node1)']
133     : --1--1--------0
133     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node2,node2)']
134     : 1---1-0--------
134     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node0,node0)']
135     : --1-1---------0
135     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node2,node2)']
136     : 1--1--0--------
136     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node0,node0)']
137     : -1-1------0----
137     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 2
138 (*) : -1-0---------0-
138     : ['isleader(node1)', '~(quorum=nset__node0_node1)', '~voted(node2,node1)']
139     : --1-0------0---
139     : ['isleader(node2)', '~(quorum=nset__node0_node2)', '~voted(node1,node2)']
140     : 1--0--------0--
140     : ['isleader(node0)', '~(quorum=nset__node0_node1)', '~voted(node2,node0)']
141     : --1--0--0------
141     : ['isleader(node2)', '~(quorum=nset__node1_node2)', '~voted(node0,node2)']
142     : 1---0----0-----
142     : ['isleader(node0)', '~(quorum=nset__node0_node2)', '~voted(node1,node0)']
143     : -1---0-0-------
143     : ['isleader(node1)', '~(quorum=nset__node1_node2)', '~voted(node0,node1)']
165 (*) : -1--0-----0----
165     : ['isleader(node1)', '~(quorum=nset__node0_node2)', '~voted(node1,node1)']
166     : --10----------0
166     : ['isleader(node2)', '~(quorum=nset__node0_node1)', '~voted(node2,node2)']
167     : 1----00--------
167     : ['isleader(node0)', '~(quorum=nset__node1_node2)', '~voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 2
144 (*) : -1-----0-----0-
144     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']
145     : --1-----0--0---
145     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node1,node2)']
146     : 1--------0--0--
146     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node2,node0)']
168 (*) : -1-----0--0----
168     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']
169     : --1-----0-----0
169     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node2,node2)']
170     : 1-----0--0-----
170     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']
171     : --1--------0--0
171     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node2,node2)']
172     : 1-----0-----0--
172     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node2,node0)']
173     : -1--------0--0-
173     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 1
num_suborbits: 1
177 (*) : ---000---------
177     : ['~(quorum=nset__node0_node1)', '~(quorum=nset__node0_node2)', '~(quorum=nset__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 11

[PRIME NOTE]: number of orbits before merging: 34

[PRIME NOTE]: number of primes: 178

[QRM NOTE]: Time elapsed since start: 0.091 seconds

[QRM NOTE]: Time elapsed since last: 0.062 seconds

[QRM NOTE]: Peak memory: 1263306 bytes


============================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

============================================================================================================

definition primes: {2, 10}


New level: 0
 pending : [0, 1, 3, 4, 5, 6, 7, 8, 9]
 solution : []


Before reduction : 
 pending  : [0, 1, 3, 4, 5, 6, 7, 8, 9]
 solution : []

Essensial at level 0 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1)]

After removed
 coverage : [(0, -1), (1, 4194304), (2, -1), (3, 741376), (4, 1310720), (5, 393216), (6, 376832), (7, 1081344), (8, 4194304), (9, 2359296), (10, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9]
 solution : [0]


Before reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9]
 solution : [0]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 4194304), (2, -1), (3, 741376), (4, 1310720), (5, 393216), (6, 376832), (7, 1081344), (8, 4194304), (9, 2359296), (10, -1)]

After removed
 coverage : [(0, -1), (1, 4194304), (2, -1), (3, 741376), (4, 1310720), (5, 393216), (6, 376832), (7, 1081344), (8, 4194304), (9, 2359296), (10, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9]
 solution : [0]

[QRM NOTE]: Time elapsed since start: 0.126 seconds

[QRM NOTE]: Time elapsed since last: 0.035 seconds

[QRM NOTE]: Peak memory: 227786 bytes


================================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

================================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 2
0 (*) : ------------1-1
0     : ['voted(node2,node0)', 'voted(node2,node2)']
1     : ---------11----
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : -------------11
2     : ['voted(node2,node1)', 'voted(node2,node2)']
3     : ------11-------
3     : ['voted(node0,node0)', 'voted(node0,node1)']
4     : ----------11---
4     : ['voted(node1,node1)', 'voted(node1,node2)']
5     : ------1-1------
5     : ['voted(node0,node0)', 'voted(node0,node2)']
6 (*) : ------------11-
6     : ['voted(node2,node0)', 'voted(node2,node1)']
7     : ---------1-1---
7     : ['voted(node1,node0)', 'voted(node1,node2)']
8     : -------11------
8     : ['voted(node0,node1)', 'voted(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['voted(node2,node0)', 'voted(node2,node2)']

sign_func_name2args: {'0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0}

part_sig: ('node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['voted(node2,node0)', 'voted(node2,node1)']

sign_func_name2args: {'0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$1]}

sig2const: {'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$0$voted$0$1, node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$voted$0$0; node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['voted(node2,node0)', 'voted(node2,node2)']

func_name2symbol:  {'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$0$voted$0$1, node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$voted$0; node$0$voted$0': [node$0$voted$0$0; node$0$voted$0$1], 'node$0$voted$1': [node$0$voted$1$0, node$0$voted$1$1]}

	identical_single_classes: {'node$0$voted$0; node$0$voted$0': node$0$voted$0$0; node$0$voted$0$1}

	identical_multi_classes: {'node$0$voted$1': [node$0$voted$1$0, node$0$voted$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0,NODE1)', 'voted(NODE0,NODE2)']

use absent constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE2) | ((NODE1 = NODE2 & NODE0 ~= NODE1) | (NODE0 = NODE1 & NODE0 = NODE2))


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
9 (*) : -11------------
9     : ['isleader(node1)', 'isleader(node2)']
10     : 1-1------------
10     : ['isleader(node0)', 'isleader(node2)']
11     : 11-------------
11     : ['isleader(node0)', 'isleader(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'isleader(node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$isleader$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$isleader$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$isleader$0$1}

part_sig: ('node$0$isleader$0$0 | node$0$isleader$0$1',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'isleader(node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$isleader': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$isleader$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$isleader$0$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0, node$0$isleader$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$isleader$0': [node$0$isleader$0$0, node$0$isleader$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', 'isleader(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~isleader(NODE0) | ~isleader(NODE1) | NODE0 = NODE1


=== Prime Orbit 3 =====================
size : 36
num_suborbits: 6
15 (*) : 1--------0---1-
15     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node1,node0)']
16     : 1----------10--
16     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node2,node0)']
17     : -1-----0----1--
17     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node0,node1)']
18     : -1------1----0-
18     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node2,node1)']
19     : --1-----01-----
19     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node0,node2)']
20     : --1----1---0---
20     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node1,node2)']
30 (*) : 1-----0------1-
30     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node0,node0)']
31     : 1-----0----1---
31     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node0,node0)']
32     : -1--------0-1--
32     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node1,node1)']
33     : -1------1-0----
33     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node1,node1)']
34     : --1------1----0
34     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node2,node2)']
35     : --1----1------0
35     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node2,node2)']
54 (*) : --1-----0----1-
54     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node0,node2)']
55     : -1-----0---1---
55     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node0,node1)']
56     : --1--------01--
56     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node1,node2)']
57     : 1-------10-----
57     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node1,node0)']
58     : -1-------1---0-
58     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node2,node1)']
59     : 1------1----0--
59     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node2,node0)']
60 (*) : --1--------0-1-
60     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node1,node2)']
61     : -1---------1-0-
61     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node2,node1)']
62     : --1-----0---1--
62     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node0,node2)']
63     : 1-------1---0--
63     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node2,node0)']
64     : -1-----0-1-----
64     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node0,node1)']
65     : 1------1-0-----
65     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']
147 (*) : -1-----0------1
147     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node0,node1)']
148     : --1-----0-1----
148     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node0,node2)']
149     : 1--------0----1
149     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node1,node0)']
150     : --1---1----0---
150     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node1,node2)']
151     : 1---------1-0--
151     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node2,node0)']
152     : -1----1------0-
152     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node2,node1)']
159 (*) : -1--------0---1
159     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node1,node1)']
160     : --1-------1---0
160     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node2,node2)']
161     : 1-----0-------1
161     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node0,node0)']
162     : --1---1-------0
162     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node2,node2)']
163     : 1-----0---1----
163     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node0,node0)']
164     : -1----1---0----
164     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', '~voted(node1,node0)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$voted$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0; node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0; node$1$voted$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', '~voted(node0,node0)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', '~voted(node0,node2)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$0$voted$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0 | node$1$voted$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', '~voted(node1,node2)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, node$0$voted$1$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0; node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0; node$1$voted$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node0,node1)', 'voted(node2,node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0; node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0 | node$1$voted$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node1,node1)', 'voted(node2,node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, node$0$voted$0$0; node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', '~voted(node1,node0)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0 | node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0], 'node$0$voted$0': [node$0$voted$0$0], 'node$0$voted$1': [node$0$voted$1$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0, 'node$0$voted$0': node$0$voted$0$0, 'node$0$voted$1': node$0$voted$1$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voted': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE3,NODE0)', 'voted(NODE1,NODE2)', 'isleader(NODE0)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE3,NODE1,NODE0. voted(NODE3,NODE0) | ~voted(NODE1,NODE2) | ~isleader(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE2 ~= NODE3 | NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2) & (NODE0 ~= NODE3 | NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2) & (NODE0 ~= NODE1 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE1 ~= NODE2 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3))


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 3
21 (*) : 1--0---------1-
21     : ['isleader(node0)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
22     : 1---0------1---
22     : ['isleader(node0)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
23     : -1-0--------1--
23     : ['isleader(node1)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
24     : -1---0--1------
24     : ['isleader(node1)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
25     : --1-0----1-----
25     : ['isleader(node2)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
26     : --1--0-1-------
26     : ['isleader(node2)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
84 (*) : --10---------1-
84     : ['isleader(node2)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
85     : -1--0------1---
85     : ['isleader(node1)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
86     : --10--------1--
86     : ['isleader(node2)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
87     : 1----0--1------
87     : ['isleader(node0)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
88     : -1--0----1-----
88     : ['isleader(node1)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
89     : 1----0-1-------
89     : ['isleader(node0)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
153 (*) : -1-0----------1
153     : ['isleader(node1)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
154     : --1-0-----1----
154     : ['isleader(node2)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
155     : 1--0----------1
155     : ['isleader(node0)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
156     : --1--01--------
156     : ['isleader(node2)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
157     : 1---0-----1----
157     : ['isleader(node0)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
158     : -1---01--------
158     : ['isleader(node1)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum ~= nset__node0_node1', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$quorum=': [(Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$1$quorum=$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$quorum=$0$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0, node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$1$0', 'nset$1$quorum=$0$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', 'quorum ~= nset__node0_node1', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$quorum=': [(Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$1$quorum=$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$quorum=$0$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$1$0', 'nset$1$quorum=$0$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum ~= nset__node0_node1', 'voted(node2,node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$quorum=': [(Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$1$quorum=$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$quorum=$0$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0', 'nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum ~= nset__node0_node1', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0, node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0': [node$0$voted$0$0], 'node$0$voted$1': [node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0, 'node$0$voted$0': node$0$voted$0$0, 'node$0$voted$1': node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$1$quorum=$0': [nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$1$quorum=$0': nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE2)', 'isleader(NODE0)', 'quorum ~= NSET0']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NSET0,NODE1,NODE0. ~voted(NODE1,NODE2) | ~isleader(NODE0) | quorum = NSET0 | ((NODE0 ~= NODE1 | NODE0 = NODE2 | ~member(NODE2,NSET0) | member(NODE0,NSET0)) & (NODE1 ~= NODE2 | NODE0 = NODE1 | ~member(NODE0,NSET0) | member(NODE1,NSET0)) & (NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2 | ~member(NODE0,NSET0) | ~member(NODE2,NSET0) | member(NODE1,NSET0)))


=== Prime Orbit 5 =====================
size : 36
num_suborbits: 7
27 (*) : 1----------1-1-
27     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']
28     : -1------1---1--
28     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node0)']
29     : --1----1-1-----
29     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node0)']
36 (*) : 1-------1----1-
36     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']
37     : 1------1---1---
37     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']
38     : -1---------11--
38     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node0)']
39     : -1------11-----
39     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node0)']
40     : --1------1---1-
40     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node1)']
41     : --1----1----1--
41     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node0)']
42 (*) : 1------1-----1-
42     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']
43     : 1-------1--1---
43     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']
44     : -1-------1--1--
44     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node0)']
45     : -1------1--1---
45     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node2)']
46     : --1------1--1--
46     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node0)']
47     : --1----1-----1-
47     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node1)']
48 (*) : 1---------1--1-
48     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']
49     : 1----------1--1
49     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node2)']
50     : -1----1-----1--
50     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node0)']
51     : -1------1-----1
51     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node2)']
52     : --1---1--1-----
52     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node0)']
53     : --1----1--1----
53     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node1)']
66 (*) : --1-------1--1-
66     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']
67     : -1---------1--1
67     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node2)']
68     : --1---1-----1--
68     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node0)']
69     : 1-------1-----1
69     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node2)']
70     : -1----1--1-----
70     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node0)']
71     : 1------1--1----
71     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']
72 (*) : --1---1------1-
72     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']
73     : -1----1----1---
73     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node2)']
74     : --1-------1-1--
74     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node0)']
75     : 1-------1-1----
75     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node1)']
76     : -1-------1----1
76     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node2)']
77     : 1------1------1
77     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node2)']
174 (*) : -1----1-------1
174     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']
175     : --1---1---1----
175     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node1)']
176     : 1---------1---1
176     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$0$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$1, node$0$voted$0$1; node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$1 | node$0$voted$0$1; node$0$voted$1$0}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$1 | node$0$voted$0$1; node$0$voted$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$0$voted$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$0$voted$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0, node$0$voted$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1, node$0$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1 | node$0$voted$0$1}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1 | node$0$voted$0$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0, node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$1, node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$1 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$1 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$1, node$0$voted$0$0; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$1 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$1 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$1, node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0, node$0$voted$0$1; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1; node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1; node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0': [node$0$voted$0$0, node$0$voted$0$1], 'node$0$voted$1': [node$0$voted$1$0, node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0}

	identical_multi_classes: {'node$0$voted$0': [node$0$voted$0$0, node$0$voted$0$1], 'node$0$voted$1': [node$0$voted$1$0, node$0$voted$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE3)', 'isleader(NODE0)', 'voted(NODE2,NODE4)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE0,NODE2,NODE1,NODE4. ~voted(NODE1,NODE3) | ~isleader(NODE0) | ~voted(NODE2,NODE4) | ((NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE2 = NODE4 | NODE0 = NODE4) & (NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE1 ~= NODE4 | NODE1 ~= NODE3 | NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE1 = NODE4 | NODE0 = NODE4) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2))


=== Prime Orbit 6 =====================
size : 36
num_suborbits: 6
78 (*) : --1--1-------1-
78     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node1)']
79     : -1---1-----1---
79     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node2)']
80     : --1-1-------1--
80     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node0)']
81     : 1---1---1------
81     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node2)']
82     : -1-1-----1-----
82     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node0)']
83     : 1--1---1-------
83     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node1)']
90 (*) : 1----1-------1-
90     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node1)']
91     : 1----1-----1---
91     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node2)']
92     : -1--1-------1--
92     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node0)']
93     : -1--1---1------
93     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node2)']
94     : --11-----1-----
94     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node0)']
95     : --11---1-------
95     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node1)']
96 (*) : 1---1--------1-
96     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node1)']
97     : 1--1-------1---
97     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node2)']
98     : -1---1------1--
98     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node0)']
99     : -1-1----1------
99     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node2)']
100     : --1--1---1-----
100     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node0)']
101     : --1-1--1-------
101     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node1)']
102 (*) : --1-1--------1-
102     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node1)']
103     : -1-1-------1---
103     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node2)']
104     : --1--1------1--
104     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node0)']
105     : 1--1----1------
105     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node2)']
106     : -1---1---1-----
106     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node0)']
107     : 1---1--1-------
107     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node1)']
114 (*) : -1--1---------1
114     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node2)']
115     : --11------1----
115     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node1)']
116     : 1----1--------1
116     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node2)']
117     : --11--1--------
117     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node0)']
118     : 1----1----1----
118     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node1)']
119     : -1--1-1--------
119     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node0)']
126 (*) : -1---1--------1
126     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node2)']
127     : --1--1----1----
127     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node1)']
128     : 1---1---------1
128     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node2)']
129     : --1-1-1--------
129     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node0)']
130     : 1--1------1----
130     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node1)']
131     : -1-1--1--------
131     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', 'quorum = nset__node1_node2', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$1$0', 'nset$0$quorum=$0$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node1_node2', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0, node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$1$0', 'nset$0$quorum=$0$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node0_node2', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0, node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$1$0', 'nset$0$quorum=$0$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', 'quorum = nset__node0_node2', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$1$0', 'nset$0$quorum=$0$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum = nset__node0_node2', 'voted(node2,node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0', 'nset$0$quorum=$0$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum = nset__node1_node2', 'voted(node2,node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0', 'nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node2)', 'quorum = nset__node1_node2', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0, node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0': [node$0$voted$0$0], 'node$0$voted$1': [node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0, 'node$0$voted$0': node$0$voted$0$0, 'node$0$voted$1': node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$quorum=$0': [nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$quorum=$0': nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', 'voted(NODE1,NODE2)', 'isleader(NODE0)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NSET0,NODE1,NODE0. quorum ~= NSET0 | ~voted(NODE1,NODE2) | ~isleader(NODE0) | ((NODE0 ~= NODE1 | NODE0 = NODE2 | ~member(NODE0,NSET0) | ~member(NODE2,NSET0)) & (NODE0 ~= NODE1 | NODE0 = NODE2 | ~member(NODE0,NSET0) | member(NODE2,NSET0)) & (NODE1 ~= NODE2 | NODE0 = NODE1 | ~member(NODE1,NSET0) | member(NODE0,NSET0)) & (NODE1 ~= NODE2 | NODE0 = NODE1 | ~member(NODE0,NSET0) | ~member(NODE1,NSET0)) & (NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2 | ~member(NODE1,NSET0) | ~member(NODE2,NSET0) | member(NODE0,NSET0)) & (NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2 | ~member(NODE0,NSET0) | ~member(NODE1,NSET0) | member(NODE2,NSET0)))


=== Prime Orbit 7 =====================
size : 18
num_suborbits: 3
108 (*) : -1--1--------0-
108     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node2,node1)']
109     : --11-------0---
109     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node1,node2)']
110     : 1----1------0--
110     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node2,node0)']
111     : --11----0------
111     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node0,node2)']
112     : 1----1---0-----
112     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node1,node0)']
113     : -1--1--0-------
113     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node0,node1)']
120 (*) : -1---1-------0-
120     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node2,node1)']
121     : --1--1-----0---
121     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node1,node2)']
122     : 1---1-------0--
122     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node2,node0)']
123     : --1-1---0------
123     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node0,node2)']
124     : 1--1-----0-----
124     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node1,node0)']
125     : -1-1---0-------
125     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node0,node1)']
132 (*) : -1---1----0----
132     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node1,node1)']
133     : --1--1--------0
133     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node2,node2)']
134     : 1---1-0--------
134     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node0,node0)']
135     : --1-1---------0
135     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node2,node2)']
136     : 1--1--0--------
136     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node0,node0)']
137     : -1-1------0----
137     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum = nset__node0_node2', '~voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0', 'nset$0$quorum=$0$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum = nset__node1_node2', '~voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0', 'nset$0$quorum=$0$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum = nset__node1_node2', '~voted(node1,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0], Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0', 'nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'quorum = nset__node0_node2', '~voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$quorum=$0': [nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$quorum=$0': nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', 'isleader(NODE0)', '~voted(NODE1,NODE0)']

use absent constraint


---------- QFormula: get_qclause ----------

qclause: forall NSET0,NODE1,NODE0. quorum ~= NSET0 | ~isleader(NODE0) | voted(NODE1,NODE0) | ((NODE0 = NODE1 & ~member(NODE0,NSET0)) | (NODE0 ~= NODE1 & member(NODE0,NSET0) & ~member(NODE1,NSET0)))


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 2
138 (*) : -1-0---------0-
138     : ['isleader(node1)', '~(quorum=nset__node0_node1)', '~voted(node2,node1)']
139     : --1-0------0---
139     : ['isleader(node2)', '~(quorum=nset__node0_node2)', '~voted(node1,node2)']
140     : 1--0--------0--
140     : ['isleader(node0)', '~(quorum=nset__node0_node1)', '~voted(node2,node0)']
141     : --1--0--0------
141     : ['isleader(node2)', '~(quorum=nset__node1_node2)', '~voted(node0,node2)']
142     : 1---0----0-----
142     : ['isleader(node0)', '~(quorum=nset__node0_node2)', '~voted(node1,node0)']
143     : -1---0-0-------
143     : ['isleader(node1)', '~(quorum=nset__node1_node2)', '~voted(node0,node1)']
165 (*) : -1--0-----0----
165     : ['isleader(node1)', '~(quorum=nset__node0_node2)', '~voted(node1,node1)']
166     : --10----------0
166     : ['isleader(node2)', '~(quorum=nset__node0_node1)', '~voted(node2,node2)']
167     : 1----00--------
167     : ['isleader(node0)', '~(quorum=nset__node1_node2)', '~voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum ~= nset__node0_node1', '~voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$quorum=': [(Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$1$quorum=$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$quorum=$0$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0', 'nset$1$quorum=$0$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum ~= nset__node0_node2', '~voted(node1,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$quorum=': [(Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0], Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$1$quorum=$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$quorum=$0$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0', 'nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'quorum ~= nset__node0_node1', '~voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$1$quorum=$0': [nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$1$quorum=$0': nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE1,NODE0)', 'quorum ~= NSET0']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NSET0,NODE1,NODE0. ~isleader(NODE0) | voted(NODE1,NODE0) | quorum = NSET0 | ((NODE0 ~= NODE1 | member(NODE0,NSET0)) & (NODE0 = NODE1 | ~member(NODE0,NSET0) | member(NODE1,NSET0)))


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 2
144 (*) : -1-----0-----0-
144     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']
145     : --1-----0--0---
145     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node1,node2)']
146     : 1--------0--0--
146     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node2,node0)']
168 (*) : -1-----0--0----
168     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']
169     : --1-----0-----0
169     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node2,node2)']
170     : 1-----0--0-----
170     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']
171     : --1--------0--0
171     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node2,node2)']
172     : 1-----0-----0--
172     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node2,node0)']
173     : -1--------0--0-
173     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$1$voted$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0 | node$1$voted$0$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$1$voted$0$1, node$1$voted$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$1; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$1; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$1; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0 | node$1$voted$0$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1], 'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE2,NODE0)', '~voted(NODE1,NODE0)']

use absent constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. ~isleader(NODE0) | voted(NODE2,NODE0) | voted(NODE1,NODE0) | ((NODE1 = NODE2 & NODE0 ~= NODE1) | (NODE0 = NODE1 & NODE0 = NODE2))


==========================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

==========================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 2
0 (*) : ------------1-1
0     : ['voted(node2,node0)', 'voted(node2,node2)']
1     : ---------11----
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : -------------11
2     : ['voted(node2,node1)', 'voted(node2,node2)']
3     : ------11-------
3     : ['voted(node0,node0)', 'voted(node0,node1)']
4     : ----------11---
4     : ['voted(node1,node1)', 'voted(node1,node2)']
5     : ------1-1------
5     : ['voted(node0,node0)', 'voted(node0,node2)']
6 (*) : ------------11-
6     : ['voted(node2,node0)', 'voted(node2,node1)']
7     : ---------1-1---
7     : ['voted(node1,node0)', 'voted(node1,node2)']
8     : -------11------
8     : ['voted(node0,node1)', 'voted(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE2,NODE1,NODE0. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE2) | ((NODE1 = NODE2 & NODE0 ~= NODE1) | (NODE0 = NODE1 & NODE0 = NODE2))
qcost : 9




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
9 (*) : -11------------
9     : ['isleader(node1)', 'isleader(node2)']
10     : 1-1------------
10     : ['isleader(node0)', 'isleader(node2)']
11     : 11-------------
11     : ['isleader(node0)', 'isleader(node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE1,NODE0. ~isleader(NODE0) | ~isleader(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 3 =====================
size : 36
num_suborbits: 6
15 (*) : 1--------0---1-
15     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node1,node0)']
16     : 1----------10--
16     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node2,node0)']
17     : -1-----0----1--
17     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node0,node1)']
18     : -1------1----0-
18     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node2,node1)']
19     : --1-----01-----
19     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node0,node2)']
20     : --1----1---0---
20     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node1,node2)']
30 (*) : 1-----0------1-
30     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node0,node0)']
31     : 1-----0----1---
31     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node0,node0)']
32     : -1--------0-1--
32     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node1,node1)']
33     : -1------1-0----
33     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node1,node1)']
34     : --1------1----0
34     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node2,node2)']
35     : --1----1------0
35     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node2,node2)']
54 (*) : --1-----0----1-
54     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node0,node2)']
55     : -1-----0---1---
55     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node0,node1)']
56     : --1--------01--
56     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node1,node2)']
57     : 1-------10-----
57     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node1,node0)']
58     : -1-------1---0-
58     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node2,node1)']
59     : 1------1----0--
59     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node2,node0)']
60 (*) : --1--------0-1-
60     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node1,node2)']
61     : -1---------1-0-
61     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node2,node1)']
62     : --1-----0---1--
62     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node0,node2)']
63     : 1-------1---0--
63     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node2,node0)']
64     : -1-----0-1-----
64     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node0,node1)']
65     : 1------1-0-----
65     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']
147 (*) : -1-----0------1
147     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node0,node1)']
148     : --1-----0-1----
148     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node0,node2)']
149     : 1--------0----1
149     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node1,node0)']
150     : --1---1----0---
150     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node1,node2)']
151     : 1---------1-0--
151     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node2,node0)']
152     : -1----1------0-
152     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node2,node1)']
159 (*) : -1--------0---1
159     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node1,node1)']
160     : --1-------1---0
160     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node2,node2)']
161     : 1-----0-------1
161     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node0,node0)']
162     : --1---1-------0
162     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node2,node2)']
163     : 1-----0---1----
163     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node0,node0)']
164     : -1----1---0----
164     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node1,node1)']
num_forall :   4
num_exists :   0
num_literals : 25
quantified form : forall NODE2,NODE3,NODE1,NODE0. voted(NODE3,NODE0) | ~voted(NODE1,NODE2) | ~isleader(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE2 ~= NODE3 | NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2) & (NODE0 ~= NODE3 | NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2) & (NODE0 ~= NODE1 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE1 ~= NODE2 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3))
qcost : 29




=== Prime Orbit 4 =====================
size : 18
num_suborbits: 3
21 (*) : 1--0---------1-
21     : ['isleader(node0)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
22     : 1---0------1---
22     : ['isleader(node0)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
23     : -1-0--------1--
23     : ['isleader(node1)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
24     : -1---0--1------
24     : ['isleader(node1)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
25     : --1-0----1-----
25     : ['isleader(node2)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
26     : --1--0-1-------
26     : ['isleader(node2)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
84 (*) : --10---------1-
84     : ['isleader(node2)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
85     : -1--0------1---
85     : ['isleader(node1)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
86     : --10--------1--
86     : ['isleader(node2)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
87     : 1----0--1------
87     : ['isleader(node0)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
88     : -1--0----1-----
88     : ['isleader(node1)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
89     : 1----0-1-------
89     : ['isleader(node0)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
153 (*) : -1-0----------1
153     : ['isleader(node1)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
154     : --1-0-----1----
154     : ['isleader(node2)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
155     : 1--0----------1
155     : ['isleader(node0)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
156     : --1--01--------
156     : ['isleader(node2)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
157     : 1---0-----1----
157     : ['isleader(node0)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
158     : -1---01--------
158     : ['isleader(node1)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
num_forall :   4
num_exists :   0
num_literals : 17
quantified form : forall NODE2,NSET0,NODE1,NODE0. ~voted(NODE1,NODE2) | ~isleader(NODE0) | quorum = NSET0 | ((NODE0 ~= NODE1 | NODE0 = NODE2 | ~member(NODE2,NSET0) | member(NODE0,NSET0)) & (NODE1 ~= NODE2 | NODE0 = NODE1 | ~member(NODE0,NSET0) | member(NODE1,NSET0)) & (NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2 | ~member(NODE0,NSET0) | ~member(NODE2,NSET0) | member(NODE1,NSET0)))
qcost : 21




=== Prime Orbit 5 =====================
size : 36
num_suborbits: 7
27 (*) : 1----------1-1-
27     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']
28     : -1------1---1--
28     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node0)']
29     : --1----1-1-----
29     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node0)']
36 (*) : 1-------1----1-
36     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']
37     : 1------1---1---
37     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']
38     : -1---------11--
38     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node0)']
39     : -1------11-----
39     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node0)']
40     : --1------1---1-
40     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node1)']
41     : --1----1----1--
41     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node0)']
42 (*) : 1------1-----1-
42     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']
43     : 1-------1--1---
43     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']
44     : -1-------1--1--
44     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node0)']
45     : -1------1--1---
45     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node2)']
46     : --1------1--1--
46     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node0)']
47     : --1----1-----1-
47     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node1)']
48 (*) : 1---------1--1-
48     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']
49     : 1----------1--1
49     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node2)']
50     : -1----1-----1--
50     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node0)']
51     : -1------1-----1
51     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node2)']
52     : --1---1--1-----
52     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node0)']
53     : --1----1--1----
53     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node1)']
66 (*) : --1-------1--1-
66     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']
67     : -1---------1--1
67     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node2)']
68     : --1---1-----1--
68     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node0)']
69     : 1-------1-----1
69     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node2)']
70     : -1----1--1-----
70     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node0)']
71     : 1------1--1----
71     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']
72 (*) : --1---1------1-
72     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']
73     : -1----1----1---
73     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node2)']
74     : --1-------1-1--
74     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node0)']
75     : 1-------1-1----
75     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node1)']
76     : -1-------1----1
76     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node2)']
77     : 1------1------1
77     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node2)']
174 (*) : -1----1-------1
174     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']
175     : --1---1---1----
175     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node1)']
176     : 1---------1---1
176     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']
num_forall :   5
num_exists :   0
num_literals : 37
quantified form : forall NODE3,NODE0,NODE2,NODE1,NODE4. ~voted(NODE1,NODE3) | ~isleader(NODE0) | ~voted(NODE2,NODE4) | ((NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE2 = NODE4 | NODE0 = NODE4) & (NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE1 ~= NODE4 | NODE1 ~= NODE3 | NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE1 = NODE4 | NODE0 = NODE4) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2))
qcost : 42




=== Prime Orbit 6 =====================
size : 36
num_suborbits: 6
78 (*) : --1--1-------1-
78     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node1)']
79     : -1---1-----1---
79     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node2)']
80     : --1-1-------1--
80     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node0)']
81     : 1---1---1------
81     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node2)']
82     : -1-1-----1-----
82     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node0)']
83     : 1--1---1-------
83     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node1)']
90 (*) : 1----1-------1-
90     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node1)']
91     : 1----1-----1---
91     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node2)']
92     : -1--1-------1--
92     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node0)']
93     : -1--1---1------
93     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node2)']
94     : --11-----1-----
94     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node0)']
95     : --11---1-------
95     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node1)']
96 (*) : 1---1--------1-
96     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node1)']
97     : 1--1-------1---
97     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node2)']
98     : -1---1------1--
98     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node0)']
99     : -1-1----1------
99     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node2)']
100     : --1--1---1-----
100     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node0)']
101     : --1-1--1-------
101     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node1)']
102 (*) : --1-1--------1-
102     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node1)']
103     : -1-1-------1---
103     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node2)']
104     : --1--1------1--
104     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node0)']
105     : 1--1----1------
105     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node2)']
106     : -1---1---1-----
106     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node0)']
107     : 1---1--1-------
107     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node1)']
114 (*) : -1--1---------1
114     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node2)']
115     : --11------1----
115     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node1)']
116     : 1----1--------1
116     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node2)']
117     : --11--1--------
117     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node0)']
118     : 1----1----1----
118     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node1)']
119     : -1--1-1--------
119     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node0)']
126 (*) : -1---1--------1
126     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node2)']
127     : --1--1----1----
127     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node1)']
128     : 1---1---------1
128     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node2)']
129     : --1-1-1--------
129     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node0)']
130     : 1--1------1----
130     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node1)']
131     : -1-1--1--------
131     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node0)']
num_forall :   4
num_exists :   0
num_literals : 31
quantified form : forall NODE2,NSET0,NODE1,NODE0. quorum ~= NSET0 | ~voted(NODE1,NODE2) | ~isleader(NODE0) | ((NODE0 ~= NODE1 | NODE0 = NODE2 | ~member(NODE0,NSET0) | ~member(NODE2,NSET0)) & (NODE0 ~= NODE1 | NODE0 = NODE2 | ~member(NODE0,NSET0) | member(NODE2,NSET0)) & (NODE1 ~= NODE2 | NODE0 = NODE1 | ~member(NODE1,NSET0) | member(NODE0,NSET0)) & (NODE1 ~= NODE2 | NODE0 = NODE1 | ~member(NODE0,NSET0) | ~member(NODE1,NSET0)) & (NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2 | ~member(NODE1,NSET0) | ~member(NODE2,NSET0) | member(NODE0,NSET0)) & (NODE1 = NODE2 | NODE0 = NODE1 | NODE0 = NODE2 | ~member(NODE0,NSET0) | ~member(NODE1,NSET0) | member(NODE2,NSET0)))
qcost : 35




=== Prime Orbit 7 =====================
size : 18
num_suborbits: 3
108 (*) : -1--1--------0-
108     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node2,node1)']
109     : --11-------0---
109     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node1,node2)']
110     : 1----1------0--
110     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node2,node0)']
111     : --11----0------
111     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node0,node2)']
112     : 1----1---0-----
112     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node1,node0)']
113     : -1--1--0-------
113     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node0,node1)']
120 (*) : -1---1-------0-
120     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node2,node1)']
121     : --1--1-----0---
121     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node1,node2)']
122     : 1---1-------0--
122     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node2,node0)']
123     : --1-1---0------
123     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node0,node2)']
124     : 1--1-----0-----
124     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node1,node0)']
125     : -1-1---0-------
125     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node0,node1)']
132 (*) : -1---1----0----
132     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node1,node1)']
133     : --1--1--------0
133     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node2,node2)']
134     : 1---1-0--------
134     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node0,node0)']
135     : --1-1---------0
135     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node2,node2)']
136     : 1--1--0--------
136     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node0,node0)']
137     : -1-1------0----
137     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node1,node1)']
num_forall :   3
num_exists :   0
num_literals : 8
quantified form : forall NSET0,NODE1,NODE0. quorum ~= NSET0 | ~isleader(NODE0) | voted(NODE1,NODE0) | ((NODE0 = NODE1 & ~member(NODE0,NSET0)) | (NODE0 ~= NODE1 & member(NODE0,NSET0) & ~member(NODE1,NSET0)))
qcost : 11




=== Prime Orbit 8 =====================
size : 9
num_suborbits: 2
138 (*) : -1-0---------0-
138     : ['isleader(node1)', '~(quorum=nset__node0_node1)', '~voted(node2,node1)']
139     : --1-0------0---
139     : ['isleader(node2)', '~(quorum=nset__node0_node2)', '~voted(node1,node2)']
140     : 1--0--------0--
140     : ['isleader(node0)', '~(quorum=nset__node0_node1)', '~voted(node2,node0)']
141     : --1--0--0------
141     : ['isleader(node2)', '~(quorum=nset__node1_node2)', '~voted(node0,node2)']
142     : 1---0----0-----
142     : ['isleader(node0)', '~(quorum=nset__node0_node2)', '~voted(node1,node0)']
143     : -1---0-0-------
143     : ['isleader(node1)', '~(quorum=nset__node1_node2)', '~voted(node0,node1)']
165 (*) : -1--0-----0----
165     : ['isleader(node1)', '~(quorum=nset__node0_node2)', '~voted(node1,node1)']
166     : --10----------0
166     : ['isleader(node2)', '~(quorum=nset__node0_node1)', '~voted(node2,node2)']
167     : 1----00--------
167     : ['isleader(node0)', '~(quorum=nset__node1_node2)', '~voted(node0,node0)']
num_forall :   3
num_exists :   0
num_literals : 8
quantified form : forall NSET0,NODE1,NODE0. ~isleader(NODE0) | voted(NODE1,NODE0) | quorum = NSET0 | ((NODE0 ~= NODE1 | member(NODE0,NSET0)) & (NODE0 = NODE1 | ~member(NODE0,NSET0) | member(NODE1,NSET0)))
qcost : 11




=== Prime Orbit 9 =====================
size : 9
num_suborbits: 2
144 (*) : -1-----0-----0-
144     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']
145     : --1-----0--0---
145     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node1,node2)']
146     : 1--------0--0--
146     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node2,node0)']
168 (*) : -1-----0--0----
168     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']
169     : --1-----0-----0
169     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node2,node2)']
170     : 1-----0--0-----
170     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']
171     : --1--------0--0
171     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node2,node2)']
172     : 1-----0-----0--
172     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node2,node0)']
173     : -1--------0--0-
173     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE1,NODE0. ~isleader(NODE0) | voted(NODE2,NODE0) | voted(NODE1,NODE0) | ((NODE1 = NODE2 & NODE0 ~= NODE1) | (NODE0 = NODE1 & NODE0 = NODE2))
qcost : 10



[QRM NOTE]: Time elapsed since start: 0.963 seconds

[QRM NOTE]: Time elapsed since last: 0.836 seconds

[QRM NOTE]: Peak memory: 2081936 bytes


=========================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

=========================================================================================================


New level: 1
 pending : [1, 3, 4, 5, 6, 7, 8, 9]
 solution : [0]


Before reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9]
 solution : [0]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 4194304), (2, -1), (3, 741376), (4, 1310720), (5, 393216), (6, 376832), (7, 1081344), (8, 4194304), (9, 2359296), (10, -1)]

After removed
 coverage : [(0, -1), (1, 4194304), (2, -1), (3, 741376), (4, 1310720), (5, 393216), (6, 376832), (7, 1081344), (8, 4194304), (9, 2359296), (10, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9]
 solution : [0]


Solution : [0] has cost 9.


Decide in level 1 among pending : [1, 3, 4, 5, 6, 7, 8, 9]

Coverage : [(0, -1), (1, 4194304), (2, -1), (3, 741376), (4, 1310720), (5, 393216), (6, 376832), (7, 1081344), (8, 4194304), (9, 2359296), (10, -1)]

Decide 1 with phase True at level 1

After decision at level 1
 pending : [3, 4, 5, 6, 7, 8, 9]
 solution : [0, 1]


New level: 2
 pending : [3, 4, 5, 6, 7, 8, 9]
 solution : [0, 1]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9]
 solution : [0, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 4194304), (2, -1), (3, 741376), (4, 1310720), (5, 393216), (6, 376832), (7, 1081344), (8, 4194304), (9, 2359296), (10, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 208896), (4, 393216), (5, 106496), (6, 122880), (7, 278528), (8, 1048576), (9, 589824), (10, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9]
 solution : [0, 1]


Solution : [0, 1] has cost 14.


Decide in level 2 among pending : [3, 4, 5, 6, 7, 8, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 208896), (4, 393216), (5, 106496), (6, 122880), (7, 278528), (8, 1048576), (9, 589824), (10, -1)]

Decide 8 with phase True at level 2

After decision at level 2
 pending : [3, 4, 5, 6, 7, 9]
 solution : [0, 1, 8]


New level: 3
 pending : [3, 4, 5, 6, 7, 9]
 solution : [0, 1, 8]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 9]
 solution : [0, 1, 8]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 208896), (4, 393216), (5, 106496), (6, 122880), (7, 278528), (8, 1048576), (9, 589824), (10, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1)]

Covered at level 3 : {3, 4, 5, 6, 7, 9}

After reduction : 
 pending  : []
 solution : [0, 1, 8]


Before reduction : 
 pending  : []
 solution : [0, 1, 8]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 8]


Solution : [0, 1, 8] has cost 25.


Before backtrack at level 3
 pending : []
 solution : [0, 1, 8]

After backtrack at level 3
 pending : [3, 4, 5, 6, 7, 9]
 solution : [0, 1, 8]


Invert decision for 8 at level 2


New level: 3
 pending : [3, 4, 5, 6, 7, 9]
 solution : [0, 1]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 9]
 solution : [0, 1]

Essensial at level 3 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1)]

Covered at level 3 : {3, 4, 5, 6, 9}

After reduction : 
 pending  : []
 solution : [0, 1, 7]


Before reduction : 
 pending  : []
 solution : [0, 1, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 7]


Solution : [0, 1, 7] has cost 25.


Before backtrack at level 3
 pending : []
 solution : [0, 1, 7]

After backtrack at level 3
 pending : [7, 3, 4, 5, 6, 9]
 solution : [0, 1]


Before backtrack at level 2
 pending : [7, 3, 4, 5, 6, 9]
 solution : [0, 1]

After backtrack at level 2
 pending : [7, 3, 4, 5, 6, 9, 8]
 solution : [0, 1]


Invert decision for 1 at level 1


New level: 2
 pending : [7, 3, 4, 5, 6, 9, 8]
 solution : [0]


Before reduction : 
 pending  : [7, 3, 4, 5, 6, 9, 8]
 solution : [0]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 741376), (4, 1310720), (5, 393216), (6, 376832), (7, 1081344), (8, 4194304), (9, 2359296), (10, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [7, 3, 4, 5, 6, 9, 8]
 solution : [0]


Solution : [0] has cost 9.


Decide in level 2 among pending : [7, 3, 4, 5, 6, 9, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 741376), (4, 1310720), (5, 393216), (6, 376832), (7, 1081344), (8, 4194304), (9, 2359296), (10, -1)]

Decide 8 with phase True at level 2

After decision at level 2
 pending : [7, 3, 4, 5, 6, 9]
 solution : [0, 8]


New level: 3
 pending : [7, 3, 4, 5, 6, 9]
 solution : [0, 8]


Before reduction : 
 pending  : [7, 3, 4, 5, 6, 9]
 solution : [0, 8]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 741376), (4, 1310720), (5, 393216), (6, 376832), (7, 1081344), (8, 4194304), (9, 2359296), (10, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1)]

Covered at level 3 : {3, 4, 5, 6, 7, 9}

After reduction : 
 pending  : []
 solution : [0, 8]


Before reduction : 
 pending  : []
 solution : [0, 8]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 8]


Solution : [0, 8] has cost 20.


Before backtrack at level 3
 pending : []
 solution : [0, 8]

After backtrack at level 3
 pending : [7, 3, 4, 5, 6, 9]
 solution : [0, 8]


Invert decision for 8 at level 2


New level: 3
 pending : [7, 3, 4, 5, 6, 9]
 solution : [0]


Before reduction : 
 pending  : [7, 3, 4, 5, 6, 9]
 solution : [0]

Essensial at level 3 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1)]

Covered at level 3 : {3, 4, 5, 6, 9}

After reduction : 
 pending  : []
 solution : [0, 7]


Before reduction : 
 pending  : []
 solution : [0, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 7]


Solution : [0, 7] has cost 20.


Before backtrack at level 3
 pending : []
 solution : [0, 7]

After backtrack at level 3
 pending : [7, 3, 4, 5, 6, 9]
 solution : [0]


Before backtrack at level 2
 pending : [7, 3, 4, 5, 6, 9]
 solution : [0]

After backtrack at level 2
 pending : [7, 3, 4, 5, 6, 9, 8]
 solution : [0]


Before backtrack at level 1
 pending : [7, 3, 4, 5, 6, 9, 8]
 solution : [0]

After backtrack at level 1
 pending : [7, 3, 4, 5, 6, 9, 8, 1]
 solution : [0]


========================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

========================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: upper bound: 20

[MIN NOTE]: maximum branch and bound depth: 3

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 8]

[MIN NOTE]: solution length: 2

invariant [invar_0] forall NODE2,NODE1,NODE0. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE2) | ((NODE1 = NODE2 & NODE0 ~= NODE1) | (NODE0 = NODE1 & NODE0 = NODE2)) # qcost: 9

invariant [invar_8] forall NSET0,NODE1,NODE0. ~isleader(NODE0) | voted(NODE1,NODE0) | quorum = NSET0 | ((NODE0 ~= NODE1 | member(NODE0,NSET0)) & (NODE0 = NODE1 | ~member(NODE0,NSET0) | member(NODE1,NSET0))) # qcost: 11

[MIN NOTE]: number of total invariants: 2

[MIN NOTE]: total qCost: 20




[MIN NOTE]: Solution 1 : [0, 7]

[MIN NOTE]: solution length: 2

invariant [invar_0] forall NODE2,NODE1,NODE0. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE2) | ((NODE1 = NODE2 & NODE0 ~= NODE1) | (NODE0 = NODE1 & NODE0 = NODE2)) # qcost: 9

invariant [invar_7] forall NSET0,NODE1,NODE0. quorum ~= NSET0 | ~isleader(NODE0) | voted(NODE1,NODE0) | ((NODE0 = NODE1 & ~member(NODE0,NSET0)) | (NODE0 ~= NODE1 & member(NODE0,NSET0) & ~member(NODE1,NSET0))) # qcost: 11

[MIN NOTE]: number of total invariants: 2

[MIN NOTE]: total qCost: 20




[QRM NOTE]: Time elapsed since start: 1.076 seconds

[QRM NOTE]: Time elapsed since last: 0.114 seconds

[QRM NOTE]: Peak memory: 2046347 bytes


*************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

*************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.0.ivy -s node=4 -f 2 -g -w -r -b -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.0.ivy: node=4]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 24

[QRM NOTE]: Time elapsed since start: 0.208 seconds

[QRM NOTE]: Time elapsed since last: 0.208 seconds

[QRM NOTE]: Peak memory: 431831 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: vote(fml:v,fml:n)

building bdd for action: become_leader(fml:n,fml:s)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 1088


===================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj: node=4]

===================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: nset=['nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3']
predicate: member('node', 'nset')
predicate: isleader('node',)
predicate: voted('node', 'node')
predicate: quorum=('nset',)
interpreted atoms: {'member(node0,nset__node0_node1_node2)': '1', 'member(node0,nset__node0_node1_node3)': '1', 'member(node0,nset__node0_node2_node3)': '1', 'member(node0,nset__node1_node2_node3)': '0', 'member(node1,nset__node0_node1_node2)': '1', 'member(node1,nset__node0_node1_node3)': '1', 'member(node1,nset__node0_node2_node3)': '0', 'member(node1,nset__node1_node2_node3)': '1', 'member(node2,nset__node0_node1_node2)': '1', 'member(node2,nset__node0_node1_node3)': '0', 'member(node2,nset__node0_node2_node3)': '1', 'member(node2,nset__node1_node2_node3)': '1', 'member(node3,nset__node0_node1_node2)': '0', 'member(node3,nset__node0_node1_node3)': '1', 'member(node3,nset__node0_node2_node3)': '1', 'member(node3,nset__node1_node2_node3)': '1'}
state atoms: ['isleader(node0)', 'isleader(node1)', 'isleader(node2)', 'isleader(node3)', '(quorum=nset__node0_node1_node2)', '(quorum=nset__node0_node1_node3)', '(quorum=nset__node0_node2_node3)', '(quorum=nset__node1_node2_node3)', 'voted(node0,node0)', 'voted(node0,node1)', 'voted(node0,node2)', 'voted(node0,node3)', 'voted(node1,node0)', 'voted(node1,node1)', 'voted(node1,node2)', 'voted(node1,node3)', 'voted(node2,node0)', 'voted(node2,node1)', 'voted(node2,node2)', 'voted(node2,node3)', 'voted(node3,node0)', 'voted(node3,node1)', 'voted(node3,node2)', 'voted(node3,node3)']

00000001000-000-000-000-
00000001000-000-000-0010
00000001000-000-000-0100
00000001000-000-000-1000
00000001000-000-0010000-
00000001000-000-00100010
00000001000-000-00100100
00000001000-000-00101000
00000001000-000-0100000-
00000001000-000-01000010
00000001000-000-01000100
00000001000-000-01001000
00000001000-000-1000000-
00000001000-000-10000010
00000001000-000-10000100
00000001000-000-10001000
00000001000-0010000-000-
00000001000-0010000-0010
00000001000-0010000-0100
00000001000-0010000-1000
00000001000-00100010000-
00000001000-001000100010
00000001000-001000100100
00000001000-001000101000
00000001000-00100100000-
00000001000-001001000010
00000001000-001001000100
00000001000-001001001000
00000001000-00101000000-
00000001000-001010000010
00000001000-001010000100
00000001000-001010001000
00000001000-0100000-000-
00000001000-0100000-0010
00000001000-0100000-0100
00000001000-0100000-1000
00000001000-01000010000-
00000001000-010000100010
00000001000-010000100100
00000001000-010000101000
00000001000-01000100000-
00000001000-010001000010
00000001000-010001000100
00000001000-010001001000
00000001000-01001000000-
00000001000-010010000010
00000001000-010010000100
00000001000-010010001000
00000001000-1000000-000-
00000001000-1000000-0010
00000001000-1000000-0100
00000001000-1000000-1000
00000001000-10000010000-
00000001000-100000100010
00000001000-100000100100
00000001000-100000101000
00000001000-10000100000-
00000001000-100001000010
00000001000-100001000100
00000001000-100001001000
00000001000-10001000000-
00000001000-100010000010
00000001000-100010000100
00000001000-100010001000
000000010010000-000-000-
000000010010000-000-0010
000000010010000-000-0100
000000010010000-000-1000
000000010010000-0010000-
000000010010000-00100010
000000010010000-00100100
000000010010000-00101000
000000010010000-0100000-
000000010010000-01000010
000000010010000-01000100
000000010010000-01001000
000000010010000-1000000-
000000010010000-10000010
000000010010000-10000100
000000010010000-10001000
0000000100100010000-000-
0000000100100010000-0010
0000000100100010000-0100
0000000100100010000-1000
00000001001000100010000-
000000010010001000100010
000000010010001000100100
000000010010001000101000
00000001001000100100000-
000000010010001001000010
000000010010001001000100
000000010010001001001000
00000001001000101000000-
000000010010001010000010
000000010010001010000100
000000010010001010001000
0000000100100100000-000-
0000000100100100000-0010
0000000100100100000-0100
0000000100100100000-1000
00000001001001000010000-
000000010010010000100010
000000010010010000100100
000000010010010000101000
00000001001001000100000-
000000010010010001000010
000000010010010001000100
000000010010010001001000
00000001001001001000000-
000000010010010010000010
000000010010010010000100
000000010010010010001000
0000000100101000000-000-
0000000100101000000-0010
0000000100101000000-0100
0000000100101000000-1000
00000001001010000010000-
000000010010100000100010
000000010010100000100100
000000010010100000101000
00000001001010000100000-
000000010010100001000010
000000010010100001000100
000000010010100001001000
00000001001010001000000-
000000010010100010000010
000000010010100010000100
000000010010100010001000
000000010100000-000-000-
000000010100000-000-0010
000000010100000-000-0100
000000010100000-000-1000
000000010100000-0010000-
000000010100000-00100010
000000010100000-00100100
000000010100000-00101000
000000010100000-0100000-
000000010100000-01000010
000000010100000-01000100
000000010100000-01001000
000000010100000-1000000-
000000010100000-10000010
000000010100000-10000100
000000010100000-10001000
0000000101000010000-000-
0000000101000010000-0010
0000000101000010000-0100
0000000101000010000-1000
00000001010000100010000-
000000010100001000100010
000000010100001000100100
000000010100001000101000
00000001010000100100000-
000000010100001001000010
000000010100001001000100
000000010100001001001000
00000001010000101000000-
000000010100001010000010
000000010100001010000100
000000010100001010001000
0000000101000100000-000-
0000000101000100000-0010
0000000101000100000-0100
0000000101000100000-1000
00000001010001000010000-
000000010100010000100010
000000010100010000100100
000000010100010000101000
00000001010001000100000-
000000010100010001000010
000000010100010001000100
000000010100010001001000
00000001010001001000000-
000000010100010010000010
000000010100010010000100
000000010100010010001000
0000000101001000000-000-
0000000101001000000-0010
0000000101001000000-0100
0000000101001000000-1000
00000001010010000010000-
000000010100100000100010
000000010100100000100100
000000010100100000101000
00000001010010000100000-
000000010100100001000010
000000010100100001000100
000000010100100001001000
00000001010010001000000-
000000010100100010000010
000000010100100010000100
000000010100100010001000
000000011000000-000-000-
000000011000000-000-0010
000000011000000-000-0100
000000011000000-000-1000
000000011000000-0010000-
000000011000000-00100010
000000011000000-00100100
000000011000000-00101000
000000011000000-0100000-
000000011000000-01000010
000000011000000-01000100
000000011000000-01001000
000000011000000-1000000-
000000011000000-10000010
000000011000000-10000100
000000011000000-10001000
0000000110000010000-000-
0000000110000010000-0010
0000000110000010000-0100
0000000110000010000-1000
00000001100000100010000-
000000011000001000100010
000000011000001000100100
000000011000001000101000
00000001100000100100000-
000000011000001001000010
000000011000001001000100
000000011000001001001000
00000001100000101000000-
000000011000001010000010
000000011000001010000100
000000011000001010001000
0000000110000100000-000-
0000000110000100000-0010
0000000110000100000-0100
0000000110000100000-1000
00000001100001000010000-
000000011000010000100010
000000011000010000100100
000000011000010000101000
00000001100001000100000-
000000011000010001000010
000000011000010001000100
000000011000010001001000
00000001100001001000000-
000000011000010010000010
000000011000010010000100
000000011000010010001000
0000000110001000000-000-
0000000110001000000-0010
0000000110001000000-0100
0000000110001000000-1000
00000001100010000010000-
000000011000100000100010
000000011000100000100100
000000011000100000101000
00000001100010000100000-
000000011000100001000010
000000011000100001000100
000000011000100001001000
00000001100010001000000-
000000011000100010000010
000000011000100010000100
000000011000100010001000
00000010000-000-000-000-
00000010000-000-000-0010
00000010000-000-000-0100
00000010000-000-000-1000
00000010000-000-0010000-
00000010000-000-00100010
00000010000-000-00100100
00000010000-000-00101000
00000010000-000-0100000-
00000010000-000-01000010
00000010000-000-01000100
00000010000-000-01001000
00000010000-000-1000000-
00000010000-000-10000010
00000010000-000-10000100
00000010000-000-10001000
00000010000-0010000-000-
00000010000-0010000-0010
00000010000-0010000-0100
00000010000-0010000-1000
00000010000-00100010000-
00000010000-001000100010
00000010000-001000100100
00000010000-001000101000
00000010000-00100100000-
00000010000-001001000010
00000010000-001001000100
00000010000-001001001000
00000010000-00101000000-
00000010000-001010000010
00000010000-001010000100
00000010000-001010001000
00000010000-0100000-000-
00000010000-0100000-0010
00000010000-0100000-0100
00000010000-0100000-1000
00000010000-01000010000-
00000010000-010000100010
00000010000-010000100100
00000010000-010000101000
00000010000-01000100000-
00000010000-010001000010
00000010000-010001000100
00000010000-010001001000
00000010000-01001000000-
00000010000-010010000010
00000010000-010010000100
00000010000-010010001000
00000010000-1000000-000-
00000010000-1000000-0010
00000010000-1000000-0100
00000010000-1000000-1000
00000010000-10000010000-
00000010000-100000100010
00000010000-100000100100
00000010000-100000101000
00000010000-10000100000-
00000010000-100001000010
00000010000-100001000100
00000010000-100001001000
00000010000-10001000000-
00000010000-100010000010
00000010000-100010000100
00000010000-100010001000
000000100010000-000-000-
000000100010000-000-0010
000000100010000-000-0100
000000100010000-000-1000
000000100010000-0010000-
000000100010000-00100010
000000100010000-00100100
000000100010000-00101000
000000100010000-0100000-
000000100010000-01000010
000000100010000-01000100
000000100010000-01001000
000000100010000-1000000-
000000100010000-10000010
000000100010000-10000100
000000100010000-10001000
0000001000100010000-000-
0000001000100010000-0010
0000001000100010000-0100
0000001000100010000-1000
00000010001000100010000-
000000100010001000100010
000000100010001000100100
000000100010001000101000
00000010001000100100000-
000000100010001001000010
000000100010001001000100
000000100010001001001000
00000010001000101000000-
000000100010001010000010
000000100010001010000100
000000100010001010001000
0000001000100100000-000-
0000001000100100000-0010
0000001000100100000-0100
0000001000100100000-1000
00000010001001000010000-
000000100010010000100010
000000100010010000100100
000000100010010000101000
00000010001001000100000-
000000100010010001000010
000000100010010001000100
000000100010010001001000
00000010001001001000000-
000000100010010010000010
000000100010010010000100
000000100010010010001000
0000001000101000000-000-
0000001000101000000-0010
0000001000101000000-0100
0000001000101000000-1000
00000010001010000010000-
000000100010100000100010
000000100010100000100100
000000100010100000101000
00000010001010000100000-
000000100010100001000010
000000100010100001000100
000000100010100001001000
00000010001010001000000-
000000100010100010000010
000000100010100010000100
000000100010100010001000
000000100100000-000-000-
000000100100000-000-0010
000000100100000-000-0100
000000100100000-000-1000
000000100100000-0010000-
000000100100000-00100010
000000100100000-00100100
000000100100000-00101000
000000100100000-0100000-
000000100100000-01000010
000000100100000-01000100
000000100100000-01001000
000000100100000-1000000-
000000100100000-10000010
000000100100000-10000100
000000100100000-10001000
0000001001000010000-000-
0000001001000010000-0010
0000001001000010000-0100
0000001001000010000-1000
00000010010000100010000-
000000100100001000100010
000000100100001000100100
000000100100001000101000
00000010010000100100000-
000000100100001001000010
000000100100001001000100
000000100100001001001000
00000010010000101000000-
000000100100001010000010
000000100100001010000100
000000100100001010001000
0000001001000100000-000-
0000001001000100000-0010
0000001001000100000-0100
0000001001000100000-1000
00000010010001000010000-
000000100100010000100010
000000100100010000100100
000000100100010000101000
00000010010001000100000-
000000100100010001000010
000000100100010001000100
000000100100010001001000
00000010010001001000000-
000000100100010010000010
000000100100010010000100
000000100100010010001000
0000001001001000000-000-
0000001001001000000-0010
0000001001001000000-0100
0000001001001000000-1000
00000010010010000010000-
000000100100100000100010
000000100100100000100100
000000100100100000101000
00000010010010000100000-
000000100100100001000010
000000100100100001000100
000000100100100001001000
00000010010010001000000-
000000100100100010000010
000000100100100010000100
000000100100100010001000
000000101000000-000-000-
000000101000000-000-0010
000000101000000-000-0100
000000101000000-000-1000
000000101000000-0010000-
000000101000000-00100010
000000101000000-00100100
000000101000000-00101000
000000101000000-0100000-
000000101000000-01000010
000000101000000-01000100
000000101000000-01001000
000000101000000-1000000-
000000101000000-10000010
000000101000000-10000100
000000101000000-10001000
0000001010000010000-000-
0000001010000010000-0010
0000001010000010000-0100
0000001010000010000-1000
00000010100000100010000-
000000101000001000100010
000000101000001000100100
000000101000001000101000
00000010100000100100000-
000000101000001001000010
000000101000001001000100
000000101000001001001000
00000010100000101000000-
000000101000001010000010
000000101000001010000100
000000101000001010001000
0000001010000100000-000-
0000001010000100000-0010
0000001010000100000-0100
0000001010000100000-1000
00000010100001000010000-
000000101000010000100010
000000101000010000100100
000000101000010000101000
00000010100001000100000-
000000101000010001000010
000000101000010001000100
000000101000010001001000
00000010100001001000000-
000000101000010010000010
000000101000010010000100
000000101000010010001000
0000001010001000000-000-
0000001010001000000-0010
0000001010001000000-0100
0000001010001000000-1000
00000010100010000010000-
000000101000100000100010
000000101000100000100100
000000101000100000101000
00000010100010000100000-
000000101000100001000010
000000101000100001000100
000000101000100001001000
00000010100010001000000-
000000101000100010000010
000000101000100010000100
000000101000100010001000
00000100000-000-000-000-
00000100000-000-000-0010
00000100000-000-000-0100
00000100000-000-000-1000
00000100000-000-0010000-
00000100000-000-00100010
00000100000-000-00100100
00000100000-000-00101000
00000100000-000-0100000-
00000100000-000-01000010
00000100000-000-01000100
00000100000-000-01001000
00000100000-000-1000000-
00000100000-000-10000010
00000100000-000-10000100
00000100000-000-10001000
00000100000-0010000-000-
00000100000-0010000-0010
00000100000-0010000-0100
00000100000-0010000-1000
00000100000-00100010000-
00000100000-001000100010
00000100000-001000100100
00000100000-001000101000
00000100000-00100100000-
00000100000-001001000010
00000100000-001001000100
00000100000-001001001000
00000100000-00101000000-
00000100000-001010000010
00000100000-001010000100
00000100000-001010001000
00000100000-0100000-000-
00000100000-0100000-0010
00000100000-0100000-0100
00000100000-0100000-1000
00000100000-01000010000-
00000100000-010000100010
00000100000-010000100100
00000100000-010000101000
00000100000-01000100000-
00000100000-010001000010
00000100000-010001000100
00000100000-010001001000
00000100000-01001000000-
00000100000-010010000010
00000100000-010010000100
00000100000-010010001000
00000100000-1000000-000-
00000100000-1000000-0010
00000100000-1000000-0100
00000100000-1000000-1000
00000100000-10000010000-
00000100000-100000100010
00000100000-100000100100
00000100000-100000101000
00000100000-10000100000-
00000100000-100001000010
00000100000-100001000100
00000100000-100001001000
00000100000-10001000000-
00000100000-100010000010
00000100000-100010000100
00000100000-100010001000
000001000010000-000-000-
000001000010000-000-0010
000001000010000-000-0100
000001000010000-000-1000
000001000010000-0010000-
000001000010000-00100010
000001000010000-00100100
000001000010000-00101000
000001000010000-0100000-
000001000010000-01000010
000001000010000-01000100
000001000010000-01001000
000001000010000-1000000-
000001000010000-10000010
000001000010000-10000100
000001000010000-10001000
0000010000100010000-000-
0000010000100010000-0010
0000010000100010000-0100
0000010000100010000-1000
00000100001000100010000-
000001000010001000100010
000001000010001000100100
000001000010001000101000
00000100001000100100000-
000001000010001001000010
000001000010001001000100
000001000010001001001000
00000100001000101000000-
000001000010001010000010
000001000010001010000100
000001000010001010001000
0000010000100100000-000-
0000010000100100000-0010
0000010000100100000-0100
0000010000100100000-1000
00000100001001000010000-
000001000010010000100010
000001000010010000100100
000001000010010000101000
00000100001001000100000-
000001000010010001000010
000001000010010001000100
000001000010010001001000
00000100001001001000000-
000001000010010010000010
000001000010010010000100
000001000010010010001000
0000010000101000000-000-
0000010000101000000-0010
0000010000101000000-0100
0000010000101000000-1000
00000100001010000010000-
000001000010100000100010
000001000010100000100100
000001000010100000101000
00000100001010000100000-
000001000010100001000010
000001000010100001000100
000001000010100001001000
00000100001010001000000-
000001000010100010000010
000001000010100010000100
000001000010100010001000
000001000100000-000-000-
000001000100000-000-0010
000001000100000-000-0100
000001000100000-000-1000
000001000100000-0010000-
000001000100000-00100010
000001000100000-00100100
000001000100000-00101000
000001000100000-0100000-
000001000100000-01000010
000001000100000-01000100
000001000100000-01001000
000001000100000-1000000-
000001000100000-10000010
000001000100000-10000100
000001000100000-10001000
0000010001000010000-000-
0000010001000010000-0010
0000010001000010000-0100
0000010001000010000-1000
00000100010000100010000-
000001000100001000100010
000001000100001000100100
000001000100001000101000
00000100010000100100000-
000001000100001001000010
000001000100001001000100
000001000100001001001000
00000100010000101000000-
000001000100001010000010
000001000100001010000100
000001000100001010001000
0000010001000100000-000-
0000010001000100000-0010
0000010001000100000-0100
0000010001000100000-1000
00000100010001000010000-
000001000100010000100010
000001000100010000100100
000001000100010000101000
00000100010001000100000-
000001000100010001000010
000001000100010001000100
000001000100010001001000
00000100010001001000000-
000001000100010010000010
000001000100010010000100
000001000100010010001000
0000010001001000000-000-
0000010001001000000-0010
0000010001001000000-0100
0000010001001000000-1000
00000100010010000010000-
000001000100100000100010
000001000100100000100100
000001000100100000101000
00000100010010000100000-
000001000100100001000010
000001000100100001000100
000001000100100001001000
00000100010010001000000-
000001000100100010000010
000001000100100010000100
000001000100100010001000
000001001000000-000-000-
000001001000000-000-0010
000001001000000-000-0100
000001001000000-000-1000
000001001000000-0010000-
000001001000000-00100010
000001001000000-00100100
000001001000000-00101000
000001001000000-0100000-
000001001000000-01000010
000001001000000-01000100
000001001000000-01001000
000001001000000-1000000-
000001001000000-10000010
000001001000000-10000100
000001001000000-10001000
0000010010000010000-000-
0000010010000010000-0010
0000010010000010000-0100
0000010010000010000-1000
00000100100000100010000-
000001001000001000100010
000001001000001000100100
000001001000001000101000
00000100100000100100000-
000001001000001001000010
000001001000001001000100
000001001000001001001000
00000100100000101000000-
000001001000001010000010
000001001000001010000100
000001001000001010001000
0000010010000100000-000-
0000010010000100000-0010
0000010010000100000-0100
0000010010000100000-1000
00000100100001000010000-
000001001000010000100010
000001001000010000100100
000001001000010000101000
00000100100001000100000-
000001001000010001000010
000001001000010001000100
000001001000010001001000
00000100100001001000000-
000001001000010010000010
000001001000010010000100
000001001000010010001000
0000010010001000000-000-
0000010010001000000-0010
0000010010001000000-0100
0000010010001000000-1000
00000100100010000010000-
000001001000100000100010
000001001000100000100100
000001001000100000101000
00000100100010000100000-
000001001000100001000010
000001001000100001000100
000001001000100001001000
00000100100010001000000-
000001001000100010000010
000001001000100010000100
000001001000100010001000
00001000000-000-000-000-
00001000000-000-000-0010
00001000000-000-000-0100
00001000000-000-000-1000
00001000000-000-0010000-
00001000000-000-00100010
00001000000-000-00100100
00001000000-000-00101000
00001000000-000-0100000-
00001000000-000-01000010
00001000000-000-01000100
00001000000-000-01001000
00001000000-000-1000000-
00001000000-000-10000010
00001000000-000-10000100
00001000000-000-10001000
00001000000-0010000-000-
00001000000-0010000-0010
00001000000-0010000-0100
00001000000-0010000-1000
00001000000-00100010000-
00001000000-001000100010
00001000000-001000100100
00001000000-001000101000
00001000000-00100100000-
00001000000-001001000010
00001000000-001001000100
00001000000-001001001000
00001000000-00101000000-
00001000000-001010000010
00001000000-001010000100
00001000000-001010001000
00001000000-0100000-000-
00001000000-0100000-0010
00001000000-0100000-0100
00001000000-0100000-1000
00001000000-01000010000-
00001000000-010000100010
00001000000-010000100100
00001000000-010000101000
00001000000-01000100000-
00001000000-010001000010
00001000000-010001000100
00001000000-010001001000
00001000000-01001000000-
00001000000-010010000010
00001000000-010010000100
00001000000-010010001000
00001000000-1000000-000-
00001000000-1000000-0010
00001000000-1000000-0100
00001000000-1000000-1000
00001000000-10000010000-
00001000000-100000100010
00001000000-100000100100
00001000000-100000101000
00001000000-10000100000-
00001000000-100001000010
00001000000-100001000100
00001000000-100001001000
00001000000-10001000000-
00001000000-100010000010
00001000000-100010000100
00001000000-100010001000
000010000010000-000-000-
000010000010000-000-0010
000010000010000-000-0100
000010000010000-000-1000
000010000010000-0010000-
000010000010000-00100010
000010000010000-00100100
000010000010000-00101000
000010000010000-0100000-
000010000010000-01000010
000010000010000-01000100
000010000010000-01001000
000010000010000-1000000-
000010000010000-10000010
000010000010000-10000100
000010000010000-10001000
0000100000100010000-000-
0000100000100010000-0010
0000100000100010000-0100
0000100000100010000-1000
00001000001000100010000-
000010000010001000100010
000010000010001000100100
000010000010001000101000
00001000001000100100000-
000010000010001001000010
000010000010001001000100
000010000010001001001000
00001000001000101000000-
000010000010001010000010
000010000010001010000100
000010000010001010001000
0000100000100100000-000-
0000100000100100000-0010
0000100000100100000-0100
0000100000100100000-1000
00001000001001000010000-
000010000010010000100010
000010000010010000100100
000010000010010000101000
00001000001001000100000-
000010000010010001000010
000010000010010001000100
000010000010010001001000
00001000001001001000000-
000010000010010010000010
000010000010010010000100
000010000010010010001000
0000100000101000000-000-
0000100000101000000-0010
0000100000101000000-0100
0000100000101000000-1000
00001000001010000010000-
000010000010100000100010
000010000010100000100100
000010000010100000101000
00001000001010000100000-
000010000010100001000010
000010000010100001000100
000010000010100001001000
00001000001010001000000-
000010000010100010000010
000010000010100010000100
000010000010100010001000
000010000100000-000-000-
000010000100000-000-0010
000010000100000-000-0100
000010000100000-000-1000
000010000100000-0010000-
000010000100000-00100010
000010000100000-00100100
000010000100000-00101000
000010000100000-0100000-
000010000100000-01000010
000010000100000-01000100
000010000100000-01001000
000010000100000-1000000-
000010000100000-10000010
000010000100000-10000100
000010000100000-10001000
0000100001000010000-000-
0000100001000010000-0010
0000100001000010000-0100
0000100001000010000-1000
00001000010000100010000-
000010000100001000100010
000010000100001000100100
000010000100001000101000
00001000010000100100000-
000010000100001001000010
000010000100001001000100
000010000100001001001000
00001000010000101000000-
000010000100001010000010
000010000100001010000100
000010000100001010001000
0000100001000100000-000-
0000100001000100000-0010
0000100001000100000-0100
0000100001000100000-1000
00001000010001000010000-
000010000100010000100010
000010000100010000100100
000010000100010000101000
00001000010001000100000-
000010000100010001000010
000010000100010001000100
000010000100010001001000
00001000010001001000000-
000010000100010010000010
000010000100010010000100
000010000100010010001000
0000100001001000000-000-
0000100001001000000-0010
0000100001001000000-0100
0000100001001000000-1000
00001000010010000010000-
000010000100100000100010
000010000100100000100100
000010000100100000101000
00001000010010000100000-
000010000100100001000010
000010000100100001000100
000010000100100001001000
00001000010010001000000-
000010000100100010000010
000010000100100010000100
000010000100100010001000
000010001000000-000-000-
000010001000000-000-0010
000010001000000-000-0100
000010001000000-000-1000
000010001000000-0010000-
000010001000000-00100010
000010001000000-00100100
000010001000000-00101000
000010001000000-0100000-
000010001000000-01000010
000010001000000-01000100
000010001000000-01001000
000010001000000-1000000-
000010001000000-10000010
000010001000000-10000100
000010001000000-10001000
0000100010000010000-000-
0000100010000010000-0010
0000100010000010000-0100
0000100010000010000-1000
00001000100000100010000-
000010001000001000100010
000010001000001000100100
000010001000001000101000
00001000100000100100000-
000010001000001001000010
000010001000001001000100
000010001000001001001000
00001000100000101000000-
000010001000001010000010
000010001000001010000100
000010001000001010001000
0000100010000100000-000-
0000100010000100000-0010
0000100010000100000-0100
0000100010000100000-1000
00001000100001000010000-
000010001000010000100010
000010001000010000100100
000010001000010000101000
00001000100001000100000-
000010001000010001000010
000010001000010001000100
000010001000010001001000
00001000100001001000000-
000010001000010010000010
000010001000010010000100
000010001000010010001000
0000100010001000000-000-
0000100010001000000-0010
0000100010001000000-0100
0000100010001000000-1000
00001000100010000010000-
000010001000100000100010
000010001000100000100100
000010001000100000101000
00001000100010000100000-
000010001000100001000010
000010001000100001000100
000010001000100001001000
00001000100010001000000-
000010001000100010000010
000010001000100010000100
000010001000100010001000
00010001000-000100010001
000100010010000100010001
000100010100000100010001
000100011000000100010001
000100100001000-00010001
000100100001001000010001
000100100001010000010001
000100100001100000010001
0001010000010001000-0001
000101000001000100100001
000101000001000101000001
000101000001000110000001
00011000000100010001000-
000110000001000100010010
000110000001000100010100
000110000001000100011000
00100001000-001000100010
001000010010001000100010
001000010100001000100010
001000011000001000100010
001000100010000-00100010
001000100010001000100010
001000100010010000100010
001000100010100000100010
0010010000100010000-0010
001001000010001000100010
001001000010001001000010
001001000010001010000010
00101000001000100010000-
001010000010001000100010
001010000010001000100100
001010000010001000101000
01000001000-010001000100
010000010010010001000100
010000010100010001000100
010000011000010001000100
010000100100000-01000100
010000100100001001000100
010000100100010001000100
010000100100100001000100
0100010001000100000-0100
010001000100010000100100
010001000100010001000100
010001000100010010000100
01001000010001000100000-
010010000100010001000010
010010000100010001000100
010010000100010001001000
10000001000-100010001000
100000010010100010001000
100000010100100010001000
100000011000100010001000
100000101000000-10001000
100000101000001010001000
100000101000010010001000
100000101000100010001000
1000010010001000000-1000
100001001000100000101000
100001001000100001001000
100001001000100010001000
10001000100010001000000-
100010001000100010000010
100010001000100010000100
100010001000100010001000

[QRM NOTE]: Time elapsed since start: 2.672 seconds

[QRM NOTE]: Time elapsed since last: 2.464 seconds

[QRM NOTE]: Peak memory: 1948349 bytes


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.0.ivy: node=4]

=====================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 13.231 seconds

[QRM NOTE]: Time elapsed since last: 10.559 seconds

[QRM NOTE]: Peak memory: 12777284 bytes


*************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

*************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.1.ivy -s node=4 -f 2 -g -w -r -b -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.1.ivy: node=4]

=====================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 10.244 seconds

[QRM NOTE]: Time elapsed since last: 10.244 seconds

[QRM NOTE]: Peak memory: 12039434 bytes


*************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

*************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.0.ivy -s node=5 -f 2 -g -w -r -b -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.0.ivy: node=5]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 40

[FW NOTE]: number of interpreted atoms (e.g. member,le): 50

[FW NOTE]: symmetric group order: 120

[QRM NOTE]: Time elapsed since start: 0.582 seconds

[QRM NOTE]: Time elapsed since last: 0.582 seconds

[QRM NOTE]: Peak memory: 1266278 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

