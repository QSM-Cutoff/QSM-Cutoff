
**********************************************************

	[QRM]: ivybench/sym/ivy/sharded_kv.ivy

**********************************************************


**********************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

**********************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=1,key=1,value=1 -f 1 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 3

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 1

[QRM NOTE]: Time elapsed since start: 0.032 seconds

[QRM NOTE]: Time elapsed since last: 0.032 seconds

[QRM NOTE]: Peak memory: 27599 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 2


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

=======================================================================================================

sort: key=['key0']
sort: value=['value0']
sort: node=['node0']
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']

00-
1-0

[QRM NOTE]: Time elapsed since start: 0.074 seconds

[QRM NOTE]: Time elapsed since last: 0.042 seconds

[QRM NOTE]: Peak memory: 1089743 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.077 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 40569 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

======================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1-1
0     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : -11
1     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : 01-
2     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 3

[PRIME NOTE]: number of orbits before merging: 3

[PRIME NOTE]: number of primes: 3

[QRM NOTE]: Time elapsed since start: 0.087 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 1097273 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2]
 solution : []


Before reduction : 
 pending  : [0, 1, 2]
 solution : []

Essensial at level 0 : {0, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1)]

Covered at level 0 : {1}

After reduction : 
 pending  : []
 solution : [0, 2]


Before reduction : 
 pending  : []
 solution : [0, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 2]

[QRM NOTE]: Time elapsed since start: 0.088 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 49244 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1-1
0     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0',)): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0',)): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0',)): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0',)): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0; node$0$transfer_msg$0': [node$0$owner$0$0; node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0; node$0$transfer_msg$0': node$0$owner$0$0; node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,KEY0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : 01-
2     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node0,key0)', 'table(node0,key0,value0)']

sign_func_name2args: {'1$owner': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0',)): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0',)): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node0,key0)', 'table(node0,key0,value0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0',)): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0',)): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~owner(NODE0,KEY0)', 'table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,KEY0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1-1
0     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0,KEY0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)
qcost : 5




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : 01-
2     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0,KEY0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)
qcost : 5



[QRM NOTE]: Time elapsed since start: 0.170 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 1783781 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

=============================================================================================


New level: 1
 pending : []
 solution : [0, 2]


Before reduction : 
 pending  : []
 solution : [0, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 2]


Solution : [0, 2] has cost 10.


Before backtrack at level 1
 pending : []
 solution : [0, 2]

After backtrack at level 1
 pending : []
 solution : [0, 2]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 10

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 2]

[MIN NOTE]: solution length: 2

invariant [invar_0] forall NODE0,VALUE0,KEY0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0) # qcost: 5

invariant [invar_2] forall NODE0,VALUE0,KEY0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0) # qcost: 5

[MIN NOTE]: number of total invariants: 2

[MIN NOTE]: total qCost: 10




[QRM NOTE]: Time elapsed since start: 0.231 seconds

[QRM NOTE]: Time elapsed since last: 0.061 seconds

[QRM NOTE]: Peak memory: 1769896 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

*************************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=2,key=1,value=1 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=2,key=1,value=1]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.052 seconds

[QRM NOTE]: Time elapsed since last: 0.052 seconds

[QRM NOTE]: Peak memory: 63587 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 4


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=1]

=======================================================================================================

sort: key=['key0']
sort: value=['value0']
sort: node=['node0', 'node1']
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']

00000-
000010
010-00
10-000

[QRM NOTE]: Time elapsed since start: 0.201 seconds

[QRM NOTE]: Time elapsed since last: 0.149 seconds

[QRM NOTE]: Peak memory: 1147611 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=2,key=1,value=1]

=======================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.219 seconds

[QRM NOTE]: Time elapsed since last: 0.019 seconds

[QRM NOTE]: Peak memory: 107814 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=1,key=2,value=1 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=2,value=1]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.041 seconds

[QRM NOTE]: Time elapsed since last: 0.041 seconds

[QRM NOTE]: Peak memory: 51498 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 4


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=2,value=1]

=======================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0']
sort: node=['node0']
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'table(node0,key0,value0)', 'table(node0,key1,value0)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key1,value0)']

0000--
010--0
10-00-
11--00

[QRM NOTE]: Time elapsed since start: 0.153 seconds

[QRM NOTE]: Time elapsed since last: 0.112 seconds

[QRM NOTE]: Peak memory: 1132362 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=2,value=1]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.167 seconds

[QRM NOTE]: Time elapsed since last: 0.015 seconds

[QRM NOTE]: Peak memory: 89704 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=1,key=1,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=1,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 5

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.036 seconds

[QRM NOTE]: Time elapsed since last: 0.036 seconds

[QRM NOTE]: Peak memory: 47561 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 4


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0']
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']

0000-
00010
10-00
11000

[QRM NOTE]: Time elapsed since start: 0.114 seconds

[QRM NOTE]: Time elapsed since last: 0.078 seconds

[QRM NOTE]: Peak memory: 1123330 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=1,value=2]

=======================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.129 seconds

[QRM NOTE]: Time elapsed since last: 0.015 seconds

[QRM NOTE]: Peak memory: 81654 bytes

next size: node=2,key=1,value=2


**********************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

**********************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=2,key=1,value=2 -f 1 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 4

[QRM NOTE]: Time elapsed since start: 0.107 seconds

[QRM NOTE]: Time elapsed since last: 0.107 seconds

[QRM NOTE]: Peak memory: 115261 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 8


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1']
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']

000000000-
0000000010
0000000100
0000001000
01000-0000
0100100000
100-000000
1010000000

[QRM NOTE]: Time elapsed since start: 0.512 seconds

[QRM NOTE]: Time elapsed since last: 0.405 seconds

[QRM NOTE]: Peak memory: 1241051 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.513 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 191820 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

======================================================================================================


=== Prime Orbit 0 =====================
size : 8
num_suborbits: 2
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 16
num_suborbits: 4
8 (*) : -----1---1
8     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value1)']
9     : ---1---1--
9     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value1)']
10     : ----1---1-
10     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value0)']
11     : --1---1---
11     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
12 (*) : --1------1
12     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
13     : ----1--1--
13     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value1)']
14     : ---1----1-
14     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
15     : -----11---
15     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)']
16 (*) : ---1-----1
16     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
17     : -----1-1--
17     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value1)']
18     : --1-----1-
18     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
19     : ----1-1---
19     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)']
20 (*) : ----1----1
20     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
21     : --1----1--
21     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
22     : -----1--1-
22     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value0)']
23     : ---1--1---
23     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 3
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 4
num_suborbits: 1
35 (*) : 1----1----
35     : ['owner(node0,key0)', 'table(node1,key0,value1)']
36     : -1-1------
36     : ['owner(node1,key0)', 'table(node0,key0,value1)']
37     : 1---1-----
37     : ['owner(node0,key0)', 'table(node1,key0,value0)']
38     : -11-------
38     : ['owner(node1,key0)', 'table(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 3
39 (*) : --1--1----
39     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
40     : ---11-----
40     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
43 (*) : ---1-1----
43     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
44     : --1-1-----
44     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 7

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 45

[QRM NOTE]: Time elapsed since start: 0.529 seconds

[QRM NOTE]: Time elapsed since last: 0.015 seconds

[QRM NOTE]: Peak memory: 1308796 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6]
 solution : []

Essensial at level 0 : {0, 2, 3, 4, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1)]

Covered at level 0 : {1, 5}

After reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]

[QRM NOTE]: Time elapsed since start: 0.530 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 260646 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 8
num_suborbits: 2
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0], 'node$0$transfer_msg$0': [node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0': node$0$owner$0$0, 'node$0$transfer_msg$0': node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)', 'transfer_msg(NODE1,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,KEY0,NODE0,NODE1. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0)


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 3
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE1,KEY0,VALUE1)', 'transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0,VALUE1,KEY0. ~transfer_msg(NODE1,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 & VALUE0 = VALUE1)


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'owner(node1,key0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',)))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$owner$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$1]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$owner$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$1': Const('key0', EnumeratedSort('key', ('key0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

part_sig: ('key$0$owner$1$0; key$0$owner$1$1', 'node$0$owner$0$0 | node$0$owner$0$1')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'owner(node1,key0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)))}

sign_func_name2count:  {'0$owner': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$owner$1': [key$0$owner$1$0; key$0$owner$1$1]}

	identical_single_classes: {'key$0$owner$1; key$0$owner$1': key$0$owner$1$0; key$0$owner$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists

quantifier mode: key: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0. (exists NODE0. ~owner(NODE0,KEY0))


=== Prime Orbit 4 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node1,key0)', 'table(node1,key0,value1)']

sign_func_name2args: {'1$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node1,key0)', 'table(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)', '~owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 3
39 (*) : --1--1----
39     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
40     : ---11-----
40     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
43 (*) : ---1-1----
43     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
44     : --1-1-----
44     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node1,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node0,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$0, node$0$table$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value1)', 'table(node1,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0, value$0$table$2$1], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0; value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0; value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')


---------- SigGenerator ----------

terms:  ['table(node0,key0,value0)', 'table(node1,key0,value1)']

func_name2symbol:  {'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'table': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$table': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

	sort: node

	identical_classes: {'node$0$table$0': [node$0$table$0$0, node$0$table$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$table$0': [node$0$table$0$0, node$0$table$0$1]}

	sort: key

	identical_classes: {'key$0$table$1; key$0$table$1': [key$0$table$1$0; key$0$table$1$1]}

	identical_single_classes: {'key$0$table$1; key$0$table$1': key$0$table$1$0; key$0$table$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)', 'table(NODE1,KEY0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0,VALUE1,KEY0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 & NODE0 = NODE1)


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 8
num_suborbits: 2
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   4
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,KEY0,NODE0,NODE1. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0)
qcost : 6




=== Prime Orbit 2 =====================
size : 6
num_suborbits: 3
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1,VALUE0,VALUE1,KEY0. ~transfer_msg(NODE1,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 & VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall KEY0. (exists NODE0. ~owner(NODE0,KEY0))
qcost : 3




=== Prime Orbit 4 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)
qcost : 5




=== Prime Orbit 6 =====================
size : 6
num_suborbits: 3
39 (*) : --1--1----
39     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
40     : ---11-----
40     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
43 (*) : ---1-1----
43     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
44     : --1-1-----
44     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1,VALUE0,VALUE1,KEY0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 & NODE0 = NODE1)
qcost : 9



[QRM NOTE]: Time elapsed since start: 4.626 seconds

[QRM NOTE]: Time elapsed since last: 4.096 seconds

[QRM NOTE]: Peak memory: 2114643 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

=============================================================================================


New level: 1
 pending : []
 solution : [0, 2, 3, 4, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 3, 4, 6]


Solution : [0, 2, 3, 4, 6] has cost 32.


Before backtrack at level 1
 pending : []
 solution : [0, 2, 3, 4, 6]

After backtrack at level 1
 pending : []
 solution : [0, 2, 3, 4, 6]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 32

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 2, 3, 4, 6]

[MIN NOTE]: solution length: 5

invariant [invar_0] forall VALUE0,KEY0,NODE0,NODE1. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0) # qcost: 6

invariant [invar_2] forall NODE0,NODE1,VALUE0,VALUE1,KEY0. ~transfer_msg(NODE1,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 & VALUE0 = VALUE1) # qcost: 9

invariant [invar_3] forall KEY0. (exists NODE0. ~owner(NODE0,KEY0)) # qcost: 3

invariant [invar_4] forall VALUE0,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0) # qcost: 5

invariant [invar_6] forall NODE0,NODE1,VALUE0,VALUE1,KEY0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 & NODE0 = NODE1) # qcost: 9

[MIN NOTE]: number of total invariants: 5

[MIN NOTE]: total qCost: 32




[QRM NOTE]: Time elapsed since start: 4.700 seconds

[QRM NOTE]: Time elapsed since last: 0.074 seconds

[QRM NOTE]: Peak memory: 2006544 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

*************************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=3,key=1,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=3,key=1,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 0.233 seconds

[QRM NOTE]: Time elapsed since last: 0.233 seconds

[QRM NOTE]: Peak memory: 369329 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 12


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1', 'node2']
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']

00000000000000-
000000000000010
000000000000100
000000000001000
000000000010000
000000000100000
00100000-000000
001000010000000
010000-00000000
010001000000000
1000-0000000000
100100000000000

[QRM NOTE]: Time elapsed since start: 1.373 seconds

[QRM NOTE]: Time elapsed since last: 1.140 seconds

[QRM NOTE]: Peak memory: 1564642 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=3,key=1,value=2]

=======================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 1.606 seconds

[QRM NOTE]: Time elapsed since last: 0.232 seconds

[QRM NOTE]: Peak memory: 669727 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=2,key=2,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=2,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 20

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 8

[QRM NOTE]: Time elapsed since start: 0.284 seconds

[QRM NOTE]: Time elapsed since last: 0.284 seconds

[QRM NOTE]: Peak memory: 477243 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 64


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=2,value=2]

=======================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1']
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'owner(node1,key0)', 'owner(node1,key1)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key1,value0)', 'table(node0,key1,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key1,value0)', 'table(node1,key1,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key1,value0)', 'transfer_msg(node0,key1,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key1,value0)', 'transfer_msg(node1,key1,value1)']

00000000000000000-0-
00000000000000000-10
0000000000000000100-
00000000000000001010
00000000000000010-00
00000000000000011000
00000000000000100-00
00000000000000101000
0000000000000100000-
00000000000001000010
00000000000001010000
00000000000001100000
0000000000001000000-
00000000000010000010
00000000000010010000
00000000000010100000
00010000000-00000-00
00010000000-00001000
00010000000-01000000
00010000000-10000000
00010000001000000-00
00010000001000001000
00010000001001000000
00010000001010000000
001000000-000000000-
001000000-0000000010
001000000-0000010000
001000000-0000100000
0010000010000000000-
00100000100000000010
00100000100000010000
00100000100000100000
001100000-0-00000000
001100000-1000000000
00110000100-00000000
00110000101000000000
0100000-000000000-00
0100000-000000001000
0100000-000001000000
0100000-000010000000
01000010000000000-00
01000010000000001000
01000010000001000000
01000010000010000000
0110000-0-0000000000
0110000-100000000000
011000100-0000000000
01100010100000000000
10000-0000000000000-
10000-00000000000010
10000-00000000010000
10000-00000000100000
1000100000000000000-
10001000000000000010
10001000000000010000
10001000000000100000
10010-00000-00000000
10010-00001000000000
10011000000-00000000
10011000001000000000
11000-0-000000000000
11000-10000000000000
1100100-000000000000
11001010000000000000

[QRM NOTE]: Time elapsed since start: 1.957 seconds

[QRM NOTE]: Time elapsed since last: 1.673 seconds

[QRM NOTE]: Peak memory: 1730081 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=2,value=2]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 2.722 seconds

[QRM NOTE]: Time elapsed since last: 0.765 seconds

[QRM NOTE]: Peak memory: 1405128 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=2,key=1,value=3 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=1,value=3]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 14

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 0.190 seconds

[QRM NOTE]: Time elapsed since last: 0.190 seconds

[QRM NOTE]: Peak memory: 284495 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 12


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=3]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1']
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']

0000000000000-
00000000000010
00000000000100
00000000001000
00000000010000
00000000100000
0100000-000000
01000010000000
01000100000000
1000-000000000
10010000000000
10100000000000

[QRM NOTE]: Time elapsed since start: 1.039 seconds

[QRM NOTE]: Time elapsed since last: 0.848 seconds

[QRM NOTE]: Peak memory: 1458343 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=1,value=3]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 1.263 seconds

[QRM NOTE]: Time elapsed since last: 0.224 seconds

[QRM NOTE]: Peak memory: 552978 bytes

next size: node=3,key=1,value=2


**********************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=2]

**********************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=3,key=1,value=2 -f 1 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.020 seconds

[QRM NOTE]: Time elapsed since last: 0.020 seconds

[QRM NOTE]: Peak memory: 3724 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=2]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=2]

======================================================================================================


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 2
0 (*) : --1----------1-
0     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
1     : -1---------1---
1     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
2     : 1--------1-----
2     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
3     : --1-----------1
3     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
4     : -1----------1--
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1---------1----
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6 (*) : -1-----------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
7     : --1--------1---
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
8     : 1------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
9     : --1------1-----
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
10     : 1----------1---
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
11     : -1-------1-----
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
12     : -1------------1
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
13     : --1---------1--
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
14     : 1-------------1
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
15     : --1-------1----
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
16     : 1-----------1--
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
17     : -1--------1----
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 4
18 (*) : --------1----1-
18     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value0)']
19     : ------1----1---
19     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value0)']
20     : ----1----1-----
20     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)']
21     : -------1------1
21     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
22     : -----1------1--
22     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
23     : ---1------1----
23     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
27 (*) : ------1------1-
27     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
28     : --------1--1---
28     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value0)']
29     : ----1--------1-
29     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
30     : --------11-----
30     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value0)']
31     : ----1------1---
31     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
32     : ------1--1-----
32     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)']
33     : -----1--------1
33     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
34     : -------1----1--
34     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value1)']
35     : ---1----------1
35     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
36     : -------1--1----
36     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value1)']
37     : ---1--------1--
37     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
38     : -----1----1----
38     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value1)']
39 (*) : ---1---------1-
39     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
40     : ---1-------1---
40     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
41     : -----1-------1-
41     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
42     : -----1---1-----
42     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)']
43     : -------1---1---
43     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value0)']
44     : -------1-1-----
44     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value0)']
45     : ----1---------1
45     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
46     : ----1-------1--
46     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
47     : ------1-------1
47     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
48     : ------1---1----
48     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value1)']
49     : --------1---1--
49     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value1)']
50     : --------1-1----
50     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value1)']
51 (*) : -------1-----1-
51     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value0)']
52     : -----1-----1---
52     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value0)']
53     : ---1-----1-----
53     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
54     : --------1-----1
54     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value1)']
55     : ------1-----1--
55     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value1)']
56     : ----1-----1----
56     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 15
num_suborbits: 3
24 (*) : -------------11
24     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
25     : -----------11--
25     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
26     : ---------11----
26     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
57 (*) : ---------1---1-
57     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
58     : ---------1-1---
58     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
59     : -----------1-1-
59     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
60     : ----------1---1
60     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
61     : ----------1-1--
61     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
62     : ------------1-1
62     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
63 (*) : ----------1--1-
63     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
64     : ----------11---
64     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
65     : ------------11-
65     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
66     : ---------1--1--
66     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
67     : -----------1--1
67     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
68     : ---------1----1
68     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
69 (*) : -11------------
69     : ['owner(node1,key0)', 'owner(node2,key0)']
70     : 1-1------------
70     : ['owner(node0,key0)', 'owner(node2,key0)']
71     : 11-------------
71     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
72 (*) : -1------1------
72     : ['owner(node1,key0)', 'table(node2,key0,value1)']
73     : --1---1--------
73     : ['owner(node2,key0)', 'table(node1,key0,value1)']
74     : 1-------1------
74     : ['owner(node0,key0)', 'table(node2,key0,value1)']
75     : --1-1----------
75     : ['owner(node2,key0)', 'table(node0,key0,value1)']
76     : 1-----1--------
76     : ['owner(node0,key0)', 'table(node1,key0,value1)']
77     : -1--1----------
77     : ['owner(node1,key0)', 'table(node0,key0,value1)']
78     : -1-----1-------
78     : ['owner(node1,key0)', 'table(node2,key0,value0)']
79     : --1--1---------
79     : ['owner(node2,key0)', 'table(node1,key0,value0)']
80     : 1------1-------
80     : ['owner(node0,key0)', 'table(node2,key0,value0)']
81     : --11-----------
81     : ['owner(node2,key0)', 'table(node0,key0,value0)']
82     : 1----1---------
82     : ['owner(node0,key0)', 'table(node1,key0,value0)']
83     : -1-1-----------
83     : ['owner(node1,key0)', 'table(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
84 (*) : --0-----1------
84     : ['table(node2,key0,value1)', '~owner(node2,key0)']
85     : -0----1--------
85     : ['table(node1,key0,value1)', '~owner(node1,key0)']
86     : 0---1----------
86     : ['table(node0,key0,value1)', '~owner(node0,key0)']
87     : --0----1-------
87     : ['table(node2,key0,value0)', '~owner(node2,key0)']
88     : -0---1---------
88     : ['table(node1,key0,value0)', '~owner(node1,key0)']
89     : 0--1-----------
89     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 15
num_suborbits: 3
90 (*) : ------1-1------
90     : ['table(node1,key0,value1)', 'table(node2,key0,value1)']
91     : ----1---1------
91     : ['table(node0,key0,value1)', 'table(node2,key0,value1)']
92     : ----1-1--------
92     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
93     : -----1-1-------
93     : ['table(node1,key0,value0)', 'table(node2,key0,value0)']
94     : ---1---1-------
94     : ['table(node0,key0,value0)', 'table(node2,key0,value0)']
95     : ---1-1---------
95     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
96 (*) : ---1----1------
96     : ['table(node0,key0,value0)', 'table(node2,key0,value1)']
97     : ---1--1--------
97     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
98     : -----1--1------
98     : ['table(node1,key0,value0)', 'table(node2,key0,value1)']
99     : ----11---------
99     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
100     : ------11-------
100     : ['table(node1,key0,value1)', 'table(node2,key0,value0)']
101     : ----1--1-------
101     : ['table(node0,key0,value1)', 'table(node2,key0,value0)']
102 (*) : ---11----------
102     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
103     : -----11--------
103     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
104     : -------11------
104     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 7

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 105

[QRM NOTE]: Time elapsed since start: 0.053 seconds

[QRM NOTE]: Time elapsed since last: 0.033 seconds

[QRM NOTE]: Peak memory: 1195425 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=2]

================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6]
 solution : []

Essensial at level 0 : {0, 2, 3, 5, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1)]

Covered at level 0 : {1, 4}

After reduction : 
 pending  : []
 solution : [0, 2, 3, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 3, 5, 6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 3, 5, 6]

[QRM NOTE]: Time elapsed since start: 0.056 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 146052 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=2]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 2
0 (*) : --1----------1-
0     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
1     : -1---------1---
1     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
2     : 1--------1-----
2     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
3     : --1-----------1
3     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
4     : -1----------1--
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1---------1----
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6 (*) : -1-----------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
7     : --1--------1---
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
8     : 1------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
9     : --1------1-----
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
10     : 1----------1---
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
11     : -1-------1-----
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
12     : -1------------1
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
13     : --1---------1--
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
14     : 1-------------1
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
15     : --1-------1----
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
16     : 1-----------1--
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
17     : -1--------1----
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']

sign_func_name2args: {'0$owner': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0], 'node$0$transfer_msg$0': [node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0': node$0$owner$0$0, 'node$0$transfer_msg$0': node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)', 'transfer_msg(NODE1,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,KEY0,NODE1,VALUE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0)


=== Prime Orbit 2 =====================
size : 15
num_suborbits: 3
24 (*) : -------------11
24     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
25     : -----------11--
25     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
26     : ---------11----
26     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
57 (*) : ---------1---1-
57     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
58     : ---------1-1---
58     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
59     : -----------1-1-
59     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
60     : ----------1---1
60     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
61     : ----------1-1--
61     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
62     : ------------1-1
62     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
63 (*) : ----------1--1-
63     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
64     : ----------11---
64     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
65     : ------------11-
65     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
66     : ---------1--1--
66     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
67     : -----------1--1
67     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
68     : ---------1----1
68     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE1,KEY0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,KEY0,NODE0,NODE1,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 & NODE0 = NODE1)


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
69 (*) : -11------------
69     : ['owner(node1,key0)', 'owner(node2,key0)']
70     : 1-1------------
70     : ['owner(node0,key0)', 'owner(node2,key0)']
71     : 11-------------
71     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'owner(node2,key0)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',)))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$owner$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$1]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$owner$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$1': Const('key0', EnumeratedSort('key', ('key0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

part_sig: ('key$0$owner$1$0; key$0$owner$1$1', 'node$0$owner$0$0 | node$0$owner$0$1')


---------- SigGenerator ----------

terms:  ['owner(node1,key0)', 'owner(node2,key0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)))}

sign_func_name2count:  {'0$owner': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$owner$1': [key$0$owner$1$0; key$0$owner$1$1]}

	identical_single_classes: {'key$0$owner$1; key$0$owner$1': key$0$owner$1$0; key$0$owner$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)', 'owner(NODE1,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,KEY0,NODE1. ~owner(NODE0,KEY0) | ~owner(NODE1,KEY0) | NODE0 = NODE1


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
84 (*) : --0-----1------
84     : ['table(node2,key0,value1)', '~owner(node2,key0)']
85     : -0----1--------
85     : ['table(node1,key0,value1)', '~owner(node1,key0)']
86     : 0---1----------
86     : ['table(node0,key0,value1)', '~owner(node0,key0)']
87     : --0----1-------
87     : ['table(node2,key0,value0)', '~owner(node2,key0)']
88     : -0---1---------
88     : ['table(node1,key0,value0)', '~owner(node1,key0)']
89     : 0--1-----------
89     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node2,key0)', 'table(node2,key0,value1)']

sign_func_name2args: {'1$owner': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node2,key0)', 'table(node2,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~owner(NODE0,KEY0)', 'table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,KEY0,VALUE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)


=== Prime Orbit 6 =====================
size : 15
num_suborbits: 3
90 (*) : ------1-1------
90     : ['table(node1,key0,value1)', 'table(node2,key0,value1)']
91     : ----1---1------
91     : ['table(node0,key0,value1)', 'table(node2,key0,value1)']
92     : ----1-1--------
92     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
93     : -----1-1-------
93     : ['table(node1,key0,value0)', 'table(node2,key0,value0)']
94     : ---1---1-------
94     : ['table(node0,key0,value0)', 'table(node2,key0,value0)']
95     : ---1-1---------
95     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
96 (*) : ---1----1------
96     : ['table(node0,key0,value0)', 'table(node2,key0,value1)']
97     : ---1--1--------
97     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
98     : -----1--1------
98     : ['table(node1,key0,value0)', 'table(node2,key0,value1)']
99     : ----11---------
99     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
100     : ------11-------
100     : ['table(node1,key0,value1)', 'table(node2,key0,value0)']
101     : ----1--1-------
101     : ['table(node0,key0,value1)', 'table(node2,key0,value0)']
102 (*) : ---11----------
102     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
103     : -----11--------
103     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
104     : -------11------
104     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node1,key0,value1)', 'table(node2,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0, value$0$table$2$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$1]}

sig2const: {'node$0$table$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0; value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0; value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0; value$0$table$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node2,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0 | node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node0,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$0, node$0$table$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- SigGenerator ----------

terms:  ['table(node1,key0,value1)', 'table(node2,key0,value1)']

func_name2symbol:  {'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'table': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$table': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0, node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0 | node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

	sort: node

	identical_classes: {'node$0$table$0': [node$0$table$0$0, node$0$table$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$table$0': [node$0$table$0$0, node$0$table$0$1]}

	sort: key

	identical_classes: {'key$0$table$1; key$0$table$1': [key$0$table$1$0; key$0$table$1$1]}

	identical_single_classes: {'key$0$table$1; key$0$table$1': key$0$table$1$0; key$0$table$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE1,KEY0,VALUE1)', 'table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,KEY0,NODE0,NODE1,VALUE0. ~table(NODE1,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 & VALUE0 = VALUE1)


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=2]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 2
0 (*) : --1----------1-
0     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
1     : -1---------1---
1     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
2     : 1--------1-----
2     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
3     : --1-----------1
3     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
4     : -1----------1--
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1---------1----
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6 (*) : -1-----------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
7     : --1--------1---
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
8     : 1------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
9     : --1------1-----
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
10     : 1----------1---
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
11     : -1-------1-----
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
12     : -1------------1
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
13     : --1---------1--
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
14     : 1-------------1
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
15     : --1-------1----
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
16     : 1-----------1--
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
17     : -1--------1----
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
num_forall :   4
num_exists :   0
num_literals : 2
quantified form : forall NODE0,KEY0,NODE1,VALUE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0)
qcost : 6




=== Prime Orbit 2 =====================
size : 15
num_suborbits: 3
24 (*) : -------------11
24     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
25     : -----------11--
25     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
26     : ---------11----
26     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
57 (*) : ---------1---1-
57     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
58     : ---------1-1---
58     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
59     : -----------1-1-
59     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
60     : ----------1---1
60     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
61     : ----------1-1--
61     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
62     : ------------1-1
62     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
63 (*) : ----------1--1-
63     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
64     : ----------11---
64     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
65     : ------------11-
65     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
66     : ---------1--1--
66     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
67     : -----------1--1
67     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
68     : ---------1----1
68     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall VALUE1,KEY0,NODE0,NODE1,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 & NODE0 = NODE1)
qcost : 9




=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
69 (*) : -11------------
69     : ['owner(node1,key0)', 'owner(node2,key0)']
70     : 1-1------------
70     : ['owner(node0,key0)', 'owner(node2,key0)']
71     : 11-------------
71     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall NODE0,KEY0,NODE1. ~owner(NODE0,KEY0) | ~owner(NODE1,KEY0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
84 (*) : --0-----1------
84     : ['table(node2,key0,value1)', '~owner(node2,key0)']
85     : -0----1--------
85     : ['table(node1,key0,value1)', '~owner(node1,key0)']
86     : 0---1----------
86     : ['table(node0,key0,value1)', '~owner(node0,key0)']
87     : --0----1-------
87     : ['table(node2,key0,value0)', '~owner(node2,key0)']
88     : -0---1---------
88     : ['table(node1,key0,value0)', '~owner(node1,key0)']
89     : 0--1-----------
89     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,KEY0,VALUE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)
qcost : 5




=== Prime Orbit 6 =====================
size : 15
num_suborbits: 3
90 (*) : ------1-1------
90     : ['table(node1,key0,value1)', 'table(node2,key0,value1)']
91     : ----1---1------
91     : ['table(node0,key0,value1)', 'table(node2,key0,value1)']
92     : ----1-1--------
92     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
93     : -----1-1-------
93     : ['table(node1,key0,value0)', 'table(node2,key0,value0)']
94     : ---1---1-------
94     : ['table(node0,key0,value0)', 'table(node2,key0,value0)']
95     : ---1-1---------
95     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
96 (*) : ---1----1------
96     : ['table(node0,key0,value0)', 'table(node2,key0,value1)']
97     : ---1--1--------
97     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
98     : -----1--1------
98     : ['table(node1,key0,value0)', 'table(node2,key0,value1)']
99     : ----11---------
99     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
100     : ------11-------
100     : ['table(node1,key0,value1)', 'table(node2,key0,value0)']
101     : ----1--1-------
101     : ['table(node0,key0,value1)', 'table(node2,key0,value0)']
102 (*) : ---11----------
102     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
103     : -----11--------
103     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
104     : -------11------
104     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall VALUE1,KEY0,NODE0,NODE1,VALUE0. ~table(NODE1,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 & VALUE0 = VALUE1)
qcost : 9



[QRM NOTE]: Time elapsed since start: 3.514 seconds

[QRM NOTE]: Time elapsed since last: 3.458 seconds

[QRM NOTE]: Peak memory: 2033308 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=2]

=============================================================================================


New level: 1
 pending : []
 solution : [0, 2, 3, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 3, 5, 6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 3, 5, 6]


Solution : [0, 2, 3, 5, 6] has cost 35.


Before backtrack at level 1
 pending : []
 solution : [0, 2, 3, 5, 6]

After backtrack at level 1
 pending : []
 solution : [0, 2, 3, 5, 6]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=2]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 35

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 2, 3, 5, 6]

[MIN NOTE]: solution length: 5

invariant [invar_0] forall NODE0,KEY0,NODE1,VALUE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0) # qcost: 6

invariant [invar_2] forall VALUE1,KEY0,NODE0,NODE1,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 & NODE0 = NODE1) # qcost: 9

invariant [invar_3] forall NODE0,KEY0,NODE1. ~owner(NODE0,KEY0) | ~owner(NODE1,KEY0) | NODE0 = NODE1 # qcost: 6

invariant [invar_5] forall NODE0,KEY0,VALUE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0) # qcost: 5

invariant [invar_6] forall VALUE1,KEY0,NODE0,NODE1,VALUE0. ~table(NODE1,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 & VALUE0 = VALUE1) # qcost: 9

[MIN NOTE]: number of total invariants: 5

[MIN NOTE]: total qCost: 35




[QRM NOTE]: Time elapsed since start: 3.583 seconds

[QRM NOTE]: Time elapsed since last: 0.069 seconds

[QRM NOTE]: Peak memory: 1925255 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=2]

*************************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy -s node=4,key=1,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: node=4,key=1,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 20

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 48

[QRM NOTE]: Time elapsed since start: 0.437 seconds

[QRM NOTE]: Time elapsed since last: 0.437 seconds

[QRM NOTE]: Peak memory: 643181 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 16


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=4,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1', 'node2', 'node3']
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'owner(node3,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node3,key0,value0)', 'table(node3,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node3,key0,value0)', 'transfer_msg(node3,key0,value1)']

0000000000000000000-
00000000000000000010
00000000000000000100
00000000000000001000
00000000000000010000
00000000000000100000
00000000000001000000
00000000000010000000
00010000000-00000000
00010000001000000000
001000000-0000000000
00100000100000000000
0100000-000000000000
01000010000000000000
10000-00000000000000
10001000000000000000

[QRM NOTE]: Time elapsed since start: 3.334 seconds

[QRM NOTE]: Time elapsed since last: 2.897 seconds

[QRM NOTE]: Peak memory: 1937375 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: node=4,key=1,value=2]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 3.776 seconds

[QRM NOTE]: Time elapsed since last: 0.442 seconds

[QRM NOTE]: Peak memory: 1185078 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy -s node=3,key=2,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: node=3,key=2,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 30

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 24

[QRM NOTE]: Time elapsed since start: 0.688 seconds

[QRM NOTE]: Time elapsed since last: 0.688 seconds

[QRM NOTE]: Peak memory: 950298 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 144


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=2,value=2]

=======================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1', 'node2']
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'owner(node1,key0)', 'owner(node1,key1)', 'owner(node2,key0)', 'owner(node2,key1)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key1,value0)', 'table(node0,key1,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key1,value0)', 'table(node1,key1,value1)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key1,value0)', 'table(node2,key1,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key1,value0)', 'transfer_msg(node0,key1,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key1,value0)', 'transfer_msg(node1,key1,value1)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key1,value0)', 'transfer_msg(node2,key1,value1)']

000000000000000000000000000-0-
000000000000000000000000000-10
00000000000000000000000000100-
000000000000000000000000001010
000000000000000000000000010-00
000000000000000000000000011000
000000000000000000000000100-00
000000000000000000000000101000
00000000000000000000000100000-
000000000000000000000001000010
000000000000000000000001010000
000000000000000000000001100000
00000000000000000000001000000-
000000000000000000000010000010
000000000000000000000010010000
000000000000000000000010100000
000000000000000000000100000-00
000000000000000000000100001000
000000000000000000000101000000
000000000000000000000110000000
000000000000000000001000000-00
000000000000000000001000001000
000000000000000000001001000000
000000000000000000001010000000
00000000000000000001000000000-
000000000000000000010000000010
000000000000000000010000010000
000000000000000000010000100000
000000000000000000010100000000
000000000000000000011000000000
00000000000000000010000000000-
000000000000000000100000000010
000000000000000000100000010000
000000000000000000100000100000
000000000000000000100100000000
000000000000000000101000000000
00000100000000000-000000000-00
00000100000000000-000000001000
00000100000000000-000001000000
00000100000000000-000010000000
00000100000000000-010000000000
00000100000000000-100000000000
000001000000000010000000000-00
000001000000000010000000001000
000001000000000010000001000000
000001000000000010000010000000
000001000000000010010000000000
000001000000000010100000000000
000010000000000-0000000000000-
000010000000000-00000000000010
000010000000000-00000000010000
000010000000000-00000000100000
000010000000000-00000100000000
000010000000000-00001000000000
00001000000000100000000000000-
000010000000001000000000000010
000010000000001000000000010000
000010000000001000000000100000
000010000000001000000100000000
000010000000001000001000000000
000011000000000-0-000000000000
000011000000000-10000000000000
00001100000000100-000000000000
000011000000001010000000000000
0001000000000-0000000000000-00
0001000000000-0000000000001000
0001000000000-0000000001000000
0001000000000-0000000010000000
0001000000000-0000010000000000
0001000000000-0000100000000000
000100000000100000000000000-00
000100000000100000000000001000
000100000000100000000001000000
000100000000100000000010000000
000100000000100000010000000000
000100000000100000100000000000
0001100000000-0-00000000000000
0001100000000-1000000000000000
000110000000100-00000000000000
000110000000101000000000000000
00100000000-00000000000000000-
00100000000-000000000000000010
00100000000-000000000000010000
00100000000-000000000000100000
00100000000-000000000100000000
00100000000-000000001000000000
00100000001000000000000000000-
001000000010000000000000000010
001000000010000000000000010000
001000000010000000000000100000
001000000010000000000100000000
001000000010000000001000000000
00100100000-00000-000000000000
00100100000-000010000000000000
00100100001000000-000000000000
001001000010000010000000000000
00110000000-0-0000000000000000
00110000000-100000000000000000
0011000000100-0000000000000000
001100000010100000000000000000
010000000-00000000000000000-00
010000000-00000000000000001000
010000000-00000000000001000000
010000000-00000000000010000000
010000000-00000000010000000000
010000000-00000000100000000000
010000001000000000000000000-00
010000001000000000000000001000
010000001000000000000001000000
010000001000000000000010000000
010000001000000000010000000000
010000001000000000100000000000
010010000-00000-00000000000000
010010000-00001000000000000000
010010001000000-00000000000000
010010001000001000000000000000
011000000-0-000000000000000000
011000000-10000000000000000000
01100000100-000000000000000000
011000001010000000000000000000
1000000-000000000000000000000-
1000000-0000000000000000000010
1000000-0000000000000000010000
1000000-0000000000000000100000
1000000-0000000000000100000000
1000000-0000000000001000000000
10000010000000000000000000000-
100000100000000000000000000010
100000100000000000000000010000
100000100000000000000000100000
100000100000000000000100000000
100000100000000000001000000000
1000010-000000000-000000000000
1000010-0000000010000000000000
10000110000000000-000000000000
100001100000000010000000000000
1001000-00000-0000000000000000
1001000-0000100000000000000000
1001001000000-0000000000000000
100100100000100000000000000000
1100000-0-00000000000000000000
1100000-1000000000000000000000
110000100-00000000000000000000
110000101000000000000000000000

[QRM NOTE]: Time elapsed since start: 5.877 seconds

[QRM NOTE]: Time elapsed since last: 5.189 seconds

[QRM NOTE]: Peak memory: 2464772 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: node=3,key=2,value=2]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.233 seconds

[QRM NOTE]: Time elapsed since last: 2.356 seconds

[QRM NOTE]: Peak memory: 3552301 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy -s node=3,key=1,value=3 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: node=3,key=1,value=3]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 21

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 0.401 seconds

[QRM NOTE]: Time elapsed since last: 0.401 seconds

[QRM NOTE]: Peak memory: 632595 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 18


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=3]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1', 'node2']
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']

00000000000000000000-
000000000000000000010
000000000000000000100
000000000000000001000
000000000000000010000
000000000000000100000
000000000000001000000
000000000000010000000
000000000000100000000
00100000000-000000000
001000000010000000000
001000000100000000000
01000000-000000000000
010000010000000000000
010000100000000000000
10000-000000000000000
100010000000000000000
100100000000000000000

[QRM NOTE]: Time elapsed since start: 2.776 seconds

[QRM NOTE]: Time elapsed since last: 2.375 seconds

[QRM NOTE]: Peak memory: 1932061 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: node=3,key=1,value=3]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 3.416 seconds

[QRM NOTE]: Time elapsed since last: 0.640 seconds

[QRM NOTE]: Peak memory: 1201936 bytes


*********************************************************************

	[IVY_CHECK]: Ivy Check for Reachability Invariant

*********************************************************************


=================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy]

=================================================================================================

ivy_check complete=fo ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_5
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6

    The following action implementations are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 34: implementation of put
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 26: implementation of recv_transfer_msg
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 18: implementation of reshard

    The following initializers are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 11: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_5 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:put
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_5 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS
        (internal) ext:recv_transfer_msg
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_5 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS
        (internal) ext:reshard
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 53: invar_2 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 54: invar_3 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 55: invar_5 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 56: invar_6 ... PASS

    The following program assertions are treated as assumptions:
        in action reshard when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 19: assumption
        in action recv_transfer_msg when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 27: assumption
        in action put when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy: line 35: assumption

OK
[IVY_CHECK RESULT]: PASS


*********************************************************************************

	[QRM]: ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy

*********************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/sharded_kv.node_3_key_1_value_2.0.ivy']

[CUTOFF]: node=3,key=1,value=2

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 69.414 seconds

[QRM NOTE]: Time elapsed since last: 69.414 seconds

