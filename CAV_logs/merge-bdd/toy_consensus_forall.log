
***************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_forall.ivy

***************************************************************************


*********************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

*********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.ivy -s node=2,value=1 -f 1 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

===============================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.030 seconds

[QRM NOTE]: Time elapsed since last: 0.030 seconds

[QRM NOTE]: Peak memory: 31909 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 5


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=1]

==================================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0']
sort: quorum=['quorum__node0_node1']
predicate: vote('node', 'value')
predicate: voted('node',)
predicate: voting_quorum=('quorum',)
predicate: decided('value',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'voted(node0)', 'voted(node1)', '(voting_quorum=quorum__node0_node1)']

000001
001011
010101
011111
111111

[QRM NOTE]: Time elapsed since start: 0.141 seconds

[QRM NOTE]: Time elapsed since last: 0.111 seconds

[QRM NOTE]: Peak memory: 1109667 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.144 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 59420 bytes


======================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

======================================================================================================================


=================================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

=================================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : -----0
0     : ['~(voting_quorum=quorum__node0_node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -1-0--
1     : ['vote(node0,value0)', '~voted(node0)']
2     : --1-0-
2     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
3 (*) : 1--0--
3     : ['decided(value0)', '~voted(node0)']
4     : 1---0-
4     : ['decided(value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : --0-1-
5     : ['voted(node1)', '~vote(node1,value0)']
6     : -0-1--
6     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1-0---
7     : ['decided(value0)', '~vote(node1,value0)']
8     : 10----
8     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 5

[PRIME NOTE]: number of orbits before merging: 5

[PRIME NOTE]: number of primes: 9

[QRM NOTE]: Time elapsed since start: 0.155 seconds

[QRM NOTE]: Time elapsed since last: 0.011 seconds

[QRM NOTE]: Peak memory: 1131441 bytes


===========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

===========================================================================================================

definition primes: {0}


New level: 0
 pending : [1, 2, 3, 4]
 solution : []


Before reduction : 
 pending  : [1, 2, 3, 4]
 solution : []

Essensial at level 0 : {1, 3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4]
 solution : [1, 3]


Before reduction : 
 pending  : [2, 4]
 solution : [1, 3]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4]
 solution : [1, 3]

[QRM NOTE]: Time elapsed since start: 0.159 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 85467 bytes


===============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

===============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -1-0--
1     : ['vote(node0,value0)', '~voted(node0)']
2     : --1-0-
2     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', '~voted(node0)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', '~voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0)


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : --0-1-
5     : ['voted(node1)', '~vote(node1,value0)']
6     : -0-1--
6     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node1,value0)', 'voted(node1)']

sign_func_name2args: {'1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$vote$1$0]}

sig2const: {'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0', 'value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~vote(node1,value0)', 'voted(node1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$vote': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0)


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
3 (*) : 1--0--
3     : ['decided(value0)', '~voted(node0)']
4     : 1---0-
4     : ['decided(value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1')): node$1$voted$0$0}

part_sig: ('node$1$voted$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1')): node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0)


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1-0---
7     : ['decided(value0)', '~vote(node1,value0)']
8     : 10----
8     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

part_sig: ('node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node1,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~decided(VALUE0) | vote(NODE0,VALUE0)


=========================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

=========================================================================================================================


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -1-0--
1     : ['vote(node0,value0)', '~voted(node0)']
2     : --1-0-
2     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : --0-1-
5     : ['voted(node1)', '~vote(node1,value0)']
6     : -0-1--
6     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
3 (*) : 1--0--
3     : ['decided(value0)', '~voted(node0)']
4     : 1---0-
4     : ['decided(value0)', '~voted(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1-0---
7     : ['decided(value0)', '~vote(node1,value0)']
8     : 10----
8     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~decided(VALUE0) | vote(NODE0,VALUE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 0.252 seconds

[QRM NOTE]: Time elapsed since last: 0.093 seconds

[QRM NOTE]: Peak memory: 1816675 bytes


========================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

========================================================================================================


New level: 1
 pending : [2, 4]
 solution : [1, 3]


Before reduction : 
 pending  : [2, 4]
 solution : [1, 3]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 4]
 solution : [1, 3]


Solution : [1, 3] has cost 8.


Decide in level 1 among pending : [2, 4]

Coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [4]
 solution : [1, 3, 2]


New level: 2
 pending : [4]
 solution : [1, 3, 2]


Before reduction : 
 pending  : [4]
 solution : [1, 3, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32), (3, -1), (4, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0)]

Covered at level 2 : {4}

After reduction : 
 pending  : []
 solution : [1, 3, 2]


Before reduction : 
 pending  : []
 solution : [1, 3, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 2]


Solution : [1, 3, 2] has cost 12.


Before backtrack at level 2
 pending : []
 solution : [1, 3, 2]

After backtrack at level 2
 pending : [4]
 solution : [1, 3, 2]


Invert decision for 2 at level 1


New level: 2
 pending : [4]
 solution : [1, 3]


Before reduction : 
 pending  : [4]
 solution : [1, 3]

Essensial at level 2 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 4]


Before reduction : 
 pending  : []
 solution : [1, 3, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 4]


Solution : [1, 3, 4] has cost 12.


Before backtrack at level 2
 pending : []
 solution : [1, 3, 4]

After backtrack at level 2
 pending : [4]
 solution : [1, 3]


Before backtrack at level 1
 pending : [4]
 solution : [1, 3]

After backtrack at level 1
 pending : [4, 2]
 solution : [1, 3]


=======================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

=======================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: upper bound: 12

[MIN NOTE]: maximum branch and bound depth: 2

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [1, 3, 2]

[MIN NOTE]: solution length: 3

invariant [invar_1] forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_3] forall NODE0,VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0) # qcost: 4

invariant [invar_2] forall NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0) # qcost: 4

[MIN NOTE]: number of total invariants: 3

[MIN NOTE]: total qCost: 12




[MIN NOTE]: Solution 1 : [1, 3, 4]

[MIN NOTE]: solution length: 3

invariant [invar_1] forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_3] forall NODE0,VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0) # qcost: 4

invariant [invar_4] forall NODE0,VALUE0. ~decided(VALUE0) | vote(NODE0,VALUE0) # qcost: 4

[MIN NOTE]: number of total invariants: 3

[MIN NOTE]: total qCost: 12




[QRM NOTE]: Time elapsed since start: 0.345 seconds

[QRM NOTE]: Time elapsed since last: 0.093 seconds

[QRM NOTE]: Peak memory: 1806579 bytes


************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: node=3,value=1]

================================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 0.037 seconds

[QRM NOTE]: Time elapsed since last: 0.037 seconds

[QRM NOTE]: Peak memory: 60117 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 30


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=1]

==================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decided('value',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: voting_quorum=('quorum',)
predicate: voted('node',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']

0000000001
0000000010
0000000100
0001001001
0001001010
0001001100
0010010001
0010010010
0010010100
0011011001
0011011010
0011011100
0100100001
0100100010
0100100100
0101101001
0101101010
0101101100
0110110001
0110110010
0110110100
0111111001
0111111010
0111111100
1011011001
1101101010
1110110100
1111111001
1111111010
1111111100

[QRM NOTE]: Time elapsed since start: 0.379 seconds

[QRM NOTE]: Time elapsed since last: 0.342 seconds

[QRM NOTE]: Peak memory: 1196396 bytes


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: node=3,value=1]

============================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.548 seconds

[QRM NOTE]: Time elapsed since last: 0.169 seconds

[QRM NOTE]: Peak memory: 273826 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy -s node=2,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: node=2,value=2]

================================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 9

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 4

[QRM NOTE]: Time elapsed since start: 0.039 seconds

[QRM NOTE]: Time elapsed since last: 0.039 seconds

[QRM NOTE]: Peak memory: 53760 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 11


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=2,value=2]

==================================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1']
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: member('node', 'quorum')
predicate: voting_quorum=('quorum',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'voted(node0)', 'voted(node1)', '(voting_quorum=quorum__node0_node1)']

000000001
000001011
000010011
000100101
000101111
000110111
001000101
001001111
001010111
010101111
101010111

[QRM NOTE]: Time elapsed since start: 0.220 seconds

[QRM NOTE]: Time elapsed since last: 0.181 seconds

[QRM NOTE]: Peak memory: 1150342 bytes


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.0.ivy: node=2,value=2]

============================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.275 seconds

[QRM NOTE]: Time elapsed since last: 0.055 seconds

[QRM NOTE]: Peak memory: 142553 bytes

next size: node=3,value=2


************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=2,value=1]

************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy -s node=3,value=1 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: node=3,value=1]

============================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.199 seconds

[QRM NOTE]: Time elapsed since last: 0.199 seconds

[QRM NOTE]: Peak memory: 150962 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy -s node=2,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_2_value_1.1.ivy: node=2,value=2]

============================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.072 seconds

[QRM NOTE]: Time elapsed since last: 0.072 seconds

[QRM NOTE]: Peak memory: 47764 bytes

next size: node=3,value=2


*********************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

*********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.ivy -s node=3,value=2 -f 1 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

===============================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 14

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 0.117 seconds

[QRM NOTE]: Time elapsed since last: 0.117 seconds

[QRM NOTE]: Peak memory: 110279 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 99


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=2]

==================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voting_quorum=('quorum',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: voted('node',)
predicate: decided('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']

00000000000001
00000000000010
00000000000100
00000001001001
00000001001010
00000001001100
00000010001001
00000010001010
00000010001100
00000100010001
00000100010010
00000100010100
00000101011001
00000101011010
00000101011100
00000110011001
00000110011010
00000110011100
00001000010001
00001000010010
00001000010100
00001001011001
00001001011010
00001001011100
00001010011001
00001010011010
00001010011100
00010000100001
00010000100010
00010000100100
00010001101001
00010001101010
00010001101100
00010010101001
00010010101010
00010010101100
00010100110001
00010100110010
00010100110100
00010101111001
00010101111010
00010101111100
00010110111001
00010110111010
00010110111100
00011000110001
00011000110010
00011000110100
00011001111001
00011001111010
00011001111100
00011010111001
00011010111010
00011010111100
00100000100001
00100000100010
00100000100100
00100001101001
00100001101010
00100001101100
00100010101001
00100010101010
00100010101100
00100100110001
00100100110010
00100100110100
00100101111001
00100101111010
00100101111100
00100110111001
00100110111010
00100110111100
00101000110001
00101000110010
00101000110100
00101001111001
00101001111010
00101001111100
00101010111001
00101010111010
00101010111100
01000101011001
01010001101010
01010100110100
01010101111001
01010101111010
01010101111100
01010110111100
01011001111010
01100101111001
10001010011001
10011010111001
10100010101010
10100110111010
10101000110100
10101001111100
10101010111001
10101010111010
10101010111100

[QRM NOTE]: Time elapsed since start: 0.770 seconds

[QRM NOTE]: Time elapsed since last: 0.653 seconds

[QRM NOTE]: Peak memory: 1286887 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.772 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 253214 bytes


======================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

======================================================================================================================


=================================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

=================================================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : -----------1-1
0     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node1_node2)']
1     : ------------11
1     : ['(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
2     : -----------11-
2     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
3 (*) : -------1--0---
3     : ['vote(node2,value1)', '~voted(node2)']
4     : ------1---0---
4     : ['vote(node2,value0)', '~voted(node2)']
5     : -----1---0----
5     : ['vote(node1,value1)', '~voted(node1)']
6     : ----1----0----
6     : ['vote(node1,value0)', '~voted(node1)']
7     : ---1----0-----
7     : ['vote(node0,value1)', '~voted(node0)']
8     : --1-----0-----
8     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
9 (*) : --11----------
9     : ['vote(node0,value0)', 'vote(node0,value1)']
10     : ----11--------
10     : ['vote(node1,value0)', 'vote(node1,value1)']
11     : ------11------
11     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
12 (*) : 11------------
12     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
13 (*) : 1--1--------1-
13     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
14     : -11---------1-
14     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
15     : 1--1-------1--
15     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
16     : -11--------1--
16     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
17     : 1----1-------1
17     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
18     : -1--1--------1
18     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
19     : 1----1-----1--
19     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
20     : -1--1------1--
20     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
21     : 1------1-----1
21     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
22     : -1----1------1
22     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
23     : 1------1----1-
23     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
24     : -1----1-----1-
24     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
25 (*) : 1--1-----0----
25     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
26     : -11------0----
26     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
27     : 1--1------0---
27     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
28     : -11-------0---
28     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
29     : 1----1--0-----
29     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
30     : -1--1---0-----
30     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
31     : 1----1----0---
31     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
32     : -1--1-----0---
32     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
33     : 1------10-----
33     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
34     : -1----1-0-----
34     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
35     : 1------1-0----
35     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
36     : -1----1--0----
36     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 1
37 (*) : 1--10---------
37     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
38     : -11--0--------
38     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
39     : 1--1--0-------
39     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
40     : -11----0------
40     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
41     : 1-0--1--------
41     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
42     : -1-01---------
42     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
43     : 1----10-------
43     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
44     : -1--1--0------
44     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
45     : 1-0----1------
45     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
46     : -1-0--1-------
46     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
47     : 1---0--1------
47     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
48     : -1---01-------
48     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
49 (*) : 1--1-1--------
49     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
50     : -11-1---------
50     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
51     : 1--1---1------
51     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
52     : -11---1-------
52     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
53     : 1----1-1------
53     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
54     : -1--1-1-------
54     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
55 (*) : 1--1---------0
55     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
56     : -11----------0
56     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
57     : 1----1------0-
57     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
58     : -1--1-------0-
58     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
59     : 1------1---0--
59     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
60     : -1----1----0--
60     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
61 (*) : -1-0---------0
61     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
62     : 1-0----------0
62     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
63     : -1---0------0-
63     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
64     : 1---0-------0-
64     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
65     : -1-----0---0--
65     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
66     : 1-----0----0--
66     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
67 (*) : -1-----0----1-
67     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
68     : 1-----0-----1-
68     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
69     : -1---0-----1--
69     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
70     : 1---0------1--
70     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
71     : -1-----0-----1
71     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
72     : 1-----0------1
72     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
73     : -1-0-------1--
73     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
74     : 1-0--------1--
74     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
75     : -1---0-------1
75     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
76     : 1---0--------1
76     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
77     : -1-0--------1-
77     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
78     : 1-0---------1-
78     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
79 (*) : -1---0-0------
79     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
80     : 1---0-0-------
80     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
81     : -1-0---0------
81     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
82     : 1-0---0-------
82     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
83     : -1-0-0--------
83     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
84     : 1-0-0---------
84     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
85 (*) : -1--------00--
85     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
86     : 1---------00--
86     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
87     : -1-------0--0-
87     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
88     : 1--------0--0-
88     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
89     : -1------0----0
89     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
90     : 1-------0----0
90     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 12
num_suborbits: 1
91 (*) : -1--------0--1
91     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
92     : 1---------0--1
92     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
93     : -1-------0---1
93     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
94     : 1--------0---1
94     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
95     : -1--------0-1-
95     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
96     : 1---------0-1-
96     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
97     : -1------0---1-
97     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
98     : 1-------0---1-
98     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
99     : -1-------0-1--
99     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
100     : 1--------0-1--
100     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
101     : -1------0--1--
101     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
102     : 1-------0--1--
102     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 12
num_suborbits: 1
103 (*) : -1---0----0---
103     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
104     : 1---0-----0---
104     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
105     : -1-----0-0----
105     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
106     : 1-----0--0----
106     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
107     : -1-0------0---
107     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
108     : 1-0-------0---
108     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
109     : -1-----00-----
109     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
110     : 1-----0-0-----
110     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
111     : -1-0-----0----
111     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
112     : 1-0------0----
112     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
113     : -1---0--0-----
113     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
114     : 1---0---0-----
114     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
115 (*) : -1------0-0---
115     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
116     : 1-------0-0---
116     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
117     : -1------00----
117     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
118     : 1-------00----
118     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
119     : -1-------00---
119     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
120     : 1--------00---
120     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 3
num_suborbits: 1
121 (*) : ------00--1---
121     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
122     : ----00---1----
122     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
123     : --00----1-----
123     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 1
num_suborbits: 1
124 (*) : -----------000
124     : ['~(voting_quorum=quorum__node0_node1)', '~(voting_quorum=quorum__node0_node2)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 18

[PRIME NOTE]: number of orbits before merging: 18

[PRIME NOTE]: number of primes: 125

[QRM NOTE]: Time elapsed since start: 1.027 seconds

[QRM NOTE]: Time elapsed since last: 0.255 seconds

[QRM NOTE]: Peak memory: 1453951 bytes


===========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

===========================================================================================================

definition primes: {0, 17}


New level: 0
 pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
 solution : []


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
 solution : []

Essensial at level 0 : {16, 1, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, 1048576), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, 1048576), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, 1048576), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2]

[QRM NOTE]: Time elapsed since start: 1.068 seconds

[QRM NOTE]: Time elapsed since last: 0.041 seconds

[QRM NOTE]: Peak memory: 415092 bytes


===============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

===============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 16 =====================
size : 3
num_suborbits: 1
121 (*) : ------00--1---
121     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
122     : ----00---1----
122     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
123     : --00----1-----
123     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node2,value0)', '~vote(node2,value1)', 'voted(node2)']

sign_func_name2args: {'1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$1]}

sig2const: {'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~vote(node2,value0)', '~vote(node2,value1)', 'voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 2, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
3 (*) : -------1--0---
3     : ['vote(node2,value1)', '~voted(node2)']
4     : ------1---0---
4     : ['vote(node2,value0)', '~voted(node2)']
5     : -----1---0----
5     : ['vote(node1,value1)', '~voted(node1)']
6     : ----1----0----
6     : ['vote(node1,value0)', '~voted(node1)']
7     : ---1----0-----
7     : ['vote(node0,value1)', '~voted(node0)']
8     : --1-----0-----
8     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value1)', '~voted(node2)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node2,value1)', '~voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
9 (*) : --11----------
9     : ['vote(node0,value0)', 'vote(node0,value1)']
10     : ----11--------
10     : ['vote(node1,value0)', 'vote(node1,value1)']
11     : ------11------
11     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', 'vote(node0,value1)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', 'vote(node0,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
12 (*) : 11------------
12     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: exists VALUE0. ~decided(VALUE0)


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
13 (*) : 1--1--------1-
13     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
14     : -11---------1-
14     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
15     : 1--1-------1--
15     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
16     : -11--------1--
16     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
17     : 1----1-------1
17     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
18     : -1--1--------1
18     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
19     : 1----1-----1--
19     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
20     : -1--1------1--
20     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
21     : 1------1-----1
21     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
22     : -1----1------1
22     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
23     : 1------1----1-
23     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
24     : -1----1-----1-
24     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value1)', 'voting_quorum = quorum__node0_node2', 'member(node0,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value1)', 'voting_quorum = quorum__node0_node2', 'member(node0,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', 'decided(VALUE0)', 'voting_quorum = QUORUM0', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0,VALUE1. ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
25 (*) : 1--1-----0----
25     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
26     : -11------0----
26     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
27     : 1--1------0---
27     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
28     : -11-------0---
28     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
29     : 1----1--0-----
29     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
30     : -1--1---0-----
30     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
31     : 1----1----0---
31     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
32     : -1--1-----0---
32     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
33     : 1------10-----
33     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
34     : -1----1-0-----
34     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
35     : 1------1-0----
35     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
36     : -1----1--0----
36     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'decided(VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE0,NODE1. voted(NODE1) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 1
37 (*) : 1--10---------
37     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
38     : -11--0--------
38     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
39     : 1--1--0-------
39     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
40     : -11----0------
40     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
41     : 1-0--1--------
41     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
42     : -1-01---------
42     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
43     : 1----10-------
43     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
44     : -1--1--0------
44     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
45     : 1-0----1------
45     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
46     : -1-0--1-------
46     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
47     : 1---0--1------
47     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
48     : -1---01-------
48     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'decided(VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE0,NODE1. vote(NODE1,VALUE0) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
49 (*) : 1--1-1--------
49     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
50     : -11-1---------
50     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
51     : 1--1---1------
51     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
52     : -11---1-------
52     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
53     : 1----1-1------
53     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
54     : -1--1-1-------
54     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE1,VALUE1)', 'decided(VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE0,NODE1. ~vote(NODE1,VALUE1) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
55 (*) : 1--1---------0
55     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
56     : -11----------0
56     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
57     : 1----1------0-
57     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
58     : -1--1-------0-
58     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
59     : 1------1---0--
59     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
60     : -1----1----0--
60     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value1)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value1)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~member(NODE0,QUORUM0)', 'voting_quorum ~= QUORUM0', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0,VALUE1. ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
61 (*) : -1-0---------0
61     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
62     : 1-0----------0
62     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
63     : -1---0------0-
63     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
64     : 1---0-------0-
64     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
65     : -1-----0---0--
65     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
66     : 1-----0----0--
66     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node0,value1)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node0,value1)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~member(NODE0,QUORUM0)', 'voting_quorum ~= QUORUM0', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | vote(NODE0,VALUE0)


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
67 (*) : -1-----0----1-
67     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
68     : 1-----0-----1-
68     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
69     : -1---0-----1--
69     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
70     : 1---0------1--
70     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
71     : -1-----0-----1
71     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
72     : 1-----0------1
72     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
73     : -1-0-------1--
73     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
74     : 1-0--------1--
74     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
75     : -1---0-------1
75     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
76     : 1---0--------1
76     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
77     : -1-0--------1-
77     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
78     : 1-0---------1-
78     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node2,value1)', 'voting_quorum = quorum__node0_node2', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$member$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node2,value1)', 'voting_quorum = quorum__node0_node2', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', 'decided(VALUE0)', 'voting_quorum = QUORUM0', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | vote(NODE0,VALUE0)


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
79 (*) : -1---0-0------
79     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
80     : 1---0-0-------
80     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
81     : -1-0---0------
81     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
82     : 1-0---0-------
82     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
83     : -1-0-0--------
83     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
84     : 1-0-0---------
84     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'decided(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. vote(NODE1,VALUE0) | ~decided(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
85 (*) : -1--------00--
85     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
86     : 1---------00--
86     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
87     : -1-------0--0-
87     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
88     : 1--------0--0-
88     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
89     : -1------0----0
89     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
90     : 1-------0----0
90     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node2)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node2)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'decided(VALUE0)', '~member(NODE0,QUORUM0)', 'voting_quorum ~= QUORUM0']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. voted(NODE0) | ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0


=== Prime Orbit 13 =====================
size : 12
num_suborbits: 1
91 (*) : -1--------0--1
91     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
92     : 1---------0--1
92     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
93     : -1-------0---1
93     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
94     : 1--------0---1
94     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
95     : -1--------0-1-
95     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
96     : 1---------0-1-
96     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
97     : -1------0---1-
97     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
98     : 1-------0---1-
98     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
99     : -1-------0-1--
99     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
100     : 1--------0-1--
100     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
101     : -1------0--1--
101     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
102     : 1-------0--1--
102     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node2)', 'voting_quorum = quorum__node1_node2', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$member$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$voted$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node2)', 'voting_quorum = quorum__node1_node2', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$voted$0': [node$0$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$voted$0': node$0$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'decided(VALUE0)', 'voting_quorum = QUORUM0', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. voted(NODE0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0)


=== Prime Orbit 14 =====================
size : 12
num_suborbits: 1
103 (*) : -1---0----0---
103     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
104     : 1---0-----0---
104     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
105     : -1-----0-0----
105     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
106     : 1-----0--0----
106     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
107     : -1-0------0---
107     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
108     : 1-0-------0---
108     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
109     : -1-----00-----
109     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
110     : 1-----0-0-----
110     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
111     : -1-0-----0----
111     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
112     : 1-0------0----
112     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
113     : -1---0--0-----
113     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
114     : 1---0---0-----
114     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'decided(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. voted(NODE1) | ~decided(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
115 (*) : -1------0-0---
115     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
116     : 1-------0-0---
116     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
117     : -1------00----
117     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
118     : 1-------00----
118     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
119     : -1-------00---
119     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
120     : 1--------00---
120     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', '~voted(NODE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. voted(NODE1) | voted(NODE0) | ~decided(VALUE0) | NODE0 = NODE1


=========================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

=========================================================================================================================


=== Prime Orbit 16 =====================
size : 3
num_suborbits: 1
121 (*) : ------00--1---
121     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
122     : ----00---1----
122     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
123     : --00----1-----
123     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))
qcost : 4




=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
3 (*) : -------1--0---
3     : ['vote(node2,value1)', '~voted(node2)']
4     : ------1---0---
4     : ['vote(node2,value0)', '~voted(node2)']
5     : -----1---0----
5     : ['vote(node1,value1)', '~voted(node1)']
6     : ----1----0----
6     : ['vote(node1,value0)', '~voted(node1)']
7     : ---1----0-----
7     : ['vote(node0,value1)', '~voted(node0)']
8     : --1-----0-----
8     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
9 (*) : --11----------
9     : ['vote(node0,value0)', 'vote(node0,value1)']
10     : ----11--------
10     : ['vote(node1,value0)', 'vote(node1,value1)']
11     : ------11------
11     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
12 (*) : 11------------
12     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists VALUE0. ~decided(VALUE0)
qcost : 2




=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
13 (*) : 1--1--------1-
13     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
14     : -11---------1-
14     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
15     : 1--1-------1--
15     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
16     : -11--------1--
16     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
17     : 1----1-------1
17     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
18     : -1--1--------1
18     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
19     : 1----1-----1--
19     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
20     : -1--1------1--
20     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
21     : 1------1-----1
21     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
22     : -1----1------1
22     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
23     : 1------1----1-
23     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
24     : -1----1-----1-
24     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,QUORUM0,NODE0,VALUE1. ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
25 (*) : 1--1-----0----
25     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
26     : -11------0----
26     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
27     : 1--1------0---
27     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
28     : -11-------0---
28     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
29     : 1----1--0-----
29     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
30     : -1--1---0-----
30     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
31     : 1----1----0---
31     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
32     : -1--1-----0---
32     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
33     : 1------10-----
33     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
34     : -1----1-0-----
34     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
35     : 1------1-0----
35     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
36     : -1----1--0----
36     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,NODE0,NODE1. voted(NODE1) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 6 =====================
size : 12
num_suborbits: 1
37 (*) : 1--10---------
37     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
38     : -11--0--------
38     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
39     : 1--1--0-------
39     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
40     : -11----0------
40     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
41     : 1-0--1--------
41     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
42     : -1-01---------
42     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
43     : 1----10-------
43     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
44     : -1--1--0------
44     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
45     : 1-0----1------
45     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
46     : -1-0--1-------
46     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
47     : 1---0--1------
47     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
48     : -1---01-------
48     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,NODE0,NODE1. vote(NODE1,VALUE0) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
49 (*) : 1--1-1--------
49     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
50     : -11-1---------
50     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
51     : 1--1---1------
51     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
52     : -11---1-------
52     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
53     : 1----1-1------
53     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
54     : -1--1-1-------
54     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,NODE0,NODE1. ~vote(NODE1,VALUE1) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
55 (*) : 1--1---------0
55     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
56     : -11----------0
56     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
57     : 1----1------0-
57     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
58     : -1--1-------0-
58     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
59     : 1------1---0--
59     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
60     : -1----1----0--
60     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,QUORUM0,NODE0,VALUE1. ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
61 (*) : -1-0---------0
61     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
62     : 1-0----------0
62     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
63     : -1---0------0-
63     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
64     : 1---0-------0-
64     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
65     : -1-----0---0--
65     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
66     : 1-----0----0--
66     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,QUORUM0,NODE0. ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | vote(NODE0,VALUE0)
qcost : 7




=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
67 (*) : -1-----0----1-
67     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
68     : 1-----0-----1-
68     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
69     : -1---0-----1--
69     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
70     : 1---0------1--
70     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
71     : -1-----0-----1
71     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
72     : 1-----0------1
72     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
73     : -1-0-------1--
73     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
74     : 1-0--------1--
74     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
75     : -1---0-------1
75     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
76     : 1---0--------1
76     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
77     : -1-0--------1-
77     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
78     : 1-0---------1-
78     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,QUORUM0,NODE0. ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | vote(NODE0,VALUE0)
qcost : 7




=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
79 (*) : -1---0-0------
79     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
80     : 1---0-0-------
80     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
81     : -1-0---0------
81     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
82     : 1-0---0-------
82     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
83     : -1-0-0--------
83     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
84     : 1-0-0---------
84     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. vote(NODE1,VALUE0) | ~decided(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
85 (*) : -1--------00--
85     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
86     : 1---------00--
86     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
87     : -1-------0--0-
87     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
88     : 1--------0--0-
88     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
89     : -1------0----0
89     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
90     : 1-------0----0
90     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,QUORUM0,NODE0. voted(NODE0) | ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0
qcost : 7




=== Prime Orbit 13 =====================
size : 12
num_suborbits: 1
91 (*) : -1--------0--1
91     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
92     : 1---------0--1
92     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
93     : -1-------0---1
93     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
94     : 1--------0---1
94     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
95     : -1--------0-1-
95     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
96     : 1---------0-1-
96     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
97     : -1------0---1-
97     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
98     : 1-------0---1-
98     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
99     : -1-------0-1--
99     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
100     : 1--------0-1--
100     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
101     : -1------0--1--
101     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
102     : 1-------0--1--
102     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,QUORUM0,NODE0. voted(NODE0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 14 =====================
size : 12
num_suborbits: 1
103 (*) : -1---0----0---
103     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
104     : 1---0-----0---
104     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
105     : -1-----0-0----
105     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
106     : 1-----0--0----
106     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
107     : -1-0------0---
107     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
108     : 1-0-------0---
108     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
109     : -1-----00-----
109     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
110     : 1-----0-0-----
110     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
111     : -1-0-----0----
111     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
112     : 1-0------0----
112     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
113     : -1---0--0-----
113     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
114     : 1---0---0-----
114     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. voted(NODE1) | ~decided(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
115 (*) : -1------0-0---
115     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
116     : 1-------0-0---
116     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
117     : -1------00----
117     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
118     : 1-------00----
118     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
119     : -1-------00---
119     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
120     : 1--------00---
120     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. voted(NODE1) | voted(NODE0) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7



[QRM NOTE]: Time elapsed since start: 1.218 seconds

[QRM NOTE]: Time elapsed since last: 0.150 seconds

[QRM NOTE]: Peak memory: 2187257 bytes


========================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

========================================================================================================


New level: 1
 pending : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, 1048576), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, 1048576), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2]


Solution : [16, 1, 2] has cost 11.


Decide in level 1 among pending : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, 1048576), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Decide 3 with phase True at level 1

After decision at level 1
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3]


New level: 2
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2097152), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, 1048576), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, 524288), (10, 131072), (11, 524288), (12, 131072), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3]


Solution : [16, 1, 2, 3] has cost 13.


Decide in level 2 among pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, 524288), (10, 131072), (11, 524288), (12, 131072), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

Decide 9 with phase True at level 2

After decision at level 2
 pending : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3, 9]


New level: 3
 pending : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3, 9]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3, 9]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, 524288), (10, 131072), (11, 524288), (12, 131072), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 3 : {4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 9]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 9]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 9]


Solution : [16, 1, 2, 3, 9] has cost 20.


Before backtrack at level 3
 pending : []
 solution : [16, 1, 2, 3, 9]

After backtrack at level 3
 pending : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3, 9]


Invert decision for 9 at level 2


New level: 3
 pending : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 131072), (11, 524288), (12, 131072), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]
 solution : [16, 1, 2, 3]


Solution : [16, 1, 2, 3] has cost 13.


Decide in level 3 among pending : [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 131072), (11, 524288), (12, 131072), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

Decide 11 with phase True at level 3

After decision at level 3
 pending : [4, 5, 6, 7, 8, 10, 12, 13, 14, 15]
 solution : [16, 1, 2, 3, 11]


New level: 4
 pending : [4, 5, 6, 7, 8, 10, 12, 13, 14, 15]
 solution : [16, 1, 2, 3, 11]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 10, 12, 13, 14, 15]
 solution : [16, 1, 2, 3, 11]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 131072), (11, 524288), (12, 131072), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, 0), (6, 0), (7, 0), (8, 2048), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 4 : {5, 6, 7, 14, 15}

After reduction : 
 pending  : [4, 8, 10, 12, 13]
 solution : [16, 1, 2, 3, 11]


Before reduction : 
 pending  : [4, 8, 10, 12, 13]
 solution : [16, 1, 2, 3, 11]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, 0), (6, 0), (7, 0), (8, 2048), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 8, 10, 12, 13]
 solution : [16, 1, 2, 3, 11]


Solution : [16, 1, 2, 3, 11] has cost 20.


Decide in level 4 among pending : [4, 8, 10, 12, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 8 with phase True at level 4

After decision at level 4
 pending : [4, 10, 12, 13]
 solution : [16, 1, 2, 3, 11, 8]


New level: 5
 pending : [4, 10, 12, 13]
 solution : [16, 1, 2, 3, 11, 8]


Before reduction : 
 pending  : [4, 10, 12, 13]
 solution : [16, 1, 2, 3, 11, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {4}

After reduction : 
 pending  : [10, 12, 13]
 solution : [16, 1, 2, 3, 11, 8]


Before reduction : 
 pending  : [10, 12, 13]
 solution : [16, 1, 2, 3, 11, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 12, 13]
 solution : [16, 1, 2, 3, 11, 8]


Solution : [16, 1, 2, 3, 11, 8] has cost 29.


Before backtrack at level 5
 pending : [10, 12, 13]
 solution : [16, 1, 2, 3, 11, 8]

After backtrack at level 5
 pending : [10, 12, 13, 4]
 solution : [16, 1, 2, 3, 11, 8]


Invert decision for 8 at level 4


New level: 5
 pending : [10, 12, 13, 4]
 solution : [16, 1, 2, 3, 11]


Before reduction : 
 pending  : [10, 12, 13, 4]
 solution : [16, 1, 2, 3, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 12, 13, 4]
 solution : [16, 1, 2, 3, 11]


Solution : [16, 1, 2, 3, 11] has cost 20.


Decide in level 5 among pending : [10, 12, 13, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [12, 13, 4]
 solution : [16, 1, 2, 3, 11, 10]


New level: 6
 pending : [12, 13, 4]
 solution : [16, 1, 2, 3, 11, 10]


Before reduction : 
 pending  : [12, 13, 4]
 solution : [16, 1, 2, 3, 11, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {4, 12, 13}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 11, 10]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 11, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 11, 10]


Solution : [16, 1, 2, 3, 11, 10] has cost 27.


Before backtrack at level 6
 pending : []
 solution : [16, 1, 2, 3, 11, 10]

After backtrack at level 6
 pending : [12, 13, 4]
 solution : [16, 1, 2, 3, 11, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [12, 13, 4]
 solution : [16, 1, 2, 3, 11]


Before reduction : 
 pending  : [12, 13, 4]
 solution : [16, 1, 2, 3, 11]

Essensial at level 6 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 13]
 solution : [16, 1, 2, 3, 11, 4]


Before reduction : 
 pending  : [12, 13]
 solution : [16, 1, 2, 3, 11, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 13]
 solution : [16, 1, 2, 3, 11, 4]


Solution : [16, 1, 2, 3, 11, 4] has cost 29.


Before backtrack at level 6
 pending : [12, 13]
 solution : [16, 1, 2, 3, 11, 4]

After backtrack at level 6
 pending : [12, 13, 4]
 solution : [16, 1, 2, 3, 11]


Before backtrack at level 5
 pending : [12, 13, 4]
 solution : [16, 1, 2, 3, 11]

After backtrack at level 5
 pending : [12, 13, 4, 10]
 solution : [16, 1, 2, 3, 11]


Before backtrack at level 4
 pending : [12, 13, 4, 10]
 solution : [16, 1, 2, 3, 11]

After backtrack at level 4
 pending : [12, 13, 4, 10, 5, 6, 7, 14, 15, 8]
 solution : [16, 1, 2, 3, 11]


Invert decision for 11 at level 3


New level: 4
 pending : [12, 13, 4, 10, 5, 6, 7, 14, 15, 8]
 solution : [16, 1, 2, 3]


Before reduction : 
 pending  : [12, 13, 4, 10, 5, 6, 7, 14, 15, 8]
 solution : [16, 1, 2, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 131072), (11, -1), (12, 131072), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [12, 13, 4, 10, 5, 6, 7, 14, 15, 8]
 solution : [16, 1, 2, 3]


Solution : [16, 1, 2, 3] has cost 13.


Decide in level 4 among pending : [12, 13, 4, 10, 5, 6, 7, 14, 15, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 131072), (11, -1), (12, 131072), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [13, 4, 10, 5, 6, 7, 14, 15, 8]
 solution : [16, 1, 2, 3, 12]


New level: 5
 pending : [13, 4, 10, 5, 6, 7, 14, 15, 8]
 solution : [16, 1, 2, 3, 12]


Before reduction : 
 pending  : [13, 4, 10, 5, 6, 7, 14, 15, 8]
 solution : [16, 1, 2, 3, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 131072), (11, -1), (12, 131072), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 16384), (11, -1), (12, -1), (13, 0), (14, 2048), (15, 0), (16, -1), (17, -1)]

Covered at level 5 : {13, 15}

After reduction : 
 pending  : [4, 10, 5, 6, 7, 14, 8]
 solution : [16, 1, 2, 3, 12]


Before reduction : 
 pending  : [4, 10, 5, 6, 7, 14, 8]
 solution : [16, 1, 2, 3, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 16384), (11, -1), (12, -1), (13, 0), (14, 2048), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 10, 5, 6, 7, 14, 8]
 solution : [16, 1, 2, 3, 12]


Solution : [16, 1, 2, 3, 12] has cost 20.


Decide in level 5 among pending : [4, 10, 5, 6, 7, 14, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 6 with phase True at level 5

After decision at level 5
 pending : [4, 10, 5, 7, 14, 8]
 solution : [16, 1, 2, 3, 12, 6]


New level: 6
 pending : [4, 10, 5, 7, 14, 8]
 solution : [16, 1, 2, 3, 12, 6]


Before reduction : 
 pending  : [4, 10, 5, 7, 14, 8]
 solution : [16, 1, 2, 3, 12, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, 0), (6, -1), (7, 0), (8, 2048), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {5, 14, 7}

After reduction : 
 pending  : [4, 10, 8]
 solution : [16, 1, 2, 3, 12, 6]


Before reduction : 
 pending  : [4, 10, 8]
 solution : [16, 1, 2, 3, 12, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, 0), (6, -1), (7, 0), (8, 2048), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 10, 8]
 solution : [16, 1, 2, 3, 12, 6]


Solution : [16, 1, 2, 3, 12, 6] has cost 29.


Before backtrack at level 6
 pending : [4, 10, 8]
 solution : [16, 1, 2, 3, 12, 6]

After backtrack at level 6
 pending : [4, 10, 8, 5, 7, 14]
 solution : [16, 1, 2, 3, 12, 6]


Invert decision for 6 at level 5


New level: 6
 pending : [4, 10, 8, 5, 7, 14]
 solution : [16, 1, 2, 3, 12]


Before reduction : 
 pending  : [4, 10, 8, 5, 7, 14]
 solution : [16, 1, 2, 3, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, -1), (7, 32768), (8, 131072), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 10, 8, 5, 7, 14]
 solution : [16, 1, 2, 3, 12]


Solution : [16, 1, 2, 3, 12] has cost 20.


Decide in level 6 among pending : [4, 10, 8, 5, 7, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, -1), (7, 32768), (8, 131072), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 8 with phase True at level 6

After decision at level 6
 pending : [4, 10, 5, 7, 14]
 solution : [16, 1, 2, 3, 12, 8]


New level: 7
 pending : [4, 10, 5, 7, 14]
 solution : [16, 1, 2, 3, 12, 8]


Before reduction : 
 pending  : [4, 10, 5, 7, 14]
 solution : [16, 1, 2, 3, 12, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, -1), (7, 32768), (8, 131072), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {4, 5, 7, 10, 14}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 12, 8]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 12, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 12, 8]


Solution : [16, 1, 2, 3, 12, 8] has cost 29.


Before backtrack at level 7
 pending : []
 solution : [16, 1, 2, 3, 12, 8]

After backtrack at level 7
 pending : [4, 10, 5, 7, 14]
 solution : [16, 1, 2, 3, 12, 8]


Invert decision for 8 at level 6


New level: 7
 pending : [4, 10, 5, 7, 14]
 solution : [16, 1, 2, 3, 12]


Before reduction : 
 pending  : [4, 10, 5, 7, 14]
 solution : [16, 1, 2, 3, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, -1), (7, 32768), (8, -1), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [4, 10, 5, 7, 14]
 solution : [16, 1, 2, 3, 12]


Solution : [16, 1, 2, 3, 12] has cost 20.


Decide in level 7 among pending : [4, 10, 5, 7, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, -1), (7, 32768), (8, -1), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [4, 10, 5, 14]
 solution : [16, 1, 2, 3, 12, 7]


New level: 8
 pending : [4, 10, 5, 14]
 solution : [16, 1, 2, 3, 12, 7]


Before reduction : 
 pending  : [4, 10, 5, 14]
 solution : [16, 1, 2, 3, 12, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, -1), (7, 32768), (8, -1), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 512), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, -1), (12, -1), (13, -1), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [4, 10, 5, 14]
 solution : [16, 1, 2, 3, 12, 7]


Solution : [16, 1, 2, 3, 12, 7] has cost 29.


Before backtrack at level 8
 pending : [4, 10, 5, 14]
 solution : [16, 1, 2, 3, 12, 7]

After backtrack at level 8
 pending : [4, 10, 5, 14]
 solution : [16, 1, 2, 3, 12, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [4, 10, 5, 14]
 solution : [16, 1, 2, 3, 12]


Before reduction : 
 pending  : [4, 10, 5, 14]
 solution : [16, 1, 2, 3, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 512), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, -1), (12, -1), (13, -1), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [4, 10, 5, 14]
 solution : [16, 1, 2, 3, 12]


Solution : [16, 1, 2, 3, 12] has cost 20.


Decide in level 8 among pending : [4, 10, 5, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 8

After decision at level 8
 pending : [10, 5, 14]
 solution : [16, 1, 2, 3, 12, 4]


New level: 9
 pending : [10, 5, 14]
 solution : [16, 1, 2, 3, 12, 4]


Before reduction : 
 pending  : [10, 5, 14]
 solution : [16, 1, 2, 3, 12, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : {10, 5, 14}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 12, 4]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 12, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 12, 4]


Solution : [16, 1, 2, 3, 12, 4] has cost 29.


Before backtrack at level 9
 pending : []
 solution : [16, 1, 2, 3, 12, 4]

After backtrack at level 9
 pending : [10, 5, 14]
 solution : [16, 1, 2, 3, 12, 4]


Invert decision for 4 at level 8


New level: 9
 pending : [10, 5, 14]
 solution : [16, 1, 2, 3, 12]


Before reduction : 
 pending  : [10, 5, 14]
 solution : [16, 1, 2, 3, 12]

Essensial at level 9 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : {5, 14}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 12, 10]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 12, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 12, 10]


Solution : [16, 1, 2, 3, 12, 10] has cost 27.


Before backtrack at level 9
 pending : []
 solution : [16, 1, 2, 3, 12, 10]

After backtrack at level 9
 pending : [10, 5, 14]
 solution : [16, 1, 2, 3, 12]


Before backtrack at level 8
 pending : [10, 5, 14]
 solution : [16, 1, 2, 3, 12]

After backtrack at level 8
 pending : [10, 5, 14, 4]
 solution : [16, 1, 2, 3, 12]


Before backtrack at level 7
 pending : [10, 5, 14, 4]
 solution : [16, 1, 2, 3, 12]

After backtrack at level 7
 pending : [10, 5, 14, 4, 7]
 solution : [16, 1, 2, 3, 12]


Before backtrack at level 6
 pending : [10, 5, 14, 4, 7]
 solution : [16, 1, 2, 3, 12]

After backtrack at level 6
 pending : [10, 5, 14, 4, 7, 8]
 solution : [16, 1, 2, 3, 12]


Before backtrack at level 5
 pending : [10, 5, 14, 4, 7, 8]
 solution : [16, 1, 2, 3, 12]

After backtrack at level 5
 pending : [10, 5, 14, 4, 7, 8, 13, 15, 6]
 solution : [16, 1, 2, 3, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [10, 5, 14, 4, 7, 8, 13, 15, 6]
 solution : [16, 1, 2, 3]


Before reduction : 
 pending  : [10, 5, 14, 4, 7, 8, 13, 15, 6]
 solution : [16, 1, 2, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 131072), (11, -1), (12, -1), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 5, 14, 4, 7, 8, 13, 15, 6]
 solution : [16, 1, 2, 3]


Solution : [16, 1, 2, 3] has cost 13.


Decide in level 5 among pending : [10, 5, 14, 4, 7, 8, 13, 15, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 131072), (11, -1), (12, -1), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [5, 14, 4, 7, 8, 13, 15, 6]
 solution : [16, 1, 2, 3, 10]


New level: 6
 pending : [5, 14, 4, 7, 8, 13, 15, 6]
 solution : [16, 1, 2, 3, 10]


Before reduction : 
 pending  : [5, 14, 4, 7, 8, 13, 15, 6]
 solution : [16, 1, 2, 3, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, 131072), (11, -1), (12, -1), (13, 32768), (14, 131072), (15, 32768), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {4, 5, 6, 7, 8, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 10]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 10]


Solution : [16, 1, 2, 3, 10] has cost 20.


Before backtrack at level 6
 pending : []
 solution : [16, 1, 2, 3, 10]

After backtrack at level 6
 pending : [5, 14, 4, 7, 8, 13, 15, 6]
 solution : [16, 1, 2, 3, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [5, 14, 4, 7, 8, 13, 15, 6]
 solution : [16, 1, 2, 3]


Before reduction : 
 pending  : [5, 14, 4, 7, 8, 13, 15, 6]
 solution : [16, 1, 2, 3]

Essensial at level 6 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 2048), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {15}

After reduction : 
 pending  : [5, 14, 4, 7, 8, 6]
 solution : [16, 1, 2, 3, 13]


Before reduction : 
 pending  : [5, 14, 4, 7, 8, 6]
 solution : [16, 1, 2, 3, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 2048), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [5, 14, 4, 7, 8, 6]
 solution : [16, 1, 2, 3, 13]


Solution : [16, 1, 2, 3, 13] has cost 20.


Decide in level 6 among pending : [5, 14, 4, 7, 8, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

Decide 8 with phase True at level 6

After decision at level 6
 pending : [5, 14, 4, 7, 6]
 solution : [16, 1, 2, 3, 13, 8]


New level: 7
 pending : [5, 14, 4, 7, 6]
 solution : [16, 1, 2, 3, 13, 8]


Before reduction : 
 pending  : [5, 14, 4, 7, 6]
 solution : [16, 1, 2, 3, 13, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, 2048), (6, 131072), (7, 32768), (8, 131072), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 2048), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {4, 5, 6, 7, 14}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 13, 8]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 13, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 13, 8]


Solution : [16, 1, 2, 3, 13, 8] has cost 29.


Before backtrack at level 7
 pending : []
 solution : [16, 1, 2, 3, 13, 8]

After backtrack at level 7
 pending : [5, 14, 4, 7, 6]
 solution : [16, 1, 2, 3, 13, 8]


Invert decision for 8 at level 6


New level: 7
 pending : [5, 14, 4, 7, 6]
 solution : [16, 1, 2, 3, 13]


Before reduction : 
 pending  : [5, 14, 4, 7, 6]
 solution : [16, 1, 2, 3, 13]

Essensial at level 7 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {6, 5, 14, 7}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 13, 4]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 13, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 3, 13, 4]


Solution : [16, 1, 2, 3, 13, 4] has cost 29.


Before backtrack at level 7
 pending : []
 solution : [16, 1, 2, 3, 13, 4]

After backtrack at level 7
 pending : [4, 5, 14, 7, 6]
 solution : [16, 1, 2, 3, 13]


Before backtrack at level 6
 pending : [4, 5, 14, 7, 6]
 solution : [16, 1, 2, 3, 13]

After backtrack at level 6
 pending : [4, 5, 14, 7, 6, 13, 15, 8]
 solution : [16, 1, 2, 3]


Before backtrack at level 5
 pending : [4, 5, 14, 7, 6, 13, 15, 8]
 solution : [16, 1, 2, 3]

After backtrack at level 5
 pending : [4, 5, 14, 7, 6, 13, 15, 8, 10]
 solution : [16, 1, 2, 3]


Before backtrack at level 4
 pending : [4, 5, 14, 7, 6, 13, 15, 8, 10]
 solution : [16, 1, 2, 3]

After backtrack at level 4
 pending : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12]
 solution : [16, 1, 2, 3]


Before backtrack at level 3
 pending : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12]
 solution : [16, 1, 2, 3]

After backtrack at level 3
 pending : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12, 11]
 solution : [16, 1, 2, 3]


Before backtrack at level 2
 pending : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12, 11]
 solution : [16, 1, 2, 3]

After backtrack at level 2
 pending : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12, 11, 9]
 solution : [16, 1, 2, 3]


Invert decision for 3 at level 1


New level: 2
 pending : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12, 11, 9]
 solution : [16, 1, 2]


Before reduction : 
 pending  : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12, 11, 9]
 solution : [16, 1, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, 1048576), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12, 11, 9]
 solution : [16, 1, 2]


Solution : [16, 1, 2] has cost 11.


Decide in level 2 among pending : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12, 11, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, 1048576), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Decide 11 with phase True at level 2

After decision at level 2
 pending : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12, 9]
 solution : [16, 1, 2, 11]


New level: 3
 pending : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12, 9]
 solution : [16, 1, 2, 11]


Before reduction : 
 pending  : [4, 5, 14, 7, 6, 13, 15, 8, 10, 12, 9]
 solution : [16, 1, 2, 11]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, 1048576), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, 0), (6, 0), (7, 0), (8, 2048), (9, 8192), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 3 : {5, 6, 7, 14, 15}

After reduction : 
 pending  : [4, 13, 8, 10, 12, 9]
 solution : [16, 1, 2, 11]


Before reduction : 
 pending  : [4, 13, 8, 10, 12, 9]
 solution : [16, 1, 2, 11]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, 0), (6, 0), (7, 0), (8, 2048), (9, 8192), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 13, 8, 10, 12, 9]
 solution : [16, 1, 2, 11]


Solution : [16, 1, 2, 11] has cost 18.


Decide in level 3 among pending : [4, 13, 8, 10, 12, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 9 with phase True at level 3

After decision at level 3
 pending : [4, 13, 8, 10, 12]
 solution : [16, 1, 2, 11, 9]


New level: 4
 pending : [4, 13, 8, 10, 12]
 solution : [16, 1, 2, 11, 9]


Before reduction : 
 pending  : [4, 13, 8, 10, 12]
 solution : [16, 1, 2, 11, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, 8192), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : {4, 8, 10, 12, 13}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 11, 9]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 11, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 11, 9]


Solution : [16, 1, 2, 11, 9] has cost 25.


Before backtrack at level 4
 pending : []
 solution : [16, 1, 2, 11, 9]

After backtrack at level 4
 pending : [4, 13, 8, 10, 12]
 solution : [16, 1, 2, 11, 9]


Invert decision for 9 at level 3


New level: 4
 pending : [4, 13, 8, 10, 12]
 solution : [16, 1, 2, 11]


Before reduction : 
 pending  : [4, 13, 8, 10, 12]
 solution : [16, 1, 2, 11]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 13, 8, 10, 12]
 solution : [16, 1, 2, 11]


Solution : [16, 1, 2, 11] has cost 18.


Decide in level 4 among pending : [4, 13, 8, 10, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 8 with phase True at level 4

After decision at level 4
 pending : [4, 13, 10, 12]
 solution : [16, 1, 2, 11, 8]


New level: 5
 pending : [4, 13, 10, 12]
 solution : [16, 1, 2, 11, 8]


Before reduction : 
 pending  : [4, 13, 10, 12]
 solution : [16, 1, 2, 11, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {4}

After reduction : 
 pending  : [13, 10, 12]
 solution : [16, 1, 2, 11, 8]


Before reduction : 
 pending  : [13, 10, 12]
 solution : [16, 1, 2, 11, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [13, 10, 12]
 solution : [16, 1, 2, 11, 8]


Solution : [16, 1, 2, 11, 8] has cost 27.


Before backtrack at level 5
 pending : [13, 10, 12]
 solution : [16, 1, 2, 11, 8]

After backtrack at level 5
 pending : [13, 10, 12, 4]
 solution : [16, 1, 2, 11, 8]


Invert decision for 8 at level 4


New level: 5
 pending : [13, 10, 12, 4]
 solution : [16, 1, 2, 11]


Before reduction : 
 pending  : [13, 10, 12, 4]
 solution : [16, 1, 2, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [13, 10, 12, 4]
 solution : [16, 1, 2, 11]


Solution : [16, 1, 2, 11] has cost 18.


Decide in level 5 among pending : [13, 10, 12, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [13, 12, 4]
 solution : [16, 1, 2, 11, 10]


New level: 6
 pending : [13, 12, 4]
 solution : [16, 1, 2, 11, 10]


Before reduction : 
 pending  : [13, 12, 4]
 solution : [16, 1, 2, 11, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2048), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {4, 12, 13}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 11, 10]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 11, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 11, 10]


Solution : [16, 1, 2, 11, 10] has cost 25.


Before backtrack at level 6
 pending : []
 solution : [16, 1, 2, 11, 10]

After backtrack at level 6
 pending : [13, 12, 4]
 solution : [16, 1, 2, 11, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [13, 12, 4]
 solution : [16, 1, 2, 11]


Before reduction : 
 pending  : [13, 12, 4]
 solution : [16, 1, 2, 11]

Essensial at level 6 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [13, 12]
 solution : [16, 1, 2, 11, 4]


Before reduction : 
 pending  : [13, 12]
 solution : [16, 1, 2, 11, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [13, 12]
 solution : [16, 1, 2, 11, 4]


Solution : [16, 1, 2, 11, 4] has cost 27.


Before backtrack at level 6
 pending : [13, 12]
 solution : [16, 1, 2, 11, 4]

After backtrack at level 6
 pending : [13, 12, 4]
 solution : [16, 1, 2, 11]


Before backtrack at level 5
 pending : [13, 12, 4]
 solution : [16, 1, 2, 11]

After backtrack at level 5
 pending : [13, 12, 4, 10]
 solution : [16, 1, 2, 11]


Before backtrack at level 4
 pending : [13, 12, 4, 10]
 solution : [16, 1, 2, 11]

After backtrack at level 4
 pending : [13, 12, 4, 10, 8]
 solution : [16, 1, 2, 11]


Before backtrack at level 3
 pending : [13, 12, 4, 10, 8]
 solution : [16, 1, 2, 11]

After backtrack at level 3
 pending : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15, 9]
 solution : [16, 1, 2, 11]


Invert decision for 11 at level 2


New level: 3
 pending : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15, 9]
 solution : [16, 1, 2]


Before reduction : 
 pending  : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15, 9]
 solution : [16, 1, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2048), (13, 512), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, -1), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15, 9]
 solution : [16, 1, 2]


Solution : [16, 1, 2] has cost 11.


Decide in level 3 among pending : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, -1), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Decide 9 with phase True at level 3

After decision at level 3
 pending : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15]
 solution : [16, 1, 2, 9]


New level: 4
 pending : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15]
 solution : [16, 1, 2, 9]


Before reduction : 
 pending  : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15]
 solution : [16, 1, 2, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, 1048576), (10, 262144), (11, -1), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 4 : {4, 5, 6, 7, 8, 10, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 9]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 9]


Solution : [16, 1, 2, 9] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [16, 1, 2, 9]

After backtrack at level 4
 pending : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15]
 solution : [16, 1, 2, 9]


Invert decision for 9 at level 3


New level: 4
 pending : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15]
 solution : [16, 1, 2]


Before reduction : 
 pending  : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15]
 solution : [16, 1, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 262144), (11, -1), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15]
 solution : [16, 1, 2]


Solution : [16, 1, 2] has cost 11.


Decide in level 4 among pending : [13, 12, 4, 10, 8, 5, 14, 7, 6, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 262144), (11, -1), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [13, 4, 10, 8, 5, 14, 7, 6, 15]
 solution : [16, 1, 2, 12]


New level: 5
 pending : [13, 4, 10, 8, 5, 14, 7, 6, 15]
 solution : [16, 1, 2, 12]


Before reduction : 
 pending  : [13, 4, 10, 8, 5, 14, 7, 6, 15]
 solution : [16, 1, 2, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 262144), (11, -1), (12, 262144), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 32768), (11, -1), (12, -1), (13, 0), (14, 4096), (15, 0), (16, -1), (17, -1)]

Covered at level 5 : {13, 15}

After reduction : 
 pending  : [4, 10, 8, 5, 14, 7, 6]
 solution : [16, 1, 2, 12]


Before reduction : 
 pending  : [4, 10, 8, 5, 14, 7, 6]
 solution : [16, 1, 2, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 32768), (11, -1), (12, -1), (13, 0), (14, 4096), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 10, 8, 5, 14, 7, 6]
 solution : [16, 1, 2, 12]


Solution : [16, 1, 2, 12] has cost 18.


Decide in level 5 among pending : [4, 10, 8, 5, 14, 7, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Decide 8 with phase True at level 5

After decision at level 5
 pending : [4, 10, 5, 14, 7, 6]
 solution : [16, 1, 2, 12, 8]


New level: 6
 pending : [4, 10, 5, 14, 7, 6]
 solution : [16, 1, 2, 12, 8]


Before reduction : 
 pending  : [4, 10, 5, 14, 7, 6]
 solution : [16, 1, 2, 12, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {4, 5, 6, 7, 10, 14}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 12, 8]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 12, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 12, 8]


Solution : [16, 1, 2, 12, 8] has cost 27.


Before backtrack at level 6
 pending : []
 solution : [16, 1, 2, 12, 8]

After backtrack at level 6
 pending : [4, 10, 5, 14, 7, 6]
 solution : [16, 1, 2, 12, 8]


Invert decision for 8 at level 5


New level: 6
 pending : [4, 10, 5, 14, 7, 6]
 solution : [16, 1, 2, 12]


Before reduction : 
 pending  : [4, 10, 5, 14, 7, 6]
 solution : [16, 1, 2, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 10, 5, 14, 7, 6]
 solution : [16, 1, 2, 12]


Solution : [16, 1, 2, 12] has cost 18.


Decide in level 6 among pending : [4, 10, 5, 14, 7, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [4, 10, 5, 14, 7]
 solution : [16, 1, 2, 12, 6]


New level: 7
 pending : [4, 10, 5, 14, 7]
 solution : [16, 1, 2, 12, 6]


Before reduction : 
 pending  : [4, 10, 5, 14, 7]
 solution : [16, 1, 2, 12, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {5, 14, 7}

After reduction : 
 pending  : [4, 10]
 solution : [16, 1, 2, 12, 6]


Before reduction : 
 pending  : [4, 10]
 solution : [16, 1, 2, 12, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [4, 10]
 solution : [16, 1, 2, 12, 6]


Solution : [16, 1, 2, 12, 6] has cost 27.


Before backtrack at level 7
 pending : [4, 10]
 solution : [16, 1, 2, 12, 6]

After backtrack at level 7
 pending : [4, 10, 5, 14, 7]
 solution : [16, 1, 2, 12, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [4, 10, 5, 14, 7]
 solution : [16, 1, 2, 12]


Before reduction : 
 pending  : [4, 10, 5, 14, 7]
 solution : [16, 1, 2, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, -1), (7, 65536), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [4, 10, 5, 14, 7]
 solution : [16, 1, 2, 12]


Solution : [16, 1, 2, 12] has cost 18.


Decide in level 7 among pending : [4, 10, 5, 14, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, -1), (7, 65536), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [4, 10, 5, 14]
 solution : [16, 1, 2, 12, 7]


New level: 8
 pending : [4, 10, 5, 14]
 solution : [16, 1, 2, 12, 7]


Before reduction : 
 pending  : [4, 10, 5, 14]
 solution : [16, 1, 2, 12, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, -1), (7, 65536), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 4096), (5, 1024), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4096), (11, -1), (12, -1), (13, -1), (14, 1024), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [4, 10, 5, 14]
 solution : [16, 1, 2, 12, 7]


Solution : [16, 1, 2, 12, 7] has cost 27.


Before backtrack at level 8
 pending : [4, 10, 5, 14]
 solution : [16, 1, 2, 12, 7]

After backtrack at level 8
 pending : [4, 10, 5, 14]
 solution : [16, 1, 2, 12, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [4, 10, 5, 14]
 solution : [16, 1, 2, 12]


Before reduction : 
 pending  : [4, 10, 5, 14]
 solution : [16, 1, 2, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 4096), (5, 1024), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4096), (11, -1), (12, -1), (13, -1), (14, 1024), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [4, 10, 5, 14]
 solution : [16, 1, 2, 12]


Solution : [16, 1, 2, 12] has cost 18.


Decide in level 8 among pending : [4, 10, 5, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 8

After decision at level 8
 pending : [10, 5, 14]
 solution : [16, 1, 2, 12, 4]


New level: 9
 pending : [10, 5, 14]
 solution : [16, 1, 2, 12, 4]


Before reduction : 
 pending  : [10, 5, 14]
 solution : [16, 1, 2, 12, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32768), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : {10, 5, 14}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 12, 4]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 12, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 12, 4]


Solution : [16, 1, 2, 12, 4] has cost 27.


Before backtrack at level 9
 pending : []
 solution : [16, 1, 2, 12, 4]

After backtrack at level 9
 pending : [10, 5, 14]
 solution : [16, 1, 2, 12, 4]


Invert decision for 4 at level 8


New level: 9
 pending : [10, 5, 14]
 solution : [16, 1, 2, 12]


Before reduction : 
 pending  : [10, 5, 14]
 solution : [16, 1, 2, 12]

Essensial at level 9 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : {5, 14}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 12, 10]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 12, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 12, 10]


Solution : [16, 1, 2, 12, 10] has cost 25.


Before backtrack at level 9
 pending : []
 solution : [16, 1, 2, 12, 10]

After backtrack at level 9
 pending : [10, 5, 14]
 solution : [16, 1, 2, 12]


Before backtrack at level 8
 pending : [10, 5, 14]
 solution : [16, 1, 2, 12]

After backtrack at level 8
 pending : [10, 5, 14, 4]
 solution : [16, 1, 2, 12]


Before backtrack at level 7
 pending : [10, 5, 14, 4]
 solution : [16, 1, 2, 12]

After backtrack at level 7
 pending : [10, 5, 14, 4, 7]
 solution : [16, 1, 2, 12]


Before backtrack at level 6
 pending : [10, 5, 14, 4, 7]
 solution : [16, 1, 2, 12]

After backtrack at level 6
 pending : [10, 5, 14, 4, 7, 6]
 solution : [16, 1, 2, 12]


Before backtrack at level 5
 pending : [10, 5, 14, 4, 7, 6]
 solution : [16, 1, 2, 12]

After backtrack at level 5
 pending : [10, 5, 14, 4, 7, 6, 13, 15, 8]
 solution : [16, 1, 2, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [10, 5, 14, 4, 7, 6, 13, 15, 8]
 solution : [16, 1, 2]


Before reduction : 
 pending  : [10, 5, 14, 4, 7, 6, 13, 15, 8]
 solution : [16, 1, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 262144), (11, -1), (12, -1), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 5, 14, 4, 7, 6, 13, 15, 8]
 solution : [16, 1, 2]


Solution : [16, 1, 2] has cost 11.


Decide in level 5 among pending : [10, 5, 14, 4, 7, 6, 13, 15, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 262144), (11, -1), (12, -1), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [5, 14, 4, 7, 6, 13, 15, 8]
 solution : [16, 1, 2, 10]


New level: 6
 pending : [5, 14, 4, 7, 6, 13, 15, 8]
 solution : [16, 1, 2, 10]


Before reduction : 
 pending  : [5, 14, 4, 7, 6, 13, 15, 8]
 solution : [16, 1, 2, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, 65536), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, 262144), (11, -1), (12, -1), (13, 65536), (14, 262144), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {4, 5, 6, 7, 8, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 10]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 10]


Solution : [16, 1, 2, 10] has cost 18.


Before backtrack at level 6
 pending : []
 solution : [16, 1, 2, 10]

After backtrack at level 6
 pending : [5, 14, 4, 7, 6, 13, 15, 8]
 solution : [16, 1, 2, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [5, 14, 4, 7, 6, 13, 15, 8]
 solution : [16, 1, 2]


Before reduction : 
 pending  : [5, 14, 4, 7, 6, 13, 15, 8]
 solution : [16, 1, 2]

Essensial at level 6 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4096), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {15}

After reduction : 
 pending  : [5, 14, 4, 7, 6, 8]
 solution : [16, 1, 2, 13]


Before reduction : 
 pending  : [5, 14, 4, 7, 6, 8]
 solution : [16, 1, 2, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4096), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [5, 14, 4, 7, 6, 8]
 solution : [16, 1, 2, 13]


Solution : [16, 1, 2, 13] has cost 18.


Decide in level 6 among pending : [5, 14, 4, 7, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [5, 14, 4, 7, 8]
 solution : [16, 1, 2, 13, 6]


New level: 7
 pending : [5, 14, 4, 7, 8]
 solution : [16, 1, 2, 13, 6]


Before reduction : 
 pending  : [5, 14, 4, 7, 8]
 solution : [16, 1, 2, 13, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, 262144), (7, 65536), (8, 262144), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, 0), (6, -1), (7, 0), (8, 2048), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {5, 14, 7}

After reduction : 
 pending  : [4, 8]
 solution : [16, 1, 2, 13, 6]


Before reduction : 
 pending  : [4, 8]
 solution : [16, 1, 2, 13, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, 0), (6, -1), (7, 0), (8, 2048), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [4, 8]
 solution : [16, 1, 2, 13, 6]


Solution : [16, 1, 2, 13, 6] has cost 27.


Before backtrack at level 7
 pending : [4, 8]
 solution : [16, 1, 2, 13, 6]

After backtrack at level 7
 pending : [4, 8, 5, 14, 7]
 solution : [16, 1, 2, 13, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [4, 8, 5, 14, 7]
 solution : [16, 1, 2, 13]


Before reduction : 
 pending  : [4, 8, 5, 14, 7]
 solution : [16, 1, 2, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, -1), (7, -1), (8, 2048), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, -1), (7, 65536), (8, 262144), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [4, 8, 5, 14, 7]
 solution : [16, 1, 2, 13]


Solution : [16, 1, 2, 13] has cost 18.


Decide in level 7 among pending : [4, 8, 5, 14, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, -1), (7, 65536), (8, 262144), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [4, 5, 14, 7]
 solution : [16, 1, 2, 13, 8]


New level: 8
 pending : [4, 5, 14, 7]
 solution : [16, 1, 2, 13, 8]


Before reduction : 
 pending  : [4, 5, 14, 7]
 solution : [16, 1, 2, 13, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 4096), (6, -1), (7, 65536), (8, 262144), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {4, 5, 14, 7}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 13, 8]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 13, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 13, 8]


Solution : [16, 1, 2, 13, 8] has cost 27.


Before backtrack at level 8
 pending : []
 solution : [16, 1, 2, 13, 8]

After backtrack at level 8
 pending : [4, 5, 14, 7]
 solution : [16, 1, 2, 13, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [4, 5, 14, 7]
 solution : [16, 1, 2, 13]


Before reduction : 
 pending  : [4, 5, 14, 7]
 solution : [16, 1, 2, 13]

Essensial at level 8 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {5, 14, 7}

After reduction : 
 pending  : []
 solution : [16, 1, 2, 13, 4]


Before reduction : 
 pending  : []
 solution : [16, 1, 2, 13, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [16, 1, 2, 13, 4]


Solution : [16, 1, 2, 13, 4] has cost 27.


Before backtrack at level 8
 pending : []
 solution : [16, 1, 2, 13, 4]

After backtrack at level 8
 pending : [4, 5, 14, 7]
 solution : [16, 1, 2, 13]


Before backtrack at level 7
 pending : [4, 5, 14, 7]
 solution : [16, 1, 2, 13]

After backtrack at level 7
 pending : [4, 5, 14, 7, 8]
 solution : [16, 1, 2, 13]


Before backtrack at level 6
 pending : [4, 5, 14, 7, 8]
 solution : [16, 1, 2, 13]

After backtrack at level 6
 pending : [4, 5, 14, 7, 8, 13, 15, 6]
 solution : [16, 1, 2]


Before backtrack at level 5
 pending : [4, 5, 14, 7, 8, 13, 15, 6]
 solution : [16, 1, 2]

After backtrack at level 5
 pending : [4, 5, 14, 7, 8, 13, 15, 6, 10]
 solution : [16, 1, 2]


Before backtrack at level 4
 pending : [4, 5, 14, 7, 8, 13, 15, 6, 10]
 solution : [16, 1, 2]

After backtrack at level 4
 pending : [4, 5, 14, 7, 8, 13, 15, 6, 10, 12]
 solution : [16, 1, 2]


Before backtrack at level 3
 pending : [4, 5, 14, 7, 8, 13, 15, 6, 10, 12]
 solution : [16, 1, 2]

After backtrack at level 3
 pending : [4, 5, 14, 7, 8, 13, 15, 6, 10, 12, 9]
 solution : [16, 1, 2]


Before backtrack at level 2
 pending : [4, 5, 14, 7, 8, 13, 15, 6, 10, 12, 9]
 solution : [16, 1, 2]

After backtrack at level 2
 pending : [4, 5, 14, 7, 8, 13, 15, 6, 10, 12, 9, 11]
 solution : [16, 1, 2]


Before backtrack at level 1
 pending : [4, 5, 14, 7, 8, 13, 15, 6, 10, 12, 9, 11]
 solution : [16, 1, 2]

After backtrack at level 1
 pending : [4, 5, 14, 7, 8, 13, 15, 6, 10, 12, 9, 11, 3]
 solution : [16, 1, 2]


=======================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

=======================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: upper bound: 18

[MIN NOTE]: maximum branch and bound depth: 9

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [16, 1, 2, 9]

[MIN NOTE]: solution length: 4

invariant [invar_16] forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0)) # qcost: 4

invariant [invar_1] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_2] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_9] forall VALUE0,QUORUM0,NODE0. ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | vote(NODE0,VALUE0) # qcost: 7

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 18




[MIN NOTE]: Solution 1 : [16, 1, 2, 10]

[MIN NOTE]: solution length: 4

invariant [invar_16] forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0)) # qcost: 4

invariant [invar_1] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_2] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_10] forall VALUE0,QUORUM0,NODE0. ~member(NODE0,QUORUM0) | ~decided(VALUE0) | voting_quorum ~= QUORUM0 | vote(NODE0,VALUE0) # qcost: 7

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 18




[QRM NOTE]: Time elapsed since start: 1.391 seconds

[QRM NOTE]: Time elapsed since last: 0.173 seconds

[QRM NOTE]: Peak memory: 2162376 bytes


************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy -s node=4,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: node=4,value=2]

================================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 18

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 48

[QRM NOTE]: Time elapsed since start: 0.114 seconds

[QRM NOTE]: Time elapsed since last: 0.114 seconds

[QRM NOTE]: Peak memory: 191844 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 348


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=4,value=2]

==================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: voting_quorum=('quorum',)
predicate: vote('node', 'value')
predicate: voted('node',)
predicate: decided('value',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)', '(voting_quorum=quorum__node0_node1_node2)', '(voting_quorum=quorum__node0_node1_node3)', '(voting_quorum=quorum__node0_node2_node3)', '(voting_quorum=quorum__node1_node2_node3)']

000000000000000001
000000000000000010
000000000000000100
000000000000001000
000000000100010001
000000000100010010
000000000100010100
000000000100011000
000000001000010001
000000001000010010
000000001000010100
000000001000011000
000000010000100001
000000010000100010
000000010000100100
000000010000101000
000000010100110001
000000010100110010
000000010100110100
000000010100111000
000000011000110001
000000011000110010
000000011000110100
000000011000111000
000000100000100001
000000100000100010
000000100000100100
000000100000101000
000000100100110001
000000100100110010
000000100100110100
000000100100111000
000000101000110001
000000101000110010
000000101000110100
000000101000111000
000001000001000001
000001000001000010
000001000001000100
000001000001001000
000001000101010001
000001000101010010
000001000101010100
000001000101011000
000001001001010001
000001001001010010
000001001001010100
000001001001011000
000001010001100001
000001010001100010
000001010001100100
000001010001101000
000001010101110001
000001010101110010
000001010101110100
000001010101111000
000001011001110001
000001011001110010
000001011001110100
000001011001111000
000001100001100001
000001100001100010
000001100001100100
000001100001101000
000001100101110001
000001100101110010
000001100101110100
000001100101111000
000001101001110001
000001101001110010
000001101001110100
000001101001111000
000010000001000001
000010000001000010
000010000001000100
000010000001001000
000010000101010001
000010000101010010
000010000101010100
000010000101011000
000010001001010001
000010001001010010
000010001001010100
000010001001011000
000010010001100001
000010010001100010
000010010001100100
000010010001101000
000010010101110001
000010010101110010
000010010101110100
000010010101111000
000010011001110001
000010011001110010
000010011001110100
000010011001111000
000010100001100001
000010100001100010
000010100001100100
000010100001101000
000010100101110001
000010100101110010
000010100101110100
000010100101111000
000010101001110001
000010101001110010
000010101001110100
000010101001111000
000100000010000001
000100000010000010
000100000010000100
000100000010001000
000100000110010001
000100000110010010
000100000110010100
000100000110011000
000100001010010001
000100001010010010
000100001010010100
000100001010011000
000100010010100001
000100010010100010
000100010010100100
000100010010101000
000100010110110001
000100010110110010
000100010110110100
000100010110111000
000100011010110001
000100011010110010
000100011010110100
000100011010111000
000100100010100001
000100100010100010
000100100010100100
000100100010101000
000100100110110001
000100100110110010
000100100110110100
000100100110111000
000100101010110001
000100101010110010
000100101010110100
000100101010111000
000101000011000001
000101000011000010
000101000011000100
000101000011001000
000101000111010001
000101000111010010
000101000111010100
000101000111011000
000101001011010001
000101001011010010
000101001011010100
000101001011011000
000101010011100001
000101010011100010
000101010011100100
000101010011101000
000101010111110001
000101010111110010
000101010111110100
000101010111111000
000101011011110001
000101011011110010
000101011011110100
000101011011111000
000101100011100001
000101100011100010
000101100011100100
000101100011101000
000101100111110001
000101100111110010
000101100111110100
000101100111111000
000101101011110001
000101101011110010
000101101011110100
000101101011111000
000110000011000001
000110000011000010
000110000011000100
000110000011001000
000110000111010001
000110000111010010
000110000111010100
000110000111011000
000110001011010001
000110001011010010
000110001011010100
000110001011011000
000110010011100001
000110010011100010
000110010011100100
000110010011101000
000110010111110001
000110010111110010
000110010111110100
000110010111111000
000110011011110001
000110011011110010
000110011011110100
000110011011111000
000110100011100001
000110100011100010
000110100011100100
000110100011101000
000110100111110001
000110100111110010
000110100111110100
000110100111111000
000110101011110001
000110101011110010
000110101011110100
000110101011111000
001000000010000001
001000000010000010
001000000010000100
001000000010001000
001000000110010001
001000000110010010
001000000110010100
001000000110011000
001000001010010001
001000001010010010
001000001010010100
001000001010011000
001000010010100001
001000010010100010
001000010010100100
001000010010101000
001000010110110001
001000010110110010
001000010110110100
001000010110111000
001000011010110001
001000011010110010
001000011010110100
001000011010111000
001000100010100001
001000100010100010
001000100010100100
001000100010101000
001000100110110001
001000100110110010
001000100110110100
001000100110111000
001000101010110001
001000101010110010
001000101010110100
001000101010111000
001001000011000001
001001000011000010
001001000011000100
001001000011001000
001001000111010001
001001000111010010
001001000111010100
001001000111011000
001001001011010001
001001001011010010
001001001011010100
001001001011011000
001001010011100001
001001010011100010
001001010011100100
001001010011101000
001001010111110001
001001010111110010
001001010111110100
001001010111111000
001001011011110001
001001011011110010
001001011011110100
001001011011111000
001001100011100001
001001100011100010
001001100011100100
001001100011101000
001001100111110001
001001100111110010
001001100111110100
001001100111111000
001001101011110001
001001101011110010
001001101011110100
001001101011111000
001010000011000001
001010000011000010
001010000011000100
001010000011001000
001010000111010001
001010000111010010
001010000111010100
001010000111011000
001010001011010001
001010001011010010
001010001011010100
001010001011011000
001010010011100001
001010010011100010
001010010011100100
001010010011101000
001010010111110001
001010010111110010
001010010111110100
001010010111111000
001010011011110001
001010011011110010
001010011011110100
001010011011111000
001010100011100001
001010100011100010
001010100011100100
001010100011101000
001010100111110001
001010100111110010
001010100111110100
001010100111111000
001010101011110001
001010101011110010
001010101011110100
001010101011111000
010001010101110001
010100010110110010
010101000111010100
010101010011101000
010101010111110001
010101010111110010
010101010111110100
010101010111111000
010101011011111000
010101100111110100
010110010111110010
011001010111110001
100010101001110001
100110101011110001
101000101010110010
101001101011110010
101010001011010100
101010011011110100
101010100011101000
101010100111111000
101010101011110001
101010101011110010
101010101011110100
101010101011111000

[QRM NOTE]: Time elapsed since start: 1.292 seconds

[QRM NOTE]: Time elapsed since last: 1.178 seconds

[QRM NOTE]: Peak memory: 1515359 bytes


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: node=4,value=2]

============================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 3.758 seconds

[QRM NOTE]: Time elapsed since last: 2.465 seconds

[QRM NOTE]: Peak memory: 3264316 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: node=3,value=3]

================================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 18

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 0.114 seconds

[QRM NOTE]: Time elapsed since last: 0.114 seconds

[QRM NOTE]: Peak memory: 205685 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 228


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=3]

==================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voting_quorum=('quorum',)
predicate: decided('value',)
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']

000000000000000001
000000000000000010
000000000000000100
000000000001001001
000000000001001010
000000000001001100
000000000010001001
000000000010001010
000000000010001100
000000000100001001
000000000100001010
000000000100001100
000000001000010001
000000001000010010
000000001000010100
000000001001011001
000000001001011010
000000001001011100
000000001010011001
000000001010011010
000000001010011100
000000001100011001
000000001100011010
000000001100011100
000000010000010001
000000010000010010
000000010000010100
000000010001011001
000000010001011010
000000010001011100
000000010010011001
000000010010011010
000000010010011100
000000010100011001
000000010100011010
000000010100011100
000000100000010001
000000100000010010
000000100000010100
000000100001011001
000000100001011010
000000100001011100
000000100010011001
000000100010011010
000000100010011100
000000100100011001
000000100100011010
000000100100011100
000001000000100001
000001000000100010
000001000000100100
000001000001101001
000001000001101010
000001000001101100
000001000010101001
000001000010101010
000001000010101100
000001000100101001
000001000100101010
000001000100101100
000001001000110001
000001001000110010
000001001000110100
000001001001111001
000001001001111010
000001001001111100
000001001010111001
000001001010111010
000001001010111100
000001001100111001
000001001100111010
000001001100111100
000001010000110001
000001010000110010
000001010000110100
000001010001111001
000001010001111010
000001010001111100
000001010010111001
000001010010111010
000001010010111100
000001010100111001
000001010100111010
000001010100111100
000001100000110001
000001100000110010
000001100000110100
000001100001111001
000001100001111010
000001100001111100
000001100010111001
000001100010111010
000001100010111100
000001100100111001
000001100100111010
000001100100111100
000010000000100001
000010000000100010
000010000000100100
000010000001101001
000010000001101010
000010000001101100
000010000010101001
000010000010101010
000010000010101100
000010000100101001
000010000100101010
000010000100101100
000010001000110001
000010001000110010
000010001000110100
000010001001111001
000010001001111010
000010001001111100
000010001010111001
000010001010111010
000010001010111100
000010001100111001
000010001100111010
000010001100111100
000010010000110001
000010010000110010
000010010000110100
000010010001111001
000010010001111010
000010010001111100
000010010010111001
000010010010111010
000010010010111100
000010010100111001
000010010100111010
000010010100111100
000010100000110001
000010100000110010
000010100000110100
000010100001111001
000010100001111010
000010100001111100
000010100010111001
000010100010111010
000010100010111100
000010100100111001
000010100100111010
000010100100111100
000100000000100001
000100000000100010
000100000000100100
000100000001101001
000100000001101010
000100000001101100
000100000010101001
000100000010101010
000100000010101100
000100000100101001
000100000100101010
000100000100101100
000100001000110001
000100001000110010
000100001000110100
000100001001111001
000100001001111010
000100001001111100
000100001010111001
000100001010111010
000100001010111100
000100001100111001
000100001100111010
000100001100111100
000100010000110001
000100010000110010
000100010000110100
000100010001111001
000100010001111010
000100010001111100
000100010010111001
000100010010111010
000100010010111100
000100010100111001
000100010100111010
000100010100111100
000100100000110001
000100100000110010
000100100000110100
000100100001111001
000100100001111010
000100100001111100
000100100010111001
000100100010111010
000100100010111100
000100100100111001
000100100100111010
000100100100111100
001000001001011001
001001000001101010
001001001000110100
001001001001111001
001001001001111010
001001001001111100
001001001010111100
001001001100111100
001001010001111010
001001100001111010
001010001001111001
001100001001111001
010000010010011001
010001010010111001
010010000010101010
010010001010111010
010010010000110100
010010010001111100
010010010010111001
010010010010111010
010010010010111100
010010010100111100
010010100010111010
010100010010111001
100000100100011001
100001100100111001
100010100100111001
100100000100101010
100100001100111010
100100010100111010
100100100000110100
100100100001111100
100100100010111100
100100100100111001
100100100100111010
100100100100111100

[QRM NOTE]: Time elapsed since start: 1.131 seconds

[QRM NOTE]: Time elapsed since last: 1.017 seconds

[QRM NOTE]: Peak memory: 1454172 bytes


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.0.ivy: node=3,value=3]

============================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 2.819 seconds

[QRM NOTE]: Time elapsed since last: 1.687 seconds

[QRM NOTE]: Peak memory: 2236496 bytes

next size: node=3,value=3


************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=2]

************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy -s node=4,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: node=4,value=2]

============================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 2.482 seconds

[QRM NOTE]: Time elapsed since last: 2.482 seconds

[QRM NOTE]: Peak memory: 2880098 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy -s node=3,value=3 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_2.1.ivy: node=3,value=3]

============================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 1.689 seconds

[QRM NOTE]: Time elapsed since last: 1.689 seconds

[QRM NOTE]: Peak memory: 1900838 bytes

next size: node=3,value=3


*********************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

*********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.ivy -s node=3,value=3 -f 1 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.023 seconds

[QRM NOTE]: Time elapsed since last: 0.023 seconds

[QRM NOTE]: Peak memory: 71452 bytes


======================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

======================================================================================================================


=================================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

=================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : --------1----0----
0     : ['vote(node1,value2)', '~voted(node1)']
1     : -------1-----0----
1     : ['vote(node1,value1)', '~voted(node1)']
2     : ------1------0----
2     : ['vote(node1,value0)', '~voted(node1)']
3     : -----------1--0---
3     : ['vote(node2,value2)', '~voted(node2)']
4     : ----------1---0---
4     : ['vote(node2,value1)', '~voted(node2)']
5     : ---------1----0---
5     : ['vote(node2,value0)', '~voted(node2)']
6     : -----1------0-----
6     : ['vote(node0,value2)', '~voted(node0)']
7     : ----1-------0-----
7     : ['vote(node0,value1)', '~voted(node0)']
8     : ---1--------0-----
8     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
9 (*) : ---------1-1------
9     : ['vote(node2,value0)', 'vote(node2,value2)']
10     : ---------11-------
10     : ['vote(node2,value0)', 'vote(node2,value1)']
11     : ----------11------
11     : ['vote(node2,value1)', 'vote(node2,value2)']
12     : ------1-1---------
12     : ['vote(node1,value0)', 'vote(node1,value2)']
13     : ------11----------
13     : ['vote(node1,value0)', 'vote(node1,value1)']
14     : -------11---------
14     : ['vote(node1,value1)', 'vote(node1,value2)']
15     : ---1-1------------
15     : ['vote(node0,value0)', 'vote(node0,value2)']
16     : ---11-------------
16     : ['vote(node0,value0)', 'vote(node0,value1)']
17     : ----11------------
17     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
18 (*) : 1-1---------------
18     : ['decided(value0)', 'decided(value2)']
19     : 11----------------
19     : ['decided(value0)', 'decided(value1)']
20     : -11---------------
20     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
21 (*) : ----------------11
21     : ['(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
22     : ---------------1-1
22     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node1_node2)']
23     : ---------------11-
23     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
24 (*) : --1--0--------0---
24     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
25     : -1--0---------0---
25     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
26     : 1--0----------0---
26     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
27     : --1--0-------0----
27     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
28     : -1--0--------0----
28     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
29     : 1--0---------0----
29     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
30     : --1-----0-----0---
30     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
31     : -1-----0------0---
31     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
32     : 1-----0-------0---
32     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
33     : --1-----0---0-----
33     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
34     : -1-----0----0-----
34     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
35     : 1-----0-----0-----
35     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
36     : --1--------0-0----
36     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
37     : -1--------0--0----
37     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
38     : 1--------0---0----
38     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
39     : --1--------00-----
39     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
40     : -1--------0-0-----
40     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
41     : 1--------0--0-----
41     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 9
num_suborbits: 1
42 (*) : --1--0-----------0
42     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
43     : -1--0------------0
43     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
44     : 1--0-------------0
44     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
45     : --1-----0-------0-
45     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
46     : -1-----0--------0-
46     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
47     : 1-----0---------0-
47     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
48     : --1--------0---0--
48     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
49     : -1--------0----0--
49     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
50     : 1--------0-----0--
50     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 9
num_suborbits: 1
51 (*) : --1--0--0---------
51     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
52     : -1--0--0----------
52     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
53     : 1--0--0-----------
53     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
54     : --1--0-----0------
54     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
55     : -1--0-----0-------
55     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
56     : 1--0-----0--------
56     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
57     : --1-----0--0------
57     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
58     : -1-----0--0-------
58     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
59     : 1-----0--0--------
59     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 36
num_suborbits: 1
60 (*) : --1--0----1-------
60     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
61     : -1--0------1------
61     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
62     : --1--0---1--------
62     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
63     : 1--0-------1------
63     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
64     : -1--0----1--------
64     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
65     : 1--0------1-------
65     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
66     : --1--0-1----------
66     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
67     : -1--0---1---------
67     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
68     : --1--01-----------
68     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
69     : 1--0----1---------
69     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
70     : -1--0-1-----------
70     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
71     : 1--0---1----------
71     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
72     : --1-----0-1-------
72     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
73     : -1-----0---1------
73     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
74     : --1-----01--------
74     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
75     : 1-----0----1------
75     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
76     : -1-----0-1--------
76     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
77     : 1-----0---1-------
77     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
78     : --1-1---0---------
78     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
79     : -1---1-0----------
79     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
80     : --11----0---------
80     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
81     : 1----10-----------
81     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
82     : -1-1---0----------
82     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
83     : 1---1-0-----------
83     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
84     : --1----1---0------
84     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
85     : -1------1-0-------
85     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
86     : --1---1----0------
86     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
87     : 1-------10--------
87     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
88     : -1----1---0-------
88     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
89     : 1------1-0--------
89     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
90     : --1-1------0------
90     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
91     : -1---1----0-------
91     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
92     : --11-------0------
92     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
93     : 1----1---0--------
93     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
94     : -1-1------0-------
94     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
95     : 1---1----0--------
95     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
96 (*) : --1--0---------1--
96     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
97     : -1--0----------1--
97     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
98     : 1--0-----------1--
98     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
99     : --1--0----------1-
99     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
100     : -1--0-----------1-
100     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
101     : 1--0------------1-
101     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
102     : --1-----0------1--
102     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
103     : -1-----0-------1--
103     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
104     : 1-----0--------1--
104     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
105     : --1-----0--------1
105     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
106     : -1-----0---------1
106     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
107     : 1-----0----------1
107     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
108     : --1--------0----1-
108     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
109     : -1--------0-----1-
109     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
110     : 1--------0------1-
110     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
111     : --1--------0-----1
111     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
112     : -1--------0------1
112     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
113     : 1--------0-------1
113     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 36
num_suborbits: 2
114 (*) : 1------1---1------
114     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
115     : 1-------1-1-------
115     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
116     : -1----1----1------
116     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
117     : -1------11--------
117     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
118     : --1---1---1-------
118     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
119     : --1----1-1--------
119     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
120     : 1---1------1------
120     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
121     : 1----1----1-------
121     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
122     : -1-1-------1------
122     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
123     : -1---1---1--------
123     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
124     : --11------1-------
124     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
125     : --1-1----1--------
125     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
126     : 1---1---1---------
126     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
127     : 1----1-1----------
127     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
128     : -1-1----1---------
128     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
129     : -1---11-----------
129     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
130     : --11---1----------
130     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
131     : --1-1-1-----------
131     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
249 (*) : 1----1-----1------
249     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
250     : 1---1-----1-------
250     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
251     : -1---1-----1------
251     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
252     : -1-1-----1--------
252     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
253     : --1-1-----1-------
253     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
254     : --11-----1--------
254     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
255     : 1----1--1---------
255     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
256     : 1---1--1----------
256     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
257     : -1---1--1---------
257     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
258     : -1-1--1-----------
258     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
259     : --1-1--1----------
259     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
260     : --11--1-----------
260     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
261     : 1-------1--1------
261     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
262     : 1------1--1-------
262     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
263     : -1------1--1------
263     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
264     : -1----1--1--------
264     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
265     : --1----1--1-------
265     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
266     : --1---1--1--------
266     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
132 (*) : 1----------1----1-
132     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
133     : 1---------1-----1-
133     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
134     : -1---------1----1-
134     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
135     : -1-------1------1-
135     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
136     : --1-------1-----1-
136     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
137     : --1------1------1-
137     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
138     : 1-------1------1--
138     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
139     : 1------1-------1--
139     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
140     : -1------1------1--
140     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
141     : -1----1--------1--
141     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
142     : --1----1-------1--
142     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
143     : --1---1--------1--
143     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
144     : 1----------1-----1
144     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
145     : 1---------1------1
145     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
146     : -1---------1-----1
146     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
147     : -1-------1-------1
147     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
148     : --1-------1------1
148     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
149     : --1------1-------1
149     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
150     : 1----1---------1--
150     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
151     : 1---1----------1--
151     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
152     : -1---1---------1--
152     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
153     : -1-1-----------1--
153     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
154     : --1-1----------1--
154     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
155     : --11-----------1--
155     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
156     : 1-------1--------1
156     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
157     : 1------1---------1
157     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
158     : -1------1--------1
158     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
159     : -1----1----------1
159     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
160     : --1----1---------1
160     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
161     : --1---1----------1
161     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
162     : 1----1----------1-
162     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
163     : 1---1-----------1-
163     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
164     : -1---1----------1-
164     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
165     : -1-1------------1-
165     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
166     : --1-1-----------1-
166     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
167     : --11------------1-
167     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
168 (*) : 1------1--------0-
168     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
169     : 1-------1-------0-
169     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
170     : -1----1---------0-
170     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
171     : -1------1-------0-
171     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
172     : --1---1---------0-
172     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
173     : --1----1--------0-
173     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
174     : 1---------1----0--
174     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
175     : 1----------1---0--
175     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
176     : -1-------1-----0--
176     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
177     : -1---------1---0--
177     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
178     : --1------1-----0--
178     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
179     : --1-------1----0--
179     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
180     : 1---1------------0
180     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
181     : 1----1-----------0
181     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
182     : -1-1-------------0
182     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
183     : -1---1-----------0
183     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
184     : --11-------------0
184     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
185     : --1-1------------0
185     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
186 (*) : 1------1------0---
186     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
187     : 1-------1-----0---
187     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
188     : -1----1-------0---
188     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
189     : -1------1-----0---
189     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
190     : --1---1-------0---
190     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
191     : --1----1------0---
191     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
192     : 1---------1--0----
192     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
193     : 1----------1-0----
193     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
194     : -1-------1---0----
194     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
195     : -1---------1-0----
195     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
196     : --1------1---0----
196     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
197     : --1-------1--0----
197     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
198     : 1---1---------0---
198     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
199     : 1----1--------0---
199     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
200     : -1-1----------0---
200     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
201     : -1---1--------0---
201     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
202     : --11----------0---
202     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
203     : --1-1---------0---
203     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
204     : 1---------1-0-----
204     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
205     : 1----------10-----
205     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
206     : -1-------1--0-----
206     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
207     : -1---------10-----
207     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
208     : --1------1--0-----
208     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
209     : --1-------1-0-----
209     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
210     : 1---1--------0----
210     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
211     : 1----1-------0----
211     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
212     : -1-1---------0----
212     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
213     : -1---1-------0----
213     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
214     : --11---------0----
214     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
215     : --1-1--------0----
215     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
216     : 1------1----0-----
216     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
217     : 1-------1---0-----
217     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
218     : -1----1-----0-----
218     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
219     : -1------1---0-----
219     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
220     : --1---1-----0-----
220     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
221     : --1----1----0-----
221     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
222 (*) : 1-------------00--
222     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
223     : -1------------00--
223     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
224     : --1-----------00--
224     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
225     : 1------------0--0-
225     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
226     : -1-----------0--0-
226     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
227     : --1----------0--0-
227     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
228     : 1-----------0----0
228     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
229     : -1----------0----0
229     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
230     : --1---------0----0
230     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 18
num_suborbits: 1
231 (*) : 1-------------0-1-
231     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
232     : -1------------0-1-
232     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
233     : --1-----------0-1-
233     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
234     : 1------------0-1--
234     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
235     : -1-----------0-1--
235     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
236     : --1----------0-1--
236     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
237     : 1-------------0--1
237     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
238     : -1------------0--1
238     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
239     : --1-----------0--1
239     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
240     : 1-----------0--1--
240     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
241     : -1----------0--1--
241     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
242     : --1---------0--1--
242     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
243     : 1------------0---1
243     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
244     : -1-----------0---1
244     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
245     : --1----------0---1
245     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
246     : 1-----------0---1-
246     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
247     : -1----------0---1-
247     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
248     : --1---------0---1-
248     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
267 (*) : 1------------00---
267     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
268     : -1-----------00---
268     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
269     : --1----------00---
269     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
270     : 1-----------0-0---
270     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
271     : -1----------0-0---
271     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
272     : --1---------0-0---
272     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
273     : 1-----------00----
273     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
274     : -1----------00----
274     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
275     : --1---------00----
275     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 1
num_suborbits: 1
276 (*) : ---------------000
276     : ['~(voting_quorum=quorum__node0_node1)', '~(voting_quorum=quorum__node0_node2)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---------000--1---
277     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---000------1-----
279     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 18

[PRIME NOTE]: number of orbits before merging: 19

[PRIME NOTE]: number of primes: 280

[QRM NOTE]: Time elapsed since start: 0.130 seconds

[QRM NOTE]: Time elapsed since last: 0.107 seconds

[QRM NOTE]: Peak memory: 1407294 bytes


===========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

===========================================================================================================

definition primes: {16, 3}


New level: 0
 pending : [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17]
 solution : []

Essensial at level 0 : {0, 1, 17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 16777216), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 16777216), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 16777216), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]

[QRM NOTE]: Time elapsed since start: 0.167 seconds

[QRM NOTE]: Time elapsed since last: 0.037 seconds

[QRM NOTE]: Peak memory: 359685 bytes


===============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

===============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : --------1----0----
0     : ['vote(node1,value2)', '~voted(node1)']
1     : -------1-----0----
1     : ['vote(node1,value1)', '~voted(node1)']
2     : ------1------0----
2     : ['vote(node1,value0)', '~voted(node1)']
3     : -----------1--0---
3     : ['vote(node2,value2)', '~voted(node2)']
4     : ----------1---0---
4     : ['vote(node2,value1)', '~voted(node2)']
5     : ---------1----0---
5     : ['vote(node2,value0)', '~voted(node2)']
6     : -----1------0-----
6     : ['vote(node0,value2)', '~voted(node0)']
7     : ----1-------0-----
7     : ['vote(node0,value1)', '~voted(node0)']
8     : ---1--------0-----
8     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value2)', '~voted(node1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node1,value2)', '~voted(node1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
9 (*) : ---------1-1------
9     : ['vote(node2,value0)', 'vote(node2,value2)']
10     : ---------11-------
10     : ['vote(node2,value0)', 'vote(node2,value1)']
11     : ----------11------
11     : ['vote(node2,value1)', 'vote(node2,value2)']
12     : ------1-1---------
12     : ['vote(node1,value0)', 'vote(node1,value2)']
13     : ------11----------
13     : ['vote(node1,value0)', 'vote(node1,value1)']
14     : -------11---------
14     : ['vote(node1,value1)', 'vote(node1,value2)']
15     : ---1-1------------
15     : ['vote(node0,value0)', 'vote(node0,value2)']
16     : ---11-------------
16     : ['vote(node0,value0)', 'vote(node0,value1)']
17     : ----11------------
17     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', 'vote(node2,value2)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', 'vote(node2,value2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE1,VALUE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---------000--1---
277     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---000------1-----
279     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)', 'voted(node2)']

sign_func_name2args: {'1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$1$vote$0$2, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$2]}

sig2const: {'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2', 'value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2')


---------- SigGenerator ----------

terms:  ['~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)', 'voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 3, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
18 (*) : 1-1---------------
18     : ['decided(value0)', 'decided(value2)']
19     : 11----------------
19     : ['decided(value0)', 'decided(value1)']
20     : -11---------------
20     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
24 (*) : --1--0--------0---
24     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
25     : -1--0---------0---
25     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
26     : 1--0----------0---
26     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
27     : --1--0-------0----
27     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
28     : -1--0--------0----
28     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
29     : 1--0---------0----
29     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
30     : --1-----0-----0---
30     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
31     : -1-----0------0---
31     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
32     : 1-----0-------0---
32     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
33     : --1-----0---0-----
33     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
34     : -1-----0----0-----
34     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
35     : 1-----0-----0-----
35     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
36     : --1--------0-0----
36     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
37     : -1--------0--0----
37     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
38     : 1--------0---0----
38     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
39     : --1--------00-----
39     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
40     : -1--------0-0-----
40     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
41     : 1--------0--0-----
41     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', '~vote(NODE0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE0. voted(NODE1) | vote(NODE0,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1


=== Prime Orbit 5 =====================
size : 9
num_suborbits: 1
42 (*) : --1--0-----------0
42     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
43     : -1--0------------0
43     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
44     : 1--0-------------0
44     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
45     : --1-----0-------0-
45     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
46     : -1-----0--------0-
46     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
47     : 1-----0---------0-
47     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
48     : --1--------0---0--
48     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
49     : -1--------0----0--
49     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
50     : 1--------0-----0--
50     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node0,value2)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node0,value2)', 'voting_quorum ~= quorum__node1_node2', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voting_quorum ~= QUORUM0', '~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. voting_quorum = QUORUM0 | vote(NODE0,VALUE0) | ~decided(VALUE0) | member(NODE0,QUORUM0)


=== Prime Orbit 6 =====================
size : 9
num_suborbits: 1
51 (*) : --1--0--0---------
51     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
52     : -1--0--0----------
52     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
53     : 1--0--0-----------
53     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
54     : --1--0-----0------
54     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
55     : -1--0-----0-------
55     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
56     : 1--0-----0--------
56     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
57     : --1-----0--0------
57     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
58     : -1-----0--0-------
58     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
59     : 1-----0--0--------
59     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE0. vote(NODE0,VALUE0) | ~decided(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


=== Prime Orbit 7 =====================
size : 36
num_suborbits: 1
60 (*) : --1--0----1-------
60     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
61     : -1--0------1------
61     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
62     : --1--0---1--------
62     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
63     : 1--0-------1------
63     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
64     : -1--0----1--------
64     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
65     : 1--0------1-------
65     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
66     : --1--0-1----------
66     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
67     : -1--0---1---------
67     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
68     : --1--01-----------
68     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
69     : 1--0----1---------
69     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
70     : -1--0-1-----------
70     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
71     : 1--0---1----------
71     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
72     : --1-----0-1-------
72     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
73     : -1-----0---1------
73     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
74     : --1-----01--------
74     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
75     : 1-----0----1------
75     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
76     : -1-----0-1--------
76     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
77     : 1-----0---1-------
77     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
78     : --1-1---0---------
78     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
79     : -1---1-0----------
79     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
80     : --11----0---------
80     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
81     : 1----10-----------
81     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
82     : -1-1---0----------
82     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
83     : 1---1-0-----------
83     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
84     : --1----1---0------
84     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
85     : -1------1-0-------
85     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
86     : --1---1----0------
86     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
87     : 1-------10--------
87     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
88     : -1----1---0-------
88     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
89     : 1------1-0--------
89     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
90     : --1-1------0------
90     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
91     : -1---1----0-------
91     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
92     : --11-------0------
92     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
93     : 1----1---0--------
93     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
94     : -1-1------0-------
94     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
95     : 1---1----0--------
95     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node0,value2)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node0,value2)', 'vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE1,VALUE0. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
96 (*) : --1--0---------1--
96     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
97     : -1--0----------1--
97     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
98     : 1--0-----------1--
98     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
99     : --1--0----------1-
99     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
100     : -1--0-----------1-
100     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
101     : 1--0------------1-
101     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
102     : --1-----0------1--
102     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
103     : -1-----0-------1--
103     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
104     : 1-----0--------1--
104     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
105     : --1-----0--------1
105     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
106     : -1-----0---------1
106     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
107     : 1-----0----------1
107     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
108     : --1--------0----1-
108     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
109     : -1--------0-----1-
109     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
110     : 1--------0------1-
110     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
111     : --1--------0-----1
111     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
112     : -1--------0------1
112     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
113     : 1--------0-------1
113     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node0,value2)', 'voting_quorum = quorum__node0_node1', 'member(node0,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$member$0$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node0,value2)', 'voting_quorum = quorum__node0_node1', 'member(node0,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voting_quorum = QUORUM0', '~vote(NODE0,VALUE0)', 'decided(VALUE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. voting_quorum ~= QUORUM0 | vote(NODE0,VALUE0) | ~decided(VALUE0) | ~member(NODE0,QUORUM0)


=== Prime Orbit 9 =====================
size : 36
num_suborbits: 2
114 (*) : 1------1---1------
114     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
115     : 1-------1-1-------
115     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
116     : -1----1----1------
116     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
117     : -1------11--------
117     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
118     : --1---1---1-------
118     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
119     : --1----1-1--------
119     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
120     : 1---1------1------
120     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
121     : 1----1----1-------
121     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
122     : -1-1-------1------
122     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
123     : -1---1---1--------
123     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
124     : --11------1-------
124     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
125     : --1-1----1--------
125     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
126     : 1---1---1---------
126     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
127     : 1----1-1----------
127     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
128     : -1-1----1---------
128     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
129     : -1---11-----------
129     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
130     : --11---1----------
130     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
131     : --1-1-1-----------
131     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
249 (*) : 1----1-----1------
249     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
250     : 1---1-----1-------
250     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
251     : -1---1-----1------
251     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
252     : -1-1-----1--------
252     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
253     : --1-1-----1-------
253     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
254     : --11-----1--------
254     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
255     : 1----1--1---------
255     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
256     : 1---1--1----------
256     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
257     : -1---1--1---------
257     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
258     : -1-1--1-----------
258     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
259     : --1-1--1----------
259     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
260     : --11--1-----------
260     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
261     : 1-------1--1------
261     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
262     : 1------1--1-------
262     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
263     : -1------1--1------
263     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
264     : -1----1--1--------
264     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
265     : --1----1--1-------
265     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
266     : --1---1--1--------
266     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE1,VALUE2)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,VALUE2,NODE0,NODE1. ~decided(VALUE0) | ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | VALUE0 = VALUE2 | NODE0 = NODE1)


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
132 (*) : 1----------1----1-
132     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
133     : 1---------1-----1-
133     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
134     : -1---------1----1-
134     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
135     : -1-------1------1-
135     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
136     : --1-------1-----1-
136     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
137     : --1------1------1-
137     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
138     : 1-------1------1--
138     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
139     : 1------1-------1--
139     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
140     : -1------1------1--
140     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
141     : -1----1--------1--
141     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
142     : --1----1-------1--
142     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
143     : --1---1--------1--
143     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
144     : 1----------1-----1
144     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
145     : 1---------1------1
145     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
146     : -1---------1-----1
146     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
147     : -1-------1-------1
147     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
148     : --1-------1------1
148     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
149     : --1------1-------1
149     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
150     : 1----1---------1--
150     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
151     : 1---1----------1--
151     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
152     : -1---1---------1--
152     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
153     : -1-1-----------1--
153     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
154     : --1-1----------1--
154     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
155     : --11-----------1--
155     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
156     : 1-------1--------1
156     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
157     : 1------1---------1
157     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
158     : -1------1--------1
158     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
159     : -1----1----------1
159     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
160     : --1----1---------1
160     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
161     : --1---1----------1
161     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
162     : 1----1----------1-
162     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
163     : 1---1-----------1-
163     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
164     : -1---1----------1-
164     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
165     : -1-1------------1-
165     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
166     : --1-1-----------1-
166     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
167     : --11------------1-
167     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node2,value2)', 'voting_quorum = quorum__node0_node2', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node2,value2)', 'voting_quorum = quorum__node0_node2', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voting_quorum = QUORUM0', 'decided(VALUE0)', 'vote(NODE0,VALUE1)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE1,VALUE0. voting_quorum ~= QUORUM0 | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | ~member(NODE0,QUORUM0) | VALUE0 = VALUE1


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
168 (*) : 1------1--------0-
168     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
169     : 1-------1-------0-
169     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
170     : -1----1---------0-
170     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
171     : -1------1-------0-
171     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
172     : --1---1---------0-
172     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
173     : --1----1--------0-
173     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
174     : 1---------1----0--
174     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
175     : 1----------1---0--
175     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
176     : -1-------1-----0--
176     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
177     : -1---------1---0--
177     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
178     : --1------1-----0--
178     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
179     : --1-------1----0--
179     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
180     : 1---1------------0
180     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
181     : 1----1-----------0
181     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
182     : -1-1-------------0
182     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
183     : -1---1-----------0
183     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
184     : --11-------------0
184     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
185     : --1-1------------0
185     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', 'voting_quorum ~= quorum__node0_node2', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', 'voting_quorum ~= quorum__node0_node2', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voting_quorum ~= QUORUM0', '~member(NODE0,QUORUM0)', 'decided(VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE1,VALUE0. voting_quorum = QUORUM0 | member(NODE0,QUORUM0) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
186 (*) : 1------1------0---
186     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
187     : 1-------1-----0---
187     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
188     : -1----1-------0---
188     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
189     : -1------1-----0---
189     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
190     : --1---1-------0---
190     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
191     : --1----1------0---
191     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
192     : 1---------1--0----
192     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
193     : 1----------1-0----
193     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
194     : -1-------1---0----
194     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
195     : -1---------1-0----
195     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
196     : --1------1---0----
196     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
197     : --1-------1--0----
197     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
198     : 1---1---------0---
198     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
199     : 1----1--------0---
199     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
200     : -1-1----------0---
200     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
201     : -1---1--------0---
201     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
202     : --11----------0---
202     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
203     : --1-1---------0---
203     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
204     : 1---------1-0-----
204     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
205     : 1----------10-----
205     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
206     : -1-------1--0-----
206     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
207     : -1---------10-----
207     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
208     : --1------1--0-----
208     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
209     : --1-------1-0-----
209     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
210     : 1---1--------0----
210     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
211     : 1----1-------0----
211     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
212     : -1-1---------0----
212     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
213     : -1---1-------0----
213     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
214     : --11---------0----
214     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
215     : --1-1--------0----
215     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
216     : 1------1----0-----
216     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
217     : 1-------1---0-----
217     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
218     : -1----1-----0-----
218     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
219     : -1------1---0-----
219     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
220     : --1---1-----0-----
220     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
221     : --1----1----0-----
221     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'decided(VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE1,VALUE0. voted(NODE1) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
222 (*) : 1-------------00--
222     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
223     : -1------------00--
223     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
224     : --1-----------00--
224     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
225     : 1------------0--0-
225     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
226     : -1-----------0--0-
226     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
227     : --1----------0--0-
227     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
228     : 1-----------0----0
228     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
229     : -1----------0----0
229     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
230     : --1---------0----0
230     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node2)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node2)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voting_quorum ~= QUORUM0', '~member(NODE0,QUORUM0)', 'decided(VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. voting_quorum = QUORUM0 | member(NODE0,QUORUM0) | ~decided(VALUE0) | voted(NODE0)


=== Prime Orbit 14 =====================
size : 18
num_suborbits: 1
231 (*) : 1-------------0-1-
231     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
232     : -1------------0-1-
232     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
233     : --1-----------0-1-
233     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
234     : 1------------0-1--
234     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
235     : -1-----------0-1--
235     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
236     : --1----------0-1--
236     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
237     : 1-------------0--1
237     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
238     : -1------------0--1
238     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
239     : --1-----------0--1
239     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
240     : 1-----------0--1--
240     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
241     : -1----------0--1--
241     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
242     : --1---------0--1--
242     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
243     : 1------------0---1
243     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
244     : -1-----------0---1
244     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
245     : --1----------0---1
245     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
246     : 1-----------0---1-
246     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
247     : -1----------0---1-
247     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
248     : --1---------0---1-
248     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node2)', 'voting_quorum = quorum__node0_node2', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voting_quorum=': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$member$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$voted$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node2)', 'voting_quorum = quorum__node0_node2', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$voted$0': [node$0$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$voted$0': node$0$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voting_quorum = QUORUM0', 'decided(VALUE0)', '~voted(NODE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. voting_quorum ~= QUORUM0 | ~decided(VALUE0) | voted(NODE0) | ~member(NODE0,QUORUM0)


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
267 (*) : 1------------00---
267     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
268     : -1-----------00---
268     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
269     : --1----------00---
269     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
270     : 1-----------0-0---
270     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
271     : -1----------0-0---
271     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
272     : --1---------0-0---
272     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
273     : 1-----------00----
273     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
274     : -1----------00----
274     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
275     : --1---------00----
275     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node1)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node1)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'decided(VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE0. voted(NODE1) | ~decided(VALUE0) | voted(NODE0) | NODE0 = NODE1


=========================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

=========================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : --------1----0----
0     : ['vote(node1,value2)', '~voted(node1)']
1     : -------1-----0----
1     : ['vote(node1,value1)', '~voted(node1)']
2     : ------1------0----
2     : ['vote(node1,value0)', '~voted(node1)']
3     : -----------1--0---
3     : ['vote(node2,value2)', '~voted(node2)']
4     : ----------1---0---
4     : ['vote(node2,value1)', '~voted(node2)']
5     : ---------1----0---
5     : ['vote(node2,value0)', '~voted(node2)']
6     : -----1------0-----
6     : ['vote(node0,value2)', '~voted(node0)']
7     : ----1-------0-----
7     : ['vote(node0,value1)', '~voted(node0)']
8     : ---1--------0-----
8     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
9 (*) : ---------1-1------
9     : ['vote(node2,value0)', 'vote(node2,value2)']
10     : ---------11-------
10     : ['vote(node2,value0)', 'vote(node2,value1)']
11     : ----------11------
11     : ['vote(node2,value1)', 'vote(node2,value2)']
12     : ------1-1---------
12     : ['vote(node1,value0)', 'vote(node1,value2)']
13     : ------11----------
13     : ['vote(node1,value0)', 'vote(node1,value1)']
14     : -------11---------
14     : ['vote(node1,value1)', 'vote(node1,value2)']
15     : ---1-1------------
15     : ['vote(node0,value0)', 'vote(node0,value2)']
16     : ---11-------------
16     : ['vote(node0,value0)', 'vote(node0,value1)']
17     : ----11------------
17     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall NODE0,VALUE1,VALUE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---------000--1---
277     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---000------1-----
279     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))
qcost : 4




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
18 (*) : 1-1---------------
18     : ['decided(value0)', 'decided(value2)']
19     : 11----------------
19     : ['decided(value0)', 'decided(value1)']
20     : -11---------------
20     : ['decided(value1)', 'decided(value2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
24 (*) : --1--0--------0---
24     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
25     : -1--0---------0---
25     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
26     : 1--0----------0---
26     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
27     : --1--0-------0----
27     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
28     : -1--0--------0----
28     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
29     : 1--0---------0----
29     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
30     : --1-----0-----0---
30     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
31     : -1-----0------0---
31     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
32     : 1-----0-------0---
32     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
33     : --1-----0---0-----
33     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
34     : -1-----0----0-----
34     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
35     : 1-----0-----0-----
35     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
36     : --1--------0-0----
36     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
37     : -1--------0--0----
37     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
38     : 1--------0---0----
38     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
39     : --1--------00-----
39     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
40     : -1--------0-0-----
40     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
41     : 1--------0--0-----
41     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0,VALUE0. voted(NODE1) | vote(NODE0,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 5 =====================
size : 9
num_suborbits: 1
42 (*) : --1--0-----------0
42     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
43     : -1--0------------0
43     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
44     : 1--0-------------0
44     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
45     : --1-----0-------0-
45     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
46     : -1-----0--------0-
46     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
47     : 1-----0---------0-
47     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
48     : --1--------0---0--
48     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
49     : -1--------0----0--
49     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
50     : 1--------0-----0--
50     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. voting_quorum = QUORUM0 | vote(NODE0,VALUE0) | ~decided(VALUE0) | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 6 =====================
size : 9
num_suborbits: 1
51 (*) : --1--0--0---------
51     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
52     : -1--0--0----------
52     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
53     : 1--0--0-----------
53     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
54     : --1--0-----0------
54     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
55     : -1--0-----0-------
55     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
56     : 1--0-----0--------
56     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
57     : --1-----0--0------
57     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
58     : -1-----0--0-------
58     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
59     : 1-----0--0--------
59     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0,VALUE0. vote(NODE0,VALUE0) | ~decided(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 7 =====================
size : 36
num_suborbits: 1
60 (*) : --1--0----1-------
60     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
61     : -1--0------1------
61     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
62     : --1--0---1--------
62     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
63     : 1--0-------1------
63     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
64     : -1--0----1--------
64     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
65     : 1--0------1-------
65     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
66     : --1--0-1----------
66     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
67     : -1--0---1---------
67     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
68     : --1--01-----------
68     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
69     : 1--0----1---------
69     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
70     : -1--0-1-----------
70     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
71     : 1--0---1----------
71     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
72     : --1-----0-1-------
72     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
73     : -1-----0---1------
73     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
74     : --1-----01--------
74     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
75     : 1-----0----1------
75     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
76     : -1-----0-1--------
76     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
77     : 1-----0---1-------
77     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
78     : --1-1---0---------
78     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
79     : -1---1-0----------
79     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
80     : --11----0---------
80     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
81     : 1----10-----------
81     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
82     : -1-1---0----------
82     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
83     : 1---1-0-----------
83     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
84     : --1----1---0------
84     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
85     : -1------1-0-------
85     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
86     : --1---1----0------
86     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
87     : 1-------10--------
87     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
88     : -1----1---0-------
88     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
89     : 1------1-0--------
89     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
90     : --1-1------0------
90     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
91     : -1---1----0-------
91     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
92     : --11-------0------
92     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
93     : 1----1---0--------
93     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
94     : -1-1------0-------
94     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
95     : 1---1----0--------
95     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,NODE0,VALUE1,VALUE0. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
96 (*) : --1--0---------1--
96     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
97     : -1--0----------1--
97     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
98     : 1--0-----------1--
98     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
99     : --1--0----------1-
99     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
100     : -1--0-----------1-
100     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
101     : 1--0------------1-
101     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
102     : --1-----0------1--
102     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
103     : -1-----0-------1--
103     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
104     : 1-----0--------1--
104     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
105     : --1-----0--------1
105     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
106     : -1-----0---------1
106     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
107     : 1-----0----------1
107     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
108     : --1--------0----1-
108     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
109     : -1--------0-----1-
109     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
110     : 1--------0------1-
110     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
111     : --1--------0-----1
111     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
112     : -1--------0------1
112     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
113     : 1--------0-------1
113     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. voting_quorum ~= QUORUM0 | vote(NODE0,VALUE0) | ~decided(VALUE0) | ~member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 9 =====================
size : 36
num_suborbits: 2
114 (*) : 1------1---1------
114     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
115     : 1-------1-1-------
115     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
116     : -1----1----1------
116     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
117     : -1------11--------
117     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
118     : --1---1---1-------
118     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
119     : --1----1-1--------
119     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
120     : 1---1------1------
120     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
121     : 1----1----1-------
121     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
122     : -1-1-------1------
122     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
123     : -1---1---1--------
123     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
124     : --11------1-------
124     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
125     : --1-1----1--------
125     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
126     : 1---1---1---------
126     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
127     : 1----1-1----------
127     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
128     : -1-1----1---------
128     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
129     : -1---11-----------
129     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
130     : --11---1----------
130     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
131     : --1-1-1-----------
131     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
249 (*) : 1----1-----1------
249     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
250     : 1---1-----1-------
250     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
251     : -1---1-----1------
251     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
252     : -1-1-----1--------
252     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
253     : --1-1-----1-------
253     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
254     : --11-----1--------
254     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
255     : 1----1--1---------
255     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
256     : 1---1--1----------
256     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
257     : -1---1--1---------
257     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
258     : -1-1--1-----------
258     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
259     : --1-1--1----------
259     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
260     : --11--1-----------
260     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
261     : 1-------1--1------
261     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
262     : 1------1--1-------
262     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
263     : -1------1--1------
263     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
264     : -1----1--1--------
264     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
265     : --1----1--1-------
265     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
266     : --1---1--1--------
266     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
num_forall :   5
num_exists :   0
num_literals : 6
quantified form : forall VALUE1,VALUE0,VALUE2,NODE0,NODE1. ~decided(VALUE0) | ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | VALUE0 = VALUE2 | NODE0 = NODE1)
qcost : 11




=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
132 (*) : 1----------1----1-
132     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
133     : 1---------1-----1-
133     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
134     : -1---------1----1-
134     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
135     : -1-------1------1-
135     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
136     : --1-------1-----1-
136     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
137     : --1------1------1-
137     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
138     : 1-------1------1--
138     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
139     : 1------1-------1--
139     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
140     : -1------1------1--
140     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
141     : -1----1--------1--
141     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
142     : --1----1-------1--
142     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
143     : --1---1--------1--
143     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
144     : 1----------1-----1
144     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
145     : 1---------1------1
145     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
146     : -1---------1-----1
146     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
147     : -1-------1-------1
147     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
148     : --1-------1------1
148     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
149     : --1------1-------1
149     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
150     : 1----1---------1--
150     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
151     : 1---1----------1--
151     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
152     : -1---1---------1--
152     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
153     : -1-1-----------1--
153     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
154     : --1-1----------1--
154     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
155     : --11-----------1--
155     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
156     : 1-------1--------1
156     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
157     : 1------1---------1
157     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
158     : -1------1--------1
158     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
159     : -1----1----------1
159     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
160     : --1----1---------1
160     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
161     : --1---1----------1
161     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
162     : 1----1----------1-
162     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
163     : 1---1-----------1-
163     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
164     : -1---1----------1-
164     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
165     : -1-1------------1-
165     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
166     : --1-1-----------1-
166     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
167     : --11------------1-
167     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall QUORUM0,NODE0,VALUE1,VALUE0. voting_quorum ~= QUORUM0 | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | ~member(NODE0,QUORUM0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
168 (*) : 1------1--------0-
168     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
169     : 1-------1-------0-
169     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
170     : -1----1---------0-
170     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
171     : -1------1-------0-
171     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
172     : --1---1---------0-
172     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
173     : --1----1--------0-
173     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
174     : 1---------1----0--
174     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
175     : 1----------1---0--
175     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
176     : -1-------1-----0--
176     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
177     : -1---------1---0--
177     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
178     : --1------1-----0--
178     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
179     : --1-------1----0--
179     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
180     : 1---1------------0
180     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
181     : 1----1-----------0
181     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
182     : -1-1-------------0
182     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
183     : -1---1-----------0
183     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
184     : --11-------------0
184     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
185     : --1-1------------0
185     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall QUORUM0,NODE0,VALUE1,VALUE0. voting_quorum = QUORUM0 | member(NODE0,QUORUM0) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
186 (*) : 1------1------0---
186     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
187     : 1-------1-----0---
187     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
188     : -1----1-------0---
188     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
189     : -1------1-----0---
189     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
190     : --1---1-------0---
190     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
191     : --1----1------0---
191     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
192     : 1---------1--0----
192     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
193     : 1----------1-0----
193     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
194     : -1-------1---0----
194     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
195     : -1---------1-0----
195     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
196     : --1------1---0----
196     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
197     : --1-------1--0----
197     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
198     : 1---1---------0---
198     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
199     : 1----1--------0---
199     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
200     : -1-1----------0---
200     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
201     : -1---1--------0---
201     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
202     : --11----------0---
202     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
203     : --1-1---------0---
203     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
204     : 1---------1-0-----
204     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
205     : 1----------10-----
205     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
206     : -1-------1--0-----
206     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
207     : -1---------10-----
207     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
208     : --1------1--0-----
208     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
209     : --1-------1-0-----
209     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
210     : 1---1--------0----
210     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
211     : 1----1-------0----
211     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
212     : -1-1---------0----
212     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
213     : -1---1-------0----
213     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
214     : --11---------0----
214     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
215     : --1-1--------0----
215     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
216     : 1------1----0-----
216     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
217     : 1-------1---0-----
217     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
218     : -1----1-----0-----
218     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
219     : -1------1---0-----
219     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
220     : --1---1-----0-----
220     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
221     : --1----1----0-----
221     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,NODE0,VALUE1,VALUE0. voted(NODE1) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
222 (*) : 1-------------00--
222     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
223     : -1------------00--
223     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
224     : --1-----------00--
224     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
225     : 1------------0--0-
225     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
226     : -1-----------0--0-
226     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
227     : --1----------0--0-
227     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
228     : 1-----------0----0
228     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
229     : -1----------0----0
229     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
230     : --1---------0----0
230     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. voting_quorum = QUORUM0 | member(NODE0,QUORUM0) | ~decided(VALUE0) | voted(NODE0)
qcost : 7




=== Prime Orbit 14 =====================
size : 18
num_suborbits: 1
231 (*) : 1-------------0-1-
231     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
232     : -1------------0-1-
232     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
233     : --1-----------0-1-
233     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
234     : 1------------0-1--
234     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
235     : -1-----------0-1--
235     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
236     : --1----------0-1--
236     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
237     : 1-------------0--1
237     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
238     : -1------------0--1
238     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
239     : --1-----------0--1
239     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
240     : 1-----------0--1--
240     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
241     : -1----------0--1--
241     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
242     : --1---------0--1--
242     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
243     : 1------------0---1
243     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
244     : -1-----------0---1
244     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
245     : --1----------0---1
245     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
246     : 1-----------0---1-
246     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
247     : -1----------0---1-
247     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
248     : --1---------0---1-
248     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. voting_quorum ~= QUORUM0 | ~decided(VALUE0) | voted(NODE0) | ~member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
267 (*) : 1------------00---
267     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
268     : -1-----------00---
268     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
269     : --1----------00---
269     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
270     : 1-----------0-0---
270     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
271     : -1----------0-0---
271     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
272     : --1---------0-0---
272     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
273     : 1-----------00----
273     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
274     : -1----------00----
274     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
275     : --1---------00----
275     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0,VALUE0. voted(NODE1) | ~decided(VALUE0) | voted(NODE0) | NODE0 = NODE1
qcost : 7



[QRM NOTE]: Time elapsed since start: 2.445 seconds

[QRM NOTE]: Time elapsed since last: 2.277 seconds

[QRM NOTE]: Peak memory: 2233502 bytes


========================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

========================================================================================================


New level: 1
 pending : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 16777216), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 16777216), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 14.


Decide in level 1 among pending : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 16777216), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]


New level: 2
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 16777216), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 4194304), (7, 524288), (8, 1048576), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]


Solution : [0, 1, 17, 2] has cost 19.


Decide in level 2 among pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 4194304), (7, 524288), (8, 1048576), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

Decide 5 with phase True at level 2

After decision at level 2
 pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 5]


New level: 3
 pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 5]


Before reduction : 
 pending  : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 4194304), (7, 524288), (8, 1048576), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 3 : {4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 5]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 5]


Solution : [0, 1, 17, 2, 5] has cost 26.


Before backtrack at level 3
 pending : []
 solution : [0, 1, 17, 2, 5]

After backtrack at level 3
 pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 5]


Invert decision for 5 at level 2


New level: 3
 pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]


Before reduction : 
 pending  : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, 4194304), (7, 524288), (8, 1048576), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]


Solution : [0, 1, 17, 2] has cost 19.


Decide in level 3 among pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, 4194304), (7, 524288), (8, 1048576), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

Decide 6 with phase True at level 3

After decision at level 3
 pending : [4, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 6]


New level: 4
 pending : [4, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 6]


Before reduction : 
 pending  : [4, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, 4194304), (7, 524288), (8, 1048576), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, 4096), (9, 0), (10, 512), (11, 2048), (12, 0), (13, 2048), (14, 512), (15, 0), (16, -1), (17, -1)]

Covered at level 4 : {4, 7, 9, 12, 15}

After reduction : 
 pending  : [8, 10, 11, 13, 14]
 solution : [0, 1, 17, 2, 6]


Before reduction : 
 pending  : [8, 10, 11, 13, 14]
 solution : [0, 1, 17, 2, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, 4096), (9, 0), (10, 512), (11, 2048), (12, 0), (13, 2048), (14, 512), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 4096), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [8, 10, 11, 13, 14]
 solution : [0, 1, 17, 2, 6]


Solution : [0, 1, 17, 2, 6] has cost 26.


Decide in level 4 among pending : [8, 10, 11, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 4096), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Decide 8 with phase True at level 4

After decision at level 4
 pending : [10, 11, 13, 14]
 solution : [0, 1, 17, 2, 6, 8]


New level: 5
 pending : [10, 11, 13, 14]
 solution : [0, 1, 17, 2, 6, 8]


Before reduction : 
 pending  : [10, 11, 13, 14]
 solution : [0, 1, 17, 2, 6, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 4096), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {10, 11, 13, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 6, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 6, 8]


Solution : [0, 1, 17, 2, 6, 8] has cost 33.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 17, 2, 6, 8]

After backtrack at level 5
 pending : [10, 11, 13, 14]
 solution : [0, 1, 17, 2, 6, 8]


Invert decision for 8 at level 4


New level: 5
 pending : [10, 11, 13, 14]
 solution : [0, 1, 17, 2, 6]


Before reduction : 
 pending  : [10, 11, 13, 14]
 solution : [0, 1, 17, 2, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 11, 13, 14]
 solution : [0, 1, 17, 2, 6]


Solution : [0, 1, 17, 2, 6] has cost 26.


Decide in level 5 among pending : [10, 11, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [10, 13, 14]
 solution : [0, 1, 17, 2, 6, 11]


New level: 6
 pending : [10, 13, 14]
 solution : [0, 1, 17, 2, 6, 11]


Before reduction : 
 pending  : [10, 13, 14]
 solution : [0, 1, 17, 2, 6, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {10}

After reduction : 
 pending  : [13, 14]
 solution : [0, 1, 17, 2, 6, 11]


Before reduction : 
 pending  : [13, 14]
 solution : [0, 1, 17, 2, 6, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [13, 14]
 solution : [0, 1, 17, 2, 6, 11]


Solution : [0, 1, 17, 2, 6, 11] has cost 35.


Before backtrack at level 6
 pending : [13, 14]
 solution : [0, 1, 17, 2, 6, 11]

After backtrack at level 6
 pending : [13, 14, 10]
 solution : [0, 1, 17, 2, 6, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [13, 14, 10]
 solution : [0, 1, 17, 2, 6]


Before reduction : 
 pending  : [13, 14, 10]
 solution : [0, 1, 17, 2, 6]

Essensial at level 6 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [13, 14]
 solution : [0, 1, 17, 2, 6, 10]


Before reduction : 
 pending  : [13, 14]
 solution : [0, 1, 17, 2, 6, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [13, 14]
 solution : [0, 1, 17, 2, 6, 10]


Solution : [0, 1, 17, 2, 6, 10] has cost 35.


Before backtrack at level 6
 pending : [13, 14]
 solution : [0, 1, 17, 2, 6, 10]

After backtrack at level 6
 pending : [13, 14, 10]
 solution : [0, 1, 17, 2, 6]


Before backtrack at level 5
 pending : [13, 14, 10]
 solution : [0, 1, 17, 2, 6]

After backtrack at level 5
 pending : [13, 14, 10, 11]
 solution : [0, 1, 17, 2, 6]


Before backtrack at level 4
 pending : [13, 14, 10, 11]
 solution : [0, 1, 17, 2, 6]

After backtrack at level 4
 pending : [13, 14, 10, 11, 4, 7, 9, 12, 15, 8]
 solution : [0, 1, 17, 2, 6]


Invert decision for 6 at level 3


New level: 4
 pending : [13, 14, 10, 11, 4, 7, 9, 12, 15, 8]
 solution : [0, 1, 17, 2]


Before reduction : 
 pending  : [13, 14, 10, 11, 4, 7, 9, 12, 15, 8]
 solution : [0, 1, 17, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 524288), (8, 1048576), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [13, 14, 10, 11, 4, 7, 9, 12, 15, 8]
 solution : [0, 1, 17, 2]


Solution : [0, 1, 17, 2] has cost 19.


Decide in level 4 among pending : [13, 14, 10, 11, 4, 7, 9, 12, 15, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 524288), (8, 1048576), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

Decide 8 with phase True at level 4

After decision at level 4
 pending : [13, 14, 10, 11, 4, 7, 9, 12, 15]
 solution : [0, 1, 17, 2, 8]


New level: 5
 pending : [13, 14, 10, 11, 4, 7, 9, 12, 15]
 solution : [0, 1, 17, 2, 8]


Before reduction : 
 pending  : [13, 14, 10, 11, 4, 7, 9, 12, 15]
 solution : [0, 1, 17, 2, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 524288), (8, 1048576), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 5 : {4, 7, 9, 10, 11, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 8]


Solution : [0, 1, 17, 2, 8] has cost 26.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 17, 2, 8]

After backtrack at level 5
 pending : [13, 14, 10, 11, 4, 7, 9, 12, 15]
 solution : [0, 1, 17, 2, 8]


Invert decision for 8 at level 4


New level: 5
 pending : [13, 14, 10, 11, 4, 7, 9, 12, 15]
 solution : [0, 1, 17, 2]


Before reduction : 
 pending  : [13, 14, 10, 11, 4, 7, 9, 12, 15]
 solution : [0, 1, 17, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [13, 14, 10, 11, 4, 7, 9, 12, 15]
 solution : [0, 1, 17, 2]


Solution : [0, 1, 17, 2] has cost 19.


Decide in level 5 among pending : [13, 14, 10, 11, 4, 7, 9, 12, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

Decide 13 with phase True at level 5

After decision at level 5
 pending : [14, 10, 11, 4, 7, 9, 12, 15]
 solution : [0, 1, 17, 2, 13]


New level: 6
 pending : [14, 10, 11, 4, 7, 9, 12, 15]
 solution : [0, 1, 17, 2, 13]


Before reduction : 
 pending  : [14, 10, 11, 4, 7, 9, 12, 15]
 solution : [0, 1, 17, 2, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 131072), (11, 524288), (12, 65536), (13, 524288), (14, 131072), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {14, 15}

After reduction : 
 pending  : [10, 11, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13]


Before reduction : 
 pending  : [10, 11, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13]


Solution : [0, 1, 17, 2, 13] has cost 26.


Decide in level 6 among pending : [10, 11, 4, 7, 9, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [10, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13, 11]


New level: 7
 pending : [10, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13, 11]


Before reduction : 
 pending  : [10, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {4, 7, 9, 10, 12}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 13, 11]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 13, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 13, 11]


Solution : [0, 1, 17, 2, 13, 11] has cost 35.


Before backtrack at level 7
 pending : []
 solution : [0, 1, 17, 2, 13, 11]

After backtrack at level 7
 pending : [10, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [10, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13]


Before reduction : 
 pending  : [10, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13]

Essensial at level 7 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {9, 4, 12, 7}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 13, 10]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 13, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 13, 10]


Solution : [0, 1, 17, 2, 13, 10] has cost 35.


Before backtrack at level 7
 pending : []
 solution : [0, 1, 17, 2, 13, 10]

After backtrack at level 7
 pending : [10, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13]


Before backtrack at level 6
 pending : [10, 4, 7, 9, 12]
 solution : [0, 1, 17, 2, 13]

After backtrack at level 6
 pending : [10, 4, 7, 9, 12, 14, 15, 11]
 solution : [0, 1, 17, 2, 13]


Invert decision for 13 at level 5


New level: 6
 pending : [10, 4, 7, 9, 12, 14, 15, 11]
 solution : [0, 1, 17, 2]


Before reduction : 
 pending  : [10, 4, 7, 9, 12, 14, 15, 11]
 solution : [0, 1, 17, 2]

Essensial at level 6 : {14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {15}

After reduction : 
 pending  : [10, 4, 7, 9, 12, 11]
 solution : [0, 1, 17, 2, 14]


Before reduction : 
 pending  : [10, 4, 7, 9, 12, 11]
 solution : [0, 1, 17, 2, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 4, 7, 9, 12, 11]
 solution : [0, 1, 17, 2, 14]


Solution : [0, 1, 17, 2, 14] has cost 26.


Decide in level 6 among pending : [10, 4, 7, 9, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 7 with phase True at level 6

After decision at level 6
 pending : [10, 4, 9, 12, 11]
 solution : [0, 1, 17, 2, 14, 7]


New level: 7
 pending : [10, 4, 9, 12, 11]
 solution : [0, 1, 17, 2, 14, 7]


Before reduction : 
 pending  : [10, 4, 9, 12, 11]
 solution : [0, 1, 17, 2, 14, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, 524288), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 512), (11, 2048), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {9, 4, 12}

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 2, 14, 7]


Before reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 2, 14, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 512), (11, 2048), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 2, 14, 7]


Solution : [0, 1, 17, 2, 14, 7] has cost 35.


Before backtrack at level 7
 pending : [10, 11]
 solution : [0, 1, 17, 2, 14, 7]

After backtrack at level 7
 pending : [10, 11, 4, 9, 12]
 solution : [0, 1, 17, 2, 14, 7]


Invert decision for 7 at level 6


New level: 7
 pending : [10, 11, 4, 9, 12]
 solution : [0, 1, 17, 2, 14]


Before reduction : 
 pending  : [10, 11, 4, 9, 12]
 solution : [0, 1, 17, 2, 14]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 11, 4, 9, 12]
 solution : [0, 1, 17, 2, 14]


Solution : [0, 1, 17, 2, 14] has cost 26.


Decide in level 7 among pending : [10, 11, 4, 9, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 11 with phase True at level 7

After decision at level 7
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 2, 14, 11]


New level: 8
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 2, 14, 11]


Before reduction : 
 pending  : [10, 4, 9, 12]
 solution : [0, 1, 17, 2, 14, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, 98304), (10, 65536), (11, 524288), (12, 4096), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {9, 10, 4, 12}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 14, 11]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 14, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 14, 11]


Solution : [0, 1, 17, 2, 14, 11] has cost 35.


Before backtrack at level 8
 pending : []
 solution : [0, 1, 17, 2, 14, 11]

After backtrack at level 8
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 2, 14, 11]


Invert decision for 11 at level 7


New level: 8
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 2, 14]


Before reduction : 
 pending  : [10, 4, 9, 12]
 solution : [0, 1, 17, 2, 14]

Essensial at level 8 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {9, 4, 12}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 14, 10]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 14, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 14, 10]


Solution : [0, 1, 17, 2, 14, 10] has cost 35.


Before backtrack at level 8
 pending : []
 solution : [0, 1, 17, 2, 14, 10]

After backtrack at level 8
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 2, 14]


Before backtrack at level 7
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 2, 14]

After backtrack at level 7
 pending : [10, 4, 9, 12, 11]
 solution : [0, 1, 17, 2, 14]


Before backtrack at level 6
 pending : [10, 4, 9, 12, 11]
 solution : [0, 1, 17, 2, 14]

After backtrack at level 6
 pending : [10, 4, 9, 12, 11, 14, 15, 7]
 solution : [0, 1, 17, 2]


Before backtrack at level 5
 pending : [10, 4, 9, 12, 11, 14, 15, 7]
 solution : [0, 1, 17, 2]

After backtrack at level 5
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13]
 solution : [0, 1, 17, 2]


Before backtrack at level 4
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13]
 solution : [0, 1, 17, 2]

After backtrack at level 4
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8]
 solution : [0, 1, 17, 2]


Before backtrack at level 3
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8]
 solution : [0, 1, 17, 2]

After backtrack at level 3
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 6]
 solution : [0, 1, 17, 2]


Before backtrack at level 2
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 6]
 solution : [0, 1, 17, 2]

After backtrack at level 2
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 6, 5]
 solution : [0, 1, 17, 2]


Invert decision for 2 at level 1


New level: 2
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 6, 5]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 6, 5]
 solution : [0, 1, 17]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, 16777216), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 6, 5]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 14.


Decide in level 2 among pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 6, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, 16777216), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Decide 6 with phase True at level 2

After decision at level 2
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 5]
 solution : [0, 1, 17, 6]


New level: 3
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 5]
 solution : [0, 1, 17, 6]


Before reduction : 
 pending  : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 5]
 solution : [0, 1, 17, 6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, 16777216), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 16384), (6, -1), (7, 0), (8, 4096), (9, 0), (10, 512), (11, 2048), (12, 0), (13, 2048), (14, 512), (15, 0), (16, -1), (17, -1)]

Covered at level 3 : {4, 7, 9, 12, 15}

After reduction : 
 pending  : [10, 11, 14, 13, 8, 5]
 solution : [0, 1, 17, 6]


Before reduction : 
 pending  : [10, 11, 14, 13, 8, 5]
 solution : [0, 1, 17, 6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 16384), (6, -1), (7, 0), (8, 4096), (9, 0), (10, 512), (11, 2048), (12, 0), (13, 2048), (14, 512), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, 4096), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [10, 11, 14, 13, 8, 5]
 solution : [0, 1, 17, 6]


Solution : [0, 1, 17, 6] has cost 21.


Decide in level 3 among pending : [10, 11, 14, 13, 8, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, 4096), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Decide 5 with phase True at level 3

After decision at level 3
 pending : [10, 11, 14, 13, 8]
 solution : [0, 1, 17, 6, 5]


New level: 4
 pending : [10, 11, 14, 13, 8]
 solution : [0, 1, 17, 6, 5]


Before reduction : 
 pending  : [10, 11, 14, 13, 8]
 solution : [0, 1, 17, 6, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, 4096), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : {8, 10, 11, 13, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 6, 5]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 6, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 6, 5]


Solution : [0, 1, 17, 6, 5] has cost 28.


Before backtrack at level 4
 pending : []
 solution : [0, 1, 17, 6, 5]

After backtrack at level 4
 pending : [10, 11, 14, 13, 8]
 solution : [0, 1, 17, 6, 5]


Invert decision for 5 at level 3


New level: 4
 pending : [10, 11, 14, 13, 8]
 solution : [0, 1, 17, 6]


Before reduction : 
 pending  : [10, 11, 14, 13, 8]
 solution : [0, 1, 17, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 4096), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 11, 14, 13, 8]
 solution : [0, 1, 17, 6]


Solution : [0, 1, 17, 6] has cost 21.


Decide in level 4 among pending : [10, 11, 14, 13, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 4096), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Decide 8 with phase True at level 4

After decision at level 4
 pending : [10, 11, 14, 13]
 solution : [0, 1, 17, 6, 8]


New level: 5
 pending : [10, 11, 14, 13]
 solution : [0, 1, 17, 6, 8]


Before reduction : 
 pending  : [10, 11, 14, 13]
 solution : [0, 1, 17, 6, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 4096), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {10, 11, 13, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 6, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 6, 8]


Solution : [0, 1, 17, 6, 8] has cost 28.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 17, 6, 8]

After backtrack at level 5
 pending : [10, 11, 14, 13]
 solution : [0, 1, 17, 6, 8]


Invert decision for 8 at level 4


New level: 5
 pending : [10, 11, 14, 13]
 solution : [0, 1, 17, 6]


Before reduction : 
 pending  : [10, 11, 14, 13]
 solution : [0, 1, 17, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 11, 14, 13]
 solution : [0, 1, 17, 6]


Solution : [0, 1, 17, 6] has cost 21.


Decide in level 5 among pending : [10, 11, 14, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [10, 14, 13]
 solution : [0, 1, 17, 6, 11]


New level: 6
 pending : [10, 14, 13]
 solution : [0, 1, 17, 6, 11]


Before reduction : 
 pending  : [10, 14, 13]
 solution : [0, 1, 17, 6, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {10}

After reduction : 
 pending  : [14, 13]
 solution : [0, 1, 17, 6, 11]


Before reduction : 
 pending  : [14, 13]
 solution : [0, 1, 17, 6, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [14, 13]
 solution : [0, 1, 17, 6, 11]


Solution : [0, 1, 17, 6, 11] has cost 30.


Before backtrack at level 6
 pending : [14, 13]
 solution : [0, 1, 17, 6, 11]

After backtrack at level 6
 pending : [14, 13, 10]
 solution : [0, 1, 17, 6, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [14, 13, 10]
 solution : [0, 1, 17, 6]


Before reduction : 
 pending  : [14, 13, 10]
 solution : [0, 1, 17, 6]

Essensial at level 6 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [14, 13]
 solution : [0, 1, 17, 6, 10]


Before reduction : 
 pending  : [14, 13]
 solution : [0, 1, 17, 6, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [14, 13]
 solution : [0, 1, 17, 6, 10]


Solution : [0, 1, 17, 6, 10] has cost 30.


Before backtrack at level 6
 pending : [14, 13]
 solution : [0, 1, 17, 6, 10]

After backtrack at level 6
 pending : [14, 13, 10]
 solution : [0, 1, 17, 6]


Before backtrack at level 5
 pending : [14, 13, 10]
 solution : [0, 1, 17, 6]

After backtrack at level 5
 pending : [14, 13, 10, 11]
 solution : [0, 1, 17, 6]


Before backtrack at level 4
 pending : [14, 13, 10, 11]
 solution : [0, 1, 17, 6]

After backtrack at level 4
 pending : [14, 13, 10, 11, 8]
 solution : [0, 1, 17, 6]


Before backtrack at level 3
 pending : [14, 13, 10, 11, 8]
 solution : [0, 1, 17, 6]

After backtrack at level 3
 pending : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7, 5]
 solution : [0, 1, 17, 6]


Invert decision for 6 at level 2


New level: 3
 pending : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7, 5]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7, 5]
 solution : [0, 1, 17]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 2048), (14, 512), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, -1), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7, 5]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 14.


Decide in level 3 among pending : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, -1), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Decide 5 with phase True at level 3

After decision at level 3
 pending : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 5]


New level: 4
 pending : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 5]


Before reduction : 
 pending  : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, -1), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 4 : {4, 7, 8, 9, 10, 11, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 5]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 5]


Solution : [0, 1, 17, 5] has cost 21.


Before backtrack at level 4
 pending : []
 solution : [0, 1, 17, 5]

After backtrack at level 4
 pending : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 5]


Invert decision for 5 at level 3


New level: 4
 pending : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7]
 solution : [0, 1, 17]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 14.


Decide in level 4 among pending : [14, 13, 10, 11, 8, 4, 9, 12, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Decide 8 with phase True at level 4

After decision at level 4
 pending : [14, 13, 10, 11, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 8]


New level: 5
 pending : [14, 13, 10, 11, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 8]


Before reduction : 
 pending  : [14, 13, 10, 11, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 2097152), (8, 4194304), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 5 : {4, 7, 9, 10, 11, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 8]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 8]


Solution : [0, 1, 17, 8] has cost 21.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 17, 8]

After backtrack at level 5
 pending : [14, 13, 10, 11, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 8]


Invert decision for 8 at level 4


New level: 5
 pending : [14, 13, 10, 11, 4, 9, 12, 15, 7]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [14, 13, 10, 11, 4, 9, 12, 15, 7]
 solution : [0, 1, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [14, 13, 10, 11, 4, 9, 12, 15, 7]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 14.


Decide in level 5 among pending : [14, 13, 10, 11, 4, 9, 12, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

Decide 13 with phase True at level 5

After decision at level 5
 pending : [14, 10, 11, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 13]


New level: 6
 pending : [14, 10, 11, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 13]


Before reduction : 
 pending  : [14, 10, 11, 4, 9, 12, 15, 7]
 solution : [0, 1, 17, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 524288), (11, 2097152), (12, 262144), (13, 2097152), (14, 524288), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {14, 15}

After reduction : 
 pending  : [10, 11, 4, 9, 12, 7]
 solution : [0, 1, 17, 13]


Before reduction : 
 pending  : [10, 11, 4, 9, 12, 7]
 solution : [0, 1, 17, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11, 4, 9, 12, 7]
 solution : [0, 1, 17, 13]


Solution : [0, 1, 17, 13] has cost 21.


Decide in level 6 among pending : [10, 11, 4, 9, 12, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [10, 4, 9, 12, 7]
 solution : [0, 1, 17, 13, 11]


New level: 7
 pending : [10, 4, 9, 12, 7]
 solution : [0, 1, 17, 13, 11]


Before reduction : 
 pending  : [10, 4, 9, 12, 7]
 solution : [0, 1, 17, 13, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {4, 7, 9, 10, 12}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 13, 11]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 13, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 13, 11]


Solution : [0, 1, 17, 13, 11] has cost 30.


Before backtrack at level 7
 pending : []
 solution : [0, 1, 17, 13, 11]

After backtrack at level 7
 pending : [10, 4, 9, 12, 7]
 solution : [0, 1, 17, 13, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [10, 4, 9, 12, 7]
 solution : [0, 1, 17, 13]


Before reduction : 
 pending  : [10, 4, 9, 12, 7]
 solution : [0, 1, 17, 13]

Essensial at level 7 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {9, 4, 12, 7}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 13, 10]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 13, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 13, 10]


Solution : [0, 1, 17, 13, 10] has cost 30.


Before backtrack at level 7
 pending : []
 solution : [0, 1, 17, 13, 10]

After backtrack at level 7
 pending : [10, 4, 9, 12, 7]
 solution : [0, 1, 17, 13]


Before backtrack at level 6
 pending : [10, 4, 9, 12, 7]
 solution : [0, 1, 17, 13]

After backtrack at level 6
 pending : [10, 4, 9, 12, 7, 14, 15, 11]
 solution : [0, 1, 17, 13]


Invert decision for 13 at level 5


New level: 6
 pending : [10, 4, 9, 12, 7, 14, 15, 11]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [10, 4, 9, 12, 7, 14, 15, 11]
 solution : [0, 1, 17]

Essensial at level 6 : {14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {15}

After reduction : 
 pending  : [10, 4, 9, 12, 7, 11]
 solution : [0, 1, 17, 14]


Before reduction : 
 pending  : [10, 4, 9, 12, 7, 11]
 solution : [0, 1, 17, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 4, 9, 12, 7, 11]
 solution : [0, 1, 17, 14]


Solution : [0, 1, 17, 14] has cost 21.


Decide in level 6 among pending : [10, 4, 9, 12, 7, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 7 with phase True at level 6

After decision at level 6
 pending : [10, 4, 9, 12, 11]
 solution : [0, 1, 17, 14, 7]


New level: 7
 pending : [10, 4, 9, 12, 11]
 solution : [0, 1, 17, 14, 7]


Before reduction : 
 pending  : [10, 4, 9, 12, 11]
 solution : [0, 1, 17, 14, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, 2097152), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 512), (11, 2048), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {9, 4, 12}

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 14, 7]


Before reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 14, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 512), (11, 2048), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 14, 7]


Solution : [0, 1, 17, 14, 7] has cost 30.


Before backtrack at level 7
 pending : [10, 11]
 solution : [0, 1, 17, 14, 7]

After backtrack at level 7
 pending : [10, 11, 4, 9, 12]
 solution : [0, 1, 17, 14, 7]


Invert decision for 7 at level 6


New level: 7
 pending : [10, 11, 4, 9, 12]
 solution : [0, 1, 17, 14]


Before reduction : 
 pending  : [10, 11, 4, 9, 12]
 solution : [0, 1, 17, 14]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 11, 4, 9, 12]
 solution : [0, 1, 17, 14]


Solution : [0, 1, 17, 14] has cost 21.


Decide in level 7 among pending : [10, 11, 4, 9, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 11 with phase True at level 7

After decision at level 7
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 14, 11]


New level: 8
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 14, 11]


Before reduction : 
 pending  : [10, 4, 9, 12]
 solution : [0, 1, 17, 14, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, 393216), (10, 262144), (11, 2097152), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {9, 10, 4, 12}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 14, 11]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 14, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 14, 11]


Solution : [0, 1, 17, 14, 11] has cost 30.


Before backtrack at level 8
 pending : []
 solution : [0, 1, 17, 14, 11]

After backtrack at level 8
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 14, 11]


Invert decision for 11 at level 7


New level: 8
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 14]


Before reduction : 
 pending  : [10, 4, 9, 12]
 solution : [0, 1, 17, 14]

Essensial at level 8 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {9, 4, 12}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 14, 10]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 14, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 14, 10]


Solution : [0, 1, 17, 14, 10] has cost 30.


Before backtrack at level 8
 pending : []
 solution : [0, 1, 17, 14, 10]

After backtrack at level 8
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 14]


Before backtrack at level 7
 pending : [10, 4, 9, 12]
 solution : [0, 1, 17, 14]

After backtrack at level 7
 pending : [10, 4, 9, 12, 11]
 solution : [0, 1, 17, 14]


Before backtrack at level 6
 pending : [10, 4, 9, 12, 11]
 solution : [0, 1, 17, 14]

After backtrack at level 6
 pending : [10, 4, 9, 12, 11, 14, 15, 7]
 solution : [0, 1, 17]


Before backtrack at level 5
 pending : [10, 4, 9, 12, 11, 14, 15, 7]
 solution : [0, 1, 17]

After backtrack at level 5
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13]
 solution : [0, 1, 17]


Before backtrack at level 4
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13]
 solution : [0, 1, 17]

After backtrack at level 4
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8]
 solution : [0, 1, 17]


Before backtrack at level 3
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8]
 solution : [0, 1, 17]

After backtrack at level 3
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 5]
 solution : [0, 1, 17]


Before backtrack at level 2
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 5]
 solution : [0, 1, 17]

After backtrack at level 2
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 5, 6]
 solution : [0, 1, 17]


Before backtrack at level 1
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 5, 6]
 solution : [0, 1, 17]

After backtrack at level 1
 pending : [10, 4, 9, 12, 11, 14, 15, 7, 13, 8, 5, 6, 2]
 solution : [0, 1, 17]


=======================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

=======================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: upper bound: 21

[MIN NOTE]: maximum branch and bound depth: 8

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 17, 5]

[MIN NOTE]: solution length: 4

invariant [invar_0] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_1] forall NODE0,VALUE1,VALUE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_17] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_5] forall QUORUM0,NODE0,VALUE0. voting_quorum = QUORUM0 | vote(NODE0,VALUE0) | ~decided(VALUE0) | member(NODE0,QUORUM0) # qcost: 7

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 21




[MIN NOTE]: Solution 1 : [0, 1, 17, 8]

[MIN NOTE]: solution length: 4

invariant [invar_0] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_1] forall NODE0,VALUE1,VALUE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_17] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_8] forall QUORUM0,NODE0,VALUE0. voting_quorum ~= QUORUM0 | vote(NODE0,VALUE0) | ~decided(VALUE0) | ~member(NODE0,QUORUM0) # qcost: 7

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 21




[QRM NOTE]: Time elapsed since start: 2.606 seconds

[QRM NOTE]: Time elapsed since last: 0.161 seconds

[QRM NOTE]: Peak memory: 2160979 bytes


************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy -s node=4,value=3 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: node=4,value=3]

================================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 23

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 0.172 seconds

[QRM NOTE]: Time elapsed since last: 0.172 seconds

[QRM NOTE]: Peak memory: 330737 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 1072


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=4,value=3]

==================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: member('node', 'quorum')
predicate: voted('node',)
predicate: voting_quorum=('quorum',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)', '(voting_quorum=quorum__node0_node1_node2)', '(voting_quorum=quorum__node0_node1_node3)', '(voting_quorum=quorum__node0_node2_node3)', '(voting_quorum=quorum__node1_node2_node3)']

00000000000000000000001
00000000000000000000010
00000000000000000000100
00000000000000000001000
00000000000000100010001
00000000000000100010010
00000000000000100010100
00000000000000100011000
00000000000001000010001
00000000000001000010010
00000000000001000010100
00000000000001000011000
00000000000010000010001
00000000000010000010010
00000000000010000010100
00000000000010000011000
00000000000100000100001
00000000000100000100010
00000000000100000100100
00000000000100000101000
00000000000100100110001
00000000000100100110010
00000000000100100110100
00000000000100100111000
00000000000101000110001
00000000000101000110010
00000000000101000110100
00000000000101000111000
00000000000110000110001
00000000000110000110010
00000000000110000110100
00000000000110000111000
00000000001000000100001
00000000001000000100010
00000000001000000100100
00000000001000000101000
00000000001000100110001
00000000001000100110010
00000000001000100110100
00000000001000100111000
00000000001001000110001
00000000001001000110010
00000000001001000110100
00000000001001000111000
00000000001010000110001
00000000001010000110010
00000000001010000110100
00000000001010000111000
00000000010000000100001
00000000010000000100010
00000000010000000100100
00000000010000000101000
00000000010000100110001
00000000010000100110010
00000000010000100110100
00000000010000100111000
00000000010001000110001
00000000010001000110010
00000000010001000110100
00000000010001000111000
00000000010010000110001
00000000010010000110010
00000000010010000110100
00000000010010000111000
00000000100000001000001
00000000100000001000010
00000000100000001000100
00000000100000001001000
00000000100000101010001
00000000100000101010010
00000000100000101010100
00000000100000101011000
00000000100001001010001
00000000100001001010010
00000000100001001010100
00000000100001001011000
00000000100010001010001
00000000100010001010010
00000000100010001010100
00000000100010001011000
00000000100100001100001
00000000100100001100010
00000000100100001100100
00000000100100001101000
00000000100100101110001
00000000100100101110010
00000000100100101110100
00000000100100101111000
00000000100101001110001
00000000100101001110010
00000000100101001110100
00000000100101001111000
00000000100110001110001
00000000100110001110010
00000000100110001110100
00000000100110001111000
00000000101000001100001
00000000101000001100010
00000000101000001100100
00000000101000001101000
00000000101000101110001
00000000101000101110010
00000000101000101110100
00000000101000101111000
00000000101001001110001
00000000101001001110010
00000000101001001110100
00000000101001001111000
00000000101010001110001
00000000101010001110010
00000000101010001110100
00000000101010001111000
00000000110000001100001
00000000110000001100010
00000000110000001100100
00000000110000001101000
00000000110000101110001
00000000110000101110010
00000000110000101110100
00000000110000101111000
00000000110001001110001
00000000110001001110010
00000000110001001110100
00000000110001001111000
00000000110010001110001
00000000110010001110010
00000000110010001110100
00000000110010001111000
00000001000000001000001
00000001000000001000010
00000001000000001000100
00000001000000001001000
00000001000000101010001
00000001000000101010010
00000001000000101010100
00000001000000101011000
00000001000001001010001
00000001000001001010010
00000001000001001010100
00000001000001001011000
00000001000010001010001
00000001000010001010010
00000001000010001010100
00000001000010001011000
00000001000100001100001
00000001000100001100010
00000001000100001100100
00000001000100001101000
00000001000100101110001
00000001000100101110010
00000001000100101110100
00000001000100101111000
00000001000101001110001
00000001000101001110010
00000001000101001110100
00000001000101001111000
00000001000110001110001
00000001000110001110010
00000001000110001110100
00000001000110001111000
00000001001000001100001
00000001001000001100010
00000001001000001100100
00000001001000001101000
00000001001000101110001
00000001001000101110010
00000001001000101110100
00000001001000101111000
00000001001001001110001
00000001001001001110010
00000001001001001110100
00000001001001001111000
00000001001010001110001
00000001001010001110010
00000001001010001110100
00000001001010001111000
00000001010000001100001
00000001010000001100010
00000001010000001100100
00000001010000001101000
00000001010000101110001
00000001010000101110010
00000001010000101110100
00000001010000101111000
00000001010001001110001
00000001010001001110010
00000001010001001110100
00000001010001001111000
00000001010010001110001
00000001010010001110010
00000001010010001110100
00000001010010001111000
00000010000000001000001
00000010000000001000010
00000010000000001000100
00000010000000001001000
00000010000000101010001
00000010000000101010010
00000010000000101010100
00000010000000101011000
00000010000001001010001
00000010000001001010010
00000010000001001010100
00000010000001001011000
00000010000010001010001
00000010000010001010010
00000010000010001010100
00000010000010001011000
00000010000100001100001
00000010000100001100010
00000010000100001100100
00000010000100001101000
00000010000100101110001
00000010000100101110010
00000010000100101110100
00000010000100101111000
00000010000101001110001
00000010000101001110010
00000010000101001110100
00000010000101001111000
00000010000110001110001
00000010000110001110010
00000010000110001110100
00000010000110001111000
00000010001000001100001
00000010001000001100010
00000010001000001100100
00000010001000001101000
00000010001000101110001
00000010001000101110010
00000010001000101110100
00000010001000101111000
00000010001001001110001
00000010001001001110010
00000010001001001110100
00000010001001001111000
00000010001010001110001
00000010001010001110010
00000010001010001110100
00000010001010001111000
00000010010000001100001
00000010010000001100010
00000010010000001100100
00000010010000001101000
00000010010000101110001
00000010010000101110010
00000010010000101110100
00000010010000101111000
00000010010001001110001
00000010010001001110010
00000010010001001110100
00000010010001001111000
00000010010010001110001
00000010010010001110010
00000010010010001110100
00000010010010001111000
00000100000000010000001
00000100000000010000010
00000100000000010000100
00000100000000010001000
00000100000000110010001
00000100000000110010010
00000100000000110010100
00000100000000110011000
00000100000001010010001
00000100000001010010010
00000100000001010010100
00000100000001010011000
00000100000010010010001
00000100000010010010010
00000100000010010010100
00000100000010010011000
00000100000100010100001
00000100000100010100010
00000100000100010100100
00000100000100010101000
00000100000100110110001
00000100000100110110010
00000100000100110110100
00000100000100110111000
00000100000101010110001
00000100000101010110010
00000100000101010110100
00000100000101010111000
00000100000110010110001
00000100000110010110010
00000100000110010110100
00000100000110010111000
00000100001000010100001
00000100001000010100010
00000100001000010100100
00000100001000010101000
00000100001000110110001
00000100001000110110010
00000100001000110110100
00000100001000110111000
00000100001001010110001
00000100001001010110010
00000100001001010110100
00000100001001010111000
00000100001010010110001
00000100001010010110010
00000100001010010110100
00000100001010010111000
00000100010000010100001
00000100010000010100010
00000100010000010100100
00000100010000010101000
00000100010000110110001
00000100010000110110010
00000100010000110110100
00000100010000110111000
00000100010001010110001
00000100010001010110010
00000100010001010110100
00000100010001010111000
00000100010010010110001
00000100010010010110010
00000100010010010110100
00000100010010010111000
00000100100000011000001
00000100100000011000010
00000100100000011000100
00000100100000011001000
00000100100000111010001
00000100100000111010010
00000100100000111010100
00000100100000111011000
00000100100001011010001
00000100100001011010010
00000100100001011010100
00000100100001011011000
00000100100010011010001
00000100100010011010010
00000100100010011010100
00000100100010011011000
00000100100100011100001
00000100100100011100010
00000100100100011100100
00000100100100011101000
00000100100100111110001
00000100100100111110010
00000100100100111110100
00000100100100111111000
00000100100101011110001
00000100100101011110010
00000100100101011110100
00000100100101011111000
00000100100110011110001
00000100100110011110010
00000100100110011110100
00000100100110011111000
00000100101000011100001
00000100101000011100010
00000100101000011100100
00000100101000011101000
00000100101000111110001
00000100101000111110010
00000100101000111110100
00000100101000111111000
00000100101001011110001
00000100101001011110010
00000100101001011110100
00000100101001011111000
00000100101010011110001
00000100101010011110010
00000100101010011110100
00000100101010011111000
00000100110000011100001
00000100110000011100010
00000100110000011100100
00000100110000011101000
00000100110000111110001
00000100110000111110010
00000100110000111110100
00000100110000111111000
00000100110001011110001
00000100110001011110010
00000100110001011110100
00000100110001011111000
00000100110010011110001
00000100110010011110010
00000100110010011110100
00000100110010011111000
00000101000000011000001
00000101000000011000010
00000101000000011000100
00000101000000011001000
00000101000000111010001
00000101000000111010010
00000101000000111010100
00000101000000111011000
00000101000001011010001
00000101000001011010010
00000101000001011010100
00000101000001011011000
00000101000010011010001
00000101000010011010010
00000101000010011010100
00000101000010011011000
00000101000100011100001
00000101000100011100010
00000101000100011100100
00000101000100011101000
00000101000100111110001
00000101000100111110010
00000101000100111110100
00000101000100111111000
00000101000101011110001
00000101000101011110010
00000101000101011110100
00000101000101011111000
00000101000110011110001
00000101000110011110010
00000101000110011110100
00000101000110011111000
00000101001000011100001
00000101001000011100010
00000101001000011100100
00000101001000011101000
00000101001000111110001
00000101001000111110010
00000101001000111110100
00000101001000111111000
00000101001001011110001
00000101001001011110010
00000101001001011110100
00000101001001011111000
00000101001010011110001
00000101001010011110010
00000101001010011110100
00000101001010011111000
00000101010000011100001
00000101010000011100010
00000101010000011100100
00000101010000011101000
00000101010000111110001
00000101010000111110010
00000101010000111110100
00000101010000111111000
00000101010001011110001
00000101010001011110010
00000101010001011110100
00000101010001011111000
00000101010010011110001
00000101010010011110010
00000101010010011110100
00000101010010011111000
00000110000000011000001
00000110000000011000010
00000110000000011000100
00000110000000011001000
00000110000000111010001
00000110000000111010010
00000110000000111010100
00000110000000111011000
00000110000001011010001
00000110000001011010010
00000110000001011010100
00000110000001011011000
00000110000010011010001
00000110000010011010010
00000110000010011010100
00000110000010011011000
00000110000100011100001
00000110000100011100010
00000110000100011100100
00000110000100011101000
00000110000100111110001
00000110000100111110010
00000110000100111110100
00000110000100111111000
00000110000101011110001
00000110000101011110010
00000110000101011110100
00000110000101011111000
00000110000110011110001
00000110000110011110010
00000110000110011110100
00000110000110011111000
00000110001000011100001
00000110001000011100010
00000110001000011100100
00000110001000011101000
00000110001000111110001
00000110001000111110010
00000110001000111110100
00000110001000111111000
00000110001001011110001
00000110001001011110010
00000110001001011110100
00000110001001011111000
00000110001010011110001
00000110001010011110010
00000110001010011110100
00000110001010011111000
00000110010000011100001
00000110010000011100010
00000110010000011100100
00000110010000011101000
00000110010000111110001
00000110010000111110010
00000110010000111110100
00000110010000111111000
00000110010001011110001
00000110010001011110010
00000110010001011110100
00000110010001011111000
00000110010010011110001
00000110010010011110010
00000110010010011110100
00000110010010011111000
00001000000000010000001
00001000000000010000010
00001000000000010000100
00001000000000010001000
00001000000000110010001
00001000000000110010010
00001000000000110010100
00001000000000110011000
00001000000001010010001
00001000000001010010010
00001000000001010010100
00001000000001010011000
00001000000010010010001
00001000000010010010010
00001000000010010010100
00001000000010010011000
00001000000100010100001
00001000000100010100010
00001000000100010100100
00001000000100010101000
00001000000100110110001
00001000000100110110010
00001000000100110110100
00001000000100110111000
00001000000101010110001
00001000000101010110010
00001000000101010110100
00001000000101010111000
00001000000110010110001
00001000000110010110010
00001000000110010110100
00001000000110010111000
00001000001000010100001
00001000001000010100010
00001000001000010100100
00001000001000010101000
00001000001000110110001
00001000001000110110010
00001000001000110110100
00001000001000110111000
00001000001001010110001
00001000001001010110010
00001000001001010110100
00001000001001010111000
00001000001010010110001
00001000001010010110010
00001000001010010110100
00001000001010010111000
00001000010000010100001
00001000010000010100010
00001000010000010100100
00001000010000010101000
00001000010000110110001
00001000010000110110010
00001000010000110110100
00001000010000110111000
00001000010001010110001
00001000010001010110010
00001000010001010110100
00001000010001010111000
00001000010010010110001
00001000010010010110010
00001000010010010110100
00001000010010010111000
00001000100000011000001
00001000100000011000010
00001000100000011000100
00001000100000011001000
00001000100000111010001
00001000100000111010010
00001000100000111010100
00001000100000111011000
00001000100001011010001
00001000100001011010010
00001000100001011010100
00001000100001011011000
00001000100010011010001
00001000100010011010010
00001000100010011010100
00001000100010011011000
00001000100100011100001
00001000100100011100010
00001000100100011100100
00001000100100011101000
00001000100100111110001
00001000100100111110010
00001000100100111110100
00001000100100111111000
00001000100101011110001
00001000100101011110010
00001000100101011110100
00001000100101011111000
00001000100110011110001
00001000100110011110010
00001000100110011110100
00001000100110011111000
00001000101000011100001
00001000101000011100010
00001000101000011100100
00001000101000011101000
00001000101000111110001
00001000101000111110010
00001000101000111110100
00001000101000111111000
00001000101001011110001
00001000101001011110010
00001000101001011110100
00001000101001011111000
00001000101010011110001
00001000101010011110010
00001000101010011110100
00001000101010011111000
00001000110000011100001
00001000110000011100010
00001000110000011100100
00001000110000011101000
00001000110000111110001
00001000110000111110010
00001000110000111110100
00001000110000111111000
00001000110001011110001
00001000110001011110010
00001000110001011110100
00001000110001011111000
00001000110010011110001
00001000110010011110010
00001000110010011110100
00001000110010011111000
00001001000000011000001
00001001000000011000010
00001001000000011000100
00001001000000011001000
00001001000000111010001
00001001000000111010010
00001001000000111010100
00001001000000111011000
00001001000001011010001
00001001000001011010010
00001001000001011010100
00001001000001011011000
00001001000010011010001
00001001000010011010010
00001001000010011010100
00001001000010011011000
00001001000100011100001
00001001000100011100010
00001001000100011100100
00001001000100011101000
00001001000100111110001
00001001000100111110010
00001001000100111110100
00001001000100111111000
00001001000101011110001
00001001000101011110010
00001001000101011110100
00001001000101011111000
00001001000110011110001
00001001000110011110010
00001001000110011110100
00001001000110011111000
00001001001000011100001
00001001001000011100010
00001001001000011100100
00001001001000011101000
00001001001000111110001
00001001001000111110010
00001001001000111110100
00001001001000111111000
00001001001001011110001
00001001001001011110010
00001001001001011110100
00001001001001011111000
00001001001010011110001
00001001001010011110010
00001001001010011110100
00001001001010011111000
00001001010000011100001
00001001010000011100010
00001001010000011100100
00001001010000011101000
00001001010000111110001
00001001010000111110010
00001001010000111110100
00001001010000111111000
00001001010001011110001
00001001010001011110010
00001001010001011110100
00001001010001011111000
00001001010010011110001
00001001010010011110010
00001001010010011110100
00001001010010011111000
00001010000000011000001
00001010000000011000010
00001010000000011000100
00001010000000011001000
00001010000000111010001
00001010000000111010010
00001010000000111010100
00001010000000111011000
00001010000001011010001
00001010000001011010010
00001010000001011010100
00001010000001011011000
00001010000010011010001
00001010000010011010010
00001010000010011010100
00001010000010011011000
00001010000100011100001
00001010000100011100010
00001010000100011100100
00001010000100011101000
00001010000100111110001
00001010000100111110010
00001010000100111110100
00001010000100111111000
00001010000101011110001
00001010000101011110010
00001010000101011110100
00001010000101011111000
00001010000110011110001
00001010000110011110010
00001010000110011110100
00001010000110011111000
00001010001000011100001
00001010001000011100010
00001010001000011100100
00001010001000011101000
00001010001000111110001
00001010001000111110010
00001010001000111110100
00001010001000111111000
00001010001001011110001
00001010001001011110010
00001010001001011110100
00001010001001011111000
00001010001010011110001
00001010001010011110010
00001010001010011110100
00001010001010011111000
00001010010000011100001
00001010010000011100010
00001010010000011100100
00001010010000011101000
00001010010000111110001
00001010010000111110010
00001010010000111110100
00001010010000111111000
00001010010001011110001
00001010010001011110010
00001010010001011110100
00001010010001011111000
00001010010010011110001
00001010010010011110010
00001010010010011110100
00001010010010011111000
00010000000000010000001
00010000000000010000010
00010000000000010000100
00010000000000010001000
00010000000000110010001
00010000000000110010010
00010000000000110010100
00010000000000110011000
00010000000001010010001
00010000000001010010010
00010000000001010010100
00010000000001010011000
00010000000010010010001
00010000000010010010010
00010000000010010010100
00010000000010010011000
00010000000100010100001
00010000000100010100010
00010000000100010100100
00010000000100010101000
00010000000100110110001
00010000000100110110010
00010000000100110110100
00010000000100110111000
00010000000101010110001
00010000000101010110010
00010000000101010110100
00010000000101010111000
00010000000110010110001
00010000000110010110010
00010000000110010110100
00010000000110010111000
00010000001000010100001
00010000001000010100010
00010000001000010100100
00010000001000010101000
00010000001000110110001
00010000001000110110010
00010000001000110110100
00010000001000110111000
00010000001001010110001
00010000001001010110010
00010000001001010110100
00010000001001010111000
00010000001010010110001
00010000001010010110010
00010000001010010110100
00010000001010010111000
00010000010000010100001
00010000010000010100010
00010000010000010100100
00010000010000010101000
00010000010000110110001
00010000010000110110010
00010000010000110110100
00010000010000110111000
00010000010001010110001
00010000010001010110010
00010000010001010110100
00010000010001010111000
00010000010010010110001
00010000010010010110010
00010000010010010110100
00010000010010010111000
00010000100000011000001
00010000100000011000010
00010000100000011000100
00010000100000011001000
00010000100000111010001
00010000100000111010010
00010000100000111010100
00010000100000111011000
00010000100001011010001
00010000100001011010010
00010000100001011010100
00010000100001011011000
00010000100010011010001
00010000100010011010010
00010000100010011010100
00010000100010011011000
00010000100100011100001
00010000100100011100010
00010000100100011100100
00010000100100011101000
00010000100100111110001
00010000100100111110010
00010000100100111110100
00010000100100111111000
00010000100101011110001
00010000100101011110010
00010000100101011110100
00010000100101011111000
00010000100110011110001
00010000100110011110010
00010000100110011110100
00010000100110011111000
00010000101000011100001
00010000101000011100010
00010000101000011100100
00010000101000011101000
00010000101000111110001
00010000101000111110010
00010000101000111110100
00010000101000111111000
00010000101001011110001
00010000101001011110010
00010000101001011110100
00010000101001011111000
00010000101010011110001
00010000101010011110010
00010000101010011110100
00010000101010011111000
00010000110000011100001
00010000110000011100010
00010000110000011100100
00010000110000011101000
00010000110000111110001
00010000110000111110010
00010000110000111110100
00010000110000111111000
00010000110001011110001
00010000110001011110010
00010000110001011110100
00010000110001011111000
00010000110010011110001
00010000110010011110010
00010000110010011110100
00010000110010011111000
00010001000000011000001
00010001000000011000010
00010001000000011000100
00010001000000011001000
00010001000000111010001
00010001000000111010010
00010001000000111010100
00010001000000111011000
00010001000001011010001
00010001000001011010010
00010001000001011010100
00010001000001011011000
00010001000010011010001
00010001000010011010010
00010001000010011010100
00010001000010011011000
00010001000100011100001
00010001000100011100010
00010001000100011100100
00010001000100011101000
00010001000100111110001
00010001000100111110010
00010001000100111110100
00010001000100111111000
00010001000101011110001
00010001000101011110010
00010001000101011110100
00010001000101011111000
00010001000110011110001
00010001000110011110010
00010001000110011110100
00010001000110011111000
00010001001000011100001
00010001001000011100010
00010001001000011100100
00010001001000011101000
00010001001000111110001
00010001001000111110010
00010001001000111110100
00010001001000111111000
00010001001001011110001
00010001001001011110010
00010001001001011110100
00010001001001011111000
00010001001010011110001
00010001001010011110010
00010001001010011110100
00010001001010011111000
00010001010000011100001
00010001010000011100010
00010001010000011100100
00010001010000011101000
00010001010000111110001
00010001010000111110010
00010001010000111110100
00010001010000111111000
00010001010001011110001
00010001010001011110010
00010001010001011110100
00010001010001011111000
00010001010010011110001
00010001010010011110010
00010001010010011110100
00010001010010011111000
00010010000000011000001
00010010000000011000010
00010010000000011000100
00010010000000011001000
00010010000000111010001
00010010000000111010010
00010010000000111010100
00010010000000111011000
00010010000001011010001
00010010000001011010010
00010010000001011010100
00010010000001011011000
00010010000010011010001
00010010000010011010010
00010010000010011010100
00010010000010011011000
00010010000100011100001
00010010000100011100010
00010010000100011100100
00010010000100011101000
00010010000100111110001
00010010000100111110010
00010010000100111110100
00010010000100111111000
00010010000101011110001
00010010000101011110010
00010010000101011110100
00010010000101011111000
00010010000110011110001
00010010000110011110010
00010010000110011110100
00010010000110011111000
00010010001000011100001
00010010001000011100010
00010010001000011100100
00010010001000011101000
00010010001000111110001
00010010001000111110010
00010010001000111110100
00010010001000111111000
00010010001001011110001
00010010001001011110010
00010010001001011110100
00010010001001011111000
00010010001010011110001
00010010001010011110010
00010010001010011110100
00010010001010011111000
00010010010000011100001
00010010010000011100010
00010010010000011100100
00010010010000011101000
00010010010000111110001
00010010010000111110010
00010010010000111110100
00010010010000111111000
00010010010001011110001
00010010010001011110010
00010010010001011110100
00010010010001011111000
00010010010010011110001
00010010010010011110010
00010010010010011110100
00010010010010011111000
00100000100100101110001
00100100000100110110010
00100100100000111010100
00100100100100011101000
00100100100100111110001
00100100100100111110010
00100100100100111110100
00100100100100111111000
00100100100101011111000
00100100100110011111000
00100100101000111110100
00100100110000111110100
00100101000100111110010
00100110000100111110010
00101000100100111110001
00110000100100111110001
01000001001001001110001
01000101001001011110001
01001000001001010110010
01001000101001011110010
01001001000001011010100
01001001000101011110100
01001001001000011101000
01001001001000111111000
01001001001001011110001
01001001001001011110010
01001001001001011110100
01001001001001011111000
01001001001010011111000
01001001010001011110100
01001010001001011110010
01010001001001011110001
10000010010010001110001
10000110010010011110001
10001010010010011110001
10010000010010010110010
10010000110010011110010
10010001010010011110010
10010010000010011010100
10010010000110011110100
10010010001010011110100
10010010010000011101000
10010010010000111111000
10010010010001011111000
10010010010010011110001
10010010010010011110010
10010010010010011110100
10010010010010011111000

[QRM NOTE]: Time elapsed since start: 2.033 seconds

[QRM NOTE]: Time elapsed since last: 1.861 seconds

[QRM NOTE]: Peak memory: 1784518 bytes


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: node=4,value=3]

============================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 11.765 seconds

[QRM NOTE]: Time elapsed since last: 9.732 seconds

[QRM NOTE]: Peak memory: 11849002 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: node=3,value=4]

================================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 22

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 0.154 seconds

[QRM NOTE]: Time elapsed since last: 0.154 seconds

[QRM NOTE]: Peak memory: 319965 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 435


==================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall: node=3,value=4]

==================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decided('value',)
predicate: voting_quorum=('quorum',)
predicate: voted('node',)
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'decided(value2)', 'decided(value3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']

0000000000000000000001
0000000000000000000010
0000000000000000000100
0000000000000001001001
0000000000000001001010
0000000000000001001100
0000000000000010001001
0000000000000010001010
0000000000000010001100
0000000000000100001001
0000000000000100001010
0000000000000100001100
0000000000001000001001
0000000000001000001010
0000000000001000001100
0000000000010000010001
0000000000010000010010
0000000000010000010100
0000000000010001011001
0000000000010001011010
0000000000010001011100
0000000000010010011001
0000000000010010011010
0000000000010010011100
0000000000010100011001
0000000000010100011010
0000000000010100011100
0000000000011000011001
0000000000011000011010
0000000000011000011100
0000000000100000010001
0000000000100000010010
0000000000100000010100
0000000000100001011001
0000000000100001011010
0000000000100001011100
0000000000100010011001
0000000000100010011010
0000000000100010011100
0000000000100100011001
0000000000100100011010
0000000000100100011100
0000000000101000011001
0000000000101000011010
0000000000101000011100
0000000001000000010001
0000000001000000010010
0000000001000000010100
0000000001000001011001
0000000001000001011010
0000000001000001011100
0000000001000010011001
0000000001000010011010
0000000001000010011100
0000000001000100011001
0000000001000100011010
0000000001000100011100
0000000001001000011001
0000000001001000011010
0000000001001000011100
0000000010000000010001
0000000010000000010010
0000000010000000010100
0000000010000001011001
0000000010000001011010
0000000010000001011100
0000000010000010011001
0000000010000010011010
0000000010000010011100
0000000010000100011001
0000000010000100011010
0000000010000100011100
0000000010001000011001
0000000010001000011010
0000000010001000011100
0000000100000000100001
0000000100000000100010
0000000100000000100100
0000000100000001101001
0000000100000001101010
0000000100000001101100
0000000100000010101001
0000000100000010101010
0000000100000010101100
0000000100000100101001
0000000100000100101010
0000000100000100101100
0000000100001000101001
0000000100001000101010
0000000100001000101100
0000000100010000110001
0000000100010000110010
0000000100010000110100
0000000100010001111001
0000000100010001111010
0000000100010001111100
0000000100010010111001
0000000100010010111010
0000000100010010111100
0000000100010100111001
0000000100010100111010
0000000100010100111100
0000000100011000111001
0000000100011000111010
0000000100011000111100
0000000100100000110001
0000000100100000110010
0000000100100000110100
0000000100100001111001
0000000100100001111010
0000000100100001111100
0000000100100010111001
0000000100100010111010
0000000100100010111100
0000000100100100111001
0000000100100100111010
0000000100100100111100
0000000100101000111001
0000000100101000111010
0000000100101000111100
0000000101000000110001
0000000101000000110010
0000000101000000110100
0000000101000001111001
0000000101000001111010
0000000101000001111100
0000000101000010111001
0000000101000010111010
0000000101000010111100
0000000101000100111001
0000000101000100111010
0000000101000100111100
0000000101001000111001
0000000101001000111010
0000000101001000111100
0000000110000000110001
0000000110000000110010
0000000110000000110100
0000000110000001111001
0000000110000001111010
0000000110000001111100
0000000110000010111001
0000000110000010111010
0000000110000010111100
0000000110000100111001
0000000110000100111010
0000000110000100111100
0000000110001000111001
0000000110001000111010
0000000110001000111100
0000001000000000100001
0000001000000000100010
0000001000000000100100
0000001000000001101001
0000001000000001101010
0000001000000001101100
0000001000000010101001
0000001000000010101010
0000001000000010101100
0000001000000100101001
0000001000000100101010
0000001000000100101100
0000001000001000101001
0000001000001000101010
0000001000001000101100
0000001000010000110001
0000001000010000110010
0000001000010000110100
0000001000010001111001
0000001000010001111010
0000001000010001111100
0000001000010010111001
0000001000010010111010
0000001000010010111100
0000001000010100111001
0000001000010100111010
0000001000010100111100
0000001000011000111001
0000001000011000111010
0000001000011000111100
0000001000100000110001
0000001000100000110010
0000001000100000110100
0000001000100001111001
0000001000100001111010
0000001000100001111100
0000001000100010111001
0000001000100010111010
0000001000100010111100
0000001000100100111001
0000001000100100111010
0000001000100100111100
0000001000101000111001
0000001000101000111010
0000001000101000111100
0000001001000000110001
0000001001000000110010
0000001001000000110100
0000001001000001111001
0000001001000001111010
0000001001000001111100
0000001001000010111001
0000001001000010111010
0000001001000010111100
0000001001000100111001
0000001001000100111010
0000001001000100111100
0000001001001000111001
0000001001001000111010
0000001001001000111100
0000001010000000110001
0000001010000000110010
0000001010000000110100
0000001010000001111001
0000001010000001111010
0000001010000001111100
0000001010000010111001
0000001010000010111010
0000001010000010111100
0000001010000100111001
0000001010000100111010
0000001010000100111100
0000001010001000111001
0000001010001000111010
0000001010001000111100
0000010000000000100001
0000010000000000100010
0000010000000000100100
0000010000000001101001
0000010000000001101010
0000010000000001101100
0000010000000010101001
0000010000000010101010
0000010000000010101100
0000010000000100101001
0000010000000100101010
0000010000000100101100
0000010000001000101001
0000010000001000101010
0000010000001000101100
0000010000010000110001
0000010000010000110010
0000010000010000110100
0000010000010001111001
0000010000010001111010
0000010000010001111100
0000010000010010111001
0000010000010010111010
0000010000010010111100
0000010000010100111001
0000010000010100111010
0000010000010100111100
0000010000011000111001
0000010000011000111010
0000010000011000111100
0000010000100000110001
0000010000100000110010
0000010000100000110100
0000010000100001111001
0000010000100001111010
0000010000100001111100
0000010000100010111001
0000010000100010111010
0000010000100010111100
0000010000100100111001
0000010000100100111010
0000010000100100111100
0000010000101000111001
0000010000101000111010
0000010000101000111100
0000010001000000110001
0000010001000000110010
0000010001000000110100
0000010001000001111001
0000010001000001111010
0000010001000001111100
0000010001000010111001
0000010001000010111010
0000010001000010111100
0000010001000100111001
0000010001000100111010
0000010001000100111100
0000010001001000111001
0000010001001000111010
0000010001001000111100
0000010010000000110001
0000010010000000110010
0000010010000000110100
0000010010000001111001
0000010010000001111010
0000010010000001111100
0000010010000010111001
0000010010000010111010
0000010010000010111100
0000010010000100111001
0000010010000100111010
0000010010000100111100
0000010010001000111001
0000010010001000111010
0000010010001000111100
0000100000000000100001
0000100000000000100010
0000100000000000100100
0000100000000001101001
0000100000000001101010
0000100000000001101100
0000100000000010101001
0000100000000010101010
0000100000000010101100
0000100000000100101001
0000100000000100101010
0000100000000100101100
0000100000001000101001
0000100000001000101010
0000100000001000101100
0000100000010000110001
0000100000010000110010
0000100000010000110100
0000100000010001111001
0000100000010001111010
0000100000010001111100
0000100000010010111001
0000100000010010111010
0000100000010010111100
0000100000010100111001
0000100000010100111010
0000100000010100111100
0000100000011000111001
0000100000011000111010
0000100000011000111100
0000100000100000110001
0000100000100000110010
0000100000100000110100
0000100000100001111001
0000100000100001111010
0000100000100001111100
0000100000100010111001
0000100000100010111010
0000100000100010111100
0000100000100100111001
0000100000100100111010
0000100000100100111100
0000100000101000111001
0000100000101000111010
0000100000101000111100
0000100001000000110001
0000100001000000110010
0000100001000000110100
0000100001000001111001
0000100001000001111010
0000100001000001111100
0000100001000010111001
0000100001000010111010
0000100001000010111100
0000100001000100111001
0000100001000100111010
0000100001000100111100
0000100001001000111001
0000100001001000111010
0000100001001000111100
0000100010000000110001
0000100010000000110010
0000100010000000110100
0000100010000001111001
0000100010000001111010
0000100010000001111100
0000100010000010111001
0000100010000010111010
0000100010000010111100
0000100010000100111001
0000100010000100111010
0000100010000100111100
0000100010001000111001
0000100010001000111010
0000100010001000111100
0001000000010001011001
0001000100000001101010
0001000100010000110100
0001000100010001111001
0001000100010001111010
0001000100010001111100
0001000100010010111100
0001000100010100111100
0001000100011000111100
0001000100100001111010
0001000101000001111010
0001000110000001111010
0001001000010001111001
0001010000010001111001
0001100000010001111001
0010000000100010011001
0010000100100010111001
0010001000000010101010
0010001000010010111010
0010001000100000110100
0010001000100001111100
0010001000100010111001
0010001000100010111010
0010001000100010111100
0010001000100100111100
0010001000101000111100
0010001001000010111010
0010001010000010111010
0010010000100010111001
0010100000100010111001
0100000001000100011001
0100000101000100111001
0100001001000100111001
0100010000000100101010
0100010000010100111010
0100010000100100111010
0100010001000000110100
0100010001000001111100
0100010001000010111100
0100010001000100111001
0100010001000100111010
0100010001000100111100
0100010001001000111100
0100010010000100111010
0100100001000100111001
1000000010001000011001
1000000110001000111001
1000001010001000111001
1000010010001000111001
1000100000001000101010
1000100000011000111010
1000100000101000111010
1000100001001000111010
1000100010000000110100
1000100010000001111100
1000100010000010111100
1000100010000100111100
1000100010001000111001
1000100010001000111010
1000100010001000111100

[QRM NOTE]: Time elapsed since start: 1.671 seconds

[QRM NOTE]: Time elapsed since last: 1.517 seconds

[QRM NOTE]: Peak memory: 1649547 bytes


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: node=3,value=4]

============================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 5.597 seconds

[QRM NOTE]: Time elapsed since last: 3.926 seconds

[QRM NOTE]: Peak memory: 4926684 bytes


************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy -s node=4,value=3 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: node=4,value=3]

============================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 9.815 seconds

[QRM NOTE]: Time elapsed since last: 9.815 seconds

[QRM NOTE]: Peak memory: 11247546 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy -s node=3,value=4 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


============================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: node=3,value=4]

============================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 4.046 seconds

[QRM NOTE]: Time elapsed since last: 4.046 seconds

[QRM NOTE]: Peak memory: 4437072 bytes


************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy -s node=5,value=3 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_forall.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: node=5,value=3]

================================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 33

[FW NOTE]: number of interpreted atoms (e.g. member,le): 50

[FW NOTE]: symmetric group order: 720

[QRM NOTE]: Time elapsed since start: 0.340 seconds

[QRM NOTE]: Time elapsed since last: 0.340 seconds

[QRM NOTE]: Peak memory: 731456 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

