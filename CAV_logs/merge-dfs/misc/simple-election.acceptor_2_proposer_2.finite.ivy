#lang ivy1.7

# Source: I4

################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type acceptor = {acceptor0, acceptor1}
type quorum = {quorum__acceptor0_acceptor1}
type proposer = {proposer0, proposer1}

# rounds are totally ordered with a least element called zero
relation member(X: acceptor, Y: quorum)
axiom forall Q1, Q2. exists A:acceptor. member(A, Q1) & member(A, Q2)

relation start(P: proposer)
relation promise(A: acceptor, P: proposer)

relation leader(P: proposer)
################################################################################
#
# Protocol description
#
################################################################################

relation didNotPromise(A:acceptor) = forall P. ~promise(A, P)
relation chosenAt(Q:quorum, P: proposer) = forall A. member(A, Q) -> promise(A, P)

after init {
    start(P) := false;
    promise(A, P) := false;
    leader(P) := false;
}

action send_1a(p: proposer) = {
    start(p) := true;
}

action send_1b(a: acceptor, p: proposer) = {
    require start(p);
    require didNotPromise(a);
    promise(a, p) := true;
}

action decide(p: proposer, q: quorum) = {
    require chosenAt(q, p);
    leader(p) := true;
}

export send_1a
export send_1b
export decide

# the safety property
#invariant leader(P1) & leader(P2) -> P1 = P2

##invariant [manual_1] promise(A, P1) & promise(A, P2) -> P1 = P2
##invariant [manual_2] leader(P) -> ( exists Q. forall A. (member(A,Q) -> promise(A, P)) )

invariant [def_didNotPromise] forall A. didNotPromise(A) = (forall P. ~promise(A,P)) # definition, qcost: 4
invariant [def_chosenAt] forall P,Q. chosenAt(Q,P) = (forall A. member(A,Q) -> promise(A,P)) # definition, qcost: 6
invariant [invar_1] forall PROPOSER0,QUORUM0. chosenAt(QUORUM0,PROPOSER0) | ~leader(PROPOSER0) # qcost: 4
invariant [invar_7] forall ACCEPTOR0,PROPOSER0. didNotPromise(ACCEPTOR0) | start(PROPOSER0) # qcost: 4

### For QRM DFS reachability ###

## Dependent relation axioms ##
axiom member(acceptor0,quorum__acceptor0_acceptor1)
axiom member(acceptor1,quorum__acceptor0_acceptor1)

## Access actions ##
action get_chosenAt(q0: quorum, p1: proposer) returns(qrm_result: bool) = {
    qrm_result := chosenAt(q0, p1)
}
export get_chosenAt

action get_bool_chosenAt(q0: quorum, p1: proposer, result: bool) returns(qrm_result: bool) = {
    qrm_result := (chosenAt(q0, p1) = result)
}
export get_bool_chosenAt

action get_leader(p0: proposer) returns(qrm_result: bool) = {
    qrm_result := leader(p0)
}
export get_leader

action get_bool_leader(p0: proposer, result: bool) returns(qrm_result: bool) = {
    qrm_result := (leader(p0) = result)
}
export get_bool_leader

action get_start(p0: proposer) returns(qrm_result: bool) = {
    qrm_result := start(p0)
}
export get_start

action get_bool_start(p0: proposer, result: bool) returns(qrm_result: bool) = {
    qrm_result := (start(p0) = result)
}
export get_bool_start

action get_member(a0: acceptor, q1: quorum) returns(qrm_result: bool) = {
    qrm_result := member(a0, q1)
}
export get_member

action get_bool_member(a0: acceptor, q1: quorum, result: bool) returns(qrm_result: bool) = {
    qrm_result := (member(a0, q1) = result)
}
export get_bool_member

action get_didNotPromise(a0: acceptor) returns(qrm_result: bool) = {
    qrm_result := didNotPromise(a0)
}
export get_didNotPromise

action get_bool_didNotPromise(a0: acceptor, result: bool) returns(qrm_result: bool) = {
    qrm_result := (didNotPromise(a0) = result)
}
export get_bool_didNotPromise

action get_promise(a0: acceptor, p1: proposer) returns(qrm_result: bool) = {
    qrm_result := promise(a0, p1)
}
export get_promise

action get_bool_promise(a0: acceptor, p1: proposer, result: bool) returns(qrm_result: bool) = {
    qrm_result := (promise(a0, p1) = result)
}
export get_bool_promise

