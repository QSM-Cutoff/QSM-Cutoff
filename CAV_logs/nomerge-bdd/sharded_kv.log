
**********************************************************

	[QRM]: ivybench/sym/ivy/sharded_kv.ivy

**********************************************************


**********************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

**********************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=1,key=1,value=1 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 3

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 1

[QRM NOTE]: Time elapsed since start: 0.035 seconds

[QRM NOTE]: Time elapsed since last: 0.035 seconds

[QRM NOTE]: Peak memory: 27599 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 2


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=1]

=======================================================================================================

sort: key=['key0']
sort: value=['value0']
sort: node=['node0']
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']

00-
1-0

[QRM NOTE]: Time elapsed since start: 0.077 seconds

[QRM NOTE]: Time elapsed since last: 0.042 seconds

[QRM NOTE]: Peak memory: 1089743 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.080 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 40569 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

======================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1-1
0     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : -11
1     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : 01-
2     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 3

[PRIME NOTE]: number of orbits before merging: 3

[PRIME NOTE]: number of primes: 3

[QRM NOTE]: Time elapsed since start: 0.090 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 1097273 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2]
 solution : []


Before reduction : 
 pending  : [0, 1, 2]
 solution : []

Essensial at level 0 : {0, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1)]

Covered at level 0 : {1}

After reduction : 
 pending  : []
 solution : [0, 2]


Before reduction : 
 pending  : []
 solution : [0, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 2]

[QRM NOTE]: Time elapsed since start: 0.091 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 49244 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1-1
0     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0',)): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0',)): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0',)): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0',)): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0; node$0$transfer_msg$0': [node$0$owner$0$0; node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0; node$0$transfer_msg$0': node$0$owner$0$0; node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)', 'transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,KEY0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE0,KEY0,VALUE0)


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : 01-
2     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node0,key0)', 'table(node0,key0,value0)']

sign_func_name2args: {'1$owner': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0',)): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0',)): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node0,key0)', 'table(node0,key0,value0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0',)): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0',)): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)', '~owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,KEY0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1-1
0     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0,KEY0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE0,KEY0,VALUE0)
qcost : 5




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : 01-
2     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0,KEY0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)
qcost : 5



[QRM NOTE]: Time elapsed since start: 0.173 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 1783690 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

=============================================================================================


New level: 1
 pending : []
 solution : [0, 2]


Before reduction : 
 pending  : []
 solution : [0, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 2]


Solution : [0, 2] has cost 10.


Before backtrack at level 1
 pending : []
 solution : [0, 2]

After backtrack at level 1
 pending : []
 solution : [0, 2]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 10

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 2]

[MIN NOTE]: solution length: 2

invariant [invar_0] forall NODE0,VALUE0,KEY0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE0,KEY0,VALUE0) # qcost: 5

invariant [invar_2] forall NODE0,VALUE0,KEY0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0) # qcost: 5

[MIN NOTE]: number of total invariants: 2

[MIN NOTE]: total qCost: 10




[QRM NOTE]: Time elapsed since start: 0.236 seconds

[QRM NOTE]: Time elapsed since last: 0.063 seconds

[QRM NOTE]: Peak memory: 1769786 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

*************************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=2,key=1,value=1 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=2,key=1,value=1]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.046 seconds

[QRM NOTE]: Time elapsed since last: 0.046 seconds

[QRM NOTE]: Peak memory: 63579 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 4


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=1]

=======================================================================================================

sort: key=['key0']
sort: value=['value0']
sort: node=['node0', 'node1']
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']

00000-
000010
010-00
10-000

[QRM NOTE]: Time elapsed since start: 0.187 seconds

[QRM NOTE]: Time elapsed since last: 0.140 seconds

[QRM NOTE]: Peak memory: 1147611 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=2,key=1,value=1]

=======================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.203 seconds

[QRM NOTE]: Time elapsed since last: 0.017 seconds

[QRM NOTE]: Peak memory: 107814 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=1,key=2,value=1 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=2,value=1]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.049 seconds

[QRM NOTE]: Time elapsed since last: 0.049 seconds

[QRM NOTE]: Peak memory: 51498 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 4


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=2,value=1]

=======================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0']
sort: node=['node0']
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'table(node0,key0,value0)', 'table(node0,key1,value0)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key1,value0)']

0000--
010--0
10-00-
11--00

[QRM NOTE]: Time elapsed since start: 0.168 seconds

[QRM NOTE]: Time elapsed since last: 0.119 seconds

[QRM NOTE]: Peak memory: 1132362 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=2,value=1]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.196 seconds

[QRM NOTE]: Time elapsed since last: 0.028 seconds

[QRM NOTE]: Peak memory: 89704 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=1,key=1,value=2 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=1,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 5

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.037 seconds

[QRM NOTE]: Time elapsed since last: 0.037 seconds

[QRM NOTE]: Peak memory: 47561 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 4


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=1,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0']
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']

0000-
00010
10-00
11000

[QRM NOTE]: Time elapsed since start: 0.120 seconds

[QRM NOTE]: Time elapsed since last: 0.083 seconds

[QRM NOTE]: Peak memory: 1123330 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=1,value=2]

=======================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.137 seconds

[QRM NOTE]: Time elapsed since last: 0.017 seconds

[QRM NOTE]: Peak memory: 81654 bytes

next size: node=2,key=1,value=2


**********************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

**********************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=2,key=1,value=2 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 4

[QRM NOTE]: Time elapsed since start: 0.109 seconds

[QRM NOTE]: Time elapsed since last: 0.109 seconds

[QRM NOTE]: Peak memory: 115261 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 8


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1']
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']

000000000-
0000000010
0000000100
0000001000
01000-0000
0100100000
100-000000
1010000000

[QRM NOTE]: Time elapsed since start: 0.534 seconds

[QRM NOTE]: Time elapsed since last: 0.425 seconds

[QRM NOTE]: Peak memory: 1241051 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.534 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 191820 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

======================================================================================================


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 1
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 4
num_suborbits: 1
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 4
num_suborbits: 1
8 (*) : -----1---1
8     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value1)']
9     : ---1---1--
9     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value1)']
10     : ----1---1-
10     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value0)']
11     : --1---1---
11     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 4
num_suborbits: 1
12 (*) : --1------1
12     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
13     : ----1--1--
13     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value1)']
14     : ---1----1-
14     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
15     : -----11---
15     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 4
num_suborbits: 1
16 (*) : ---1-----1
16     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
17     : -----1-1--
17     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value1)']
18     : --1-----1-
18     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
19     : ----1-1---
19     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 4
num_suborbits: 1
20 (*) : ----1----1
20     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
21     : --1----1--
21     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
22     : -----1--1-
22     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value0)']
23     : ---1--1---
23     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 4
num_suborbits: 1
35 (*) : 1----1----
35     : ['owner(node0,key0)', 'table(node1,key0,value1)']
36     : -1-1------
36     : ['owner(node1,key0)', 'table(node0,key0,value1)']
37     : 1---1-----
37     : ['owner(node0,key0)', 'table(node1,key0,value0)']
38     : -11-------
38     : ['owner(node1,key0)', 'table(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 2
num_suborbits: 1
39 (*) : --1--1----
39     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
40     : ---11-----
40     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 2
num_suborbits: 1
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 2
num_suborbits: 1
43 (*) : ---1-1----
43     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
44     : --1-1-----
44     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 15

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 45

[QRM NOTE]: Time elapsed since start: 0.552 seconds

[QRM NOTE]: Time elapsed since last: 0.017 seconds

[QRM NOTE]: Peak memory: 1314276 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
 solution : []

Essensial at level 0 : {0, 1, 6, 7, 8, 9, 10, 13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0)]

Covered at level 0 : {2, 3, 4, 5, 11, 12, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


Before reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

[QRM NOTE]: Time elapsed since start: 0.554 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 264813 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 1
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0], 'node$0$transfer_msg$0': [node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0': node$0$owner$0$0, 'node$0$transfer_msg$0': node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE1,KEY0,VALUE0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE0,KEY0. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) | NODE0 = NODE1


=== Prime Orbit 1 =====================
size : 4
num_suborbits: 1
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0; node$0$transfer_msg$0': [node$0$owner$0$0; node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0; node$0$transfer_msg$0': node$0$owner$0$0; node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)', 'transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,KEY0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE0,KEY0,VALUE0)


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE1,KEY0,VALUE1)', 'transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,NODE1,VALUE1,NODE0,VALUE0. ~transfer_msg(NODE1,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2; value$0$transfer_msg$2': [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

	identical_single_classes: {'value$0$transfer_msg$2; value$0$transfer_msg$2': value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,KEY0. (exists NODE0. ~transfer_msg(NODE0,KEY0,VALUE0))


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0; node$0$transfer_msg$0': [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1]}

	identical_single_classes: {'node$0$transfer_msg$0; node$0$transfer_msg$0': node$0$transfer_msg$0$0; node$0$transfer_msg$0$1}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,KEY0. (exists VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0))


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'owner(node1,key0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',)))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$owner$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$1]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$owner$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$1': Const('key0', EnumeratedSort('key', ('key0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

part_sig: ('key$0$owner$1$0; key$0$owner$1$1', 'node$0$owner$0$0 | node$0$owner$0$1')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'owner(node1,key0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)))}

sign_func_name2count:  {'0$owner': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$owner$1': [key$0$owner$1$0; key$0$owner$1$1]}

	identical_single_classes: {'key$0$owner$1; key$0$owner$1': key$0$owner$1$0; key$0$owner$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists

quantifier mode: key: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0. (exists NODE0. ~owner(NODE0,KEY0))


=== Prime Orbit 10 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node1,key0)', 'table(node1,key0,value1)']

sign_func_name2args: {'1$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node1,key0)', 'table(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~owner(NODE0,KEY0)', 'table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,KEY0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)


=== Prime Orbit 13 =====================
size : 2
num_suborbits: 1
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node0,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$0, node$0$table$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- SigGenerator ----------

terms:  ['table(node0,key0,value0)', 'table(node0,key0,value1)']

func_name2symbol:  {'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'table': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$table': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

	sort: node

	identical_classes: {'node$0$table$0; node$0$table$0': [node$0$table$0$0; node$0$table$0$1]}

	identical_single_classes: {'node$0$table$0; node$0$table$0': node$0$table$0$0; node$0$table$0$1}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$0$table$1': [key$0$table$1$0; key$0$table$1$1]}

	identical_single_classes: {'key$0$table$1; key$0$table$1': key$0$table$1$0; key$0$table$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,KEY0. (exists VALUE0. ~table(NODE0,KEY0,VALUE0))


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 1
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall NODE1,NODE0,VALUE0,KEY0. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 1 =====================
size : 4
num_suborbits: 1
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0,KEY0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE0,KEY0,VALUE0)
qcost : 5




=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall KEY0,NODE1,VALUE1,NODE0,VALUE0. ~transfer_msg(NODE1,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
num_forall :   2
num_exists :   1
num_literals : 1
quantified form : forall VALUE0,KEY0. (exists NODE0. ~transfer_msg(NODE0,KEY0,VALUE0))
qcost : 4




=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   2
num_exists :   1
num_literals : 1
quantified form : forall NODE0,KEY0. (exists VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0))
qcost : 4




=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall KEY0. (exists NODE0. ~owner(NODE0,KEY0))
qcost : 3




=== Prime Orbit 10 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0,KEY0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)
qcost : 5




=== Prime Orbit 13 =====================
size : 2
num_suborbits: 1
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
num_forall :   2
num_exists :   1
num_literals : 1
quantified form : forall NODE0,KEY0. (exists VALUE0. ~table(NODE0,KEY0,VALUE0))
qcost : 4



[QRM NOTE]: Time elapsed since start: 0.651 seconds

[QRM NOTE]: Time elapsed since last: 0.097 seconds

[QRM NOTE]: Peak memory: 1999498 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

=============================================================================================


New level: 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


Before reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


Solution : [0, 1, 6, 7, 8, 9, 10, 13] has cost 41.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

After backtrack at level 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 41

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 6, 7, 8, 9, 10, 13]

[MIN NOTE]: solution length: 8

invariant [invar_0] forall NODE1,NODE0,VALUE0,KEY0. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) | NODE0 = NODE1 # qcost: 7

invariant [invar_1] forall NODE0,VALUE0,KEY0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE0,KEY0,VALUE0) # qcost: 5

invariant [invar_6] forall KEY0,NODE1,VALUE1,NODE0,VALUE0. ~transfer_msg(NODE1,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1) # qcost: 9

invariant [invar_7] forall VALUE0,KEY0. (exists NODE0. ~transfer_msg(NODE0,KEY0,VALUE0)) # qcost: 4

invariant [invar_8] forall NODE0,KEY0. (exists VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0)) # qcost: 4

invariant [invar_9] forall KEY0. (exists NODE0. ~owner(NODE0,KEY0)) # qcost: 3

invariant [invar_10] forall NODE0,VALUE0,KEY0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0) # qcost: 5

invariant [invar_13] forall NODE0,KEY0. (exists VALUE0. ~table(NODE0,KEY0,VALUE0)) # qcost: 4

[MIN NOTE]: number of total invariants: 8

[MIN NOTE]: total qCost: 41




[QRM NOTE]: Time elapsed since start: 0.722 seconds

[QRM NOTE]: Time elapsed since last: 0.071 seconds

[QRM NOTE]: Peak memory: 1982259 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

*************************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=3,key=1,value=2 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=3,key=1,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 0.222 seconds

[QRM NOTE]: Time elapsed since last: 0.222 seconds

[QRM NOTE]: Peak memory: 370697 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 12


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=2]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1', 'node2']
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']

00000000000000-
000000000000010
000000000000100
000000000001000
000000000010000
000000000100000
00100000-000000
001000010000000
010000-00000000
010001000000000
1000-0000000000
100100000000000

[QRM NOTE]: Time elapsed since start: 1.299 seconds

[QRM NOTE]: Time elapsed since last: 1.077 seconds

[QRM NOTE]: Peak memory: 1565178 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=3,key=1,value=2]

=======================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 1.469 seconds

[QRM NOTE]: Time elapsed since last: 0.170 seconds

[QRM NOTE]: Peak memory: 642591 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=2,key=2,value=2 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=2,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 20

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 8

[QRM NOTE]: Time elapsed since start: 0.281 seconds

[QRM NOTE]: Time elapsed since last: 0.281 seconds

[QRM NOTE]: Peak memory: 478147 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 64


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=2,value=2]

=======================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1']
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'owner(node1,key0)', 'owner(node1,key1)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key1,value0)', 'table(node0,key1,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key1,value0)', 'table(node1,key1,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key1,value0)', 'transfer_msg(node0,key1,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key1,value0)', 'transfer_msg(node1,key1,value1)']

00000000000000000-0-
00000000000000000-10
0000000000000000100-
00000000000000001010
00000000000000010-00
00000000000000011000
00000000000000100-00
00000000000000101000
0000000000000100000-
00000000000001000010
00000000000001010000
00000000000001100000
0000000000001000000-
00000000000010000010
00000000000010010000
00000000000010100000
00010000000-00000-00
00010000000-00001000
00010000000-01000000
00010000000-10000000
00010000001000000-00
00010000001000001000
00010000001001000000
00010000001010000000
001000000-000000000-
001000000-0000000010
001000000-0000010000
001000000-0000100000
0010000010000000000-
00100000100000000010
00100000100000010000
00100000100000100000
001100000-0-00000000
001100000-1000000000
00110000100-00000000
00110000101000000000
0100000-000000000-00
0100000-000000001000
0100000-000001000000
0100000-000010000000
01000010000000000-00
01000010000000001000
01000010000001000000
01000010000010000000
0110000-0-0000000000
0110000-100000000000
011000100-0000000000
01100010100000000000
10000-0000000000000-
10000-00000000000010
10000-00000000010000
10000-00000000100000
1000100000000000000-
10001000000000000010
10001000000000010000
10001000000000100000
10010-00000-00000000
10010-00001000000000
10011000000-00000000
10011000001000000000
11000-0-000000000000
11000-10000000000000
1100100-000000000000
11001010000000000000

[QRM NOTE]: Time elapsed since start: 2.192 seconds

[QRM NOTE]: Time elapsed since last: 1.911 seconds

[QRM NOTE]: Peak memory: 1730985 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=2,value=2]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 2.846 seconds

[QRM NOTE]: Time elapsed since last: 0.654 seconds

[QRM NOTE]: Peak memory: 1391616 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=2,key=1,value=3 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=1,value=3]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 14

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 0.186 seconds

[QRM NOTE]: Time elapsed since last: 0.186 seconds

[QRM NOTE]: Peak memory: 286551 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 12


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=2,key=1,value=3]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1']
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']

0000000000000-
00000000000010
00000000000100
00000000001000
00000000010000
00000000100000
0100000-000000
01000010000000
01000100000000
1000-000000000
10010000000000
10100000000000

[QRM NOTE]: Time elapsed since start: 1.041 seconds

[QRM NOTE]: Time elapsed since last: 0.855 seconds

[QRM NOTE]: Peak memory: 1458871 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=1,value=3]

=======================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 1.192 seconds

[QRM NOTE]: Time elapsed since last: 0.151 seconds

[QRM NOTE]: Peak memory: 525671 bytes

next size: node=3,key=1,value=3


**********************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

**********************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=3,key=1,value=3 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 21

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 0.407 seconds

[QRM NOTE]: Time elapsed since last: 0.407 seconds

[QRM NOTE]: Peak memory: 632059 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 18


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=3]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1', 'node2']
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']

00000000000000000000-
000000000000000000010
000000000000000000100
000000000000000001000
000000000000000010000
000000000000000100000
000000000000001000000
000000000000010000000
000000000000100000000
00100000000-000000000
001000000010000000000
001000000100000000000
01000000-000000000000
010000010000000000000
010000100000000000000
10000-000000000000000
100010000000000000000
100100000000000000000

[QRM NOTE]: Time elapsed since start: 2.675 seconds

[QRM NOTE]: Time elapsed since last: 2.268 seconds

[QRM NOTE]: Peak memory: 1932533 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 2.678 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 885818 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

======================================================================================================


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 1
0 (*) : -1------------------1
0     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']
1     : --1--------------1---
1     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value2)']
2     : 1-------------------1
2     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value2)']
3     : --1-----------1------
3     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value2)']
4     : 1----------------1---
4     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value2)']
5     : -1------------1------
5     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value2)']
6     : -1-----------------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
7     : --1-------------1----
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
8     : 1------------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
9     : --1----------1-------
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
10     : 1---------------1----
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
11     : -1-----------1-------
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
12     : -1----------------1--
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
13     : --1------------1-----
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
14     : 1-----------------1--
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
15     : --1---------1--------
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
16     : 1--------------1-----
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
17     : -1----------1--------
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
18 (*) : --1-----------------1
18     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']
19     : -1---------------1---
19     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value2)']
20     : 1-------------1------
20     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value2)']
21     : --1----------------1-
21     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
22     : -1--------------1----
22     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
23     : 1------------1-------
23     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
24     : --1---------------1--
24     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
25     : -1-------------1-----
25     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
26     : 1-----------1--------
26     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
27 (*) : -----------1--------1
27     : ['table(node2,key0,value2)', 'transfer_msg(node2,key0,value2)']
28     : --------1--------1---
28     : ['table(node1,key0,value2)', 'transfer_msg(node1,key0,value2)']
29     : -----1--------1------
29     : ['table(node0,key0,value2)', 'transfer_msg(node0,key0,value2)']
30     : ----------1--------1-
30     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value1)']
31     : -------1--------1----
31     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value1)']
32     : ----1--------1-------
32     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value1)']
33     : ---------1--------1--
33     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value0)']
34     : ------1--------1-----
34     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value0)']
35     : ---1--------1--------
35     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 36
num_suborbits: 1
36 (*) : ---1----------------1
36     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
37     : ---1-------------1---
37     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
38     : ------1-------------1
38     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
39     : ------1-------1------
39     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value2)']
40     : ---------1-------1---
40     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value2)']
41     : ---------1----1------
41     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value2)']
42     : ---1---------------1-
42     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
43     : ---1------------1----
43     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
44     : ------1------------1-
44     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
45     : ------1------1-------
45     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value1)']
46     : ---------1------1----
46     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value1)']
47     : ---------1---1-------
47     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value1)']
48     : ----1---------------1
48     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
49     : ----1------------1---
49     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
50     : -------1------------1
50     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
51     : -------1------1------
51     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value2)']
52     : ----------1------1---
52     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value2)']
53     : ----------1---1------
53     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value2)']
54     : ----1-------------1--
54     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
55     : ----1----------1-----
55     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
56     : -------1----------1--
56     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
57     : -------1----1--------
57     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)']
58     : ----------1----1-----
58     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value0)']
59     : ----------1-1--------
59     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value0)']
60     : -----1-------------1-
60     : ['table(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
61     : -----1----------1----
61     : ['table(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
62     : --------1----------1-
62     : ['table(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
63     : --------1----1-------
63     : ['table(node1,key0,value2)', 'transfer_msg(node0,key0,value1)']
64     : -----------1----1----
64     : ['table(node2,key0,value2)', 'transfer_msg(node1,key0,value1)']
65     : -----------1-1-------
65     : ['table(node2,key0,value2)', 'transfer_msg(node0,key0,value1)']
66     : -----1------------1--
66     : ['table(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
67     : -----1---------1-----
67     : ['table(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
68     : --------1---------1--
68     : ['table(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
69     : --------1---1--------
69     : ['table(node1,key0,value2)', 'transfer_msg(node0,key0,value0)']
70     : -----------1---1-----
70     : ['table(node2,key0,value2)', 'transfer_msg(node1,key0,value0)']
71     : -----------11--------
71     : ['table(node2,key0,value2)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : -----1--------------1
72     : ['table(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
73     : -----1-----------1---
73     : ['table(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
74     : --------1-----------1
74     : ['table(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
75     : --------1-----1------
75     : ['table(node1,key0,value2)', 'transfer_msg(node0,key0,value2)']
76     : -----------1-----1---
76     : ['table(node2,key0,value2)', 'transfer_msg(node1,key0,value2)']
77     : -----------1--1------
77     : ['table(node2,key0,value2)', 'transfer_msg(node0,key0,value2)']
78     : ----1--------------1-
78     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
79     : ----1-----------1----
79     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
80     : -------1-----------1-
80     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
81     : -------1-----1-------
81     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value1)']
82     : ----------1-----1----
82     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value1)']
83     : ----------1--1-------
83     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value1)']
84     : ---1--------------1--
84     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
85     : ---1-----------1-----
85     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
86     : ------1-----------1--
86     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
87     : ------1-----1--------
87     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)']
88     : ---------1-----1-----
88     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value0)']
89     : ---------1--1--------
89     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
90 (*) : ---------1----------1
90     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
91     : ------1----------1---
91     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
92     : ---1----------1------
92     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
93     : ---------1---------1-
93     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
94     : ------1---------1----
94     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
95     : ---1---------1-------
95     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
96     : ----------1---------1
96     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
97     : -------1---------1---
97     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
98     : ----1---------1------
98     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
99     : ----------1-------1--
99     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value0)']
100     : -------1-------1-----
100     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value0)']
101     : ----1-------1--------
101     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)']
102     : -----------1-------1-
102     : ['table(node2,key0,value2)', 'transfer_msg(node2,key0,value1)']
103     : --------1-------1----
103     : ['table(node1,key0,value2)', 'transfer_msg(node1,key0,value1)']
104     : -----1-------1-------
104     : ['table(node0,key0,value2)', 'transfer_msg(node0,key0,value1)']
105     : -----------1------1--
105     : ['table(node2,key0,value2)', 'transfer_msg(node2,key0,value0)']
106     : --------1------1-----
106     : ['table(node1,key0,value2)', 'transfer_msg(node1,key0,value0)']
107     : -----1------1--------
107     : ['table(node0,key0,value2)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
108 (*) : ------------1-------1
108     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
109     : ------------1----1---
109     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
110     : ---------------1----1
110     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
111     : --------------11-----
111     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
112     : -----------------11--
112     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
113     : --------------1---1--
113     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
114     : ------------1------1-
114     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
115     : ------------1---1----
115     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
116     : ---------------1---1-
116     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
117     : -------------1-1-----
117     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
118     : ----------------1-1--
118     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
119     : -------------1----1--
119     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
120     : -------------1------1
120     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
121     : -------------1---1---
121     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
122     : ----------------1---1
122     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
123     : --------------1-1----
123     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
124     : -----------------1-1-
124     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
125     : --------------1----1-
125     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 9
num_suborbits: 1
126 (*) : --------------1-----1
126     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
127     : --------------1--1---
127     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
128     : -----------------1--1
128     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
129     : -------------1-----1-
129     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
130     : -------------1--1----
130     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
131     : ----------------1--1-
131     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
132     : ------------1-----1--
132     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
133     : ------------1--1-----
133     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
134     : ---------------1--1--
134     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
135 (*) : ------------------1-1
135     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
136     : ---------------1-1---
136     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
137     : ------------1-1------
137     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
138     : ------------------11-
138     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
139     : ---------------11----
139     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
140     : ------------11-------
140     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
141     : -------------------11
141     : ['transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
142     : ----------------11---
142     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
143     : -------------11------
143     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
144 (*) : 11-------------------
144     : ['owner(node0,key0)', 'owner(node1,key0)']
145     : 1-1------------------
145     : ['owner(node0,key0)', 'owner(node2,key0)']
146     : -11------------------
146     : ['owner(node1,key0)', 'owner(node2,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
147 (*) : -1---------1---------
147     : ['owner(node1,key0)', 'table(node2,key0,value2)']
148     : --1-----1------------
148     : ['owner(node2,key0)', 'table(node1,key0,value2)']
149     : 1----------1---------
149     : ['owner(node0,key0)', 'table(node2,key0,value2)']
150     : --1--1---------------
150     : ['owner(node2,key0)', 'table(node0,key0,value2)']
151     : 1-------1------------
151     : ['owner(node0,key0)', 'table(node1,key0,value2)']
152     : -1---1---------------
152     : ['owner(node1,key0)', 'table(node0,key0,value2)']
153     : -1--------1----------
153     : ['owner(node1,key0)', 'table(node2,key0,value1)']
154     : --1----1-------------
154     : ['owner(node2,key0)', 'table(node1,key0,value1)']
155     : 1---------1----------
155     : ['owner(node0,key0)', 'table(node2,key0,value1)']
156     : --1-1----------------
156     : ['owner(node2,key0)', 'table(node0,key0,value1)']
157     : 1------1-------------
157     : ['owner(node0,key0)', 'table(node1,key0,value1)']
158     : -1--1----------------
158     : ['owner(node1,key0)', 'table(node0,key0,value1)']
159     : -1-------1-----------
159     : ['owner(node1,key0)', 'table(node2,key0,value0)']
160     : --1---1--------------
160     : ['owner(node2,key0)', 'table(node1,key0,value0)']
161     : 1--------1-----------
161     : ['owner(node0,key0)', 'table(node2,key0,value0)']
162     : --11-----------------
162     : ['owner(node2,key0)', 'table(node0,key0,value0)']
163     : 1-----1--------------
163     : ['owner(node0,key0)', 'table(node1,key0,value0)']
164     : -1-1-----------------
164     : ['owner(node1,key0)', 'table(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
165 (*) : --0--------1---------
165     : ['table(node2,key0,value2)', '~owner(node2,key0)']
166     : -0------1------------
166     : ['table(node1,key0,value2)', '~owner(node1,key0)']
167     : 0----1---------------
167     : ['table(node0,key0,value2)', '~owner(node0,key0)']
168     : --0-------1----------
168     : ['table(node2,key0,value1)', '~owner(node2,key0)']
169     : -0-----1-------------
169     : ['table(node1,key0,value1)', '~owner(node1,key0)']
170     : 0---1----------------
170     : ['table(node0,key0,value1)', '~owner(node0,key0)']
171     : --0------1-----------
171     : ['table(node2,key0,value0)', '~owner(node2,key0)']
172     : -0----1--------------
172     : ['table(node1,key0,value0)', '~owner(node1,key0)']
173     : 0--1-----------------
173     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
174 (*) : -----1-----1---------
174     : ['table(node0,key0,value2)', 'table(node2,key0,value2)']
175     : -----1--1------------
175     : ['table(node0,key0,value2)', 'table(node1,key0,value2)']
176     : --------1--1---------
176     : ['table(node1,key0,value2)', 'table(node2,key0,value2)']
177     : ----1-----1----------
177     : ['table(node0,key0,value1)', 'table(node2,key0,value1)']
178     : ----1--1-------------
178     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
179     : -------1--1----------
179     : ['table(node1,key0,value1)', 'table(node2,key0,value1)']
180     : ---1-----1-----------
180     : ['table(node0,key0,value0)', 'table(node2,key0,value0)']
181     : ---1--1--------------
181     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
182     : ------1--1-----------
182     : ['table(node1,key0,value0)', 'table(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
183 (*) : ---1-1---------------
183     : ['table(node0,key0,value0)', 'table(node0,key0,value2)']
184     : ------1-1------------
184     : ['table(node1,key0,value0)', 'table(node1,key0,value2)']
185     : ---------1-1---------
185     : ['table(node2,key0,value0)', 'table(node2,key0,value2)']
186     : ---11----------------
186     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
187     : ------11-------------
187     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
188     : ---------11----------
188     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
189     : ----11---------------
189     : ['table(node0,key0,value1)', 'table(node0,key0,value2)']
190     : -------11------------
190     : ['table(node1,key0,value1)', 'table(node1,key0,value2)']
191     : ----------11---------
191     : ['table(node2,key0,value1)', 'table(node2,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 18
num_suborbits: 1
192 (*) : ---1-------1---------
192     : ['table(node0,key0,value0)', 'table(node2,key0,value2)']
193     : ---1----1------------
193     : ['table(node0,key0,value0)', 'table(node1,key0,value2)']
194     : ------1----1---------
194     : ['table(node1,key0,value0)', 'table(node2,key0,value2)']
195     : -----11--------------
195     : ['table(node0,key0,value2)', 'table(node1,key0,value0)']
196     : --------11-----------
196     : ['table(node1,key0,value2)', 'table(node2,key0,value0)']
197     : -----1---1-----------
197     : ['table(node0,key0,value2)', 'table(node2,key0,value0)']
198     : ---1------1----------
198     : ['table(node0,key0,value0)', 'table(node2,key0,value1)']
199     : ---1---1-------------
199     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
200     : ------1---1----------
200     : ['table(node1,key0,value0)', 'table(node2,key0,value1)']
201     : ----1-1--------------
201     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
202     : -------1-1-----------
202     : ['table(node1,key0,value1)', 'table(node2,key0,value0)']
203     : ----1----1-----------
203     : ['table(node0,key0,value1)', 'table(node2,key0,value0)']
204     : ----1------1---------
204     : ['table(node0,key0,value1)', 'table(node2,key0,value2)']
205     : ----1---1------------
205     : ['table(node0,key0,value1)', 'table(node1,key0,value2)']
206     : -------1---1---------
206     : ['table(node1,key0,value1)', 'table(node2,key0,value2)']
207     : -----1-1-------------
207     : ['table(node0,key0,value2)', 'table(node1,key0,value1)']
208     : --------1-1----------
208     : ['table(node1,key0,value2)', 'table(node2,key0,value1)']
209     : -----1----1----------
209     : ['table(node0,key0,value2)', 'table(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 15

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 210

[QRM NOTE]: Time elapsed since start: 2.741 seconds

[QRM NOTE]: Time elapsed since last: 0.063 seconds

[QRM NOTE]: Peak memory: 2218415 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
 solution : []

Essensial at level 0 : {0, 1, 6, 7, 8, 9, 11, 13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0)]

Covered at level 0 : {2, 3, 4, 5, 10, 12, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]

[QRM NOTE]: Time elapsed since start: 2.745 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 1162319 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 1
0 (*) : -1------------------1
0     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']
1     : --1--------------1---
1     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value2)']
2     : 1-------------------1
2     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value2)']
3     : --1-----------1------
3     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value2)']
4     : 1----------------1---
4     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value2)']
5     : -1------------1------
5     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value2)']
6     : -1-----------------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
7     : --1-------------1----
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
8     : 1------------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
9     : --1----------1-------
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
10     : 1---------------1----
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
11     : -1-----------1-------
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
12     : -1----------------1--
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
13     : --1------------1-----
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
14     : 1-----------------1--
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
15     : --1---------1--------
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
16     : 1--------------1-----
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
17     : -1----------1--------
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0], 'node$0$transfer_msg$0': [node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0': node$0$owner$0$0, 'node$0$transfer_msg$0': node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE1,KEY0,VALUE0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,KEY0,VALUE0. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) | NODE0 = NODE1


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
18 (*) : --1-----------------1
18     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']
19     : -1---------------1---
19     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value2)']
20     : 1-------------1------
20     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value2)']
21     : --1----------------1-
21     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
22     : -1--------------1----
22     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
23     : 1------------1-------
23     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
24     : --1---------------1--
24     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
25     : -1-------------1-----
25     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
26     : 1-----------1--------
26     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$owner': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0; node$0$transfer_msg$0': [node$0$owner$0$0; node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0; node$0$transfer_msg$0': node$0$owner$0$0; node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
108 (*) : ------------1-------1
108     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
109     : ------------1----1---
109     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
110     : ---------------1----1
110     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
111     : --------------11-----
111     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
112     : -----------------11--
112     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
113     : --------------1---1--
113     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
114     : ------------1------1-
114     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
115     : ------------1---1----
115     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
116     : ---------------1---1-
116     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
117     : -------------1-1-----
117     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
118     : ----------------1-1--
118     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
119     : -------------1----1--
119     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
120     : -------------1------1
120     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
121     : -------------1---1---
121     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
122     : ----------------1---1
122     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
123     : --------------1-1----
123     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
124     : -----------------1-1-
124     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
125     : --------------1----1-
125     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE1,KEY0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,VALUE1,KEY0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 7 =====================
size : 9
num_suborbits: 1
126 (*) : --------------1-----1
126     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
127     : --------------1--1---
127     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
128     : -----------------1--1
128     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
129     : -------------1-----1-
129     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
130     : -------------1--1----
130     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
131     : ----------------1--1-
131     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
132     : ------------1-----1--
132     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
133     : ------------1--1-----
133     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
134     : ---------------1--1--
134     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2; value$0$transfer_msg$2': [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

	identical_single_classes: {'value$0$transfer_msg$2; value$0$transfer_msg$2': value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE1,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
135 (*) : ------------------1-1
135     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
136     : ---------------1-1---
136     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
137     : ------------1-1------
137     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
138     : ------------------11-
138     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
139     : ---------------11----
139     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
140     : ------------11-------
140     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
141     : -------------------11
141     : ['transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
142     : ----------------11---
142     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
143     : -------------11------
143     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0; node$0$transfer_msg$0': [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1]}

	identical_single_classes: {'node$0$transfer_msg$0; node$0$transfer_msg$0': node$0$transfer_msg$0$0; node$0$transfer_msg$0$1}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE0,KEY0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE0,KEY0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
144 (*) : 11-------------------
144     : ['owner(node0,key0)', 'owner(node1,key0)']
145     : 1-1------------------
145     : ['owner(node0,key0)', 'owner(node2,key0)']
146     : -11------------------
146     : ['owner(node1,key0)', 'owner(node2,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'owner(node1,key0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',)))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$owner$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$1]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$owner$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$1': Const('key0', EnumeratedSort('key', ('key0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

part_sig: ('key$0$owner$1$0; key$0$owner$1$1', 'node$0$owner$0$0 | node$0$owner$0$1')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'owner(node1,key0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)))}

sign_func_name2count:  {'0$owner': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$owner$1': [key$0$owner$1$0; key$0$owner$1$1]}

	identical_single_classes: {'key$0$owner$1; key$0$owner$1': key$0$owner$1$0; key$0$owner$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE1,KEY0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,KEY0. ~owner(NODE1,KEY0) | ~owner(NODE0,KEY0) | NODE0 = NODE1


=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
165 (*) : --0--------1---------
165     : ['table(node2,key0,value2)', '~owner(node2,key0)']
166     : -0------1------------
166     : ['table(node1,key0,value2)', '~owner(node1,key0)']
167     : 0----1---------------
167     : ['table(node0,key0,value2)', '~owner(node0,key0)']
168     : --0-------1----------
168     : ['table(node2,key0,value1)', '~owner(node2,key0)']
169     : -0-----1-------------
169     : ['table(node1,key0,value1)', '~owner(node1,key0)']
170     : 0---1----------------
170     : ['table(node0,key0,value1)', '~owner(node0,key0)']
171     : --0------1-----------
171     : ['table(node2,key0,value0)', '~owner(node2,key0)']
172     : -0----1--------------
172     : ['table(node1,key0,value0)', '~owner(node1,key0)']
173     : 0--1-----------------
173     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node2,key0)', 'table(node2,key0,value2)']

sign_func_name2args: {'1$owner': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node2,key0)', 'table(node2,key0,value2)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)', '~owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,KEY0,VALUE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
183 (*) : ---1-1---------------
183     : ['table(node0,key0,value0)', 'table(node0,key0,value2)']
184     : ------1-1------------
184     : ['table(node1,key0,value0)', 'table(node1,key0,value2)']
185     : ---------1-1---------
185     : ['table(node2,key0,value0)', 'table(node2,key0,value2)']
186     : ---11----------------
186     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
187     : ------11-------------
187     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
188     : ---------11----------
188     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
189     : ----11---------------
189     : ['table(node0,key0,value1)', 'table(node0,key0,value2)']
190     : -------11------------
190     : ['table(node1,key0,value1)', 'table(node1,key0,value2)']
191     : ----------11---------
191     : ['table(node2,key0,value1)', 'table(node2,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node0,key0,value2)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$0, node$0$table$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$table$2$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$table$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- SigGenerator ----------

terms:  ['table(node0,key0,value0)', 'table(node0,key0,value2)']

func_name2symbol:  {'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'table': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$table': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0 | value$0$table$2$1}

	sort: node

	identical_classes: {'node$0$table$0; node$0$table$0': [node$0$table$0$0; node$0$table$0$1]}

	identical_single_classes: {'node$0$table$0; node$0$table$0': node$0$table$0$0; node$0$table$0$1}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$0$table$1': [key$0$table$1$0; key$0$table$1$1]}

	identical_single_classes: {'key$0$table$1; key$0$table$1': key$0$table$1$0; key$0$table$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE1)', 'table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE0,KEY0,VALUE0. ~table(NODE0,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | VALUE0 = VALUE1


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 1
0 (*) : -1------------------1
0     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']
1     : --1--------------1---
1     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value2)']
2     : 1-------------------1
2     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value2)']
3     : --1-----------1------
3     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value2)']
4     : 1----------------1---
4     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value2)']
5     : -1------------1------
5     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value2)']
6     : -1-----------------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
7     : --1-------------1----
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
8     : 1------------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
9     : --1----------1-------
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
10     : 1---------------1----
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
11     : -1-----------1-------
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
12     : -1----------------1--
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
13     : --1------------1-----
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
14     : 1-----------------1--
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
15     : --1---------1--------
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
16     : 1--------------1-----
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
17     : -1----------1--------
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall NODE1,NODE0,KEY0,VALUE0. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
18 (*) : --1-----------------1
18     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']
19     : -1---------------1---
19     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value2)']
20     : 1-------------1------
20     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value2)']
21     : --1----------------1-
21     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
22     : -1--------------1----
22     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
23     : 1------------1-------
23     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
24     : --1---------------1--
24     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
25     : -1-------------1-----
25     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
26     : 1-----------1--------
26     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)
qcost : 5




=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
108 (*) : ------------1-------1
108     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
109     : ------------1----1---
109     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
110     : ---------------1----1
110     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
111     : --------------11-----
111     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
112     : -----------------11--
112     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
113     : --------------1---1--
113     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
114     : ------------1------1-
114     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
115     : ------------1---1----
115     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
116     : ---------------1---1-
116     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
117     : -------------1-1-----
117     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
118     : ----------------1-1--
118     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
119     : -------------1----1--
119     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
120     : -------------1------1
120     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
121     : -------------1---1---
121     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
122     : ----------------1---1
122     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
123     : --------------1-1----
123     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
124     : -----------------1-1-
124     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
125     : --------------1----1-
125     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,VALUE1,KEY0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 7 =====================
size : 9
num_suborbits: 1
126 (*) : --------------1-----1
126     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
127     : --------------1--1---
127     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
128     : -----------------1--1
128     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
129     : -------------1-----1-
129     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
130     : -------------1--1----
130     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
131     : ----------------1--1-
131     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
132     : ------------1-----1--
132     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
133     : ------------1--1-----
133     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
134     : ---------------1--1--
134     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall NODE1,NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
135 (*) : ------------------1-1
135     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
136     : ---------------1-1---
136     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
137     : ------------1-1------
137     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
138     : ------------------11-
138     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
139     : ---------------11----
139     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
140     : ------------11-------
140     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
141     : -------------------11
141     : ['transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
142     : ----------------11---
142     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
143     : -------------11------
143     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE0,KEY0,VALUE1) | VALUE0 = VALUE1
qcost : 7




=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
144 (*) : 11-------------------
144     : ['owner(node0,key0)', 'owner(node1,key0)']
145     : 1-1------------------
145     : ['owner(node0,key0)', 'owner(node2,key0)']
146     : -11------------------
146     : ['owner(node1,key0)', 'owner(node2,key0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall NODE1,NODE0,KEY0. ~owner(NODE1,KEY0) | ~owner(NODE0,KEY0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
165 (*) : --0--------1---------
165     : ['table(node2,key0,value2)', '~owner(node2,key0)']
166     : -0------1------------
166     : ['table(node1,key0,value2)', '~owner(node1,key0)']
167     : 0----1---------------
167     : ['table(node0,key0,value2)', '~owner(node0,key0)']
168     : --0-------1----------
168     : ['table(node2,key0,value1)', '~owner(node2,key0)']
169     : -0-----1-------------
169     : ['table(node1,key0,value1)', '~owner(node1,key0)']
170     : 0---1----------------
170     : ['table(node0,key0,value1)', '~owner(node0,key0)']
171     : --0------1-----------
171     : ['table(node2,key0,value0)', '~owner(node2,key0)']
172     : -0----1--------------
172     : ['table(node1,key0,value0)', '~owner(node1,key0)']
173     : 0--1-----------------
173     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,KEY0,VALUE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)
qcost : 5




=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
183 (*) : ---1-1---------------
183     : ['table(node0,key0,value0)', 'table(node0,key0,value2)']
184     : ------1-1------------
184     : ['table(node1,key0,value0)', 'table(node1,key0,value2)']
185     : ---------1-1---------
185     : ['table(node2,key0,value0)', 'table(node2,key0,value2)']
186     : ---11----------------
186     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
187     : ------11-------------
187     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
188     : ---------11----------
188     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
189     : ----11---------------
189     : ['table(node0,key0,value1)', 'table(node0,key0,value2)']
190     : -------11------------
190     : ['table(node1,key0,value1)', 'table(node1,key0,value2)']
191     : ----------11---------
191     : ['table(node2,key0,value1)', 'table(node2,key0,value2)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,NODE0,KEY0,VALUE0. ~table(NODE0,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | VALUE0 = VALUE1
qcost : 7



[QRM NOTE]: Time elapsed since start: 2.861 seconds

[QRM NOTE]: Time elapsed since last: 0.117 seconds

[QRM NOTE]: Peak memory: 2890116 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

=============================================================================================


New level: 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]


Solution : [0, 1, 6, 7, 8, 9, 11, 13] has cost 53.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]

After backtrack at level 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 53

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 6, 7, 8, 9, 11, 13]

[MIN NOTE]: solution length: 8

invariant [invar_0] forall NODE1,NODE0,KEY0,VALUE0. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) | NODE0 = NODE1 # qcost: 7

invariant [invar_1] forall NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0) # qcost: 5

invariant [invar_6] forall VALUE0,NODE1,VALUE1,KEY0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1) # qcost: 9

invariant [invar_7] forall NODE1,NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1 # qcost: 7

invariant [invar_8] forall VALUE1,NODE0,KEY0,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE0,KEY0,VALUE1) | VALUE0 = VALUE1 # qcost: 7

invariant [invar_9] forall NODE1,NODE0,KEY0. ~owner(NODE1,KEY0) | ~owner(NODE0,KEY0) | NODE0 = NODE1 # qcost: 6

invariant [invar_11] forall NODE0,KEY0,VALUE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0) # qcost: 5

invariant [invar_13] forall VALUE1,NODE0,KEY0,VALUE0. ~table(NODE0,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | VALUE0 = VALUE1 # qcost: 7

[MIN NOTE]: number of total invariants: 8

[MIN NOTE]: total qCost: 53




[QRM NOTE]: Time elapsed since start: 2.938 seconds

[QRM NOTE]: Time elapsed since last: 0.076 seconds

[QRM NOTE]: Peak memory: 2864575 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

*************************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy -s node=4,key=1,value=3 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=4,key=1,value=3]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 28

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 0.799 seconds

[QRM NOTE]: Time elapsed since last: 0.799 seconds

[QRM NOTE]: Peak memory: 1036423 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 24


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=4,key=1,value=3]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1', 'node2', 'node3']
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'owner(node3,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'table(node3,key0,value0)', 'table(node3,key0,value1)', 'table(node3,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)', 'transfer_msg(node3,key0,value0)', 'transfer_msg(node3,key0,value1)', 'transfer_msg(node3,key0,value2)']

000000000000000000000000000-
0000000000000000000000000010
0000000000000000000000000100
0000000000000000000000001000
0000000000000000000000010000
0000000000000000000000100000
0000000000000000000001000000
0000000000000000000010000000
0000000000000000000100000000
0000000000000000001000000000
0000000000000000010000000000
0000000000000000100000000000
000100000000000-000000000000
0001000000000010000000000000
0001000000000100000000000000
001000000000-000000000000000
0010000000010000000000000000
0010000000100000000000000000
010000000-000000000000000000
0100000010000000000000000000
0100000100000000000000000000
100000-000000000000000000000
1000010000000000000000000000
1000100000000000000000000000

[QRM NOTE]: Time elapsed since start: 6.019 seconds

[QRM NOTE]: Time elapsed since last: 5.220 seconds

[QRM NOTE]: Peak memory: 2547505 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=4,key=1,value=3]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.753 seconds

[QRM NOTE]: Time elapsed since last: 0.734 seconds

[QRM NOTE]: Peak memory: 1961820 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy -s node=3,key=2,value=3 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=3,key=2,value=3]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 42

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 72

[QRM NOTE]: Time elapsed since start: 1.326 seconds

[QRM NOTE]: Time elapsed since last: 1.326 seconds

[QRM NOTE]: Peak memory: 1645044 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 324


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=2,value=3]

=======================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1', 'node2']
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'owner(node1,key0)', 'owner(node1,key1)', 'owner(node2,key0)', 'owner(node2,key1)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node0,key1,value0)', 'table(node0,key1,value1)', 'table(node0,key1,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node1,key1,value0)', 'table(node1,key1,value1)', 'table(node1,key1,value2)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'table(node2,key1,value0)', 'table(node2,key1,value1)', 'table(node2,key1,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node0,key1,value0)', 'transfer_msg(node0,key1,value1)', 'transfer_msg(node0,key1,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node1,key1,value0)', 'transfer_msg(node1,key1,value1)', 'transfer_msg(node1,key1,value2)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)', 'transfer_msg(node2,key1,value0)', 'transfer_msg(node2,key1,value1)', 'transfer_msg(node2,key1,value2)']

00000000000000000000000000000000000000-00-
00000000000000000000000000000000000000-010
00000000000000000000000000000000000000-100
00000000000000000000000000000000000001000-
000000000000000000000000000000000000010010
000000000000000000000000000000000000010100
00000000000000000000000000000000000010000-
000000000000000000000000000000000000100010
000000000000000000000000000000000000100100
00000000000000000000000000000000000100-000
000000000000000000000000000000000001010000
000000000000000000000000000000000001100000
00000000000000000000000000000000001000-000
000000000000000000000000000000000010010000
000000000000000000000000000000000010100000
00000000000000000000000000000000010000-000
000000000000000000000000000000000100010000
000000000000000000000000000000000100100000
00000000000000000000000000000000100000000-
000000000000000000000000000000001000000010
000000000000000000000000000000001000000100
000000000000000000000000000000001001000000
000000000000000000000000000000001010000000
000000000000000000000000000000001100000000
00000000000000000000000000000001000000000-
000000000000000000000000000000010000000010
000000000000000000000000000000010000000100
000000000000000000000000000000010001000000
000000000000000000000000000000010010000000
000000000000000000000000000000010100000000
00000000000000000000000000000010000000000-
000000000000000000000000000000100000000010
000000000000000000000000000000100000000100
000000000000000000000000000000100001000000
000000000000000000000000000000100010000000
000000000000000000000000000000100100000000
00000000000000000000000000000100000000-000
000000000000000000000000000001000000010000
000000000000000000000000000001000000100000
000000000000000000000000000001001000000000
000000000000000000000000000001010000000000
000000000000000000000000000001100000000000
00000000000000000000000000001000000000-000
000000000000000000000000000010000000010000
000000000000000000000000000010000000100000
000000000000000000000000000010001000000000
000000000000000000000000000010010000000000
000000000000000000000000000010100000000000
00000000000000000000000000010000000000-000
000000000000000000000000000100000000010000
000000000000000000000000000100000000100000
000000000000000000000000000100001000000000
000000000000000000000000000100010000000000
000000000000000000000000000100100000000000
00000000000000000000000000100000000000000-
000000000000000000000000001000000000000010
000000000000000000000000001000000000000100
000000000000000000000000001000000001000000
000000000000000000000000001000000010000000
000000000000000000000000001000000100000000
000000000000000000000000001001000000000000
000000000000000000000000001010000000000000
000000000000000000000000001100000000000000
00000000000000000000000001000000000000000-
000000000000000000000000010000000000000010
000000000000000000000000010000000000000100
000000000000000000000000010000000001000000
000000000000000000000000010000000010000000
000000000000000000000000010000000100000000
000000000000000000000000010001000000000000
000000000000000000000000010010000000000000
000000000000000000000000010100000000000000
00000000000000000000000010000000000000000-
000000000000000000000000100000000000000010
000000000000000000000000100000000000000100
000000000000000000000000100000000001000000
000000000000000000000000100000000010000000
000000000000000000000000100000000100000000
000000000000000000000000100001000000000000
000000000000000000000000100010000000000000
000000000000000000000000100100000000000000
00000100000000000000000-00000000000000-000
00000100000000000000000-000000000000010000
00000100000000000000000-000000000000100000
00000100000000000000000-000000001000000000
00000100000000000000000-000000010000000000
00000100000000000000000-000000100000000000
00000100000000000000000-001000000000000000
00000100000000000000000-010000000000000000
00000100000000000000000-100000000000000000
00000100000000000000001000000000000000-000
000001000000000000000010000000000000010000
000001000000000000000010000000000000100000
000001000000000000000010000000001000000000
000001000000000000000010000000010000000000
000001000000000000000010000000100000000000
000001000000000000000010001000000000000000
000001000000000000000010010000000000000000
000001000000000000000010100000000000000000
00000100000000000000010000000000000000-000
000001000000000000000100000000000000010000
000001000000000000000100000000000000100000
000001000000000000000100000000001000000000
000001000000000000000100000000010000000000
000001000000000000000100000000100000000000
000001000000000000000100001000000000000000
000001000000000000000100010000000000000000
000001000000000000000100100000000000000000
00001000000000000000-00000000000000000000-
00001000000000000000-000000000000000000010
00001000000000000000-000000000000000000100
00001000000000000000-000000000000001000000
00001000000000000000-000000000000010000000
00001000000000000000-000000000000100000000
00001000000000000000-000000001000000000000
00001000000000000000-000000010000000000000
00001000000000000000-000000100000000000000
00001000000000000001000000000000000000000-
000010000000000000010000000000000000000010
000010000000000000010000000000000000000100
000010000000000000010000000000000001000000
000010000000000000010000000000000010000000
000010000000000000010000000000000100000000
000010000000000000010000000001000000000000
000010000000000000010000000010000000000000
000010000000000000010000000100000000000000
00001000000000000010000000000000000000000-
000010000000000000100000000000000000000010
000010000000000000100000000000000000000100
000010000000000000100000000000000001000000
000010000000000000100000000000000010000000
000010000000000000100000000000000100000000
000010000000000000100000000001000000000000
000010000000000000100000000010000000000000
000010000000000000100000000100000000000000
00001100000000000000-00-000000000000000000
00001100000000000000-010000000000000000000
00001100000000000000-100000000000000000000
00001100000000000001000-000000000000000000
000011000000000000010010000000000000000000
000011000000000000010100000000000000000000
00001100000000000010000-000000000000000000
000011000000000000100010000000000000000000
000011000000000000100100000000000000000000
00010000000000000-00000000000000000000-000
00010000000000000-000000000000000000010000
00010000000000000-000000000000000000100000
00010000000000000-000000000000001000000000
00010000000000000-000000000000010000000000
00010000000000000-000000000000100000000000
00010000000000000-000000001000000000000000
00010000000000000-000000010000000000000000
00010000000000000-000000100000000000000000
00010000000000001000000000000000000000-000
000100000000000010000000000000000000010000
000100000000000010000000000000000000100000
000100000000000010000000000000001000000000
000100000000000010000000000000010000000000
000100000000000010000000000000100000000000
000100000000000010000000001000000000000000
000100000000000010000000010000000000000000
000100000000000010000000100000000000000000
00010000000000010000000000000000000000-000
000100000000000100000000000000000000010000
000100000000000100000000000000000000100000
000100000000000100000000000000001000000000
000100000000000100000000000000010000000000
000100000000000100000000000000100000000000
000100000000000100000000001000000000000000
000100000000000100000000010000000000000000
000100000000000100000000100000000000000000
00011000000000000-00-000000000000000000000
00011000000000000-010000000000000000000000
00011000000000000-100000000000000000000000
00011000000000001000-000000000000000000000
000110000000000010010000000000000000000000
000110000000000010100000000000000000000000
00011000000000010000-000000000000000000000
000110000000000100010000000000000000000000
000110000000000100100000000000000000000000
00100000000000-00000000000000000000000000-
00100000000000-000000000000000000000000010
00100000000000-000000000000000000000000100
00100000000000-000000000000000000001000000
00100000000000-000000000000000000010000000
00100000000000-000000000000000000100000000
00100000000000-000000000000001000000000000
00100000000000-000000000000010000000000000
00100000000000-000000000000100000000000000
00100000000001000000000000000000000000000-
001000000000010000000000000000000000000010
001000000000010000000000000000000000000100
001000000000010000000000000000000001000000
001000000000010000000000000000000010000000
001000000000010000000000000000000100000000
001000000000010000000000000001000000000000
001000000000010000000000000010000000000000
001000000000010000000000000100000000000000
00100000000010000000000000000000000000000-
001000000000100000000000000000000000000010
001000000000100000000000000000000000000100
001000000000100000000000000000000001000000
001000000000100000000000000000000010000000
001000000000100000000000000000000100000000
001000000000100000000000000001000000000000
001000000000100000000000000010000000000000
001000000000100000000000000100000000000000
00100100000000-00000000-000000000000000000
00100100000000-000000010000000000000000000
00100100000000-000000100000000000000000000
00100100000001000000000-000000000000000000
001001000000010000000010000000000000000000
001001000000010000000100000000000000000000
00100100000010000000000-000000000000000000
001001000000100000000010000000000000000000
001001000000100000000100000000000000000000
00110000000000-00-000000000000000000000000
00110000000000-010000000000000000000000000
00110000000000-100000000000000000000000000
00110000000001000-000000000000000000000000
001100000000010010000000000000000000000000
001100000000010100000000000000000000000000
00110000000010000-000000000000000000000000
001100000000100010000000000000000000000000
001100000000100100000000000000000000000000
01000000000-00000000000000000000000000-000
01000000000-000000000000000000000000010000
01000000000-000000000000000000000000100000
01000000000-000000000000000000001000000000
01000000000-000000000000000000010000000000
01000000000-000000000000000000100000000000
01000000000-000000000000001000000000000000
01000000000-000000000000010000000000000000
01000000000-000000000000100000000000000000
01000000001000000000000000000000000000-000
010000000010000000000000000000000000010000
010000000010000000000000000000000000100000
010000000010000000000000000000001000000000
010000000010000000000000000000010000000000
010000000010000000000000000000100000000000
010000000010000000000000001000000000000000
010000000010000000000000010000000000000000
010000000010000000000000100000000000000000
01000000010000000000000000000000000000-000
010000000100000000000000000000000000010000
010000000100000000000000000000000000100000
010000000100000000000000000000001000000000
010000000100000000000000000000010000000000
010000000100000000000000000000100000000000
010000000100000000000000001000000000000000
010000000100000000000000010000000000000000
010000000100000000000000100000000000000000
01001000000-00000000-000000000000000000000
01001000000-000000010000000000000000000000
01001000000-000000100000000000000000000000
01001000001000000000-000000000000000000000
010010000010000000010000000000000000000000
010010000010000000100000000000000000000000
01001000010000000000-000000000000000000000
010010000100000000010000000000000000000000
010010000100000000100000000000000000000000
01100000000-00-000000000000000000000000000
01100000000-010000000000000000000000000000
01100000000-100000000000000000000000000000
01100000001000-000000000000000000000000000
011000000010010000000000000000000000000000
011000000010100000000000000000000000000000
01100000010000-000000000000000000000000000
011000000100010000000000000000000000000000
011000000100100000000000000000000000000000
10000000-00000000000000000000000000000000-
10000000-000000000000000000000000000000010
10000000-000000000000000000000000000000100
10000000-000000000000000000000000001000000
10000000-000000000000000000000000010000000
10000000-000000000000000000000000100000000
10000000-000000000000000000001000000000000
10000000-000000000000000000010000000000000
10000000-000000000000000000100000000000000
10000001000000000000000000000000000000000-
100000010000000000000000000000000000000010
100000010000000000000000000000000000000100
100000010000000000000000000000000001000000
100000010000000000000000000000000010000000
100000010000000000000000000000000100000000
100000010000000000000000000001000000000000
100000010000000000000000000010000000000000
100000010000000000000000000100000000000000
10000010000000000000000000000000000000000-
100000100000000000000000000000000000000010
100000100000000000000000000000000000000100
100000100000000000000000000000000001000000
100000100000000000000000000000000010000000
100000100000000000000000000000000100000000
100000100000000000000000000001000000000000
100000100000000000000000000010000000000000
100000100000000000000000000100000000000000
10000100-00000000000000-000000000000000000
10000100-000000000000010000000000000000000
10000100-000000000000100000000000000000000
10000101000000000000000-000000000000000000
100001010000000000000010000000000000000000
100001010000000000000100000000000000000000
10000110000000000000000-000000000000000000
100001100000000000000010000000000000000000
100001100000000000000100000000000000000000
10010000-00000000-000000000000000000000000
10010000-000000010000000000000000000000000
10010000-000000100000000000000000000000000
10010001000000000-000000000000000000000000
100100010000000010000000000000000000000000
100100010000000100000000000000000000000000
10010010000000000-000000000000000000000000
100100100000000010000000000000000000000000
100100100000000100000000000000000000000000
11000000-00-000000000000000000000000000000
11000000-010000000000000000000000000000000
11000000-100000000000000000000000000000000
11000001000-000000000000000000000000000000
110000010010000000000000000000000000000000
110000010100000000000000000000000000000000
11000010000-000000000000000000000000000000
110000100010000000000000000000000000000000
110000100100000000000000000000000000000000

[QRM NOTE]: Time elapsed since start: 10.700 seconds

[QRM NOTE]: Time elapsed since last: 9.375 seconds

[QRM NOTE]: Peak memory: 3600833 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=3,key=2,value=3]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 17.712 seconds

[QRM NOTE]: Time elapsed since last: 7.011 seconds

[QRM NOTE]: Peak memory: 9236441 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy -s node=3,key=1,value=4 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=3,key=1,value=4]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 27

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 0.649 seconds

[QRM NOTE]: Time elapsed since last: 0.649 seconds

[QRM NOTE]: Peak memory: 898181 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: reshard(fml:k,fml:v,fml:n_old,fml:n_new)

building bdd for action: recv_transfer_msg(fml:n,fml:k,fml:v)

building bdd for action: put(fml:n,fml:k,fml:v)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 24


=======================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv: node=3,key=1,value=4]

=======================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: node=['node0', 'node1', 'node2']
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node0,key0,value3)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node1,key0,value3)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'table(node2,key0,value3)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node0,key0,value3)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node1,key0,value3)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)', 'transfer_msg(node2,key0,value3)']

00000000000000000000000000-
000000000000000000000000010
000000000000000000000000100
000000000000000000000001000
000000000000000000000010000
000000000000000000000100000
000000000000000000001000000
000000000000000000010000000
000000000000000000100000000
000000000000000001000000000
000000000000000010000000000
000000000000000100000000000
00100000000000-000000000000
001000000000010000000000000
001000000000100000000000000
001000000001000000000000000
0100000000-0000000000000000
010000000100000000000000000
010000001000000000000000000
010000010000000000000000000
100000-00000000000000000000
100001000000000000000000000
100010000000000000000000000
100100000000000000000000000

[QRM NOTE]: Time elapsed since start: 4.768 seconds

[QRM NOTE]: Time elapsed since last: 4.118 seconds

[QRM NOTE]: Peak memory: 2348664 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=3,key=1,value=4]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 5.499 seconds

[QRM NOTE]: Time elapsed since last: 0.731 seconds

[QRM NOTE]: Peak memory: 1750345 bytes


*********************************************************************

	[IVY_CHECK]: Ivy Check for Reachability Invariant

*********************************************************************


=================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy]

=================================================================================================

ivy_check complete=fo ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_11
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13

    The following action implementations are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 34: implementation of put
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 26: implementation of recv_transfer_msg
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 18: implementation of reshard

    The following initializers are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 11: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_11 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:put
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_11 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS
        (internal) ext:recv_transfer_msg
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_11 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS
        (internal) ext:reshard
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_11 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS

    The following program assertions are treated as assumptions:
        in action reshard when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 19: assumption
        in action recv_transfer_msg when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 27: assumption
        in action put when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 35: assumption

OK
[IVY_CHECK RESULT]: PASS


*********************************************************************************

	[QRM]: ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy

*********************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy']

[CUTOFF]: node=3,key=1,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 77.024 seconds

[QRM NOTE]: Time elapsed since last: 77.024 seconds

