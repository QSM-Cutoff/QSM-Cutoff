
**********************************************************

	[QRM]: ivybench/sym/ivy/sharded_kv.ivy

**********************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 21

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 45

ivy_to_cpp target=qrm sharded_kv.node_3_key_1_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_3_key_1_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_3_key_1_value_3.finite.cpp sharded_kv.node_3_key_1_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_3_key_1_value_3.finite.o sharded_kv.node_3_key_1_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.302 seconds

[QRM NOTE]: Time elapsed since last: 7.302 seconds

[QRM NOTE]: Peak memory: 1184468 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        22

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 18


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

===========================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1', 'node2']
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
representative states : 0, 262144, 262656, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000
lex min decimal: 0
states:
000000000000000000000




=== State Orbit 1 =====================
size : 3
repr state: 100000000000000000000
lex min decimal: 262144
states:
100000000000000000000
010000000000000000000
001000000000000000000




=== State Orbit 2 =====================
size : 9
repr state: 100100000000000000000
lex min decimal: 262656
states:
010000001000000000000
010000100000000000000
001000000100000000000
100100000000000000000
100001000000000000000
001000000001000000000
001000000010000000000
010000010000000000000
100010000000000000000




=== State Orbit 3 =====================
size : 9
repr state: 000000000000100000000
lex min decimal: 1
states:
000000000000001000000
000000000000000001000
000000000000000000001
000000000000000000100
000000000000000010000
000000000000010000000
000000000000000100000
000000000000000000010
000000000000100000000



[QRM NOTE]: Time elapsed since start: 7.667 seconds

[QRM NOTE]: Time elapsed since last: 0.365 seconds

[QRM NOTE]: Peak memory: 1218814 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.669 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 173036 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

======================================================================================================


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 1
0 (*) : -1------------------1
0     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']
1     : --1--------------1---
1     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value2)']
2     : 1-------------------1
2     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value2)']
3     : --1-----------1------
3     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value2)']
4     : 1----------------1---
4     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value2)']
5     : -1------------1------
5     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value2)']
6     : -1-----------------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
7     : --1-------------1----
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
8     : 1------------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
9     : --1----------1-------
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
10     : 1---------------1----
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
11     : -1-----------1-------
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
12     : -1----------------1--
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
13     : --1------------1-----
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
14     : 1-----------------1--
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
15     : --1---------1--------
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
16     : 1--------------1-----
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
17     : -1----------1--------
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
18 (*) : --1-----------------1
18     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']
19     : -1---------------1---
19     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value2)']
20     : 1-------------1------
20     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value2)']
21     : --1----------------1-
21     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
22     : -1--------------1----
22     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
23     : 1------------1-------
23     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
24     : --1---------------1--
24     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
25     : -1-------------1-----
25     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
26     : 1-----------1--------
26     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
27 (*) : -----------1--------1
27     : ['table(node2,key0,value2)', 'transfer_msg(node2,key0,value2)']
28     : --------1--------1---
28     : ['table(node1,key0,value2)', 'transfer_msg(node1,key0,value2)']
29     : -----1--------1------
29     : ['table(node0,key0,value2)', 'transfer_msg(node0,key0,value2)']
30     : ----------1--------1-
30     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value1)']
31     : -------1--------1----
31     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value1)']
32     : ----1--------1-------
32     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value1)']
33     : ---------1--------1--
33     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value0)']
34     : ------1--------1-----
34     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value0)']
35     : ---1--------1--------
35     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 36
num_suborbits: 1
36 (*) : ---1----------------1
36     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
37     : ---1-------------1---
37     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
38     : ------1-------------1
38     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
39     : ------1-------1------
39     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value2)']
40     : ---------1-------1---
40     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value2)']
41     : ---------1----1------
41     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value2)']
42     : ---1---------------1-
42     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
43     : ---1------------1----
43     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
44     : ------1------------1-
44     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
45     : ------1------1-------
45     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value1)']
46     : ---------1------1----
46     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value1)']
47     : ---------1---1-------
47     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value1)']
48     : ----1---------------1
48     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
49     : ----1------------1---
49     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
50     : -------1------------1
50     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
51     : -------1------1------
51     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value2)']
52     : ----------1------1---
52     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value2)']
53     : ----------1---1------
53     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value2)']
54     : ----1-------------1--
54     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
55     : ----1----------1-----
55     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
56     : -------1----------1--
56     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
57     : -------1----1--------
57     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)']
58     : ----------1----1-----
58     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value0)']
59     : ----------1-1--------
59     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value0)']
60     : -----1-------------1-
60     : ['table(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
61     : -----1----------1----
61     : ['table(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
62     : --------1----------1-
62     : ['table(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
63     : --------1----1-------
63     : ['table(node1,key0,value2)', 'transfer_msg(node0,key0,value1)']
64     : -----------1----1----
64     : ['table(node2,key0,value2)', 'transfer_msg(node1,key0,value1)']
65     : -----------1-1-------
65     : ['table(node2,key0,value2)', 'transfer_msg(node0,key0,value1)']
66     : -----1------------1--
66     : ['table(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
67     : -----1---------1-----
67     : ['table(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
68     : --------1---------1--
68     : ['table(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
69     : --------1---1--------
69     : ['table(node1,key0,value2)', 'transfer_msg(node0,key0,value0)']
70     : -----------1---1-----
70     : ['table(node2,key0,value2)', 'transfer_msg(node1,key0,value0)']
71     : -----------11--------
71     : ['table(node2,key0,value2)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : -----1--------------1
72     : ['table(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
73     : -----1-----------1---
73     : ['table(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
74     : --------1-----------1
74     : ['table(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
75     : --------1-----1------
75     : ['table(node1,key0,value2)', 'transfer_msg(node0,key0,value2)']
76     : -----------1-----1---
76     : ['table(node2,key0,value2)', 'transfer_msg(node1,key0,value2)']
77     : -----------1--1------
77     : ['table(node2,key0,value2)', 'transfer_msg(node0,key0,value2)']
78     : ----1--------------1-
78     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
79     : ----1-----------1----
79     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
80     : -------1-----------1-
80     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
81     : -------1-----1-------
81     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value1)']
82     : ----------1-----1----
82     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value1)']
83     : ----------1--1-------
83     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value1)']
84     : ---1--------------1--
84     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
85     : ---1-----------1-----
85     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
86     : ------1-----------1--
86     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
87     : ------1-----1--------
87     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)']
88     : ---------1-----1-----
88     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value0)']
89     : ---------1--1--------
89     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
90 (*) : ---------1----------1
90     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
91     : ------1----------1---
91     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
92     : ---1----------1------
92     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
93     : ---------1---------1-
93     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
94     : ------1---------1----
94     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
95     : ---1---------1-------
95     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
96     : ----------1---------1
96     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
97     : -------1---------1---
97     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
98     : ----1---------1------
98     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
99     : ----------1-------1--
99     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value0)']
100     : -------1-------1-----
100     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value0)']
101     : ----1-------1--------
101     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)']
102     : -----------1-------1-
102     : ['table(node2,key0,value2)', 'transfer_msg(node2,key0,value1)']
103     : --------1-------1----
103     : ['table(node1,key0,value2)', 'transfer_msg(node1,key0,value1)']
104     : -----1-------1-------
104     : ['table(node0,key0,value2)', 'transfer_msg(node0,key0,value1)']
105     : -----------1------1--
105     : ['table(node2,key0,value2)', 'transfer_msg(node2,key0,value0)']
106     : --------1------1-----
106     : ['table(node1,key0,value2)', 'transfer_msg(node1,key0,value0)']
107     : -----1------1--------
107     : ['table(node0,key0,value2)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
108 (*) : ------------1-------1
108     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
109     : ------------1----1---
109     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
110     : ---------------1----1
110     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
111     : --------------11-----
111     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
112     : -----------------11--
112     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
113     : --------------1---1--
113     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
114     : ------------1------1-
114     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
115     : ------------1---1----
115     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
116     : ---------------1---1-
116     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
117     : -------------1-1-----
117     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
118     : ----------------1-1--
118     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
119     : -------------1----1--
119     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
120     : -------------1------1
120     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
121     : -------------1---1---
121     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
122     : ----------------1---1
122     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
123     : --------------1-1----
123     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
124     : -----------------1-1-
124     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
125     : --------------1----1-
125     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 9
num_suborbits: 1
126 (*) : --------------1-----1
126     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
127     : --------------1--1---
127     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
128     : -----------------1--1
128     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
129     : -------------1-----1-
129     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
130     : -------------1--1----
130     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
131     : ----------------1--1-
131     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
132     : ------------1-----1--
132     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
133     : ------------1--1-----
133     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
134     : ---------------1--1--
134     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
135 (*) : ------------------1-1
135     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
136     : ---------------1-1---
136     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
137     : ------------1-1------
137     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
138     : ------------------11-
138     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
139     : ---------------11----
139     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
140     : ------------11-------
140     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
141     : -------------------11
141     : ['transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
142     : ----------------11---
142     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
143     : -------------11------
143     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
144 (*) : 11-------------------
144     : ['owner(node0,key0)', 'owner(node1,key0)']
145     : 1-1------------------
145     : ['owner(node0,key0)', 'owner(node2,key0)']
146     : -11------------------
146     : ['owner(node1,key0)', 'owner(node2,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
147 (*) : --0--------1---------
147     : ['table(node2,key0,value2)', '~owner(node2,key0)']
148     : -0------1------------
148     : ['table(node1,key0,value2)', '~owner(node1,key0)']
149     : 0----1---------------
149     : ['table(node0,key0,value2)', '~owner(node0,key0)']
150     : --0-------1----------
150     : ['table(node2,key0,value1)', '~owner(node2,key0)']
151     : -0-----1-------------
151     : ['table(node1,key0,value1)', '~owner(node1,key0)']
152     : 0---1----------------
152     : ['table(node0,key0,value1)', '~owner(node0,key0)']
153     : --0------1-----------
153     : ['table(node2,key0,value0)', '~owner(node2,key0)']
154     : -0----1--------------
154     : ['table(node1,key0,value0)', '~owner(node1,key0)']
155     : 0--1-----------------
155     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
156 (*) : -1---------1---------
156     : ['owner(node1,key0)', 'table(node2,key0,value2)']
157     : --1-----1------------
157     : ['owner(node2,key0)', 'table(node1,key0,value2)']
158     : 1----------1---------
158     : ['owner(node0,key0)', 'table(node2,key0,value2)']
159     : --1--1---------------
159     : ['owner(node2,key0)', 'table(node0,key0,value2)']
160     : 1-------1------------
160     : ['owner(node0,key0)', 'table(node1,key0,value2)']
161     : -1---1---------------
161     : ['owner(node1,key0)', 'table(node0,key0,value2)']
162     : -1--------1----------
162     : ['owner(node1,key0)', 'table(node2,key0,value1)']
163     : --1----1-------------
163     : ['owner(node2,key0)', 'table(node1,key0,value1)']
164     : 1---------1----------
164     : ['owner(node0,key0)', 'table(node2,key0,value1)']
165     : --1-1----------------
165     : ['owner(node2,key0)', 'table(node0,key0,value1)']
166     : 1------1-------------
166     : ['owner(node0,key0)', 'table(node1,key0,value1)']
167     : -1--1----------------
167     : ['owner(node1,key0)', 'table(node0,key0,value1)']
168     : -1-------1-----------
168     : ['owner(node1,key0)', 'table(node2,key0,value0)']
169     : --1---1--------------
169     : ['owner(node2,key0)', 'table(node1,key0,value0)']
170     : 1--------1-----------
170     : ['owner(node0,key0)', 'table(node2,key0,value0)']
171     : --11-----------------
171     : ['owner(node2,key0)', 'table(node0,key0,value0)']
172     : 1-----1--------------
172     : ['owner(node0,key0)', 'table(node1,key0,value0)']
173     : -1-1-----------------
173     : ['owner(node1,key0)', 'table(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 18
num_suborbits: 1
174 (*) : ---1-------1---------
174     : ['table(node0,key0,value0)', 'table(node2,key0,value2)']
175     : ---1----1------------
175     : ['table(node0,key0,value0)', 'table(node1,key0,value2)']
176     : ------1----1---------
176     : ['table(node1,key0,value0)', 'table(node2,key0,value2)']
177     : -----11--------------
177     : ['table(node0,key0,value2)', 'table(node1,key0,value0)']
178     : --------11-----------
178     : ['table(node1,key0,value2)', 'table(node2,key0,value0)']
179     : -----1---1-----------
179     : ['table(node0,key0,value2)', 'table(node2,key0,value0)']
180     : ---1------1----------
180     : ['table(node0,key0,value0)', 'table(node2,key0,value1)']
181     : ---1---1-------------
181     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
182     : ------1---1----------
182     : ['table(node1,key0,value0)', 'table(node2,key0,value1)']
183     : ----1-1--------------
183     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
184     : -------1-1-----------
184     : ['table(node1,key0,value1)', 'table(node2,key0,value0)']
185     : ----1----1-----------
185     : ['table(node0,key0,value1)', 'table(node2,key0,value0)']
186     : ----1------1---------
186     : ['table(node0,key0,value1)', 'table(node2,key0,value2)']
187     : ----1---1------------
187     : ['table(node0,key0,value1)', 'table(node1,key0,value2)']
188     : -------1---1---------
188     : ['table(node1,key0,value1)', 'table(node2,key0,value2)']
189     : -----1-1-------------
189     : ['table(node0,key0,value2)', 'table(node1,key0,value1)']
190     : --------1-1----------
190     : ['table(node1,key0,value2)', 'table(node2,key0,value1)']
191     : -----1----1----------
191     : ['table(node0,key0,value2)', 'table(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
192 (*) : ---11----------------
192     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
193     : ------11-------------
193     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
194     : ---------11----------
194     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
195     : ---1-1---------------
195     : ['table(node0,key0,value0)', 'table(node0,key0,value2)']
196     : ------1-1------------
196     : ['table(node1,key0,value0)', 'table(node1,key0,value2)']
197     : ---------1-1---------
197     : ['table(node2,key0,value0)', 'table(node2,key0,value2)']
198     : ----11---------------
198     : ['table(node0,key0,value1)', 'table(node0,key0,value2)']
199     : -------11------------
199     : ['table(node1,key0,value1)', 'table(node1,key0,value2)']
200     : ----------11---------
200     : ['table(node2,key0,value1)', 'table(node2,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
201 (*) : -----1-----1---------
201     : ['table(node0,key0,value2)', 'table(node2,key0,value2)']
202     : -----1--1------------
202     : ['table(node0,key0,value2)', 'table(node1,key0,value2)']
203     : --------1--1---------
203     : ['table(node1,key0,value2)', 'table(node2,key0,value2)']
204     : ----1-----1----------
204     : ['table(node0,key0,value1)', 'table(node2,key0,value1)']
205     : ----1--1-------------
205     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
206     : -------1--1----------
206     : ['table(node1,key0,value1)', 'table(node2,key0,value1)']
207     : ---1-----1-----------
207     : ['table(node0,key0,value0)', 'table(node2,key0,value0)']
208     : ---1--1--------------
208     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
209     : ------1--1-----------
209     : ['table(node1,key0,value0)', 'table(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 15

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 210

[QRM NOTE]: Time elapsed since start: 7.730 seconds

[QRM NOTE]: Time elapsed since last: 0.061 seconds

[QRM NOTE]: Peak memory: 1504063 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
 solution : []

Essensial at level 0 : {0, 1, 6, 7, 8, 9, 10, 13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0)]

Covered at level 0 : {2, 3, 4, 5, 11, 12, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


Before reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

[QRM NOTE]: Time elapsed since start: 7.734 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 448711 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 1
0 (*) : -1------------------1
0     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']
1     : --1--------------1---
1     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value2)']
2     : 1-------------------1
2     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value2)']
3     : --1-----------1------
3     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value2)']
4     : 1----------------1---
4     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value2)']
5     : -1------------1------
5     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value2)']
6     : -1-----------------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
7     : --1-------------1----
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
8     : 1------------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
9     : --1----------1-------
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
10     : 1---------------1----
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
11     : -1-----------1-------
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
12     : -1----------------1--
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
13     : --1------------1-----
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
14     : 1-----------------1--
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
15     : --1---------1--------
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
16     : 1--------------1-----
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
17     : -1----------1--------
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0], 'node$0$transfer_msg$0': [node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0': node$0$owner$0$0, 'node$0$transfer_msg$0': node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)', 'transfer_msg(NODE1,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,VALUE0,NODE0,NODE1. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
18 (*) : --1-----------------1
18     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']
19     : -1---------------1---
19     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value2)']
20     : 1-------------1------
20     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value2)']
21     : --1----------------1-
21     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
22     : -1--------------1----
22     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
23     : 1------------1-------
23     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
24     : --1---------------1--
24     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
25     : -1-------------1-----
25     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
26     : 1-----------1--------
26     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$owner': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0; node$0$transfer_msg$0': [node$0$owner$0$0; node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0; node$0$transfer_msg$0': node$0$owner$0$0; node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,VALUE0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
108 (*) : ------------1-------1
108     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
109     : ------------1----1---
109     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
110     : ---------------1----1
110     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
111     : --------------11-----
111     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
112     : -----------------11--
112     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
113     : --------------1---1--
113     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
114     : ------------1------1-
114     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
115     : ------------1---1----
115     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
116     : ---------------1---1-
116     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
117     : -------------1-1-----
117     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
118     : ----------------1-1--
118     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
119     : -------------1----1--
119     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
120     : -------------1------1
120     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
121     : -------------1---1---
121     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
122     : ----------------1---1
122     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
123     : --------------1-1----
123     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
124     : -----------------1-1-
124     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
125     : --------------1----1-
125     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE1,KEY0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,KEY0,NODE0,VALUE1,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 7 =====================
size : 9
num_suborbits: 1
126 (*) : --------------1-----1
126     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
127     : --------------1--1---
127     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
128     : -----------------1--1
128     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
129     : -------------1-----1-
129     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
130     : -------------1--1----
130     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
131     : ----------------1--1-
131     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
132     : ------------1-----1--
132     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
133     : ------------1--1-----
133     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
134     : ---------------1--1--
134     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2; value$0$transfer_msg$2': [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

	identical_single_classes: {'value$0$transfer_msg$2; value$0$transfer_msg$2': value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE1,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,VALUE0,NODE0,NODE1. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
135 (*) : ------------------1-1
135     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
136     : ---------------1-1---
136     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
137     : ------------1-1------
137     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
138     : ------------------11-
138     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
139     : ---------------11----
139     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
140     : ------------11-------
140     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
141     : -------------------11
141     : ['transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
142     : ----------------11---
142     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
143     : -------------11------
143     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0; node$0$transfer_msg$0': [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1]}

	identical_single_classes: {'node$0$transfer_msg$0; node$0$transfer_msg$0': node$0$transfer_msg$0$0; node$0$transfer_msg$0$1}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE1)', 'transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,VALUE0,NODE0,VALUE1. ~transfer_msg(NODE0,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
144 (*) : 11-------------------
144     : ['owner(node0,key0)', 'owner(node1,key0)']
145     : 1-1------------------
145     : ['owner(node0,key0)', 'owner(node2,key0)']
146     : -11------------------
146     : ['owner(node1,key0)', 'owner(node2,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'owner(node1,key0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',)))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$owner$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$1]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$owner$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$1': Const('key0', EnumeratedSort('key', ('key0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

part_sig: ('key$0$owner$1$0; key$0$owner$1$1', 'node$0$owner$0$0 | node$0$owner$0$1')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'owner(node1,key0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)))}

sign_func_name2count:  {'0$owner': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$owner$1': [key$0$owner$1$0; key$0$owner$1$1]}

	identical_single_classes: {'key$0$owner$1; key$0$owner$1': key$0$owner$1$0; key$0$owner$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE1,KEY0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,NODE0,NODE1. ~owner(NODE1,KEY0) | ~owner(NODE0,KEY0) | NODE0 = NODE1


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
147 (*) : --0--------1---------
147     : ['table(node2,key0,value2)', '~owner(node2,key0)']
148     : -0------1------------
148     : ['table(node1,key0,value2)', '~owner(node1,key0)']
149     : 0----1---------------
149     : ['table(node0,key0,value2)', '~owner(node0,key0)']
150     : --0-------1----------
150     : ['table(node2,key0,value1)', '~owner(node2,key0)']
151     : -0-----1-------------
151     : ['table(node1,key0,value1)', '~owner(node1,key0)']
152     : 0---1----------------
152     : ['table(node0,key0,value1)', '~owner(node0,key0)']
153     : --0------1-----------
153     : ['table(node2,key0,value0)', '~owner(node2,key0)']
154     : -0----1--------------
154     : ['table(node1,key0,value0)', '~owner(node1,key0)']
155     : 0--1-----------------
155     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node2,key0)', 'table(node2,key0,value2)']

sign_func_name2args: {'1$owner': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node2,key0)', 'table(node2,key0,value2)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~owner(NODE0,KEY0)', 'table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,VALUE0,NODE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
192 (*) : ---11----------------
192     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
193     : ------11-------------
193     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
194     : ---------11----------
194     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
195     : ---1-1---------------
195     : ['table(node0,key0,value0)', 'table(node0,key0,value2)']
196     : ------1-1------------
196     : ['table(node1,key0,value0)', 'table(node1,key0,value2)']
197     : ---------1-1---------
197     : ['table(node2,key0,value0)', 'table(node2,key0,value2)']
198     : ----11---------------
198     : ['table(node0,key0,value1)', 'table(node0,key0,value2)']
199     : -------11------------
199     : ['table(node1,key0,value1)', 'table(node1,key0,value2)']
200     : ----------11---------
200     : ['table(node2,key0,value1)', 'table(node2,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node0,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$0, node$0$table$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$table$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$table$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- SigGenerator ----------

terms:  ['table(node0,key0,value0)', 'table(node0,key0,value1)']

func_name2symbol:  {'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'table': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$table': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0 | value$0$table$2$1}

	sort: node

	identical_classes: {'node$0$table$0; node$0$table$0': [node$0$table$0$0; node$0$table$0$1]}

	identical_single_classes: {'node$0$table$0; node$0$table$0': node$0$table$0$0; node$0$table$0$1}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$0$table$1': [key$0$table$1$0; key$0$table$1$1]}

	identical_single_classes: {'key$0$table$1; key$0$table$1': key$0$table$1$0; key$0$table$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE1)', 'table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,VALUE0,NODE0,VALUE1. ~table(NODE0,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | VALUE0 = VALUE1


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 1
0 (*) : -1------------------1
0     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']
1     : --1--------------1---
1     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value2)']
2     : 1-------------------1
2     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value2)']
3     : --1-----------1------
3     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value2)']
4     : 1----------------1---
4     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value2)']
5     : -1------------1------
5     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value2)']
6     : -1-----------------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
7     : --1-------------1----
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
8     : 1------------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
9     : --1----------1-------
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
10     : 1---------------1----
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
11     : -1-----------1-------
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
12     : -1----------------1--
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
13     : --1------------1-----
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
14     : 1-----------------1--
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
15     : --1---------1--------
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
16     : 1--------------1-----
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
17     : -1----------1--------
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall KEY0,VALUE0,NODE0,NODE1. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
18 (*) : --1-----------------1
18     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']
19     : -1---------------1---
19     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value2)']
20     : 1-------------1------
20     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value2)']
21     : --1----------------1-
21     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
22     : -1--------------1----
22     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
23     : 1------------1-------
23     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
24     : --1---------------1--
24     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
25     : -1-------------1-----
25     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
26     : 1-----------1--------
26     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall KEY0,VALUE0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)
qcost : 5




=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
108 (*) : ------------1-------1
108     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
109     : ------------1----1---
109     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
110     : ---------------1----1
110     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
111     : --------------11-----
111     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
112     : -----------------11--
112     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
113     : --------------1---1--
113     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
114     : ------------1------1-
114     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
115     : ------------1---1----
115     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
116     : ---------------1---1-
116     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
117     : -------------1-1-----
117     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
118     : ----------------1-1--
118     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
119     : -------------1----1--
119     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
120     : -------------1------1
120     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
121     : -------------1---1---
121     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
122     : ----------------1---1
122     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
123     : --------------1-1----
123     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
124     : -----------------1-1-
124     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
125     : --------------1----1-
125     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall NODE1,KEY0,NODE0,VALUE1,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 7 =====================
size : 9
num_suborbits: 1
126 (*) : --------------1-----1
126     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
127     : --------------1--1---
127     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
128     : -----------------1--1
128     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
129     : -------------1-----1-
129     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
130     : -------------1--1----
130     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
131     : ----------------1--1-
131     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
132     : ------------1-----1--
132     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
133     : ------------1--1-----
133     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
134     : ---------------1--1--
134     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall KEY0,VALUE0,NODE0,NODE1. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
135 (*) : ------------------1-1
135     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
136     : ---------------1-1---
136     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
137     : ------------1-1------
137     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
138     : ------------------11-
138     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
139     : ---------------11----
139     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
140     : ------------11-------
140     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
141     : -------------------11
141     : ['transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
142     : ----------------11---
142     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
143     : -------------11------
143     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall KEY0,VALUE0,NODE0,VALUE1. ~transfer_msg(NODE0,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | VALUE0 = VALUE1
qcost : 7




=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
144 (*) : 11-------------------
144     : ['owner(node0,key0)', 'owner(node1,key0)']
145     : 1-1------------------
145     : ['owner(node0,key0)', 'owner(node2,key0)']
146     : -11------------------
146     : ['owner(node1,key0)', 'owner(node2,key0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall KEY0,NODE0,NODE1. ~owner(NODE1,KEY0) | ~owner(NODE0,KEY0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
147 (*) : --0--------1---------
147     : ['table(node2,key0,value2)', '~owner(node2,key0)']
148     : -0------1------------
148     : ['table(node1,key0,value2)', '~owner(node1,key0)']
149     : 0----1---------------
149     : ['table(node0,key0,value2)', '~owner(node0,key0)']
150     : --0-------1----------
150     : ['table(node2,key0,value1)', '~owner(node2,key0)']
151     : -0-----1-------------
151     : ['table(node1,key0,value1)', '~owner(node1,key0)']
152     : 0---1----------------
152     : ['table(node0,key0,value1)', '~owner(node0,key0)']
153     : --0------1-----------
153     : ['table(node2,key0,value0)', '~owner(node2,key0)']
154     : -0----1--------------
154     : ['table(node1,key0,value0)', '~owner(node1,key0)']
155     : 0--1-----------------
155     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall KEY0,VALUE0,NODE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0)
qcost : 5




=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
192 (*) : ---11----------------
192     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
193     : ------11-------------
193     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
194     : ---------11----------
194     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
195     : ---1-1---------------
195     : ['table(node0,key0,value0)', 'table(node0,key0,value2)']
196     : ------1-1------------
196     : ['table(node1,key0,value0)', 'table(node1,key0,value2)']
197     : ---------1-1---------
197     : ['table(node2,key0,value0)', 'table(node2,key0,value2)']
198     : ----11---------------
198     : ['table(node0,key0,value1)', 'table(node0,key0,value2)']
199     : -------11------------
199     : ['table(node1,key0,value1)', 'table(node1,key0,value2)']
200     : ----------11---------
200     : ['table(node2,key0,value1)', 'table(node2,key0,value2)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall KEY0,VALUE0,NODE0,VALUE1. ~table(NODE0,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | VALUE0 = VALUE1
qcost : 7



[QRM NOTE]: Time elapsed since start: 7.830 seconds

[QRM NOTE]: Time elapsed since last: 0.096 seconds

[QRM NOTE]: Peak memory: 2202895 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

=============================================================================================


New level: 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


Before reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


Solution : [0, 1, 6, 7, 8, 9, 10, 13] has cost 53.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

After backtrack at level 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 53

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 6, 7, 8, 9, 10, 13]

[MIN NOTE]: solution length: 8

invariant [invar_0] forall KEY0,VALUE0,NODE0,NODE1. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1 # qcost: 7

invariant [invar_1] forall KEY0,VALUE0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0) # qcost: 5

invariant [invar_6] forall NODE1,KEY0,NODE0,VALUE1,VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1) # qcost: 9

invariant [invar_7] forall KEY0,VALUE0,NODE0,NODE1. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1 # qcost: 7

invariant [invar_8] forall KEY0,VALUE0,NODE0,VALUE1. ~transfer_msg(NODE0,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | VALUE0 = VALUE1 # qcost: 7

invariant [invar_9] forall KEY0,NODE0,NODE1. ~owner(NODE1,KEY0) | ~owner(NODE0,KEY0) | NODE0 = NODE1 # qcost: 6

invariant [invar_10] forall KEY0,VALUE0,NODE0. owner(NODE0,KEY0) | ~table(NODE0,KEY0,VALUE0) # qcost: 5

invariant [invar_13] forall KEY0,VALUE0,NODE0,VALUE1. ~table(NODE0,KEY0,VALUE1) | ~table(NODE0,KEY0,VALUE0) | VALUE0 = VALUE1 # qcost: 7

[MIN NOTE]: number of total invariants: 8

[MIN NOTE]: total qCost: 53




[QRM NOTE]: Time elapsed since start: 7.870 seconds

[QRM NOTE]: Time elapsed since last: 0.039 seconds

[QRM NOTE]: Peak memory: 2177410 bytes


=============================================

	[IVY_CHECK] Ivy Check for Rmin

=============================================


=================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy]

=================================================================================================

ivy_check complete=fo ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_10
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13

    The following action implementations are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 34: implementation of put
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 26: implementation of recv_transfer_msg
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 18: implementation of reshard

    The following initializers are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 11: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_10 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:put
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_10 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS
        (internal) ext:recv_transfer_msg
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_10 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS
        (internal) ext:reshard
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_10 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS

    The following program assertions are treated as assumptions:
        in action reshard when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 19: assumption
        in action recv_transfer_msg when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 27: assumption
        in action put when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 35: assumption

OK
[IVY_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 10.103 seconds

[QRM NOTE]: Time elapsed since last: 2.234 seconds

[QRM NOTE]: Peak memory: 1177297 bytes


**********************************************************

	[QRM]: ivybench/sym/ivy/sharded_kv.ivy

**********************************************************

[QRM RESULT]: PASS

